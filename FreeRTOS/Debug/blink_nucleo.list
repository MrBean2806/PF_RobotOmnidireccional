
blink_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001de0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001f74  08001f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fa4  08001fa4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fa4  08001fa4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fa4  08001fa4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fa4  08001fa4  00011fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fa8  08001fa8  00011fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003cd2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000e5a  00000000  00000000  00023d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003e0  00000000  00000000  00024bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002c6  00000000  00000000  00024f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e277  00000000  00000000  00025256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000053c6  00000000  00000000  000434cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b6e12  00000000  00000000  00048893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d98  00000000  00000000  000ff6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00100440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001f5c 	.word	0x08001f5c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001f5c 	.word	0x08001f5c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f948 	bl	800046c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f817 	bl	800020e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f85a 	bl	8000298 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2120      	movs	r1, #32
 80001e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ec:	f000 fc38 	bl	8000a60 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80001f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f4:	f000 f9a0 	bl	8000538 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2120      	movs	r1, #32
 80001fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000200:	f000 fc2e 	bl	8000a60 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000208:	f000 f996 	bl	8000538 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800020c:	e7ea      	b.n	80001e4 <main+0x10>

0800020e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020e:	b580      	push	{r7, lr}
 8000210:	b090      	sub	sp, #64	; 0x40
 8000212:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000214:	f107 0318 	add.w	r3, r7, #24
 8000218:	2228      	movs	r2, #40	; 0x28
 800021a:	2100      	movs	r1, #0
 800021c:	4618      	mov	r0, r3
 800021e:	f001 fe71 	bl	8001f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000230:	2302      	movs	r3, #2
 8000232:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000234:	2301      	movs	r3, #1
 8000236:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000238:	2310      	movs	r3, #16
 800023a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023c:	2302      	movs	r3, #2
 800023e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000244:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fc1b 	bl	8000a90 <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000260:	f000 f874 	bl	800034c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000268:	2302      	movs	r3, #2
 800026a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2102      	movs	r1, #2
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fc5a 	bl	8001b38 <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x80>
  {
    Error_Handler();
 800028a:	f000 f85f 	bl	800034c <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3740      	adds	r7, #64	; 0x40
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 030c 	add.w	r3, r7, #12
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ae:	4b25      	ldr	r3, [pc, #148]	; (8000344 <MX_GPIO_Init+0xac>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a24      	ldr	r2, [pc, #144]	; (8000344 <MX_GPIO_Init+0xac>)
 80002b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b22      	ldr	r3, [pc, #136]	; (8000344 <MX_GPIO_Init+0xac>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002c2:	60bb      	str	r3, [r7, #8]
 80002c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c6:	4b1f      	ldr	r3, [pc, #124]	; (8000344 <MX_GPIO_Init+0xac>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <MX_GPIO_Init+0xac>)
 80002cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b1c      	ldr	r3, [pc, #112]	; (8000344 <MX_GPIO_Init+0xac>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	4b19      	ldr	r3, [pc, #100]	; (8000344 <MX_GPIO_Init+0xac>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a18      	ldr	r2, [pc, #96]	; (8000344 <MX_GPIO_Init+0xac>)
 80002e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b16      	ldr	r3, [pc, #88]	; (8000344 <MX_GPIO_Init+0xac>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2120      	movs	r1, #32
 80002fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fe:	f000 fbaf 	bl	8000a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000306:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000308:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800030c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000312:	f107 030c 	add.w	r3, r7, #12
 8000316:	4619      	mov	r1, r3
 8000318:	480b      	ldr	r0, [pc, #44]	; (8000348 <MX_GPIO_Init+0xb0>)
 800031a:	f000 fa17 	bl	800074c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800031e:	2320      	movs	r3, #32
 8000320:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	2301      	movs	r3, #1
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800032e:	f107 030c 	add.w	r3, r7, #12
 8000332:	4619      	mov	r1, r3
 8000334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000338:	f000 fa08 	bl	800074c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800033c:	bf00      	nop
 800033e:	3720      	adds	r7, #32
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40021000 	.word	0x40021000
 8000348:	48000800 	.word	0x48000800

0800034c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000350:	b672      	cpsid	i
}
 8000352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000354:	e7fe      	b.n	8000354 <Error_Handler+0x8>
	...

08000358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <HAL_MspInit+0x44>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a0e      	ldr	r2, [pc, #56]	; (800039c <HAL_MspInit+0x44>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6193      	str	r3, [r2, #24]
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <HAL_MspInit+0x44>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <HAL_MspInit+0x44>)
 8000378:	69db      	ldr	r3, [r3, #28]
 800037a:	4a08      	ldr	r2, [pc, #32]	; (800039c <HAL_MspInit+0x44>)
 800037c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000380:	61d3      	str	r3, [r2, #28]
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <HAL_MspInit+0x44>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	603b      	str	r3, [r7, #0]
 800038c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000

080003a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <NMI_Handler+0x4>

080003a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003aa:	e7fe      	b.n	80003aa <HardFault_Handler+0x4>

080003ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <MemManage_Handler+0x4>

080003b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <BusFault_Handler+0x4>

080003b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <UsageFault_Handler+0x4>

080003be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ec:	f000 f884 	bl	80004f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <SystemInit+0x20>)
 80003fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003fe:	4a05      	ldr	r2, [pc, #20]	; (8000414 <SystemInit+0x20>)
 8000400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000ed00 	.word	0xe000ed00

08000418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000450 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800041c:	f7ff ffea 	bl	80003f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000420:	480c      	ldr	r0, [pc, #48]	; (8000454 <LoopForever+0x6>)
  ldr r1, =_edata
 8000422:	490d      	ldr	r1, [pc, #52]	; (8000458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000424:	4a0d      	ldr	r2, [pc, #52]	; (800045c <LoopForever+0xe>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000438:	4c0a      	ldr	r4, [pc, #40]	; (8000464 <LoopForever+0x16>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000446:	f001 fd65 	bl	8001f14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800044a:	f7ff fec3 	bl	80001d4 <main>

0800044e <LoopForever>:

LoopForever:
    b LoopForever
 800044e:	e7fe      	b.n	800044e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000450:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800045c:	08001fac 	.word	0x08001fac
  ldr r2, =_sbss
 8000460:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000464:	2000002c 	.word	0x2000002c

08000468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <ADC1_2_IRQHandler>
	...

0800046c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <HAL_Init+0x28>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a07      	ldr	r2, [pc, #28]	; (8000494 <HAL_Init+0x28>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800047c:	2003      	movs	r0, #3
 800047e:	f000 f931 	bl	80006e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000482:	200f      	movs	r0, #15
 8000484:	f000 f808 	bl	8000498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000488:	f7ff ff66 	bl	8000358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800048c:	2300      	movs	r3, #0
}
 800048e:	4618      	mov	r0, r3
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40022000 	.word	0x40022000

08000498 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <HAL_InitTick+0x54>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <HAL_InitTick+0x58>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4619      	mov	r1, r3
 80004aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80004b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f93b 	bl	8000732 <HAL_SYSTICK_Config>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004c2:	2301      	movs	r3, #1
 80004c4:	e00e      	b.n	80004e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2b0f      	cmp	r3, #15
 80004ca:	d80a      	bhi.n	80004e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004cc:	2200      	movs	r2, #0
 80004ce:	6879      	ldr	r1, [r7, #4]
 80004d0:	f04f 30ff 	mov.w	r0, #4294967295
 80004d4:	f000 f911 	bl	80006fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004d8:	4a06      	ldr	r2, [pc, #24]	; (80004f4 <HAL_InitTick+0x5c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80004de:	2300      	movs	r3, #0
 80004e0:	e000      	b.n	80004e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004e2:	2301      	movs	r3, #1
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000008 	.word	0x20000008
 80004f4:	20000004 	.word	0x20000004

080004f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <HAL_IncTick+0x20>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	461a      	mov	r2, r3
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <HAL_IncTick+0x24>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4413      	add	r3, r2
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <HAL_IncTick+0x24>)
 800050a:	6013      	str	r3, [r2, #0]
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	20000008 	.word	0x20000008
 800051c:	20000028 	.word	0x20000028

08000520 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  return uwTick;  
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <HAL_GetTick+0x14>)
 8000526:	681b      	ldr	r3, [r3, #0]
}
 8000528:	4618      	mov	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000028 	.word	0x20000028

08000538 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000540:	f7ff ffee 	bl	8000520 <HAL_GetTick>
 8000544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000550:	d005      	beq.n	800055e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_Delay+0x44>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	4413      	add	r3, r2
 800055c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800055e:	bf00      	nop
 8000560:	f7ff ffde 	bl	8000520 <HAL_GetTick>
 8000564:	4602      	mov	r2, r0
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	429a      	cmp	r2, r3
 800056e:	d8f7      	bhi.n	8000560 <HAL_Delay+0x28>
  {
  }
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000008 	.word	0x20000008

08000580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005b2:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	60d3      	str	r3, [r2, #12]
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	f003 0307 	and.w	r3, r3, #7
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db0a      	blt.n	800060e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	490c      	ldr	r1, [pc, #48]	; (8000630 <__NVIC_SetPriority+0x4c>)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	0112      	lsls	r2, r2, #4
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	440b      	add	r3, r1
 8000608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800060c:	e00a      	b.n	8000624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4908      	ldr	r1, [pc, #32]	; (8000634 <__NVIC_SetPriority+0x50>)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	3b04      	subs	r3, #4
 800061c:	0112      	lsls	r2, r2, #4
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	440b      	add	r3, r1
 8000622:	761a      	strb	r2, [r3, #24]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000638:	b480      	push	{r7}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	f1c3 0307 	rsb	r3, r3, #7
 8000652:	2b04      	cmp	r3, #4
 8000654:	bf28      	it	cs
 8000656:	2304      	movcs	r3, #4
 8000658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3304      	adds	r3, #4
 800065e:	2b06      	cmp	r3, #6
 8000660:	d902      	bls.n	8000668 <NVIC_EncodePriority+0x30>
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3b03      	subs	r3, #3
 8000666:	e000      	b.n	800066a <NVIC_EncodePriority+0x32>
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	f04f 32ff 	mov.w	r2, #4294967295
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43da      	mvns	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	401a      	ands	r2, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000680:	f04f 31ff 	mov.w	r1, #4294967295
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43d9      	mvns	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	4313      	orrs	r3, r2
         );
}
 8000692:	4618      	mov	r0, r3
 8000694:	3724      	adds	r7, #36	; 0x24
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006b0:	d301      	bcc.n	80006b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006b2:	2301      	movs	r3, #1
 80006b4:	e00f      	b.n	80006d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <SysTick_Config+0x40>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006be:	210f      	movs	r1, #15
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295
 80006c4:	f7ff ff8e 	bl	80005e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <SysTick_Config+0x40>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <SysTick_Config+0x40>)
 80006d0:	2207      	movs	r2, #7
 80006d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	e000e010 	.word	0xe000e010

080006e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff ff47 	bl	8000580 <__NVIC_SetPriorityGrouping>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b086      	sub	sp, #24
 80006fe:	af00      	add	r7, sp, #0
 8000700:	4603      	mov	r3, r0
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800070c:	f7ff ff5c 	bl	80005c8 <__NVIC_GetPriorityGrouping>
 8000710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	68b9      	ldr	r1, [r7, #8]
 8000716:	6978      	ldr	r0, [r7, #20]
 8000718:	f7ff ff8e 	bl	8000638 <NVIC_EncodePriority>
 800071c:	4602      	mov	r2, r0
 800071e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff5d 	bl	80005e4 <__NVIC_SetPriority>
}
 800072a:	bf00      	nop
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ffb0 	bl	80006a0 <SysTick_Config>
 8000740:	4603      	mov	r3, r0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800074c:	b480      	push	{r7}
 800074e:	b087      	sub	sp, #28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800075a:	e160      	b.n	8000a1e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	2101      	movs	r1, #1
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	4013      	ands	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b00      	cmp	r3, #0
 8000770:	f000 8152 	beq.w	8000a18 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f003 0303 	and.w	r3, r3, #3
 800077c:	2b01      	cmp	r3, #1
 800077e:	d005      	beq.n	800078c <HAL_GPIO_Init+0x40>
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f003 0303 	and.w	r3, r3, #3
 8000788:	2b02      	cmp	r3, #2
 800078a:	d130      	bne.n	80007ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	2203      	movs	r2, #3
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	43db      	mvns	r3, r3
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	4013      	ands	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	693a      	ldr	r2, [r7, #16]
 80007ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007c2:	2201      	movs	r2, #1
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	4013      	ands	r3, r2
 80007d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	091b      	lsrs	r3, r3, #4
 80007d8:	f003 0201 	and.w	r2, r3, #1
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f003 0303 	and.w	r3, r3, #3
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d017      	beq.n	800082a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	2203      	movs	r2, #3
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	4013      	ands	r3, r2
 8000810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	689a      	ldr	r2, [r3, #8]
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	4313      	orrs	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 0303 	and.w	r3, r3, #3
 8000832:	2b02      	cmp	r3, #2
 8000834:	d123      	bne.n	800087e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	08da      	lsrs	r2, r3, #3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3208      	adds	r2, #8
 800083e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	220f      	movs	r2, #15
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	4013      	ands	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	691a      	ldr	r2, [r3, #16]
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	f003 0307 	and.w	r3, r3, #7
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4313      	orrs	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	08da      	lsrs	r2, r3, #3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3208      	adds	r2, #8
 8000878:	6939      	ldr	r1, [r7, #16]
 800087a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2203      	movs	r2, #3
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f003 0203 	and.w	r2, r3, #3
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f000 80ac 	beq.w	8000a18 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c0:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <HAL_GPIO_Init+0x2f0>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a5d      	ldr	r2, [pc, #372]	; (8000a3c <HAL_GPIO_Init+0x2f0>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b5b      	ldr	r3, [pc, #364]	; (8000a3c <HAL_GPIO_Init+0x2f0>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008d8:	4a59      	ldr	r2, [pc, #356]	; (8000a40 <HAL_GPIO_Init+0x2f4>)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	089b      	lsrs	r3, r3, #2
 80008de:	3302      	adds	r3, #2
 80008e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	f003 0303 	and.w	r3, r3, #3
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	220f      	movs	r2, #15
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000902:	d025      	beq.n	8000950 <HAL_GPIO_Init+0x204>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a4f      	ldr	r2, [pc, #316]	; (8000a44 <HAL_GPIO_Init+0x2f8>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d01f      	beq.n	800094c <HAL_GPIO_Init+0x200>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a4e      	ldr	r2, [pc, #312]	; (8000a48 <HAL_GPIO_Init+0x2fc>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d019      	beq.n	8000948 <HAL_GPIO_Init+0x1fc>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a4d      	ldr	r2, [pc, #308]	; (8000a4c <HAL_GPIO_Init+0x300>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d013      	beq.n	8000944 <HAL_GPIO_Init+0x1f8>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a4c      	ldr	r2, [pc, #304]	; (8000a50 <HAL_GPIO_Init+0x304>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d00d      	beq.n	8000940 <HAL_GPIO_Init+0x1f4>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a4b      	ldr	r2, [pc, #300]	; (8000a54 <HAL_GPIO_Init+0x308>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d007      	beq.n	800093c <HAL_GPIO_Init+0x1f0>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a4a      	ldr	r2, [pc, #296]	; (8000a58 <HAL_GPIO_Init+0x30c>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d101      	bne.n	8000938 <HAL_GPIO_Init+0x1ec>
 8000934:	2306      	movs	r3, #6
 8000936:	e00c      	b.n	8000952 <HAL_GPIO_Init+0x206>
 8000938:	2307      	movs	r3, #7
 800093a:	e00a      	b.n	8000952 <HAL_GPIO_Init+0x206>
 800093c:	2305      	movs	r3, #5
 800093e:	e008      	b.n	8000952 <HAL_GPIO_Init+0x206>
 8000940:	2304      	movs	r3, #4
 8000942:	e006      	b.n	8000952 <HAL_GPIO_Init+0x206>
 8000944:	2303      	movs	r3, #3
 8000946:	e004      	b.n	8000952 <HAL_GPIO_Init+0x206>
 8000948:	2302      	movs	r3, #2
 800094a:	e002      	b.n	8000952 <HAL_GPIO_Init+0x206>
 800094c:	2301      	movs	r3, #1
 800094e:	e000      	b.n	8000952 <HAL_GPIO_Init+0x206>
 8000950:	2300      	movs	r3, #0
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	f002 0203 	and.w	r2, r2, #3
 8000958:	0092      	lsls	r2, r2, #2
 800095a:	4093      	lsls	r3, r2
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4313      	orrs	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000962:	4937      	ldr	r1, [pc, #220]	; (8000a40 <HAL_GPIO_Init+0x2f4>)
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	3302      	adds	r3, #2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000970:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <HAL_GPIO_Init+0x310>)
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	43db      	mvns	r3, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000988:	2b00      	cmp	r3, #0
 800098a:	d003      	beq.n	8000994 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4313      	orrs	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000994:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <HAL_GPIO_Init+0x310>)
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800099a:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <HAL_GPIO_Init+0x310>)
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	43db      	mvns	r3, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4013      	ands	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d003      	beq.n	80009be <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009be:	4a27      	ldr	r2, [pc, #156]	; (8000a5c <HAL_GPIO_Init+0x310>)
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80009c4:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <HAL_GPIO_Init+0x310>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	43db      	mvns	r3, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d003      	beq.n	80009e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009e8:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <HAL_GPIO_Init+0x310>)
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_GPIO_Init+0x310>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <HAL_GPIO_Init+0x310>)
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	fa22 f303 	lsr.w	r3, r2, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f47f ae97 	bne.w	800075c <HAL_GPIO_Init+0x10>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010000 	.word	0x40010000
 8000a44:	48000400 	.word	0x48000400
 8000a48:	48000800 	.word	0x48000800
 8000a4c:	48000c00 	.word	0x48000c00
 8000a50:	48001000 	.word	0x48001000
 8000a54:	48001400 	.word	0x48001400
 8000a58:	48001800 	.word	0x48001800
 8000a5c:	40010400 	.word	0x40010400

08000a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	807b      	strh	r3, [r7, #2]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a70:	787b      	ldrb	r3, [r7, #1]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a76:	887a      	ldrh	r2, [r7, #2]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a7c:	e002      	b.n	8000a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a7e:	887a      	ldrh	r2, [r7, #2]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000a9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000aa0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000aa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	f001 b83a 	b.w	8001b2a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000aba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 816f 	beq.w	8000daa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000acc:	4bb5      	ldr	r3, [pc, #724]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 030c 	and.w	r3, r3, #12
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d00c      	beq.n	8000af2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ad8:	4bb2      	ldr	r3, [pc, #712]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 030c 	and.w	r3, r3, #12
 8000ae0:	2b08      	cmp	r3, #8
 8000ae2:	d15c      	bne.n	8000b9e <HAL_RCC_OscConfig+0x10e>
 8000ae4:	4baf      	ldr	r3, [pc, #700]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af0:	d155      	bne.n	8000b9e <HAL_RCC_OscConfig+0x10e>
 8000af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000af6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000afa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000afe:	fa93 f3a3 	rbit	r3, r3
 8000b02:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b0a:	fab3 f383 	clz	r3, r3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	095b      	lsrs	r3, r3, #5
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d102      	bne.n	8000b24 <HAL_RCC_OscConfig+0x94>
 8000b1e:	4ba1      	ldr	r3, [pc, #644]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	e015      	b.n	8000b50 <HAL_RCC_OscConfig+0xc0>
 8000b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b28:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b2c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000b30:	fa93 f3a3 	rbit	r3, r3
 8000b34:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b3c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b40:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000b44:	fa93 f3a3 	rbit	r3, r3
 8000b48:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b4c:	4b95      	ldr	r3, [pc, #596]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b54:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000b58:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000b5c:	fa92 f2a2 	rbit	r2, r2
 8000b60:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000b64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	f042 0220 	orr.w	r2, r2, #32
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	f002 021f 	and.w	r2, r2, #31
 8000b78:	2101      	movs	r1, #1
 8000b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7e:	4013      	ands	r3, r2
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 8111 	beq.w	8000da8 <HAL_RCC_OscConfig+0x318>
 8000b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 8108 	bne.w	8000da8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	f000 bfc6 	b.w	8001b2a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ba2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bae:	d106      	bne.n	8000bbe <HAL_RCC_OscConfig+0x12e>
 8000bb0:	4b7c      	ldr	r3, [pc, #496]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a7b      	ldr	r2, [pc, #492]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	e036      	b.n	8000c2c <HAL_RCC_OscConfig+0x19c>
 8000bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000bc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10c      	bne.n	8000be8 <HAL_RCC_OscConfig+0x158>
 8000bce:	4b75      	ldr	r3, [pc, #468]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a74      	ldr	r2, [pc, #464]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	4b72      	ldr	r3, [pc, #456]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a71      	ldr	r2, [pc, #452]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e021      	b.n	8000c2c <HAL_RCC_OscConfig+0x19c>
 8000be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000bec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bf8:	d10c      	bne.n	8000c14 <HAL_RCC_OscConfig+0x184>
 8000bfa:	4b6a      	ldr	r3, [pc, #424]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a69      	ldr	r2, [pc, #420]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	4b67      	ldr	r3, [pc, #412]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a66      	ldr	r2, [pc, #408]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e00b      	b.n	8000c2c <HAL_RCC_OscConfig+0x19c>
 8000c14:	4b63      	ldr	r3, [pc, #396]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a62      	ldr	r2, [pc, #392]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b60      	ldr	r3, [pc, #384]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a5f      	ldr	r2, [pc, #380]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d059      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fc70 	bl	8000520 <HAL_GetTick>
 8000c40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c44:	e00a      	b.n	8000c5c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c46:	f7ff fc6b 	bl	8000520 <HAL_GetTick>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b64      	cmp	r3, #100	; 0x64
 8000c54:	d902      	bls.n	8000c5c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	f000 bf67 	b.w	8001b2a <HAL_RCC_OscConfig+0x109a>
 8000c5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c60:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c64:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000c68:	fa93 f3a3 	rbit	r3, r3
 8000c6c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000c70:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c74:	fab3 f383 	clz	r3, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d102      	bne.n	8000c8e <HAL_RCC_OscConfig+0x1fe>
 8000c88:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	e015      	b.n	8000cba <HAL_RCC_OscConfig+0x22a>
 8000c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000c9a:	fa93 f3a3 	rbit	r3, r3
 8000c9e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000ca2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ca6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000caa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000cae:	fa93 f3a3 	rbit	r3, r3
 8000cb2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cbe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000cc2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000cc6:	fa92 f2a2 	rbit	r2, r2
 8000cca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000cce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	f042 0220 	orr.w	r2, r2, #32
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	f002 021f 	and.w	r2, r2, #31
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0ab      	beq.n	8000c46 <HAL_RCC_OscConfig+0x1b6>
 8000cee:	e05c      	b.n	8000daa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fc16 	bl	8000520 <HAL_GetTick>
 8000cf4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf8:	e00a      	b.n	8000d10 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfa:	f7ff fc11 	bl	8000520 <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b64      	cmp	r3, #100	; 0x64
 8000d08:	d902      	bls.n	8000d10 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	f000 bf0d 	b.w	8001b2a <HAL_RCC_OscConfig+0x109a>
 8000d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d14:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000d1c:	fa93 f3a3 	rbit	r3, r3
 8000d20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000d24:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d28:	fab3 f383 	clz	r3, r3
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d102      	bne.n	8000d42 <HAL_RCC_OscConfig+0x2b2>
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	e015      	b.n	8000d6e <HAL_RCC_OscConfig+0x2de>
 8000d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000d4e:	fa93 f3a3 	rbit	r3, r3
 8000d52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000d56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000d5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000d62:	fa93 f3a3 	rbit	r3, r3
 8000d66:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_RCC_OscConfig+0x314>)
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d72:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000d76:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000d7a:	fa92 f2a2 	rbit	r2, r2
 8000d7e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000d82:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	f042 0220 	orr.w	r2, r2, #32
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	f002 021f 	and.w	r2, r2, #31
 8000d96:	2101      	movs	r1, #1
 8000d98:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1ab      	bne.n	8000cfa <HAL_RCC_OscConfig+0x26a>
 8000da2:	e002      	b.n	8000daa <HAL_RCC_OscConfig+0x31a>
 8000da4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 817f 	beq.w	80010be <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dc0:	4ba7      	ldr	r3, [pc, #668]	; (8001060 <HAL_RCC_OscConfig+0x5d0>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 030c 	and.w	r3, r3, #12
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00c      	beq.n	8000de6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000dcc:	4ba4      	ldr	r3, [pc, #656]	; (8001060 <HAL_RCC_OscConfig+0x5d0>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 030c 	and.w	r3, r3, #12
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	d173      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x430>
 8000dd8:	4ba1      	ldr	r3, [pc, #644]	; (8001060 <HAL_RCC_OscConfig+0x5d0>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000de4:	d16c      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x430>
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000df0:	fa93 f3a3 	rbit	r3, r3
 8000df4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000df8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfc:	fab3 f383 	clz	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d102      	bne.n	8000e16 <HAL_RCC_OscConfig+0x386>
 8000e10:	4b93      	ldr	r3, [pc, #588]	; (8001060 <HAL_RCC_OscConfig+0x5d0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	e013      	b.n	8000e3e <HAL_RCC_OscConfig+0x3ae>
 8000e16:	2302      	movs	r3, #2
 8000e18:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000e20:	fa93 f3a3 	rbit	r3, r3
 8000e24:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000e28:	2302      	movs	r3, #2
 8000e2a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e2e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000e32:	fa93 f3a3 	rbit	r3, r3
 8000e36:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e3a:	4b89      	ldr	r3, [pc, #548]	; (8001060 <HAL_RCC_OscConfig+0x5d0>)
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000e44:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000e48:	fa92 f2a2 	rbit	r2, r2
 8000e4c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000e50:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e54:	fab2 f282 	clz	r2, r2
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	f042 0220 	orr.w	r2, r2, #32
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	f002 021f 	and.w	r2, r2, #31
 8000e64:	2101      	movs	r1, #1
 8000e66:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00a      	beq.n	8000e86 <HAL_RCC_OscConfig+0x3f6>
 8000e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d002      	beq.n	8000e86 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	f000 be52 	b.w	8001b2a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e86:	4b76      	ldr	r3, [pc, #472]	; (8001060 <HAL_RCC_OscConfig+0x5d0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	21f8      	movs	r1, #248	; 0xf8
 8000e9c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000ea4:	fa91 f1a1 	rbit	r1, r1
 8000ea8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000eac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000eb0:	fab1 f181 	clz	r1, r1
 8000eb4:	b2c9      	uxtb	r1, r1
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	4969      	ldr	r1, [pc, #420]	; (8001060 <HAL_RCC_OscConfig+0x5d0>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ebe:	e0fe      	b.n	80010be <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ec4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 8088 	beq.w	8000fe2 <HAL_RCC_OscConfig+0x552>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000edc:	fa93 f3a3 	rbit	r3, r3
 8000ee0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000ee4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee8:	fab3 f383 	clz	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ef2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2301      	movs	r3, #1
 8000efc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efe:	f7ff fb0f 	bl	8000520 <HAL_GetTick>
 8000f02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f06:	e00a      	b.n	8000f1e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f08:	f7ff fb0a 	bl	8000520 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d902      	bls.n	8000f1e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	f000 be06 	b.w	8001b2a <HAL_RCC_OscConfig+0x109a>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f24:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000f28:	fa93 f3a3 	rbit	r3, r3
 8000f2c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000f30:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f34:	fab3 f383 	clz	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d102      	bne.n	8000f4e <HAL_RCC_OscConfig+0x4be>
 8000f48:	4b45      	ldr	r3, [pc, #276]	; (8001060 <HAL_RCC_OscConfig+0x5d0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	e013      	b.n	8000f76 <HAL_RCC_OscConfig+0x4e6>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f54:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000f60:	2302      	movs	r3, #2
 8000f62:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f66:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000f6a:	fa93 f3a3 	rbit	r3, r3
 8000f6e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <HAL_RCC_OscConfig+0x5d0>)
 8000f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f76:	2202      	movs	r2, #2
 8000f78:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000f7c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000f80:	fa92 f2a2 	rbit	r2, r2
 8000f84:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000f88:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f8c:	fab2 f282 	clz	r2, r2
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	f042 0220 	orr.w	r2, r2, #32
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	f002 021f 	and.w	r2, r2, #31
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0af      	beq.n	8000f08 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <HAL_RCC_OscConfig+0x5d0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	21f8      	movs	r1, #248	; 0xf8
 8000fbe:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8000fc6:	fa91 f1a1 	rbit	r1, r1
 8000fca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8000fce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000fd2:	fab1 f181 	clz	r1, r1
 8000fd6:	b2c9      	uxtb	r1, r1
 8000fd8:	408b      	lsls	r3, r1
 8000fda:	4921      	ldr	r1, [pc, #132]	; (8001060 <HAL_RCC_OscConfig+0x5d0>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
 8000fe0:	e06d      	b.n	80010be <HAL_RCC_OscConfig+0x62e>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000fec:	fa93 f3a3 	rbit	r3, r3
 8000ff0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8000ff4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff8:	fab3 f383 	clz	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001002:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	461a      	mov	r2, r3
 800100a:	2300      	movs	r3, #0
 800100c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fa87 	bl	8000520 <HAL_GetTick>
 8001012:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001016:	e00a      	b.n	800102e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001018:	f7ff fa82 	bl	8000520 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d902      	bls.n	800102e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	f000 bd7e 	b.w	8001b2a <HAL_RCC_OscConfig+0x109a>
 800102e:	2302      	movs	r3, #2
 8001030:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001040:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001044:	fab3 f383 	clz	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <HAL_RCC_OscConfig+0x5d4>
 8001058:	4b01      	ldr	r3, [pc, #4]	; (8001060 <HAL_RCC_OscConfig+0x5d0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	e016      	b.n	800108c <HAL_RCC_OscConfig+0x5fc>
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800107c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001088:	4bbf      	ldr	r3, [pc, #764]	; (8001388 <HAL_RCC_OscConfig+0x8f8>)
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	2202      	movs	r2, #2
 800108e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001092:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001096:	fa92 f2a2 	rbit	r2, r2
 800109a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800109e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010a2:	fab2 f282 	clz	r2, r2
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	f042 0220 	orr.w	r2, r2, #32
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	f002 021f 	and.w	r2, r2, #31
 80010b2:	2101      	movs	r1, #1
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1ac      	bne.n	8001018 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8113 	beq.w	80012fa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d07c      	beq.n	80011de <HAL_RCC_OscConfig+0x74e>
 80010e4:	2301      	movs	r3, #1
 80010e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80010f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fa:	fab3 f383 	clz	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	4ba2      	ldr	r3, [pc, #648]	; (800138c <HAL_RCC_OscConfig+0x8fc>)
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	461a      	mov	r2, r3
 800110a:	2301      	movs	r3, #1
 800110c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fa07 	bl	8000520 <HAL_GetTick>
 8001112:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001116:	e00a      	b.n	800112e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff fa02 	bl	8000520 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d902      	bls.n	800112e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	f000 bcfe 	b.w	8001b2a <HAL_RCC_OscConfig+0x109a>
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001138:	fa93 f2a3 	rbit	r2, r3
 800113c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001140:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800114a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800114e:	2202      	movs	r2, #2
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	fa93 f2a3 	rbit	r2, r3
 8001160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800116e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001172:	2202      	movs	r2, #2
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800117a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	fa93 f2a3 	rbit	r2, r3
 8001184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001188:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800118c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	4b7e      	ldr	r3, [pc, #504]	; (8001388 <HAL_RCC_OscConfig+0x8f8>)
 8001190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001196:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800119a:	2102      	movs	r1, #2
 800119c:	6019      	str	r1, [r3, #0]
 800119e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	fa93 f1a3 	rbit	r1, r3
 80011ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80011b4:	6019      	str	r1, [r3, #0]
  return result;
 80011b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	fab3 f383 	clz	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 031f 	and.w	r3, r3, #31
 80011d0:	2101      	movs	r1, #1
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d09d      	beq.n	8001118 <HAL_RCC_OscConfig+0x688>
 80011dc:	e08d      	b.n	80012fa <HAL_RCC_OscConfig+0x86a>
 80011de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	fa93 f2a3 	rbit	r2, r3
 80011f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001200:	601a      	str	r2, [r3, #0]
  return result;
 8001202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001206:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800120a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800120c:	fab3 f383 	clz	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	4b5d      	ldr	r3, [pc, #372]	; (800138c <HAL_RCC_OscConfig+0x8fc>)
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	461a      	mov	r2, r3
 800121c:	2300      	movs	r3, #0
 800121e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001220:	f7ff f97e 	bl	8000520 <HAL_GetTick>
 8001224:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001228:	e00a      	b.n	8001240 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800122a:	f7ff f979 	bl	8000520 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d902      	bls.n	8001240 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	f000 bc75 	b.w	8001b2a <HAL_RCC_OscConfig+0x109a>
 8001240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001244:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001248:	2202      	movs	r2, #2
 800124a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001250:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	fa93 f2a3 	rbit	r2, r3
 800125a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800125e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800126c:	2202      	movs	r2, #2
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001274:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	fa93 f2a3 	rbit	r2, r3
 800127e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800128c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001290:	2202      	movs	r2, #2
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001298:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	fa93 f2a3 	rbit	r2, r3
 80012a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80012aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <HAL_RCC_OscConfig+0x8f8>)
 80012ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012b8:	2102      	movs	r1, #2
 80012ba:	6019      	str	r1, [r3, #0]
 80012bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	fa93 f1a3 	rbit	r1, r3
 80012ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ce:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80012d2:	6019      	str	r1, [r3, #0]
  return result;
 80012d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	2101      	movs	r1, #1
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d197      	bne.n	800122a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 81a5 	beq.w	800165a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_RCC_OscConfig+0x8f8>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d116      	bne.n	8001350 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_RCC_OscConfig+0x8f8>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a18      	ldr	r2, [pc, #96]	; (8001388 <HAL_RCC_OscConfig+0x8f8>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_RCC_OscConfig+0x8f8>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800133a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001348:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800134a:	2301      	movs	r3, #1
 800134c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_RCC_OscConfig+0x900>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d121      	bne.n	80013a0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_RCC_OscConfig+0x900>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <HAL_RCC_OscConfig+0x900>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001368:	f7ff f8da 	bl	8000520 <HAL_GetTick>
 800136c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001370:	e010      	b.n	8001394 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001372:	f7ff f8d5 	bl	8000520 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d908      	bls.n	8001394 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e3d1      	b.n	8001b2a <HAL_RCC_OscConfig+0x109a>
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	10908120 	.word	0x10908120
 8001390:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001394:	4b8d      	ldr	r3, [pc, #564]	; (80015cc <HAL_RCC_OscConfig+0xb3c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0e8      	beq.n	8001372 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x92e>
 80013b0:	4b87      	ldr	r3, [pc, #540]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4a86      	ldr	r2, [pc, #536]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6213      	str	r3, [r2, #32]
 80013bc:	e035      	b.n	800142a <HAL_RCC_OscConfig+0x99a>
 80013be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x958>
 80013ce:	4b80      	ldr	r3, [pc, #512]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a7f      	ldr	r2, [pc, #508]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6213      	str	r3, [r2, #32]
 80013da:	4b7d      	ldr	r3, [pc, #500]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a7c      	ldr	r2, [pc, #496]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	6213      	str	r3, [r2, #32]
 80013e6:	e020      	b.n	800142a <HAL_RCC_OscConfig+0x99a>
 80013e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d10c      	bne.n	8001412 <HAL_RCC_OscConfig+0x982>
 80013f8:	4b75      	ldr	r3, [pc, #468]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4a74      	ldr	r2, [pc, #464]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6213      	str	r3, [r2, #32]
 8001404:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4a71      	ldr	r2, [pc, #452]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6213      	str	r3, [r2, #32]
 8001410:	e00b      	b.n	800142a <HAL_RCC_OscConfig+0x99a>
 8001412:	4b6f      	ldr	r3, [pc, #444]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4a6e      	ldr	r2, [pc, #440]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 8001418:	f023 0301 	bic.w	r3, r3, #1
 800141c:	6213      	str	r3, [r2, #32]
 800141e:	4b6c      	ldr	r3, [pc, #432]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4a6b      	ldr	r2, [pc, #428]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 8001424:	f023 0304 	bic.w	r3, r3, #4
 8001428:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800142e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8081 	beq.w	800153e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff f870 	bl	8000520 <HAL_GetTick>
 8001440:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	e00b      	b.n	800145e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff f86b 	bl	8000520 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	; 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e365      	b.n	8001b2a <HAL_RCC_OscConfig+0x109a>
 800145e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001462:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001466:	2202      	movs	r2, #2
 8001468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	fa93 f2a3 	rbit	r2, r3
 8001478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001486:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800148a:	2202      	movs	r2, #2
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001492:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	fa93 f2a3 	rbit	r2, r3
 800149c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80014a4:	601a      	str	r2, [r3, #0]
  return result;
 80014a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014aa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80014ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	fab3 f383 	clz	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d102      	bne.n	80014ca <HAL_RCC_OscConfig+0xa3a>
 80014c4:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	e013      	b.n	80014f2 <HAL_RCC_OscConfig+0xa62>
 80014ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80014d2:	2202      	movs	r2, #2
 80014d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	fa93 f2a3 	rbit	r2, r3
 80014e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80014f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80014fa:	2102      	movs	r1, #2
 80014fc:	6011      	str	r1, [r2, #0]
 80014fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001502:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	fa92 f1a2 	rbit	r1, r2
 800150c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001510:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001514:	6011      	str	r1, [r2, #0]
  return result;
 8001516:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800151a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	fab2 f282 	clz	r2, r2
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	f002 021f 	and.w	r2, r2, #31
 8001530:	2101      	movs	r1, #1
 8001532:	fa01 f202 	lsl.w	r2, r1, r2
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d084      	beq.n	8001446 <HAL_RCC_OscConfig+0x9b6>
 800153c:	e083      	b.n	8001646 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7fe ffef 	bl	8000520 <HAL_GetTick>
 8001542:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001548:	f7fe ffea 	bl	8000520 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e2e4      	b.n	8001b2a <HAL_RCC_OscConfig+0x109a>
 8001560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001564:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001568:	2202      	movs	r2, #2
 800156a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001570:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	fa93 f2a3 	rbit	r2, r3
 800157a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001588:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800158c:	2202      	movs	r2, #2
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001594:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	fa93 f2a3 	rbit	r2, r3
 800159e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80015a6:	601a      	str	r2, [r3, #0]
  return result;
 80015a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ac:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80015b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	095b      	lsrs	r3, r3, #5
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d106      	bne.n	80015d4 <HAL_RCC_OscConfig+0xb44>
 80015c6:	4b02      	ldr	r3, [pc, #8]	; (80015d0 <HAL_RCC_OscConfig+0xb40>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	e017      	b.n	80015fc <HAL_RCC_OscConfig+0xb6c>
 80015cc:	40007000 	.word	0x40007000
 80015d0:	40021000 	.word	0x40021000
 80015d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80015dc:	2202      	movs	r2, #2
 80015de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	fa93 f2a3 	rbit	r2, r3
 80015ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	4bb3      	ldr	r3, [pc, #716]	; (80018c8 <HAL_RCC_OscConfig+0xe38>)
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001600:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001604:	2102      	movs	r1, #2
 8001606:	6011      	str	r1, [r2, #0]
 8001608:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800160c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	fa92 f1a2 	rbit	r1, r2
 8001616:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800161a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800161e:	6011      	str	r1, [r2, #0]
  return result;
 8001620:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001624:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	fab2 f282 	clz	r2, r2
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	f002 021f 	and.w	r2, r2, #31
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d180      	bne.n	8001548 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001646:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800164a:	2b01      	cmp	r3, #1
 800164c:	d105      	bne.n	800165a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164e:	4b9e      	ldr	r3, [pc, #632]	; (80018c8 <HAL_RCC_OscConfig+0xe38>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a9d      	ldr	r2, [pc, #628]	; (80018c8 <HAL_RCC_OscConfig+0xe38>)
 8001654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800165e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 825e 	beq.w	8001b28 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800166c:	4b96      	ldr	r3, [pc, #600]	; (80018c8 <HAL_RCC_OscConfig+0xe38>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	f000 821f 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b02      	cmp	r3, #2
 8001688:	f040 8170 	bne.w	800196c <HAL_RCC_OscConfig+0xedc>
 800168c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001690:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001694:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80016b0:	601a      	str	r2, [r3, #0]
  return result;
 80016b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80016ba:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	461a      	mov	r2, r3
 80016ce:	2300      	movs	r3, #0
 80016d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7fe ff25 	bl	8000520 <HAL_GetTick>
 80016d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016da:	e009      	b.n	80016f0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016dc:	f7fe ff20 	bl	8000520 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e21c      	b.n	8001b2a <HAL_RCC_OscConfig+0x109a>
 80016f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80016f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001702:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	fa93 f2a3 	rbit	r2, r3
 800170c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001710:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001714:	601a      	str	r2, [r3, #0]
  return result;
 8001716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800171e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d102      	bne.n	800173a <HAL_RCC_OscConfig+0xcaa>
 8001734:	4b64      	ldr	r3, [pc, #400]	; (80018c8 <HAL_RCC_OscConfig+0xe38>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	e027      	b.n	800178a <HAL_RCC_OscConfig+0xcfa>
 800173a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001742:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001746:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	fa93 f2a3 	rbit	r2, r3
 8001756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001764:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001768:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001772:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	fa93 f2a3 	rbit	r2, r3
 800177c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001780:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <HAL_RCC_OscConfig+0xe38>)
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800178e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001792:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001796:	6011      	str	r1, [r2, #0]
 8001798:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800179c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	fa92 f1a2 	rbit	r1, r2
 80017a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017aa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80017ae:	6011      	str	r1, [r2, #0]
  return result;
 80017b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017b4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	fab2 f282 	clz	r2, r2
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	f042 0220 	orr.w	r2, r2, #32
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	f002 021f 	and.w	r2, r2, #31
 80017ca:	2101      	movs	r1, #1
 80017cc:	fa01 f202 	lsl.w	r2, r1, r2
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d182      	bne.n	80016dc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d6:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <HAL_RCC_OscConfig+0xe38>)
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	f023 020f 	bic.w	r2, r3, #15
 80017de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	4937      	ldr	r1, [pc, #220]	; (80018c8 <HAL_RCC_OscConfig+0xe38>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <HAL_RCC_OscConfig+0xe38>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80017f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6a19      	ldr	r1, [r3, #32]
 8001804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001808:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	430b      	orrs	r3, r1
 8001812:	492d      	ldr	r1, [pc, #180]	; (80018c8 <HAL_RCC_OscConfig+0xe38>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
 8001818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001820:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	fa93 f2a3 	rbit	r2, r3
 8001834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001838:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800183c:	601a      	str	r2, [r3, #0]
  return result;
 800183e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001842:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001846:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001848:	fab3 f383 	clz	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001852:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	461a      	mov	r2, r3
 800185a:	2301      	movs	r3, #1
 800185c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7fe fe5f 	bl	8000520 <HAL_GetTick>
 8001862:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001866:	e009      	b.n	800187c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001868:	f7fe fe5a 	bl	8000520 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e156      	b.n	8001b2a <HAL_RCC_OscConfig+0x109a>
 800187c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001880:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80018a0:	601a      	str	r2, [r3, #0]
  return result;
 80018a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80018aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ac:	fab3 f383 	clz	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_RCC_OscConfig+0xe3c>
 80018c0:	4b01      	ldr	r3, [pc, #4]	; (80018c8 <HAL_RCC_OscConfig+0xe38>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e02a      	b.n	800191c <HAL_RCC_OscConfig+0xe8c>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80018d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018de:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80018fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001904:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	fa93 f2a3 	rbit	r2, r3
 800190e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001912:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	4b86      	ldr	r3, [pc, #536]	; (8001b34 <HAL_RCC_OscConfig+0x10a4>)
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001920:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001924:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001928:	6011      	str	r1, [r2, #0]
 800192a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800192e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	fa92 f1a2 	rbit	r1, r2
 8001938:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800193c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001940:	6011      	str	r1, [r2, #0]
  return result;
 8001942:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001946:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	fab2 f282 	clz	r2, r2
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	f042 0220 	orr.w	r2, r2, #32
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	f002 021f 	and.w	r2, r2, #31
 800195c:	2101      	movs	r1, #1
 800195e:	fa01 f202 	lsl.w	r2, r1, r2
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	f43f af7f 	beq.w	8001868 <HAL_RCC_OscConfig+0xdd8>
 800196a:	e0dd      	b.n	8001b28 <HAL_RCC_OscConfig+0x1098>
 800196c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001970:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001990:	601a      	str	r2, [r3, #0]
  return result;
 8001992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001996:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800199a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	461a      	mov	r2, r3
 80019ae:	2300      	movs	r3, #0
 80019b0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7fe fdb5 	bl	8000520 <HAL_GetTick>
 80019b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ba:	e009      	b.n	80019d0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019bc:	f7fe fdb0 	bl	8000520 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e0ac      	b.n	8001b2a <HAL_RCC_OscConfig+0x109a>
 80019d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80019d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fa93 f2a3 	rbit	r2, r3
 80019ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80019f4:	601a      	str	r2, [r3, #0]
  return result;
 80019f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80019fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d102      	bne.n	8001a1a <HAL_RCC_OscConfig+0xf8a>
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_OscConfig+0x10a4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	e027      	b.n	8001a6a <HAL_RCC_OscConfig+0xfda>
 8001a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a44:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fa93 f2a3 	rbit	r2, r3
 8001a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a60:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <HAL_RCC_OscConfig+0x10a4>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a6e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001a72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a76:	6011      	str	r1, [r2, #0]
 8001a78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	fa92 f1a2 	rbit	r1, r2
 8001a86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a8a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001a8e:	6011      	str	r1, [r2, #0]
  return result;
 8001a90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a94:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	fab2 f282 	clz	r2, r2
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	f042 0220 	orr.w	r2, r2, #32
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	f002 021f 	and.w	r2, r2, #31
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d182      	bne.n	80019bc <HAL_RCC_OscConfig+0xf2c>
 8001ab6:	e037      	b.n	8001b28 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e02e      	b.n	8001b2a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_OscConfig+0x10a4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_RCC_OscConfig+0x10a4>)
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001adc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ae0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d117      	bne.n	8001b24 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001af4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001af8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d10b      	bne.n	8001b24 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b10:	f003 020f 	and.w	r2, r3, #15
 8001b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b09e      	sub	sp, #120	; 0x78
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e162      	b.n	8001e16 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b90      	ldr	r3, [pc, #576]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d910      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b8d      	ldr	r3, [pc, #564]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 0207 	bic.w	r2, r3, #7
 8001b66:	498b      	ldr	r1, [pc, #556]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b89      	ldr	r3, [pc, #548]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e14a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4b82      	ldr	r3, [pc, #520]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	497f      	ldr	r1, [pc, #508]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80dc 	beq.w	8001d64 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d13c      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xf6>
 8001bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d102      	bne.n	8001bde <HAL_RCC_ClockConfig+0xa6>
 8001bd8:	4b6f      	ldr	r3, [pc, #444]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	e00f      	b.n	8001bfe <HAL_RCC_ClockConfig+0xc6>
 8001bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	667b      	str	r3, [r7, #100]	; 0x64
 8001bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8001bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bfa:	4b67      	ldr	r3, [pc, #412]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c02:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c0e:	fab2 f282 	clz	r2, r2
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	f042 0220 	orr.w	r2, r2, #32
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f002 021f 	and.w	r2, r2, #31
 8001c1e:	2101      	movs	r1, #1
 8001c20:	fa01 f202 	lsl.w	r2, r1, r2
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d17b      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0f3      	b.n	8001e16 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d13c      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x178>
 8001c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	095b      	lsrs	r3, r3, #5
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d102      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x128>
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	e00f      	b.n	8001c80 <HAL_RCC_ClockConfig+0x148>
 8001c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c64:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8001c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
 8001c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c7c:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c84:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c88:	fa92 f2a2 	rbit	r2, r2
 8001c8c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c90:	fab2 f282 	clz	r2, r2
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f042 0220 	orr.w	r2, r2, #32
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f002 021f 	and.w	r2, r2, #31
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d13a      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0b2      	b.n	8001e16 <HAL_RCC_ClockConfig+0x2de>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x1a0>
 8001cd2:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e00d      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x1bc>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	623b      	str	r3, [r7, #32]
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	61ba      	str	r2, [r7, #24]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	fa92 f2a2 	rbit	r2, r2
 8001cfe:	617a      	str	r2, [r7, #20]
  return result;
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	fab2 f282 	clz	r2, r2
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f042 0220 	orr.w	r2, r2, #32
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	f002 021f 	and.w	r2, r2, #31
 8001d12:	2101      	movs	r1, #1
 8001d14:	fa01 f202 	lsl.w	r2, r1, r2
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e079      	b.n	8001e16 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f023 0203 	bic.w	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	491a      	ldr	r1, [pc, #104]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d34:	f7fe fbf4 	bl	8000520 <HAL_GetTick>
 8001d38:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3c:	f7fe fbf0 	bl	8000520 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e061      	b.n	8001e16 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_RCC_ClockConfig+0x260>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 020c 	and.w	r2, r3, #12
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d1eb      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d214      	bcs.n	8001d9c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 0207 	bic.w	r2, r3, #7
 8001d7a:	4906      	ldr	r1, [pc, #24]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <HAL_RCC_ClockConfig+0x25c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e040      	b.n	8001e16 <HAL_RCC_ClockConfig+0x2de>
 8001d94:	40022000 	.word	0x40022000
 8001d98:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_RCC_ClockConfig+0x2e8>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	491a      	ldr	r1, [pc, #104]	; (8001e20 <HAL_RCC_ClockConfig+0x2e8>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_RCC_ClockConfig+0x2e8>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4912      	ldr	r1, [pc, #72]	; (8001e20 <HAL_RCC_ClockConfig+0x2e8>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dda:	f000 f829 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 8001dde:	4601      	mov	r1, r0
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_RCC_ClockConfig+0x2e8>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de8:	22f0      	movs	r2, #240	; 0xf0
 8001dea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	fa92 f2a2 	rbit	r2, r2
 8001df2:	60fa      	str	r2, [r7, #12]
  return result;
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	fab2 f282 	clz	r2, r2
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	40d3      	lsrs	r3, r2
 8001dfe:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x2ec>)
 8001e00:	5cd3      	ldrb	r3, [r2, r3]
 8001e02:	fa21 f303 	lsr.w	r3, r1, r3
 8001e06:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <HAL_RCC_ClockConfig+0x2f0>)
 8001e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_RCC_ClockConfig+0x2f4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb42 	bl	8000498 <HAL_InitTick>
  
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3778      	adds	r7, #120	; 0x78
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08001f74 	.word	0x08001f74
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000004 	.word	0x20000004

08001e30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b08b      	sub	sp, #44	; 0x2c
 8001e34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d002      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x30>
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0x36>
 8001e5e:	e03f      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e62:	623b      	str	r3, [r7, #32]
      break;
 8001e64:	e03f      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e6c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e70:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	fa92 f2a2 	rbit	r2, r2
 8001e78:	607a      	str	r2, [r7, #4]
  return result;
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	fab2 f282 	clz	r2, r2
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	40d3      	lsrs	r3, r2
 8001e84:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	220f      	movs	r2, #15
 8001e94:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	fa92 f2a2 	rbit	r2, r2
 8001e9c:	60fa      	str	r2, [r7, #12]
  return result;
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	fab2 f282 	clz	r2, r2
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	40d3      	lsrs	r3, r2
 8001ea8:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eb8:	4a0f      	ldr	r2, [pc, #60]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec8:	e007      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	623b      	str	r3, [r7, #32]
      break;
 8001ede:	e002      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ee2:	623b      	str	r3, [r7, #32]
      break;
 8001ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	372c      	adds	r7, #44	; 0x2c
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	007a1200 	.word	0x007a1200
 8001efc:	08001f84 	.word	0x08001f84
 8001f00:	08001f94 	.word	0x08001f94

08001f04 <memset>:
 8001f04:	4402      	add	r2, r0
 8001f06:	4603      	mov	r3, r0
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d100      	bne.n	8001f0e <memset+0xa>
 8001f0c:	4770      	bx	lr
 8001f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f12:	e7f9      	b.n	8001f08 <memset+0x4>

08001f14 <__libc_init_array>:
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	4d0d      	ldr	r5, [pc, #52]	; (8001f4c <__libc_init_array+0x38>)
 8001f18:	4c0d      	ldr	r4, [pc, #52]	; (8001f50 <__libc_init_array+0x3c>)
 8001f1a:	1b64      	subs	r4, r4, r5
 8001f1c:	10a4      	asrs	r4, r4, #2
 8001f1e:	2600      	movs	r6, #0
 8001f20:	42a6      	cmp	r6, r4
 8001f22:	d109      	bne.n	8001f38 <__libc_init_array+0x24>
 8001f24:	4d0b      	ldr	r5, [pc, #44]	; (8001f54 <__libc_init_array+0x40>)
 8001f26:	4c0c      	ldr	r4, [pc, #48]	; (8001f58 <__libc_init_array+0x44>)
 8001f28:	f000 f818 	bl	8001f5c <_init>
 8001f2c:	1b64      	subs	r4, r4, r5
 8001f2e:	10a4      	asrs	r4, r4, #2
 8001f30:	2600      	movs	r6, #0
 8001f32:	42a6      	cmp	r6, r4
 8001f34:	d105      	bne.n	8001f42 <__libc_init_array+0x2e>
 8001f36:	bd70      	pop	{r4, r5, r6, pc}
 8001f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f3c:	4798      	blx	r3
 8001f3e:	3601      	adds	r6, #1
 8001f40:	e7ee      	b.n	8001f20 <__libc_init_array+0xc>
 8001f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f46:	4798      	blx	r3
 8001f48:	3601      	adds	r6, #1
 8001f4a:	e7f2      	b.n	8001f32 <__libc_init_array+0x1e>
 8001f4c:	08001fa4 	.word	0x08001fa4
 8001f50:	08001fa4 	.word	0x08001fa4
 8001f54:	08001fa4 	.word	0x08001fa4
 8001f58:	08001fa8 	.word	0x08001fa8

08001f5c <_init>:
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5e:	bf00      	nop
 8001f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f62:	bc08      	pop	{r3}
 8001f64:	469e      	mov	lr, r3
 8001f66:	4770      	bx	lr

08001f68 <_fini>:
 8001f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6a:	bf00      	nop
 8001f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f6e:	bc08      	pop	{r3}
 8001f70:	469e      	mov	lr, r3
 8001f72:	4770      	bx	lr
