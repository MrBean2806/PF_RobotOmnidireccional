
FreeRTOS_tesis_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011eec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08012090  08012090  00022090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801257c  0801257c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000000  0801257c  0801257c  000301dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801257c  0801257c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801257c  0801257c  0002257c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012580  08012580  00022580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08012584  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301dc  2**0
                  CONTENTS
 10 .bss          00005824  200001dc  200001dc  000301dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005a00  20005a00  000301dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021fbc  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000046d5  00000000  00000000  0005220b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c10  00000000  00000000  000568e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015f0  00000000  00000000  000584f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025ef6  00000000  00000000  00059ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024f55  00000000  00000000  0007f9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3287  00000000  00000000  000a492b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000869c  00000000  00000000  00187bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00190250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012074 	.word	0x08012074

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08012074 	.word	0x08012074

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <vApplicationGetIdleTaskMemory+0x30>)
 8000cae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200001f8 	.word	0x200001f8
 8000cc8:	20000298 	.word	0x20000298

08000ccc <HAL_UART_RxCpltCallback>:
void StartMeasureVel(void const * argument);

/* USER CODE BEGIN PFP */
int RxFlag = RESET; // Variable que le indica a la tarea StartRxTask() que se leyo un dato en la UART
int state = RUN_State;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	RxFlag = SET;
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <HAL_UART_RxCpltCallback+0x1c>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	200008d8 	.word	0x200008d8
 8000cec:	00000000 	.word	0x00000000

08000cf0 <HAL_GPIO_EXTI_Callback>:
int counter_stop[4] = {0,0,0,0};

//Interrupcion para contar pulsos del encoder

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Encoder1_Pin){
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d00:	d140      	bne.n	8000d84 <HAL_GPIO_EXTI_Callback+0x94>
		if(state == RUN_State){
 8000d02:	4b8b      	ldr	r3, [pc, #556]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x240>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d13c      	bne.n	8000d84 <HAL_GPIO_EXTI_Callback+0x94>
			counter_stop[0] = 0;
 8000d0a:	4b8a      	ldr	r3, [pc, #552]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x244>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
			contador_actual[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8000d10:	4b89      	ldr	r3, [pc, #548]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x248>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d16:	4a89      	ldr	r2, [pc, #548]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000d18:	6013      	str	r3, [r2, #0]
			if(contador_actual[0] >= contador_pasado[0]){
 8000d1a:	4b88      	ldr	r3, [pc, #544]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4b88      	ldr	r3, [pc, #544]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d307      	bcc.n	8000d36 <HAL_GPIO_EXTI_Callback+0x46>
				tiempoPulsos[0] = contador_actual[0] - contador_pasado[0];
 8000d26:	4b85      	ldr	r3, [pc, #532]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4b85      	ldr	r3, [pc, #532]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	4a84      	ldr	r2, [pc, #528]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x254>)
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	e007      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x56>
			}else{
				tiempoPulsos[0] = (4294967295 - contador_pasado[0]) + contador_actual[0];
 8000d36:	4b81      	ldr	r3, [pc, #516]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4b81      	ldr	r3, [pc, #516]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	3b01      	subs	r3, #1
 8000d42:	4a80      	ldr	r2, [pc, #512]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x254>)
 8000d44:	6013      	str	r3, [r2, #0]
			}

			u1_medida = (60.0 * 72000000.0) / (tiempoPulsos[0] * 20.0);
 8000d46:	4b7f      	ldr	r3, [pc, #508]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x254>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fbe2 	bl	8000514 <__aeabi_ui2d>
 8000d50:	f04f 0200 	mov.w	r2, #0
 8000d54:	4b7c      	ldr	r3, [pc, #496]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x258>)
 8000d56:	f7ff fc57 	bl	8000608 <__aeabi_dmul>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	a172      	add	r1, pc, #456	; (adr r1, 8000f28 <HAL_GPIO_EXTI_Callback+0x238>)
 8000d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d64:	f7ff fd7a 	bl	800085c <__aeabi_ddiv>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f7ff ff42 	bl	8000bf8 <__aeabi_d2f>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4a75      	ldr	r2, [pc, #468]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x25c>)
 8000d78:	6013      	str	r3, [r2, #0]
			contador_pasado[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x248>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	4a6f      	ldr	r2, [pc, #444]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000d82:	6013      	str	r3, [r2, #0]
		}
	}
	if(GPIO_Pin == Encoder2_Pin){
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d8a:	d140      	bne.n	8000e0e <HAL_GPIO_EXTI_Callback+0x11e>
		if(state == RUN_State){
 8000d8c:	4b68      	ldr	r3, [pc, #416]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x240>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d13c      	bne.n	8000e0e <HAL_GPIO_EXTI_Callback+0x11e>
			counter_stop[1] = 0;
 8000d94:	4b67      	ldr	r3, [pc, #412]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x244>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
			contador_actual[1] = __HAL_TIM_GET_COUNTER(&htim2);
 8000d9a:	4b67      	ldr	r3, [pc, #412]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x248>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	4a66      	ldr	r2, [pc, #408]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000da2:	6053      	str	r3, [r2, #4]
			if(contador_actual[1] >= contador_pasado[1]){
 8000da4:	4b65      	ldr	r3, [pc, #404]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4b65      	ldr	r3, [pc, #404]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d307      	bcc.n	8000dc0 <HAL_GPIO_EXTI_Callback+0xd0>
				tiempoPulsos[1] = contador_actual[1] - contador_pasado[1];
 8000db0:	4b62      	ldr	r3, [pc, #392]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	4a62      	ldr	r2, [pc, #392]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x254>)
 8000dbc:	6053      	str	r3, [r2, #4]
 8000dbe:	e007      	b.n	8000dd0 <HAL_GPIO_EXTI_Callback+0xe0>
			}else{
				tiempoPulsos[1] = (4294967295 - contador_pasado[1]) + contador_actual[1];
 8000dc0:	4b5e      	ldr	r3, [pc, #376]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	4b5e      	ldr	r3, [pc, #376]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	4a5d      	ldr	r2, [pc, #372]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x254>)
 8000dce:	6053      	str	r3, [r2, #4]
			}

			u2_medida = (60.0 * 72000000.0) / (tiempoPulsos[1] * 20.0);
 8000dd0:	4b5c      	ldr	r3, [pc, #368]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x254>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fb9d 	bl	8000514 <__aeabi_ui2d>
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	4b5a      	ldr	r3, [pc, #360]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x258>)
 8000de0:	f7ff fc12 	bl	8000608 <__aeabi_dmul>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	a14f      	add	r1, pc, #316	; (adr r1, 8000f28 <HAL_GPIO_EXTI_Callback+0x238>)
 8000dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000dee:	f7ff fd35 	bl	800085c <__aeabi_ddiv>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4610      	mov	r0, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fefd 	bl	8000bf8 <__aeabi_d2f>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a53      	ldr	r2, [pc, #332]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x260>)
 8000e02:	6013      	str	r3, [r2, #0]
			contador_pasado[1] = __HAL_TIM_GET_COUNTER(&htim2);
 8000e04:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x248>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0a:	4a4d      	ldr	r2, [pc, #308]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000e0c:	6053      	str	r3, [r2, #4]
		}
	}
	if(GPIO_Pin == Encoder3_Pin){
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	2b40      	cmp	r3, #64	; 0x40
 8000e12:	d140      	bne.n	8000e96 <HAL_GPIO_EXTI_Callback+0x1a6>
		if(state == RUN_State){
 8000e14:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x240>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d13c      	bne.n	8000e96 <HAL_GPIO_EXTI_Callback+0x1a6>
			counter_stop[2] = 0;
 8000e1c:	4b45      	ldr	r3, [pc, #276]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x244>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
			contador_actual[2] = __HAL_TIM_GET_COUNTER(&htim2);
 8000e22:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x248>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	4a44      	ldr	r2, [pc, #272]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000e2a:	6093      	str	r3, [r2, #8]
			if(contador_actual[2] >= contador_pasado[2]){
 8000e2c:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d307      	bcc.n	8000e48 <HAL_GPIO_EXTI_Callback+0x158>
				tiempoPulsos[2] = contador_actual[2] - contador_pasado[2];
 8000e38:	4b40      	ldr	r3, [pc, #256]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	4a40      	ldr	r2, [pc, #256]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x254>)
 8000e44:	6093      	str	r3, [r2, #8]
 8000e46:	e007      	b.n	8000e58 <HAL_GPIO_EXTI_Callback+0x168>
			}else{
				tiempoPulsos[2] = (4294967295 - contador_pasado[2]) + contador_actual[2];
 8000e48:	4b3c      	ldr	r3, [pc, #240]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	3b01      	subs	r3, #1
 8000e54:	4a3b      	ldr	r2, [pc, #236]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x254>)
 8000e56:	6093      	str	r3, [r2, #8]
			}

			u3_medida = (60.0 * 72000000.0) / (tiempoPulsos[2] * 20.0);
 8000e58:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x254>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fb59 	bl	8000514 <__aeabi_ui2d>
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x258>)
 8000e68:	f7ff fbce 	bl	8000608 <__aeabi_dmul>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	a12d      	add	r1, pc, #180	; (adr r1, 8000f28 <HAL_GPIO_EXTI_Callback+0x238>)
 8000e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e76:	f7ff fcf1 	bl	800085c <__aeabi_ddiv>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f7ff feb9 	bl	8000bf8 <__aeabi_d2f>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a32      	ldr	r2, [pc, #200]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x264>)
 8000e8a:	6013      	str	r3, [r2, #0]
			contador_pasado[2] = __HAL_TIM_GET_COUNTER(&htim2);
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x248>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	4a2b      	ldr	r2, [pc, #172]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000e94:	6093      	str	r3, [r2, #8]
		}
	}
	if(GPIO_Pin == Encoder4_Pin){
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d140      	bne.n	8000f1e <HAL_GPIO_EXTI_Callback+0x22e>
		if(state == RUN_State){
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <HAL_GPIO_EXTI_Callback+0x240>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d13c      	bne.n	8000f1e <HAL_GPIO_EXTI_Callback+0x22e>
			counter_stop[3] = 0;
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <HAL_GPIO_EXTI_Callback+0x244>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
			contador_actual[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x248>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000eb2:	60d3      	str	r3, [r2, #12]
			if(contador_actual[3] >= contador_pasado[3]){
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d307      	bcc.n	8000ed0 <HAL_GPIO_EXTI_Callback+0x1e0>
				tiempoPulsos[3] = contador_actual[3] - contador_pasado[3];
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x254>)
 8000ecc:	60d3      	str	r3, [r2, #12]
 8000ece:	e007      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x1f0>
			}else{
				tiempoPulsos[3] = (4294967295 - contador_pasado[3]) + contador_actual[3];
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x24c>)
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	3b01      	subs	r3, #1
 8000edc:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x254>)
 8000ede:	60d3      	str	r3, [r2, #12]
			}

			u4_medida = (60.0 * 72000000.0) / (tiempoPulsos[3] * 20.0);
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x254>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb15 	bl	8000514 <__aeabi_ui2d>
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x258>)
 8000ef0:	f7ff fb8a 	bl	8000608 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	a10b      	add	r1, pc, #44	; (adr r1, 8000f28 <HAL_GPIO_EXTI_Callback+0x238>)
 8000efa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000efe:	f7ff fcad 	bl	800085c <__aeabi_ddiv>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fe75 	bl	8000bf8 <__aeabi_d2f>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x268>)
 8000f12:	6013      	str	r3, [r2, #0]
			contador_pasado[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x248>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x250>)
 8000f1c:	60d3      	str	r3, [r2, #12]
		}
	}
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	80000000 	.word	0x80000000
 8000f2c:	41f017df 	.word	0x41f017df
 8000f30:	20000000 	.word	0x20000000
 8000f34:	200008dc 	.word	0x200008dc
 8000f38:	20000610 	.word	0x20000610
 8000f3c:	200008a4 	.word	0x200008a4
 8000f40:	20000894 	.word	0x20000894
 8000f44:	200008b4 	.word	0x200008b4
 8000f48:	40340000 	.word	0x40340000
 8000f4c:	200008c4 	.word	0x200008c4
 8000f50:	200008c8 	.word	0x200008c8
 8000f54:	200008cc 	.word	0x200008cc
 8000f58:	200008d0 	.word	0x200008d0

08000f5c <HAL_ADC_ConvCpltCallback>:

// Declaracion de variables para leer la tension de las baterias
int raw_adc_value = 0;
uint8_t flag_adc = 0;
// Funcion que se utiliza cuando el ADC termino de convertir el valor de tension de las baterias
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	raw_adc_value = HAL_ADC_GetValue(&hadc2);
 8000f64:	4806      	ldr	r0, [pc, #24]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f66:	f003 fc0f 	bl	8004788 <HAL_ADC_GetValue>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_ADC_ConvCpltCallback+0x28>)
 8000f70:	601a      	str	r2, [r3, #0]
	flag_adc = 1;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000498 	.word	0x20000498
 8000f84:	200008ec 	.word	0x200008ec
 8000f88:	200008f0 	.word	0x200008f0

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b5b0      	push	{r4, r5, r7, lr}
 8000f8e:	b0d0      	sub	sp, #320	; 0x140
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f92:	f003 f851 	bl	8004038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f96:	f000 f9bd 	bl	8001314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9a:	f000 fe43 	bl	8001c24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f9e:	f000 fe1b 	bl	8001bd8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000fa2:	f000 fb25 	bl	80015f0 <MX_TIM1_Init>
  MX_CRC_Init();
 8000fa6:	f000 fa83 	bl	80014b0 <MX_CRC_Init>
  MX_I2C1_Init();
 8000faa:	f000 faa3 	bl	80014f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fae:	f000 fae1 	bl	8001574 <MX_SPI1_Init>
  MX_TIM8_Init();
 8000fb2:	f000 fc17 	bl	80017e4 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000fb6:	f000 fcc1 	bl	800193c <MX_TIM15_Init>
  MX_TIM2_Init();
 8000fba:	f000 fbc5 	bl	8001748 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000fbe:	f000 fd61 	bl	8001a84 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000fc2:	f000 fdd9 	bl	8001b78 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8000fc6:	f000 fa15 	bl	80013f4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 1);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2105      	movs	r1, #5
 8000fce:	2012      	movs	r0, #18
 8000fd0:	f004 fb62 	bl	8005698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fd4:	2012      	movs	r0, #18
 8000fd6:	f004 fb7b 	bl	80056d0 <HAL_NVIC_EnableIRQ>

  hcrc.Instance = CRC;
 8000fda:	4bb0      	ldr	r3, [pc, #704]	; (800129c <main+0x310>)
 8000fdc:	4ab0      	ldr	r2, [pc, #704]	; (80012a0 <main+0x314>)
 8000fde:	601a      	str	r2, [r3, #0]

  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000fe0:	4bae      	ldr	r3, [pc, #696]	; (800129c <main+0x310>)
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	60da      	str	r2, [r3, #12]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000fe6:	4bad      	ldr	r3, [pc, #692]	; (800129c <main+0x310>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000fec:	4bab      	ldr	r3, [pc, #684]	; (800129c <main+0x310>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 0x07;
 8000ff2:	4baa      	ldr	r3, [pc, #680]	; (800129c <main+0x310>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	609a      	str	r2, [r3, #8]
  hcrc.Init.InitValue = 0x00;
 8000ff8:	4ba8      	ldr	r3, [pc, #672]	; (800129c <main+0x310>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000ffe:	4ba7      	ldr	r3, [pc, #668]	; (800129c <main+0x310>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001004:	4ba5      	ldr	r3, [pc, #660]	; (800129c <main+0x310>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]

//  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800100a:	4ba4      	ldr	r3, [pc, #656]	; (800129c <main+0x310>)
 800100c:	2201      	movs	r2, #1
 800100e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001010:	48a2      	ldr	r0, [pc, #648]	; (800129c <main+0x310>)
 8001012:	f004 fb6b 	bl	80056ec <HAL_CRC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <main+0x94>
  {
	  Error_Handler();
 800101c:	f002 fa9e 	bl	800355c <Error_Handler>
  }

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001020:	2100      	movs	r1, #0
 8001022:	48a0      	ldr	r0, [pc, #640]	; (80012a4 <main+0x318>)
 8001024:	f009 f948 	bl	800a2b8 <HAL_TIM_OC_Start_IT>


  // Inicializo los contadores
  contador_pasado[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8001028:	4b9e      	ldr	r3, [pc, #632]	; (80012a4 <main+0x318>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	4a9e      	ldr	r2, [pc, #632]	; (80012a8 <main+0x31c>)
 8001030:	6013      	str	r3, [r2, #0]
  contador_pasado[1] = __HAL_TIM_GET_COUNTER(&htim2);
 8001032:	4b9c      	ldr	r3, [pc, #624]	; (80012a4 <main+0x318>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	4a9b      	ldr	r2, [pc, #620]	; (80012a8 <main+0x31c>)
 800103a:	6053      	str	r3, [r2, #4]
  contador_pasado[2] = __HAL_TIM_GET_COUNTER(&htim2);
 800103c:	4b99      	ldr	r3, [pc, #612]	; (80012a4 <main+0x318>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	4a99      	ldr	r2, [pc, #612]	; (80012a8 <main+0x31c>)
 8001044:	6093      	str	r3, [r2, #8]
  contador_pasado[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8001046:	4b97      	ldr	r3, [pc, #604]	; (80012a4 <main+0x318>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	4a96      	ldr	r2, [pc, #600]	; (80012a8 <main+0x31c>)
 800104e:	60d3      	str	r3, [r2, #12]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySemAccelTx */
  osSemaphoreDef(myBinarySemAccelTx);
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  myBinarySemAccelTxHandle = osSemaphoreCreate(osSemaphore(myBinarySemAccelTx), 1);
 800105c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001060:	2101      	movs	r1, #1
 8001062:	4618      	mov	r0, r3
 8001064:	f00c f872 	bl	800d14c <osSemaphoreCreate>
 8001068:	4603      	mov	r3, r0
 800106a:	4a90      	ldr	r2, [pc, #576]	; (80012ac <main+0x320>)
 800106c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemVelTx */
  osSemaphoreDef(myBinarySemVelTx);
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  myBinarySemVelTxHandle = osSemaphoreCreate(osSemaphore(myBinarySemVelTx), 1);
 800107a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800107e:	2101      	movs	r1, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f00c f863 	bl	800d14c <osSemaphoreCreate>
 8001086:	4603      	mov	r3, r0
 8001088:	4a89      	ldr	r2, [pc, #548]	; (80012b0 <main+0x324>)
 800108a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemVelControl */
  osSemaphoreDef(myBinarySemVelControl);
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  myBinarySemVelControlHandle = osSemaphoreCreate(osSemaphore(myBinarySemVelControl), 1);
 8001098:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800109c:	2101      	movs	r1, #1
 800109e:	4618      	mov	r0, r3
 80010a0:	f00c f854 	bl	800d14c <osSemaphoreCreate>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a83      	ldr	r2, [pc, #524]	; (80012b4 <main+0x328>)
 80010a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemRxConv */
  osSemaphoreDef(myBinarySemRxConv);
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  myBinarySemRxConvHandle = osSemaphoreCreate(osSemaphore(myBinarySemRxConv), 1);
 80010b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80010ba:	2101      	movs	r1, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f00c f845 	bl	800d14c <osSemaphoreCreate>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a7c      	ldr	r2, [pc, #496]	; (80012b8 <main+0x32c>)
 80010c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemConvControl */
  osSemaphoreDef(myBinarySemConvControl);
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  myBinarySemConvControlHandle = osSemaphoreCreate(osSemaphore(myBinarySemConvControl), 1);
 80010d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010d8:	2101      	movs	r1, #1
 80010da:	4618      	mov	r0, r3
 80010dc:	f00c f836 	bl	800d14c <osSemaphoreCreate>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a76      	ldr	r2, [pc, #472]	; (80012bc <main+0x330>)
 80010e4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  // Queue RxTask to ConvDirec
  osMessageQDef(myQueueRxConv, sizeof(s_Velocidad), s_Velocidad);
 80010e6:	4b76      	ldr	r3, [pc, #472]	; (80012c0 <main+0x334>)
 80010e8:	f507 7484 	add.w	r4, r7, #264	; 0x108
 80010ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueRxConvHandle = osMessageCreate(osMessageQ(myQueueRxConv), NULL);
 80010f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00c f859 	bl	800d1b0 <osMessageCreate>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a70      	ldr	r2, [pc, #448]	; (80012c4 <main+0x338>)
 8001102:	6013      	str	r3, [r2, #0]

  // Queue ConvDirec to ControlVel
  osMessageQDef(myQueueConvControl, sizeof(s_Velocidad_ruedas), s_Velocidad_ruedas);
 8001104:	4b70      	ldr	r3, [pc, #448]	; (80012c8 <main+0x33c>)
 8001106:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 800110a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueConvControlHandle = osMessageCreate(osMessageQ(myQueueConvControl), NULL);
 8001110:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f00c f84a 	bl	800d1b0 <osMessageCreate>
 800111c:	4603      	mov	r3, r0
 800111e:	4a6b      	ldr	r2, [pc, #428]	; (80012cc <main+0x340>)
 8001120:	6013      	str	r3, [r2, #0]
  
  // Queue MeasureVel to ControlVel
  osMessageQDef(myQueueVelControl, sizeof(s_Velocidad_ruedas), s_Velocidad_ruedas);
 8001122:	4b69      	ldr	r3, [pc, #420]	; (80012c8 <main+0x33c>)
 8001124:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8001128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800112a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueVelControlHandle = osMessageCreate(osMessageQ(myQueueVelControl), NULL);
 800112e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f00c f83b 	bl	800d1b0 <osMessageCreate>
 800113a:	4603      	mov	r3, r0
 800113c:	4a64      	ldr	r2, [pc, #400]	; (80012d0 <main+0x344>)
 800113e:	6013      	str	r3, [r2, #0]

  // Queue MeasureVel to TxTask
  osMessageQDef(myQueueVelTx, sizeof(s_Velocidad_ruedas), s_Velocidad_ruedas);
 8001140:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <main+0x33c>)
 8001142:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8001146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueVelTxHandle = osMessageCreate(osMessageQ(myQueueVelTx), NULL);
 800114c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00c f82c 	bl	800d1b0 <osMessageCreate>
 8001158:	4603      	mov	r3, r0
 800115a:	4a5e      	ldr	r2, [pc, #376]	; (80012d4 <main+0x348>)
 800115c:	6013      	str	r3, [r2, #0]

  // Queue MeasureAccel to TxTask
  osMessageQDef(myQueueAccelTx, sizeof(s_Aceleracion), s_Aceleracion);
 800115e:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <main+0x334>)
 8001160:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8001164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001166:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueAccelTxHandle = osMessageCreate(osMessageQ(myQueueAccelTx), NULL);
 800116a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f00c f81d 	bl	800d1b0 <osMessageCreate>
 8001176:	4603      	mov	r3, r0
 8001178:	4a57      	ldr	r2, [pc, #348]	; (80012d8 <main+0x34c>)
 800117a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800117c:	4b57      	ldr	r3, [pc, #348]	; (80012dc <main+0x350>)
 800117e:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001182:	461d      	mov	r5, r3
 8001184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001188:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800118c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001190:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f00b ff78 	bl	800d08c <osThreadCreate>
 800119c:	4603      	mov	r3, r0
 800119e:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <main+0x354>)
 80011a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of TxTask */
  osThreadDef(TxTask, StartTxTask, osPriorityLow, 0, 128);
 80011a2:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <main+0x358>)
 80011a4:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80011a8:	461d      	mov	r5, r3
 80011aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TxTaskHandle = osThreadCreate(osThread(TxTask), NULL);
 80011b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f00b ff65 	bl	800d08c <osThreadCreate>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a48      	ldr	r2, [pc, #288]	; (80012e8 <main+0x35c>)
 80011c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of RxTask */
  osThreadDef(RxTask, StartRxTask, osPriorityNormal, 0, 128);
 80011c8:	4b48      	ldr	r3, [pc, #288]	; (80012ec <main+0x360>)
 80011ca:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80011ce:	461d      	mov	r5, r3
 80011d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RxTaskHandle = osThreadCreate(osThread(RxTask), NULL);
 80011dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00b ff52 	bl	800d08c <osThreadCreate>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a41      	ldr	r2, [pc, #260]	; (80012f0 <main+0x364>)
 80011ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of CinematicConv */
  osThreadDef(CinematicConv, StartCinematicConv, osPriorityBelowNormal, 0, 128);
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <main+0x368>)
 80011f0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80011f4:	461d      	mov	r5, r3
 80011f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CinematicConvHandle = osThreadCreate(osThread(CinematicConv), NULL);
 8001202:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f00b ff3f 	bl	800d08c <osThreadCreate>
 800120e:	4603      	mov	r3, r0
 8001210:	4a39      	ldr	r2, [pc, #228]	; (80012f8 <main+0x36c>)
 8001212:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControlVel */
  osThreadDef(ControlVel, StartControlVel, osPriorityHigh, 0, 128);
 8001214:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001218:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800121c:	4a37      	ldr	r2, [pc, #220]	; (80012fc <main+0x370>)
 800121e:	461c      	mov	r4, r3
 8001220:	4615      	mov	r5, r2
 8001222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800122a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlVelHandle = osThreadCreate(osThread(ControlVel), NULL);
 800122e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f00b ff29 	bl	800d08c <osThreadCreate>
 800123a:	4603      	mov	r3, r0
 800123c:	4a30      	ldr	r2, [pc, #192]	; (8001300 <main+0x374>)
 800123e:	6013      	str	r3, [r2, #0]

  /* definition and creation of MeasureAccel */
  osThreadDef(MeasureAccel, StartMeasureAccel, osPriorityAboveNormal, 0, 128);
 8001240:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001244:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001248:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <main+0x378>)
 800124a:	461c      	mov	r4, r3
 800124c:	4615      	mov	r5, r2
 800124e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001252:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MeasureAccelHandle = osThreadCreate(osThread(MeasureAccel), NULL);
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00b ff13 	bl	800d08c <osThreadCreate>
 8001266:	4603      	mov	r3, r0
 8001268:	4a27      	ldr	r2, [pc, #156]	; (8001308 <main+0x37c>)
 800126a:	6013      	str	r3, [r2, #0]

  /* definition and creation of MeasureVel */
  osThreadDef(MeasureVel, StartMeasureVel, osPriorityRealtime, 0, 128);
 800126c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001270:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001274:	4a25      	ldr	r2, [pc, #148]	; (800130c <main+0x380>)
 8001276:	461c      	mov	r4, r3
 8001278:	4615      	mov	r5, r2
 800127a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800127c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001282:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MeasureVelHandle = osThreadCreate(osThread(MeasureVel), NULL);
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f00b fefe 	bl	800d08c <osThreadCreate>
 8001290:	4603      	mov	r3, r0
 8001292:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <main+0x384>)
 8001294:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001296:	f00b fef2 	bl	800d07e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800129a:	e7fe      	b.n	800129a <main+0x30e>
 800129c:	200004e8 	.word	0x200004e8
 80012a0:	40023000 	.word	0x40023000
 80012a4:	20000610 	.word	0x20000610
 80012a8:	20000894 	.word	0x20000894
 80012ac:	2000086c 	.word	0x2000086c
 80012b0:	20000870 	.word	0x20000870
 80012b4:	20000874 	.word	0x20000874
 80012b8:	20000878 	.word	0x20000878
 80012bc:	2000087c 	.word	0x2000087c
 80012c0:	08012090 	.word	0x08012090
 80012c4:	20000880 	.word	0x20000880
 80012c8:	080120a0 	.word	0x080120a0
 80012cc:	20000884 	.word	0x20000884
 80012d0:	20000888 	.word	0x20000888
 80012d4:	2000088c 	.word	0x2000088c
 80012d8:	20000890 	.word	0x20000890
 80012dc:	080120bc 	.word	0x080120bc
 80012e0:	20000850 	.word	0x20000850
 80012e4:	080120e0 	.word	0x080120e0
 80012e8:	20000854 	.word	0x20000854
 80012ec:	08012104 	.word	0x08012104
 80012f0:	20000858 	.word	0x20000858
 80012f4:	08012130 	.word	0x08012130
 80012f8:	2000085c 	.word	0x2000085c
 80012fc:	08012158 	.word	0x08012158
 8001300:	20000860 	.word	0x20000860
 8001304:	08012184 	.word	0x08012184
 8001308:	20000864 	.word	0x20000864
 800130c:	080121ac 	.word	0x080121ac
 8001310:	20000868 	.word	0x20000868

08001314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b0a6      	sub	sp, #152	; 0x98
 8001318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800131e:	2228      	movs	r2, #40	; 0x28
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f00e fefd 	bl	8010122 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001328:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2258      	movs	r2, #88	; 0x58
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f00e feef 	bl	8010122 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001344:	2302      	movs	r3, #2
 8001346:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	2310      	movs	r3, #16
 800134e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800135c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001360:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001372:	4618      	mov	r0, r3
 8001374:	f006 fac8 	bl	8007908 <HAL_RCC_OscConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800137e:	f002 f8ed 	bl	800355c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001382:	230f      	movs	r3, #15
 8001384:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001386:	2302      	movs	r3, #2
 8001388:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001392:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001398:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800139c:	2102      	movs	r1, #2
 800139e:	4618      	mov	r0, r3
 80013a0:	f007 fb06 	bl	80089b0 <HAL_RCC_ClockConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013aa:	f002 f8d7 	bl	800355c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <SystemClock_Config+0xdc>)
 80013b0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80013b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f007 fd52 	bl	8008e80 <HAL_RCCEx_PeriphCLKConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013e2:	f002 f8bb 	bl	800355c <Error_Handler>
  }
}
 80013e6:	bf00      	nop
 80013e8:	3798      	adds	r7, #152	; 0x98
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	00d030a1 	.word	0x00d030a1

080013f4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <MX_ADC2_Init+0xb4>)
 800140c:	4a27      	ldr	r2, [pc, #156]	; (80014ac <MX_ADC2_Init+0xb8>)
 800140e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <MX_ADC2_Init+0xb4>)
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001416:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <MX_ADC2_Init+0xb4>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <MX_ADC2_Init+0xb4>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <MX_ADC2_Init+0xb4>)
 8001424:	2200      	movs	r2, #0
 8001426:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_ADC2_Init+0xb4>)
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_ADC2_Init+0xb4>)
 8001432:	2200      	movs	r2, #0
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_ADC2_Init+0xb4>)
 8001438:	2201      	movs	r2, #1
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_ADC2_Init+0xb4>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_ADC2_Init+0xb4>)
 8001444:	2201      	movs	r2, #1
 8001446:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_ADC2_Init+0xb4>)
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_ADC2_Init+0xb4>)
 8001452:	2204      	movs	r2, #4
 8001454:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_ADC2_Init+0xb4>)
 8001458:	2200      	movs	r2, #0
 800145a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_ADC2_Init+0xb4>)
 800145e:	2200      	movs	r2, #0
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001462:	4811      	ldr	r0, [pc, #68]	; (80014a8 <MX_ADC2_Init+0xb4>)
 8001464:	f002 fe56 	bl	8004114 <HAL_ADC_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800146e:	f002 f875 	bl	800355c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001472:	230b      	movs	r3, #11
 8001474:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001476:	2301      	movs	r3, #1
 8001478:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	; (80014a8 <MX_ADC2_Init+0xb4>)
 8001490:	f003 fc96 	bl	8004dc0 <HAL_ADC_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800149a:	f002 f85f 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000498 	.word	0x20000498
 80014ac:	50000100 	.word	0x50000100

080014b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <MX_CRC_Init+0x3c>)
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <MX_CRC_Init+0x40>)
 80014b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_CRC_Init+0x3c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <MX_CRC_Init+0x3c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_CRC_Init+0x3c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <MX_CRC_Init+0x3c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_CRC_Init+0x3c>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_CRC_Init+0x3c>)
 80014da:	f004 f907 	bl	80056ec <HAL_CRC_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014e4:	f002 f83a 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200004e8 	.word	0x200004e8
 80014f0:	40023000 	.word	0x40023000

080014f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_I2C1_Init+0x74>)
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <MX_I2C1_Init+0x78>)
 80014fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_I2C1_Init+0x74>)
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <MX_I2C1_Init+0x7c>)
 8001502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_I2C1_Init+0x74>)
 800150c:	2201      	movs	r2, #1
 800150e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_I2C1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_I2C1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_I2C1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_I2C1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <MX_I2C1_Init+0x74>)
 8001530:	f004 fecc 	bl	80062cc <HAL_I2C_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800153a:	f002 f80f 	bl	800355c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153e:	2100      	movs	r1, #0
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <MX_I2C1_Init+0x74>)
 8001542:	f006 f949 	bl	80077d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800154c:	f002 f806 	bl	800355c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001550:	2100      	movs	r1, #0
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_I2C1_Init+0x74>)
 8001554:	f006 f98b 	bl	800786e <HAL_I2CEx_ConfigDigitalFilter>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800155e:	f001 fffd 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000050c 	.word	0x2000050c
 800156c:	40005400 	.word	0x40005400
 8001570:	2000090e 	.word	0x2000090e

08001574 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_SPI1_Init+0x74>)
 800157a:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <MX_SPI1_Init+0x78>)
 800157c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_SPI1_Init+0x74>)
 8001580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001584:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_SPI1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_SPI1_Init+0x74>)
 800158e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001592:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_SPI1_Init+0x74>)
 8001596:	2202      	movs	r2, #2
 8001598:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_SPI1_Init+0x74>)
 800159c:	2201      	movs	r2, #1
 800159e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_SPI1_Init+0x74>)
 80015a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_SPI1_Init+0x74>)
 80015aa:	2228      	movs	r2, #40	; 0x28
 80015ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_SPI1_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_SPI1_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_SPI1_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_SPI1_Init+0x74>)
 80015c2:	2207      	movs	r2, #7
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_SPI1_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_SPI1_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_SPI1_Init+0x74>)
 80015d4:	f007 fe72 	bl	80092bc <HAL_SPI_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015de:	f001 ffbd 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000560 	.word	0x20000560
 80015ec:	40013000 	.word	0x40013000

080015f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b09a      	sub	sp, #104	; 0x68
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	615a      	str	r2, [r3, #20]
 8001622:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	222c      	movs	r2, #44	; 0x2c
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f00e fd79 	bl	8010122 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001630:	4b43      	ldr	r3, [pc, #268]	; (8001740 <MX_TIM1_Init+0x150>)
 8001632:	4a44      	ldr	r2, [pc, #272]	; (8001744 <MX_TIM1_Init+0x154>)
 8001634:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001636:	4b42      	ldr	r3, [pc, #264]	; (8001740 <MX_TIM1_Init+0x150>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b40      	ldr	r3, [pc, #256]	; (8001740 <MX_TIM1_Init+0x150>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <MX_TIM1_Init+0x150>)
 8001644:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001648:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <MX_TIM1_Init+0x150>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001650:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <MX_TIM1_Init+0x150>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <MX_TIM1_Init+0x150>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800165c:	4838      	ldr	r0, [pc, #224]	; (8001740 <MX_TIM1_Init+0x150>)
 800165e:	f008 fd63 	bl	800a128 <HAL_TIM_Base_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001668:	f001 ff78 	bl	800355c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001670:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001672:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001676:	4619      	mov	r1, r3
 8001678:	4831      	ldr	r0, [pc, #196]	; (8001740 <MX_TIM1_Init+0x150>)
 800167a:	f009 fb17 	bl	800acac <HAL_TIM_ConfigClockSource>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001684:	f001 ff6a 	bl	800355c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001688:	482d      	ldr	r0, [pc, #180]	; (8001740 <MX_TIM1_Init+0x150>)
 800168a:	f008 ff6d 	bl	800a568 <HAL_TIM_PWM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001694:	f001 ff62 	bl	800355c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016a8:	4619      	mov	r1, r3
 80016aa:	4825      	ldr	r0, [pc, #148]	; (8001740 <MX_TIM1_Init+0x150>)
 80016ac:	f00a f90e 	bl	800b8cc <HAL_TIMEx_MasterConfigSynchronization>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80016b6:	f001 ff51 	bl	800355c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ba:	2360      	movs	r3, #96	; 0x60
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c2:	2300      	movs	r3, #0
 80016c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016c6:	2300      	movs	r3, #0
 80016c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016da:	2200      	movs	r2, #0
 80016dc:	4619      	mov	r1, r3
 80016de:	4818      	ldr	r0, [pc, #96]	; (8001740 <MX_TIM1_Init+0x150>)
 80016e0:	f009 f9d0 	bl	800aa84 <HAL_TIM_PWM_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80016ea:	f001 ff37 	bl	800355c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 237;
 80016fa:	23ed      	movs	r3, #237	; 0xed
 80016fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001706:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <MX_TIM1_Init+0x150>)
 8001724:	f00a f95e 	bl	800b9e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800172e:	f001 ff15 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <MX_TIM1_Init+0x150>)
 8001734:	f002 f8ac 	bl	8003890 <HAL_TIM_MspPostInit>

}
 8001738:	bf00      	nop
 800173a:	3768      	adds	r7, #104	; 0x68
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200005c4 	.word	0x200005c4
 8001744:	40012c00 	.word	0x40012c00

08001748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <MX_TIM2_Init+0x98>)
 8001768:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MX_TIM2_Init+0x98>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <MX_TIM2_Init+0x98>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <MX_TIM2_Init+0x98>)
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_TIM2_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_TIM2_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800178e:	4814      	ldr	r0, [pc, #80]	; (80017e0 <MX_TIM2_Init+0x98>)
 8001790:	f008 fcca 	bl	800a128 <HAL_TIM_Base_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800179a:	f001 fedf 	bl	800355c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	480d      	ldr	r0, [pc, #52]	; (80017e0 <MX_TIM2_Init+0x98>)
 80017ac:	f009 fa7e 	bl	800acac <HAL_TIM_ConfigClockSource>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017b6:	f001 fed1 	bl	800355c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4806      	ldr	r0, [pc, #24]	; (80017e0 <MX_TIM2_Init+0x98>)
 80017c8:	f00a f880 	bl	800b8cc <HAL_TIMEx_MasterConfigSynchronization>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017d2:	f001 fec3 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000610 	.word	0x20000610

080017e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b09a      	sub	sp, #104	; 0x68
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001804:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
 8001814:	615a      	str	r2, [r3, #20]
 8001816:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	222c      	movs	r2, #44	; 0x2c
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f00e fc7f 	bl	8010122 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001824:	4b43      	ldr	r3, [pc, #268]	; (8001934 <MX_TIM8_Init+0x150>)
 8001826:	4a44      	ldr	r2, [pc, #272]	; (8001938 <MX_TIM8_Init+0x154>)
 8001828:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1-1;
 800182a:	4b42      	ldr	r3, [pc, #264]	; (8001934 <MX_TIM8_Init+0x150>)
 800182c:	2200      	movs	r2, #0
 800182e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b40      	ldr	r3, [pc, #256]	; (8001934 <MX_TIM8_Init+0x150>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <MX_TIM8_Init+0x150>)
 8001838:	f640 620f 	movw	r2, #3599	; 0xe0f
 800183c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <MX_TIM8_Init+0x150>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001844:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <MX_TIM8_Init+0x150>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <MX_TIM8_Init+0x150>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001850:	4838      	ldr	r0, [pc, #224]	; (8001934 <MX_TIM8_Init+0x150>)
 8001852:	f008 fc69 	bl	800a128 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800185c:	f001 fe7e 	bl	800355c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001866:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800186a:	4619      	mov	r1, r3
 800186c:	4831      	ldr	r0, [pc, #196]	; (8001934 <MX_TIM8_Init+0x150>)
 800186e:	f009 fa1d 	bl	800acac <HAL_TIM_ConfigClockSource>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001878:	f001 fe70 	bl	800355c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800187c:	482d      	ldr	r0, [pc, #180]	; (8001934 <MX_TIM8_Init+0x150>)
 800187e:	f008 fe73 	bl	800a568 <HAL_TIM_PWM_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001888:	f001 fe68 	bl	800355c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001898:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800189c:	4619      	mov	r1, r3
 800189e:	4825      	ldr	r0, [pc, #148]	; (8001934 <MX_TIM8_Init+0x150>)
 80018a0:	f00a f814 	bl	800b8cc <HAL_TIMEx_MasterConfigSynchronization>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80018aa:	f001 fe57 	bl	800355c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ae:	2360      	movs	r3, #96	; 0x60
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b6:	2300      	movs	r3, #0
 80018b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ba:	2300      	movs	r3, #0
 80018bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ce:	2200      	movs	r2, #0
 80018d0:	4619      	mov	r1, r3
 80018d2:	4818      	ldr	r0, [pc, #96]	; (8001934 <MX_TIM8_Init+0x150>)
 80018d4:	f009 f8d6 	bl	800aa84 <HAL_TIM_PWM_ConfigChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80018de:	f001 fe3d 	bl	800355c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 237;
 80018ee:	23ed      	movs	r3, #237	; 0xed
 80018f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <MX_TIM8_Init+0x150>)
 8001918:	f00a f864 	bl	800b9e4 <HAL_TIMEx_ConfigBreakDeadTime>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001922:	f001 fe1b 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001926:	4803      	ldr	r0, [pc, #12]	; (8001934 <MX_TIM8_Init+0x150>)
 8001928:	f001 ffb2 	bl	8003890 <HAL_TIM_MspPostInit>

}
 800192c:	bf00      	nop
 800192e:	3768      	adds	r7, #104	; 0x68
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000065c 	.word	0x2000065c
 8001938:	40013400 	.word	0x40013400

0800193c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b09a      	sub	sp, #104	; 0x68
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001942:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001950:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800195c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
 800196c:	615a      	str	r2, [r3, #20]
 800196e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	222c      	movs	r2, #44	; 0x2c
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f00e fbd3 	bl	8010122 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800197c:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <MX_TIM15_Init+0x140>)
 800197e:	4a40      	ldr	r2, [pc, #256]	; (8001a80 <MX_TIM15_Init+0x144>)
 8001980:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1-1;
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <MX_TIM15_Init+0x140>)
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <MX_TIM15_Init+0x140>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3600-1;
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <MX_TIM15_Init+0x140>)
 8001990:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001994:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <MX_TIM15_Init+0x140>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800199c:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <MX_TIM15_Init+0x140>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <MX_TIM15_Init+0x140>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80019a8:	4834      	ldr	r0, [pc, #208]	; (8001a7c <MX_TIM15_Init+0x140>)
 80019aa:	f008 fbbd 	bl	800a128 <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80019b4:	f001 fdd2 	bl	800355c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80019be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019c2:	4619      	mov	r1, r3
 80019c4:	482d      	ldr	r0, [pc, #180]	; (8001a7c <MX_TIM15_Init+0x140>)
 80019c6:	f009 f971 	bl	800acac <HAL_TIM_ConfigClockSource>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80019d0:	f001 fdc4 	bl	800355c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80019d4:	4829      	ldr	r0, [pc, #164]	; (8001a7c <MX_TIM15_Init+0x140>)
 80019d6:	f008 fdc7 	bl	800a568 <HAL_TIM_PWM_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80019e0:	f001 fdbc 	bl	800355c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019f0:	4619      	mov	r1, r3
 80019f2:	4822      	ldr	r0, [pc, #136]	; (8001a7c <MX_TIM15_Init+0x140>)
 80019f4:	f009 ff6a 	bl	800b8cc <HAL_TIMEx_MasterConfigSynchronization>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80019fe:	f001 fdad 	bl	800355c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a02:	2360      	movs	r3, #96	; 0x60
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a22:	2200      	movs	r2, #0
 8001a24:	4619      	mov	r1, r3
 8001a26:	4815      	ldr	r0, [pc, #84]	; (8001a7c <MX_TIM15_Init+0x140>)
 8001a28:	f009 f82c 	bl	800aa84 <HAL_TIM_PWM_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001a32:	f001 fd93 	bl	800355c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 237;
 8001a42:	23ed      	movs	r3, #237	; 0xed
 8001a44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4807      	ldr	r0, [pc, #28]	; (8001a7c <MX_TIM15_Init+0x140>)
 8001a5e:	f009 ffc1 	bl	800b9e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001a68:	f001 fd78 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001a6c:	4803      	ldr	r0, [pc, #12]	; (8001a7c <MX_TIM15_Init+0x140>)
 8001a6e:	f001 ff0f 	bl	8003890 <HAL_TIM_MspPostInit>

}
 8001a72:	bf00      	nop
 8001a74:	3768      	adds	r7, #104	; 0x68
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200006a8 	.word	0x200006a8
 8001a80:	40014000 	.word	0x40014000

08001a84 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b092      	sub	sp, #72	; 0x48
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
 8001a9a:	615a      	str	r2, [r3, #20]
 8001a9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	222c      	movs	r2, #44	; 0x2c
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00e fb3c 	bl	8010122 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <MX_TIM16_Init+0xec>)
 8001aac:	4a31      	ldr	r2, [pc, #196]	; (8001b74 <MX_TIM16_Init+0xf0>)
 8001aae:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1-1;
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <MX_TIM16_Init+0xec>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <MX_TIM16_Init+0xec>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3600-1;
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <MX_TIM16_Init+0xec>)
 8001abe:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001ac2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <MX_TIM16_Init+0xec>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001aca:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <MX_TIM16_Init+0xec>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <MX_TIM16_Init+0xec>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ad6:	4826      	ldr	r0, [pc, #152]	; (8001b70 <MX_TIM16_Init+0xec>)
 8001ad8:	f008 fb26 	bl	800a128 <HAL_TIM_Base_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001ae2:	f001 fd3b 	bl	800355c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001ae6:	4822      	ldr	r0, [pc, #136]	; (8001b70 <MX_TIM16_Init+0xec>)
 8001ae8:	f008 fd3e 	bl	800a568 <HAL_TIM_PWM_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001af2:	f001 fd33 	bl	800355c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af6:	2360      	movs	r3, #96	; 0x60
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afe:	2300      	movs	r3, #0
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b02:	2300      	movs	r3, #0
 8001b04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b16:	2200      	movs	r2, #0
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4815      	ldr	r0, [pc, #84]	; (8001b70 <MX_TIM16_Init+0xec>)
 8001b1c:	f008 ffb2 	bl	800aa84 <HAL_TIM_PWM_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001b26:	f001 fd19 	bl	800355c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 237;
 8001b36:	23ed      	movs	r3, #237	; 0xed
 8001b38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4807      	ldr	r0, [pc, #28]	; (8001b70 <MX_TIM16_Init+0xec>)
 8001b52:	f009 ff47 	bl	800b9e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001b5c:	f001 fcfe 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001b60:	4803      	ldr	r0, [pc, #12]	; (8001b70 <MX_TIM16_Init+0xec>)
 8001b62:	f001 fe95 	bl	8003890 <HAL_TIM_MspPostInit>

}
 8001b66:	bf00      	nop
 8001b68:	3748      	adds	r7, #72	; 0x48
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200006f4 	.word	0x200006f4
 8001b74:	40014400 	.word	0x40014400

08001b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <MX_USART1_UART_Init+0x54>)
 8001b7e:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <MX_USART1_UART_Init+0x58>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_USART1_UART_Init+0x54>)
 8001b84:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <MX_USART1_UART_Init+0x5c>)
 8001b86:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_USART1_UART_Init+0x54>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_USART1_UART_Init+0x54>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <MX_USART1_UART_Init+0x54>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_USART1_UART_Init+0x54>)
 8001b9c:	220c      	movs	r2, #12
 8001b9e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <MX_USART1_UART_Init+0x54>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_USART1_UART_Init+0x54>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <MX_USART1_UART_Init+0x54>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_USART1_UART_Init+0x54>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	; (8001bcc <MX_USART1_UART_Init+0x54>)
 8001bba:	f009 ffdc 	bl	800bb76 <HAL_UART_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001bc4:	f001 fcca 	bl	800355c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000740 	.word	0x20000740
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	001e8480 	.word	0x001e8480

08001bd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_DMA_Init+0x48>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <MX_DMA_Init+0x48>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6153      	str	r3, [r2, #20]
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <MX_DMA_Init+0x48>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	200e      	movs	r0, #14
 8001bfc:	f003 fd4c 	bl	8005698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c00:	200e      	movs	r0, #14
 8001c02:	f003 fd65 	bl	80056d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2105      	movs	r1, #5
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f003 fd44 	bl	8005698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c10:	200f      	movs	r0, #15
 8001c12:	f003 fd5d 	bl	80056d0 <HAL_NVIC_EnableIRQ>

}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000

08001c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <MX_GPIO_Init+0xf8>)
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	4a37      	ldr	r2, [pc, #220]	; (8001d1c <MX_GPIO_Init+0xf8>)
 8001c40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c44:	6153      	str	r3, [r2, #20]
 8001c46:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <MX_GPIO_Init+0xf8>)
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <MX_GPIO_Init+0xf8>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	4a31      	ldr	r2, [pc, #196]	; (8001d1c <MX_GPIO_Init+0xf8>)
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	6153      	str	r3, [r2, #20]
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <MX_GPIO_Init+0xf8>)
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <MX_GPIO_Init+0xf8>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	4a2b      	ldr	r2, [pc, #172]	; (8001d1c <MX_GPIO_Init+0xf8>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c74:	6153      	str	r3, [r2, #20]
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <MX_GPIO_Init+0xf8>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c88:	4825      	ldr	r0, [pc, #148]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001c8a:	f004 faef 	bl	800626c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Encoder3_Pin Encoder2_Pin Encoder1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Encoder3_Pin|Encoder2_Pin|Encoder1_Pin;
 8001c8e:	f44f 5325 	mov.w	r3, #10560	; 0x2940
 8001c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	481f      	ldr	r0, [pc, #124]	; (8001d24 <MX_GPIO_Init+0x100>)
 8001ca6:	f004 f957 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder4_Pin */
  GPIO_InitStruct.Pin = Encoder4_Pin;
 8001caa:	2301      	movs	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Encoder4_GPIO_Port, &GPIO_InitStruct);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc2:	f004 f949 	bl	8005f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4810      	ldr	r0, [pc, #64]	; (8001d20 <MX_GPIO_Init+0xfc>)
 8001ce0:	f004 f93a 	bl	8005f58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2105      	movs	r1, #5
 8001ce8:	2006      	movs	r0, #6
 8001cea:	f003 fcd5 	bl	8005698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cee:	2006      	movs	r0, #6
 8001cf0:	f003 fcee 	bl	80056d0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2105      	movs	r1, #5
 8001cf8:	2017      	movs	r0, #23
 8001cfa:	f003 fccd 	bl	8005698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cfe:	2017      	movs	r0, #23
 8001d00:	f003 fce6 	bl	80056d0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2105      	movs	r1, #5
 8001d08:	2028      	movs	r0, #40	; 0x28
 8001d0a:	f003 fcc5 	bl	8005698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d0e:	2028      	movs	r0, #40	; 0x28
 8001d10:	f003 fcde 	bl	80056d0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	48000400 	.word	0x48000400
 8001d24:	48000800 	.word	0x48000800

08001d28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	//   if ( state == RUN_State ){
//		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	//   }
	  osDelay(1500);
 8001d30:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001d34:	f00b f9f6 	bl	800d124 <osDelay>
 8001d38:	e7fa      	b.n	8001d30 <StartDefaultTask+0x8>
 8001d3a:	0000      	movs	r0, r0
 8001d3c:	0000      	movs	r0, r0
	...

08001d40 <StartTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTxTask */
void StartTxTask(void const * argument)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b09a      	sub	sp, #104	; 0x68
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTxTask */
	s_Velocidad_ruedas velocidad_medida;
	s_Aceleracion aceleracion;
	u_Trama_tx trama_tx;
	trama_tx.data.u_m[0]   	= 0.0;
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
	trama_tx.data.u_m[1]   	= 0.0;
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
	trama_tx.data.u_m[2]   	= 0.0;
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
	trama_tx.data.u_m[3]   	= 0.0;
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
	trama_tx.data.a_m[0]   	= 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	84bb      	strh	r3, [r7, #36]	; 0x24
	trama_tx.data.a_m[1]   	= 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	84fb      	strh	r3, [r7, #38]	; 0x26
	trama_tx.data.a_m[2]   	= 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	853b      	strh	r3, [r7, #40]	; 0x28
	trama_tx.data.phi_m[0] 	= 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	857b      	strh	r3, [r7, #42]	; 0x2a
	trama_tx.data.phi_m[1] 	= 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	85bb      	strh	r3, [r7, #44]	; 0x2c
	trama_tx.data.phi_m[2] 	= 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	85fb      	strh	r3, [r7, #46]	; 0x2e
	trama_tx.data.i_m   	= 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	863b      	strh	r3, [r7, #48]	; 0x30
	trama_tx.data.v_bat    	= 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	867b      	strh	r3, [r7, #50]	; 0x32
	trama_tx.data.status   	= 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	86bb      	strh	r3, [r7, #52]	; 0x34
	trama_tx.data.timestamp = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
	trama_tx.data.start     = '[';
 8001d88:	235b      	movs	r3, #91	; 0x5b
 8001d8a:	60fb      	str	r3, [r7, #12]
	trama_tx.data.stop      = ']';
 8001d8c:	235d      	movs	r3, #93	; 0x5d
 8001d8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	trama_tx.data.crc      	= 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    /////////////////////////////////////////////////////////////////////////////////
    uint8_t buffer_ina[3];
    int16_t valor_corriente;
    static const uint8_t INA219_ADDR = 0x40 << 1;    // 7-bit address
    static const uint8_t MaximumExpectedCurrent = 2; // Amper
    float CurrentLSB = MaximumExpectedCurrent / 32768.0;
 8001d98:	4bb3      	ldr	r3, [pc, #716]	; (8002068 <StartTxTask+0x328>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbc9 	bl	8000534 <__aeabi_i2d>
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4bb1      	ldr	r3, [pc, #708]	; (800206c <StartTxTask+0x32c>)
 8001da8:	f7fe fd58 	bl	800085c <__aeabi_ddiv>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe ff20 	bl	8000bf8 <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	65fb      	str	r3, [r7, #92]	; 0x5c
    float Rshunt = 0.1; // ohm
 8001dbc:	4bac      	ldr	r3, [pc, #688]	; (8002070 <StartTxTask+0x330>)
 8001dbe:	65bb      	str	r3, [r7, #88]	; 0x58
    uint16_t Cal = (uint16_t)(0.04096 / (CurrentLSB * Rshunt));
 8001dc0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001dc4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dcc:	ee17 0a90 	vmov	r0, s15
 8001dd0:	f7fe fbc2 	bl	8000558 <__aeabi_f2d>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	a19b      	add	r1, pc, #620	; (adr r1, 8002048 <StartTxTask+0x308>)
 8001dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dde:	f7fe fd3d 	bl	800085c <__aeabi_ddiv>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe fee5 	bl	8000bb8 <__aeabi_d2uiz>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    // Ajusto el registro de calibracion
    buffer_ina[0] = 0x05;                // Direccion del registro de calibracion
 8001df4:	2305      	movs	r3, #5
 8001df6:	723b      	strb	r3, [r7, #8]
    buffer_ina[1] = (Cal & 0xFF00) >> 8; // MSByte del valor a escribir en el registro
 8001df8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	727b      	strb	r3, [r7, #9]
    buffer_ina[2] = Cal & 0xFF;          // LSByte del valor a escribir en el registro
 8001e04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Master_Transmit(&hi2c1, INA219_ADDR, buffer_ina, 3, 100);
 8001e0c:	4b99      	ldr	r3, [pc, #612]	; (8002074 <StartTxTask+0x334>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b299      	uxth	r1, r3
 8001e12:	f107 0208 	add.w	r2, r7, #8
 8001e16:	2364      	movs	r3, #100	; 0x64
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	4896      	ldr	r0, [pc, #600]	; (8002078 <StartTxTask+0x338>)
 8001e1e:	f004 fae5 	bl	80063ec <HAL_I2C_Master_Transmit>

    HAL_I2C_Master_Receive(&hi2c1, INA219_ADDR, buffer_ina, 2, 500);
 8001e22:	4b94      	ldr	r3, [pc, #592]	; (8002074 <StartTxTask+0x334>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b299      	uxth	r1, r3
 8001e28:	f107 0208 	add.w	r2, r7, #8
 8001e2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2302      	movs	r3, #2
 8001e34:	4890      	ldr	r0, [pc, #576]	; (8002078 <StartTxTask+0x338>)
 8001e36:	f004 fbcd 	bl	80065d4 <HAL_I2C_Master_Receive>
    valor_corriente = (int16_t)(buffer_ina[1]) << 8 | (buffer_ina[2]);
 8001e3a:	7a7b      	ldrb	r3, [r7, #9]
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	b21a      	sxth	r2, r3
 8001e40:	7abb      	ldrb	r3, [r7, #10]
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    // Muevo el puntero para medir corriente
    buffer_ina[0] = 0x04;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&hi2c1, INA219_ADDR, buffer_ina, 1, 100);
 8001e4e:	4b89      	ldr	r3, [pc, #548]	; (8002074 <StartTxTask+0x334>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b299      	uxth	r1, r3
 8001e54:	f107 0208 	add.w	r2, r7, #8
 8001e58:	2364      	movs	r3, #100	; 0x64
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	4886      	ldr	r0, [pc, #536]	; (8002078 <StartTxTask+0x338>)
 8001e60:	f004 fac4 	bl	80063ec <HAL_I2C_Master_Transmit>

    // Inicializo el adc para medir la tension de las baterias
    HAL_ADC_Start_IT(&hadc2);
 8001e64:	4885      	ldr	r0, [pc, #532]	; (800207c <StartTxTask+0x33c>)
 8001e66:	f002 fb4f 	bl	8004508 <HAL_ADC_Start_IT>
  /* Infinite loop */
    for(;;)
    {
        if ( state == RUN_State ){
 8001e6a:	4b85      	ldr	r3, [pc, #532]	; (8002080 <StartTxTask+0x340>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	f040 80e4 	bne.w	800203c <StartTxTask+0x2fc>
            // Recibo velocidad medida
            if ( xQueueReceive(myQueueVelTxHandle, &velocidad_medida, 0) == pdPASS ){
 8001e74:	4b83      	ldr	r3, [pc, #524]	; (8002084 <StartTxTask+0x344>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f00b fcac 	bl	800d7dc <xQueueReceive>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d114      	bne.n	8001eb4 <StartTxTask+0x174>
                trama_tx.data.u_m[0]   = velocidad_medida.u_1;
 8001e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e8c:	617b      	str	r3, [r7, #20]
                trama_tx.data.u_m[1]   = velocidad_medida.u_2;
 8001e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e90:	61bb      	str	r3, [r7, #24]
                trama_tx.data.u_m[2]   = velocidad_medida.u_3;
 8001e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e94:	61fb      	str	r3, [r7, #28]
                trama_tx.data.u_m[3]   = velocidad_medida.u_4;
 8001e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e98:	623b      	str	r3, [r7, #32]

                trama_tx.data.status |= 0b0000000000001000; // status velocidad medida
 8001e9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	86bb      	strh	r3, [r7, #52]	; 0x34

                // Devuelvo el semaforo, para que la tarea StartMeasureVel pueda volver a enviar un nuevo dato
                xSemaphoreGive( myBinarySemVelTxHandle ); 
 8001ea4:	4b78      	ldr	r3, [pc, #480]	; (8002088 <StartTxTask+0x348>)
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	f00b fb97 	bl	800d5e0 <xQueueGenericSend>
 8001eb2:	e004      	b.n	8001ebe <StartTxTask+0x17e>
            }
            else
            {
                trama_tx.data.status &= 0b1111111111110111; // status velocidad medida
 8001eb4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001eb6:	f023 0308 	bic.w	r3, r3, #8
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	86bb      	strh	r3, [r7, #52]	; 0x34
            }
            

            // Recibo aceleracion medida
            if ( xQueueReceive(myQueueAccelTxHandle, &aceleracion, 0) == pdPASS ){
 8001ebe:	4b73      	ldr	r3, [pc, #460]	; (800208c <StartTxTask+0x34c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00b fc87 	bl	800d7dc <xQueueReceive>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d11e      	bne.n	8001f12 <StartTxTask+0x1d2>
                //Creo la trama a transmitir
                trama_tx.data.a_m[0]   = aceleracion.a_m[0];
 8001ed4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001ed8:	84bb      	strh	r3, [r7, #36]	; 0x24
                trama_tx.data.a_m[1]   = aceleracion.a_m[1];
 8001eda:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001ede:	84fb      	strh	r3, [r7, #38]	; 0x26
                trama_tx.data.a_m[2]   = aceleracion.a_m[2];
 8001ee0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001ee4:	853b      	strh	r3, [r7, #40]	; 0x28
                trama_tx.data.phi_m[0] = aceleracion.phi_m[0];
 8001ee6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001eea:	857b      	strh	r3, [r7, #42]	; 0x2a
                trama_tx.data.phi_m[1] = aceleracion.phi_m[1];
 8001eec:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001ef0:	85bb      	strh	r3, [r7, #44]	; 0x2c
                trama_tx.data.phi_m[2] = aceleracion.phi_m[2];
 8001ef2:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001ef6:	85fb      	strh	r3, [r7, #46]	; 0x2e

                trama_tx.data.status |= 0b0000000000000100; // status IMU
 8001ef8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	86bb      	strh	r3, [r7, #52]	; 0x34

                // Devuelvo el semaforo, para que la tarea StartMeasureAccel pueda volver a enviar un nuevo dato
                xSemaphoreGive( myBinarySemAccelTxHandle );
 8001f02:	4b63      	ldr	r3, [pc, #396]	; (8002090 <StartTxTask+0x350>)
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	2300      	movs	r3, #0
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	f00b fb68 	bl	800d5e0 <xQueueGenericSend>
 8001f10:	e004      	b.n	8001f1c <StartTxTask+0x1dc>
            }
            else
            {
                trama_tx.data.status &= 0b1111111111111011; // status IMU
 8001f12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001f14:	f023 0304 	bic.w	r3, r3, #4
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	86bb      	strh	r3, [r7, #52]	; 0x34
            }
            

            // Guardo tension de las baterias en la trama a enviar
            if(flag_adc){
 8001f1c:	4b5d      	ldr	r3, [pc, #372]	; (8002094 <StartTxTask+0x354>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d033      	beq.n	8001f8c <StartTxTask+0x24c>
                trama_tx.data.v_bat = (((raw_adc_value)/4096.0)*3.3 / 0.2332)*1000;
 8001f24:	4b5c      	ldr	r3, [pc, #368]	; (8002098 <StartTxTask+0x358>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb03 	bl	8000534 <__aeabi_i2d>
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b5a      	ldr	r3, [pc, #360]	; (800209c <StartTxTask+0x35c>)
 8001f34:	f7fe fc92 	bl	800085c <__aeabi_ddiv>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	a343      	add	r3, pc, #268	; (adr r3, 8002050 <StartTxTask+0x310>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe fb5f 	bl	8000608 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	a341      	add	r3, pc, #260	; (adr r3, 8002058 <StartTxTask+0x318>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe fc80 	bl	800085c <__aeabi_ddiv>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <StartTxTask+0x360>)
 8001f6a:	f7fe fb4d 	bl	8000608 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fe1f 	bl	8000bb8 <__aeabi_d2uiz>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	867b      	strh	r3, [r7, #50]	; 0x32
                flag_adc= 0;
 8001f80:	4b44      	ldr	r3, [pc, #272]	; (8002094 <StartTxTask+0x354>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
                HAL_ADC_Start_IT(&hadc2);
 8001f86:	483d      	ldr	r0, [pc, #244]	; (800207c <StartTxTask+0x33c>)
 8001f88:	f002 fabe 	bl	8004508 <HAL_ADC_Start_IT>
            }

            // Guardo corriente de las baterias en la trama a enviar
            if (HAL_I2C_Master_Receive(&hi2c1, INA219_ADDR, buffer_ina, 2, 500) == HAL_OK){
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <StartTxTask+0x334>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b299      	uxth	r1, r3
 8001f92:	f107 0208 	add.w	r2, r7, #8
 8001f96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	4836      	ldr	r0, [pc, #216]	; (8002078 <StartTxTask+0x338>)
 8001fa0:	f004 fb18 	bl	80065d4 <HAL_I2C_Master_Receive>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d123      	bne.n	8001ff2 <StartTxTask+0x2b2>
                valor_corriente = (int16_t)(buffer_ina[0]) << 8 | (buffer_ina[1]);
 8001faa:	7a3b      	ldrb	r3, [r7, #8]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	7a7b      	ldrb	r3, [r7, #9]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                valor_corriente = valor_corriente * 0.06104;
 8001fba:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fab8 	bl	8000534 <__aeabi_i2d>
 8001fc4:	a326      	add	r3, pc, #152	; (adr r3, 8002060 <StartTxTask+0x320>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	f7fe fb1d 	bl	8000608 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe fdc7 	bl	8000b68 <__aeabi_d2iz>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                trama_tx.data.i_m = valor_corriente;
 8001fe0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001fe4:	863b      	strh	r3, [r7, #48]	; 0x30

                trama_tx.data.status |= 0b0000000000000010; // status sensor de corriente
 8001fe6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001ff0:	e004      	b.n	8001ffc <StartTxTask+0x2bc>
            }
            else
            {
                trama_tx.data.status &= 0b1111111111111101; // status sensor de corriente
 8001ff2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ff4:	f023 0302 	bic.w	r3, r3, #2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	86bb      	strh	r3, [r7, #52]	; 0x34
            }
            

            // status uart
            counter_rx_stop = counter_rx_stop + 1;
 8001ffc:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <StartTxTask+0x364>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <StartTxTask+0x364>)
 8002004:	6013      	str	r3, [r2, #0]
            if (counter_rx_stop >= 1200)
 8002006:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <StartTxTask+0x364>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800200e:	db09      	blt.n	8002024 <StartTxTask+0x2e4>
            {
                trama_tx.data.status &= 0b1111111111111110;
 8002010:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	86bb      	strh	r3, [r7, #52]	; 0x34
                counter_rx_stop = 1200;
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <StartTxTask+0x364>)
 800201c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e004      	b.n	800202e <StartTxTask+0x2ee>
            }
            else
            {
                trama_tx.data.status |= 0b0000000000000001;
 8002024:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	b29b      	uxth	r3, r3
 800202c:	86bb      	strh	r3, [r7, #52]	; 0x34
            // Recordar que se debe invertir el lugar del crc en la declaracion de la estructura tambien.
            // Ademas, descomentar la declaracion de crcTx antes del bucle for de esta task.
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Transmito la trama
            HAL_UART_Transmit_DMA(&huart1, trama_tx.string,sizeof(trama_tx.string));
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	222c      	movs	r2, #44	; 0x2c
 8002034:	4619      	mov	r1, r3
 8002036:	481c      	ldr	r0, [pc, #112]	; (80020a8 <StartTxTask+0x368>)
 8002038:	f009 fdec 	bl	800bc14 <HAL_UART_Transmit_DMA>
        }
        osDelay(100); // 200Hz
 800203c:	2064      	movs	r0, #100	; 0x64
 800203e:	f00b f871 	bl	800d124 <osDelay>
        if ( state == RUN_State ){
 8002042:	e712      	b.n	8001e6a <StartTxTask+0x12a>
 8002044:	f3af 8000 	nop.w
 8002048:	88e368f1 	.word	0x88e368f1
 800204c:	3fa4f8b5 	.word	0x3fa4f8b5
 8002050:	66666666 	.word	0x66666666
 8002054:	400a6666 	.word	0x400a6666
 8002058:	62b6ae7d 	.word	0x62b6ae7d
 800205c:	3fcdd97f 	.word	0x3fcdd97f
 8002060:	877ee4e2 	.word	0x877ee4e2
 8002064:	3faf40a2 	.word	0x3faf40a2
 8002068:	080121cd 	.word	0x080121cd
 800206c:	40e00000 	.word	0x40e00000
 8002070:	3dcccccd 	.word	0x3dcccccd
 8002074:	080121ce 	.word	0x080121ce
 8002078:	2000050c 	.word	0x2000050c
 800207c:	20000498 	.word	0x20000498
 8002080:	20000000 	.word	0x20000000
 8002084:	2000088c 	.word	0x2000088c
 8002088:	20000870 	.word	0x20000870
 800208c:	20000890 	.word	0x20000890
 8002090:	2000086c 	.word	0x2000086c
 8002094:	200008f0 	.word	0x200008f0
 8002098:	200008ec 	.word	0x200008ec
 800209c:	40b00000 	.word	0x40b00000
 80020a0:	408f4000 	.word	0x408f4000
 80020a4:	200008d4 	.word	0x200008d4
 80020a8:	20000740 	.word	0x20000740

080020ac <StartRxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRxTask */
void StartRxTask(void const * argument)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRxTask */
	uint8_t crcVal=0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t crcRx=0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
//	uint8_t crcArray[12] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

	u_Trama_rx trama_rx;
	trama_rx.data.v_y = 0.0;
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
	trama_rx.data.v_x = 0.0;
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
	trama_rx.data.w_z = 0.0;
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
	trama_rx.data.crc = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 3020 	strb.w	r3, [r7, #32]
    s_Velocidad velocidad;
    
    // Libero semaforo, para poder tomarlo en esta tarea y volver a poder tomar cada vez que la tarea StartCinematicConv la reciba.
    xSemaphoreGive( myBinarySemRxConvHandle );
 80020d8:	4b28      	ldr	r3, [pc, #160]	; (800217c <StartRxTask+0xd0>)
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	2300      	movs	r3, #0
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	f00b fa7d 	bl	800d5e0 <xQueueGenericSend>

    // Activo la recepcion de la trama por UART con DMA.
    HAL_UART_Receive_DMA(&huart1, (uint8_t *)trama_rx.string, 16);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	2210      	movs	r2, #16
 80020ec:	4619      	mov	r1, r3
 80020ee:	4824      	ldr	r0, [pc, #144]	; (8002180 <StartRxTask+0xd4>)
 80020f0:	f009 fe0c 	bl	800bd0c <HAL_UART_Receive_DMA>
//    int auxiliar = sizeof(trama_rx.string);

    /* Infinite loop */
    for(;;)
    {
	    if (RxFlag){
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <StartRxTask+0xd8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d03a      	beq.n	8002172 <StartRxTask+0xc6>
              // Si se recibe una trama
		    if ( state == RUN_State ){
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <StartRxTask+0xdc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d136      	bne.n	8002172 <StartRxTask+0xc6>
			    velocidad.v_x = trama_rx.data.v_x;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	60bb      	str	r3, [r7, #8]
			    velocidad.v_y = trama_rx.data.v_y;
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	60fb      	str	r3, [r7, #12]
			    velocidad.w_z = trama_rx.data.w_z;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	613b      	str	r3, [r7, #16]
			    crcRx = (uint8_t)trama_rx.string[12];
 8002110:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
//			    crcArray[8]  = (uint8_t)trama_rx.string[8];
//			    crcArray[9]  = (uint8_t)trama_rx.string[9];
//			    crcArray[10] = (uint8_t)trama_rx.string[10];
//			    crcArray[11] = (uint8_t)trama_rx.string[11];
  
			    crcVal = HAL_CRC_Accumulate(&hcrc, (uint8_t *)trama_rx.string, 12);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	220c      	movs	r2, #12
 800211e:	4619      	mov	r1, r3
 8002120:	481a      	ldr	r0, [pc, #104]	; (800218c <StartRxTask+0xe0>)
 8002122:	f003 fb47 	bl	80057b4 <HAL_CRC_Accumulate>
 8002126:	4603      	mov	r3, r0
 8002128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//     crcVal = HAL_CRC_Accumulate(&hcrc, crcArray, 12);
  
//			    if( crcVal == crcRx){
				    if( xSemaphoreTake( myBinarySemRxConvHandle, ( TickType_t ) 0 ) == pdTRUE ){
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <StartRxTask+0xd0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f00b fc32 	bl	800d99c <xQueueSemaphoreTake>
 8002138:	4603      	mov	r3, r0
 800213a:	2b01      	cmp	r3, #1
 800213c:	d108      	bne.n	8002150 <StartRxTask+0xa4>
					    if(xQueueSend(myQueueRxConvHandle, &velocidad, portMAX_DELAY) == pdPASS){
 800213e:	4b14      	ldr	r3, [pc, #80]	; (8002190 <StartRxTask+0xe4>)
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	f107 0108 	add.w	r1, r7, #8
 8002146:	2300      	movs	r3, #0
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	f00b fa48 	bl	800d5e0 <xQueueGenericSend>
				    }
//			    }

                // Reinicio el registro INIT del modulo del crc para volver a calcular la proxima vez.
                // Si no se realiza, el calculo del crc comienza con el valor final del calculo anterior.
			    hcrc.Instance->INIT = 0x00000000;
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <StartRxTask+0xe0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]

                // Reseteo la flag para evitar que se entre nuevamente a este bucle sin datos nuevos recibidos.
			    RxFlag = RESET;
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <StartRxTask+0xd8>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]

                // Status
                counter_rx_stop = 0;
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <StartRxTask+0xe8>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

                HAL_UART_Receive_DMA(&huart1, (uint8_t *)trama_rx.string, 16);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2210      	movs	r2, #16
 800216a:	4619      	mov	r1, r3
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <StartRxTask+0xd4>)
 800216e:	f009 fdcd 	bl	800bd0c <HAL_UART_Receive_DMA>
			//     RxFlag = RESET;
		    // }
            ///////////////////////////////////////////////////////////////////////////
	    }

        osDelay(5);
 8002172:	2005      	movs	r0, #5
 8002174:	f00a ffd6 	bl	800d124 <osDelay>
	    if (RxFlag){
 8002178:	e7bc      	b.n	80020f4 <StartRxTask+0x48>
 800217a:	bf00      	nop
 800217c:	20000878 	.word	0x20000878
 8002180:	20000740 	.word	0x20000740
 8002184:	200008d8 	.word	0x200008d8
 8002188:	20000000 	.word	0x20000000
 800218c:	200004e8 	.word	0x200004e8
 8002190:	20000880 	.word	0x20000880
 8002194:	200008d4 	.word	0x200008d4

08002198 <StartCinematicConv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCinematicConv */
void StartCinematicConv(void const * argument)
{
 8002198:	b5b0      	push	{r4, r5, r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCinematicConv */
	float l = 0.15;
 80021a0:	4bb9      	ldr	r3, [pc, #740]	; (8002488 <StartCinematicConv+0x2f0>)
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	float w = 0.125;
 80021a4:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
	float r = 0.05;
 80021aa:	4bb8      	ldr	r3, [pc, #736]	; (800248c <StartCinematicConv+0x2f4>)
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24

	s_Velocidad velocidad_recibida;
	s_Velocidad_ruedas velocidad_convertida;

    // Devuelvo semaforo para poder tomarlo en esta tarea. Este semaforo se recibe cada vez que la tarea StartControlVel lo devuelve
	xSemaphoreGive( myBinarySemConvControlHandle );
 80021ae:	4bb8      	ldr	r3, [pc, #736]	; (8002490 <StartCinematicConv+0x2f8>)
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	2300      	movs	r3, #0
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	f00b fa12 	bl	800d5e0 <xQueueGenericSend>

	/* Infinite loop */
	for(;;)
	{
		if ( state == RUN_State){
 80021bc:	4bb5      	ldr	r3, [pc, #724]	; (8002494 <StartCinematicConv+0x2fc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	f040 8159 	bne.w	8002478 <StartCinematicConv+0x2e0>
			// Recibo las velocidades comandadas por el CAN, desde la tarea StartRxTask
			if ( xQueueReceive(myQueueRxConvHandle, &velocidad_recibida, 0) == pdPASS ){
 80021c6:	4bb4      	ldr	r3, [pc, #720]	; (8002498 <StartCinematicConv+0x300>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f107 0118 	add.w	r1, r7, #24
 80021ce:	2200      	movs	r2, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f00b fb03 	bl	800d7dc <xQueueReceive>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f040 814d 	bne.w	8002478 <StartCinematicConv+0x2e0>
				// Convierto velocidades del robot en velocidades angulares de cada rueda.
				velocidad_convertida.u_1 = ((1.0/(r*1.0))*((-l-w)*velocidad_recibida.w_z + velocidad_recibida.v_x - velocidad_recibida.v_y));
 80021de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021e0:	f7fe f9ba 	bl	8000558 <__aeabi_f2d>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	f04f 0000 	mov.w	r0, #0
 80021ec:	49ab      	ldr	r1, [pc, #684]	; (800249c <StartCinematicConv+0x304>)
 80021ee:	f7fe fb35 	bl	800085c <__aeabi_ddiv>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4614      	mov	r4, r2
 80021f8:	461d      	mov	r5, r3
 80021fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021fe:	eeb1 7a67 	vneg.f32	s14, s15
 8002202:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002206:	ee37 7a67 	vsub.f32	s14, s14, s15
 800220a:	edd7 7a08 	vldr	s15, [r7, #32]
 800220e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002212:	edd7 7a06 	vldr	s15, [r7, #24]
 8002216:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221a:	edd7 7a07 	vldr	s15, [r7, #28]
 800221e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002222:	ee17 0a90 	vmov	r0, s15
 8002226:	f7fe f997 	bl	8000558 <__aeabi_f2d>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4620      	mov	r0, r4
 8002230:	4629      	mov	r1, r5
 8002232:	f7fe f9e9 	bl	8000608 <__aeabi_dmul>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe fcdb 	bl	8000bf8 <__aeabi_d2f>
 8002242:	4603      	mov	r3, r0
 8002244:	60bb      	str	r3, [r7, #8]
				velocidad_convertida.u_2 = ((1.0/(r*1.0))*((l+w)*velocidad_recibida.w_z + velocidad_recibida.v_x + velocidad_recibida.v_y));
 8002246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002248:	f7fe f986 	bl	8000558 <__aeabi_f2d>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	f04f 0000 	mov.w	r0, #0
 8002254:	4991      	ldr	r1, [pc, #580]	; (800249c <StartCinematicConv+0x304>)
 8002256:	f7fe fb01 	bl	800085c <__aeabi_ddiv>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4614      	mov	r4, r2
 8002260:	461d      	mov	r5, r3
 8002262:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002266:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800226a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800226e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002272:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002276:	edd7 7a06 	vldr	s15, [r7, #24]
 800227a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800227e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002286:	ee17 0a90 	vmov	r0, s15
 800228a:	f7fe f965 	bl	8000558 <__aeabi_f2d>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4620      	mov	r0, r4
 8002294:	4629      	mov	r1, r5
 8002296:	f7fe f9b7 	bl	8000608 <__aeabi_dmul>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	f7fe fca9 	bl	8000bf8 <__aeabi_d2f>
 80022a6:	4603      	mov	r3, r0
 80022a8:	60fb      	str	r3, [r7, #12]
				velocidad_convertida.u_3 = ((1.0/(r*1.0))*((l+w)*velocidad_recibida.w_z + velocidad_recibida.v_x - velocidad_recibida.v_y));
 80022aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022ac:	f7fe f954 	bl	8000558 <__aeabi_f2d>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	f04f 0000 	mov.w	r0, #0
 80022b8:	4978      	ldr	r1, [pc, #480]	; (800249c <StartCinematicConv+0x304>)
 80022ba:	f7fe facf 	bl	800085c <__aeabi_ddiv>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4614      	mov	r4, r2
 80022c4:	461d      	mov	r5, r3
 80022c6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80022ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80022d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022da:	edd7 7a06 	vldr	s15, [r7, #24]
 80022de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80022e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ea:	ee17 0a90 	vmov	r0, s15
 80022ee:	f7fe f933 	bl	8000558 <__aeabi_f2d>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4620      	mov	r0, r4
 80022f8:	4629      	mov	r1, r5
 80022fa:	f7fe f985 	bl	8000608 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	f7fe fc77 	bl	8000bf8 <__aeabi_d2f>
 800230a:	4603      	mov	r3, r0
 800230c:	613b      	str	r3, [r7, #16]
				velocidad_convertida.u_4 = ((1.0/(r*1.0))*((-l-w)*velocidad_recibida.w_z + velocidad_recibida.v_x + velocidad_recibida.v_y));
 800230e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002310:	f7fe f922 	bl	8000558 <__aeabi_f2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	f04f 0000 	mov.w	r0, #0
 800231c:	495f      	ldr	r1, [pc, #380]	; (800249c <StartCinematicConv+0x304>)
 800231e:	f7fe fa9d 	bl	800085c <__aeabi_ddiv>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4614      	mov	r4, r2
 8002328:	461d      	mov	r5, r3
 800232a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800232e:	eeb1 7a67 	vneg.f32	s14, s15
 8002332:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800233a:	edd7 7a08 	vldr	s15, [r7, #32]
 800233e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002342:	edd7 7a06 	vldr	s15, [r7, #24]
 8002346:	ee37 7a27 	vadd.f32	s14, s14, s15
 800234a:	edd7 7a07 	vldr	s15, [r7, #28]
 800234e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002352:	ee17 0a90 	vmov	r0, s15
 8002356:	f7fe f8ff 	bl	8000558 <__aeabi_f2d>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fe f951 	bl	8000608 <__aeabi_dmul>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc43 	bl	8000bf8 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	617b      	str	r3, [r7, #20]

                // Aplico conversion de rad/seg a rpm.
				velocidad_convertida.u_1 = (velocidad_convertida.u_1 * 30.0)/3.1415;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe f8ed 	bl	8000558 <__aeabi_f2d>
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <StartCinematicConv+0x308>)
 8002384:	f7fe f940 	bl	8000608 <__aeabi_dmul>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	a33b      	add	r3, pc, #236	; (adr r3, 8002480 <StartCinematicConv+0x2e8>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fe fa61 	bl	800085c <__aeabi_ddiv>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f7fe fc29 	bl	8000bf8 <__aeabi_d2f>
 80023a6:	4603      	mov	r3, r0
 80023a8:	60bb      	str	r3, [r7, #8]
				velocidad_convertida.u_2 = (velocidad_convertida.u_2 * 30.0)/3.1415;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f8d3 	bl	8000558 <__aeabi_f2d>
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <StartCinematicConv+0x308>)
 80023b8:	f7fe f926 	bl	8000608 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	a32e      	add	r3, pc, #184	; (adr r3, 8002480 <StartCinematicConv+0x2e8>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe fa47 	bl	800085c <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe fc0f 	bl	8000bf8 <__aeabi_d2f>
 80023da:	4603      	mov	r3, r0
 80023dc:	60fb      	str	r3, [r7, #12]
				velocidad_convertida.u_3 = (velocidad_convertida.u_3 * 30.0)/3.1415;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f8b9 	bl	8000558 <__aeabi_f2d>
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <StartCinematicConv+0x308>)
 80023ec:	f7fe f90c 	bl	8000608 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	a321      	add	r3, pc, #132	; (adr r3, 8002480 <StartCinematicConv+0x2e8>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	f7fe fa2d 	bl	800085c <__aeabi_ddiv>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f7fe fbf5 	bl	8000bf8 <__aeabi_d2f>
 800240e:	4603      	mov	r3, r0
 8002410:	613b      	str	r3, [r7, #16]
                velocidad_convertida.u_4 = (velocidad_convertida.u_4 * 30.0)/3.1415;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f89f 	bl	8000558 <__aeabi_f2d>
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <StartCinematicConv+0x308>)
 8002420:	f7fe f8f2 	bl	8000608 <__aeabi_dmul>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	a314      	add	r3, pc, #80	; (adr r3, 8002480 <StartCinematicConv+0x2e8>)
 800242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002432:	f7fe fa13 	bl	800085c <__aeabi_ddiv>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fbdb 	bl	8000bf8 <__aeabi_d2f>
 8002442:	4603      	mov	r3, r0
 8002444:	617b      	str	r3, [r7, #20]

                // Devuelvo el semaforo a la tarea StartRxTask, para no entrar en esta parte del codigo hasta no tener un dato nuevo
				xSemaphoreGive( myBinarySemRxConvHandle );
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <StartCinematicConv+0x30c>)
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	2300      	movs	r3, #0
 800244c:	2200      	movs	r2, #0
 800244e:	2100      	movs	r1, #0
 8002450:	f00b f8c6 	bl	800d5e0 <xQueueGenericSend>

				// Una vez recibidas y convertidas estas velocidades, las envio a la tarea del StartControlVel
				if( xSemaphoreTake( myBinarySemConvControlHandle, ( TickType_t ) 0 ) == pdTRUE ){
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <StartCinematicConv+0x2f8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f00b fa9e 	bl	800d99c <xQueueSemaphoreTake>
 8002460:	4603      	mov	r3, r0
 8002462:	2b01      	cmp	r3, #1
 8002464:	d108      	bne.n	8002478 <StartCinematicConv+0x2e0>
					if( xQueueSend(myQueueConvControlHandle, &velocidad_convertida, portMAX_DELAY) == pdPASS ){
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <StartCinematicConv+0x310>)
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	f107 0108 	add.w	r1, r7, #8
 800246e:	2300      	movs	r3, #0
 8002470:	f04f 32ff 	mov.w	r2, #4294967295
 8002474:	f00b f8b4 	bl	800d5e0 <xQueueGenericSend>
                        // Debug
					}
				}
			}
		}
		osDelay(5);
 8002478:	2005      	movs	r0, #5
 800247a:	f00a fe53 	bl	800d124 <osDelay>
		if ( state == RUN_State){
 800247e:	e69d      	b.n	80021bc <StartCinematicConv+0x24>
 8002480:	c083126f 	.word	0xc083126f
 8002484:	400921ca 	.word	0x400921ca
 8002488:	3e19999a 	.word	0x3e19999a
 800248c:	3d4ccccd 	.word	0x3d4ccccd
 8002490:	2000087c 	.word	0x2000087c
 8002494:	20000000 	.word	0x20000000
 8002498:	20000880 	.word	0x20000880
 800249c:	3ff00000 	.word	0x3ff00000
 80024a0:	403e0000 	.word	0x403e0000
 80024a4:	20000878 	.word	0x20000878
 80024a8:	20000884 	.word	0x20000884
 80024ac:	00000000 	.word	0x00000000

080024b0 <StartControlVel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlVel */
void StartControlVel(void const * argument)
{
 80024b0:	b5b0      	push	{r4, r5, r7, lr}
 80024b2:	b0b0      	sub	sp, #192	; 0xc0
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlVel */
//	char str[100];
	s_Velocidad_ruedas velocidad_medida;
	s_Velocidad_ruedas velocidad_ref;
	s_Velocidad_ruedas error_velocidad;
	int u_1_duty = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int u_2_duty = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	int u_3_duty = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int u_4_duty = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    // Parametros para realizar el control
	float Kp, Ki, Kt, T;
	float entrada_PI[4] = {0.0, 0.0, 0.0, 0.0};
 80024d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
	float salida_PI[4] = {0.0, 0.0, 0.0, 0.0};
 80024de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
	float H[4] = {0.0,0.0, 0.0, 0.0};
 80024ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
	float H_1[4] = {0.0,0.0,0.0,0.0};
 80024fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
	float I[4] = {0.0,0.0,0.0,0.0};
 8002508:	f107 0318 	add.w	r3, r7, #24
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
	float P[4] = {0.0,0.0,0.0,0.0};
 8002516:	f107 0308 	add.w	r3, r7, #8
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]

	T = 1.0/1000.0;
 8002524:	4b84      	ldr	r3, [pc, #528]	; (8002738 <StartControlVel+0x288>)
 8002526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    Kp = 0.00282970945592438;
 800252a:	4b84      	ldr	r3, [pc, #528]	; (800273c <StartControlVel+0x28c>)
 800252c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    // Kp = 4.286;
    Ki = 7.4971179443538;
 8002530:	4b83      	ldr	r3, [pc, #524]	; (8002740 <StartControlVel+0x290>)
 8002532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    // Ki = 306.143;
	Kt = Ki * T/2.0;
 8002536:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800253a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800253e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002542:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002546:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800254a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

    // Inicializo las variables
	velocidad_ref.u_1 = 0.0;
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	67bb      	str	r3, [r7, #120]	; 0x78
	velocidad_ref.u_2 = 0.0;
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	67fb      	str	r3, [r7, #124]	; 0x7c
	velocidad_ref.u_3 = 0.0;
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	velocidad_ref.u_4 = 0.0;
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	velocidad_medida.u_1 = 0.0;
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	velocidad_medida.u_2 = 0.0;
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	velocidad_medida.u_3 = 0.0;
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	velocidad_medida.u_4 = 0.0;
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // Obtengo el valor que representa el duty maximo para cada PWM 
    uint16_t maxDuty  = htim1.Instance->ARR + 1;
 800258a:	4b6e      	ldr	r3, [pc, #440]	; (8002744 <StartControlVel+0x294>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	b29b      	uxth	r3, r3
 8002592:	3301      	adds	r3, #1
 8002594:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

    // Le asigno a cada timer el valor que deja los motores quietos.
	TIM1->CCR1  = maxDuty/2;
 8002598:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800259c:	085b      	lsrs	r3, r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	4b69      	ldr	r3, [pc, #420]	; (8002748 <StartControlVel+0x298>)
 80025a2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR1  = maxDuty/2;
 80025a4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80025a8:	085b      	lsrs	r3, r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	4b67      	ldr	r3, [pc, #412]	; (800274c <StartControlVel+0x29c>)
 80025ae:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR1 = maxDuty/2;
 80025b0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b65      	ldr	r3, [pc, #404]	; (8002750 <StartControlVel+0x2a0>)
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34
	TIM16->CCR1 = maxDuty/2;
 80025bc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	4b63      	ldr	r3, [pc, #396]	; (8002754 <StartControlVel+0x2a4>)
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80025c8:	2100      	movs	r1, #0
 80025ca:	485e      	ldr	r0, [pc, #376]	; (8002744 <StartControlVel+0x294>)
 80025cc:	f008 f82e 	bl	800a62c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80025d0:	2100      	movs	r1, #0
 80025d2:	4861      	ldr	r0, [pc, #388]	; (8002758 <StartControlVel+0x2a8>)
 80025d4:	f008 f82a 	bl	800a62c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80025d8:	2100      	movs	r1, #0
 80025da:	4860      	ldr	r0, [pc, #384]	; (800275c <StartControlVel+0x2ac>)
 80025dc:	f008 f826 	bl	800a62c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80025e0:	2100      	movs	r1, #0
 80025e2:	485f      	ldr	r0, [pc, #380]	; (8002760 <StartControlVel+0x2b0>)
 80025e4:	f008 f822 	bl	800a62c <HAL_TIM_PWM_Start>

    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80025e8:	2100      	movs	r1, #0
 80025ea:	4856      	ldr	r0, [pc, #344]	; (8002744 <StartControlVel+0x294>)
 80025ec:	f009 f8b4 	bl	800b758 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 80025f0:	2100      	movs	r1, #0
 80025f2:	4859      	ldr	r0, [pc, #356]	; (8002758 <StartControlVel+0x2a8>)
 80025f4:	f009 f8b0 	bl	800b758 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 80025f8:	2100      	movs	r1, #0
 80025fa:	4858      	ldr	r0, [pc, #352]	; (800275c <StartControlVel+0x2ac>)
 80025fc:	f009 f8ac 	bl	800b758 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 8002600:	2100      	movs	r1, #0
 8002602:	4857      	ldr	r0, [pc, #348]	; (8002760 <StartControlVel+0x2b0>)
 8002604:	f009 f8a8 	bl	800b758 <HAL_TIMEx_PWMN_Start>

    float vel_maxima = 200.0;
 8002608:	4b56      	ldr	r3, [pc, #344]	; (8002764 <StartControlVel+0x2b4>)
 800260a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
//	float aux;
  /* Infinite loop */
  for(;;)
  {
	if (state == RUN_State){
 800260e:	4b56      	ldr	r3, [pc, #344]	; (8002768 <StartControlVel+0x2b8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	f040 84f9 	bne.w	800300a <StartControlVel+0xb5a>
		// Recibo la velocidad de referencia
		if ( xQueueReceive(myQueueConvControlHandle, &velocidad_ref, 0) == pdPASS ){
 8002618:	4b54      	ldr	r3, [pc, #336]	; (800276c <StartControlVel+0x2bc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002620:	2200      	movs	r2, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f00b f8da 	bl	800d7dc <xQueueReceive>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	d106      	bne.n	800263c <StartControlVel+0x18c>
		//		  sprintf(str, "ControlVel: Velocidad ref:\nw_00=%d w_01=%d w_10=%d w_11=%d", velocidad_ref.w_00,
		//																					  velocidad_ref.w_01,
		//																					  velocidad_ref.w_10,
		//																					  velocidad_ref.w_11);
		//		  HAL_UART_Transmit(&huart3,str,sizeof(str),100);
			xSemaphoreGive(myBinarySemConvControlHandle);
 800262e:	4b50      	ldr	r3, [pc, #320]	; (8002770 <StartControlVel+0x2c0>)
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	2300      	movs	r3, #0
 8002634:	2200      	movs	r2, #0
 8002636:	2100      	movs	r1, #0
 8002638:	f00a ffd2 	bl	800d5e0 <xQueueGenericSend>
		}


		// Recibo la velocidad medida
		if ( xQueueReceive(myQueueVelControlHandle, &velocidad_medida, 0) == pdPASS ){
 800263c:	4b4d      	ldr	r3, [pc, #308]	; (8002774 <StartControlVel+0x2c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002644:	2200      	movs	r2, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f00b f8c8 	bl	800d7dc <xQueueReceive>
 800264c:	4603      	mov	r3, r0
 800264e:	2b01      	cmp	r3, #1
 8002650:	d106      	bne.n	8002660 <StartControlVel+0x1b0>
		//		  sprintf(str, "ControlVel: Velocidad medida:\nw_00=%d w_01=%d w_10=%d w_11=%d", velocidad_medida.w_00,
		//		  			  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 velocidad_medida.w_01,
		//		  			  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 velocidad_medida.w_10,
		//		  			  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 velocidad_medida.w_11);
		//		  HAL_UART_Transmit(&huart3,str,sizeof(str),100);
            xSemaphoreGive(myBinarySemVelControlHandle);
 8002652:	4b49      	ldr	r3, [pc, #292]	; (8002778 <StartControlVel+0x2c8>)
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	2300      	movs	r3, #0
 8002658:	2200      	movs	r2, #0
 800265a:	2100      	movs	r1, #0
 800265c:	f00a ffc0 	bl	800d5e0 <xQueueGenericSend>
            ////////////////////////////////////////////////////////////////////////////////////////////////////
            ////////////////// Rueda 1 ///////////////////////
            //////////////////////////////////////////////////

            /////////// Sentido de giro positivo /////////////
            if (velocidad_ref.u_1 >= 0.0)
 8002660:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	db08      	blt.n	8002680 <StartControlVel+0x1d0>
            {
                error_velocidad.u_1 = velocidad_ref.u_1 - velocidad_medida.u_1;
 800266e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002672:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 800267e:	e009      	b.n	8002694 <StartControlVel+0x1e4>
	        }
	        /////////// Sentido de giro negativo /////////////
	        else
	        {
	            error_velocidad.u_1 = -(velocidad_ref.u_1) - velocidad_medida.u_1;
 8002680:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002684:	eeb1 7a67 	vneg.f32	s14, s15
 8002688:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800268c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002690:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	        }
	        // A partir de acá el control no distingue entre vel_ref positiva o negativa
	        entrada_PI[0] = error_velocidad.u_1;
 8002694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002696:	65bb      	str	r3, [r7, #88]	; 0x58
	        // Bloque P:
	        P[0] = entrada_PI[0] * Kp;
 8002698:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800269c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80026a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a4:	edc7 7a02 	vstr	s15, [r7, #8]
	        // Anti-windup -> el acumulador (integrador del PI) solo funcionará cuando el error de velocidad sea menor a 20rpm
	        if ((error_velocidad.u_1 < 50.0) && (error_velocidad.u_1 > -50.0))
 80026a8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026ac:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800277c <StartControlVel+0x2cc>
 80026b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b8:	d511      	bpl.n	80026de <StartControlVel+0x22e>
 80026ba:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026be:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002780 <StartControlVel+0x2d0>
 80026c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ca:	dd08      	ble.n	80026de <StartControlVel+0x22e>
	            H[0] = entrada_PI[0] + H_1[0];
 80026cc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80026d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80026dc:	e005      	b.n	80026ea <StartControlVel+0x23a>
	        else
	        {
	            H[0] = 0.0;
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	63bb      	str	r3, [r7, #56]	; 0x38
	            H_1[0] = 0.0;
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
	        }
	        // Bloque I:
	        I[0] = Kt * (H[0] + H_1[0]);
 80026ea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80026ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80026fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fe:	edc7 7a06 	vstr	s15, [r7, #24]
	        // Sumo la parte proporcional e integral para obtener el PI completo
	        salida_PI[0] = P[0] + I[0];
 8002702:	ed97 7a02 	vldr	s14, [r7, #8]
 8002706:	edd7 7a06 	vldr	s15, [r7, #24]
 800270a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800270e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	        H_1[0] = H[0];
 8002712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28

            if (velocidad_ref.u_1 >= 0.0)
 8002716:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800271a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	db2f      	blt.n	8002784 <StartControlVel+0x2d4>
                salida_PI[0] = velocidad_ref.u_1 + salida_PI[0];
 8002724:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002728:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800272c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002730:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 8002734:	e02e      	b.n	8002794 <StartControlVel+0x2e4>
 8002736:	bf00      	nop
 8002738:	3a83126f 	.word	0x3a83126f
 800273c:	3b3972a6 	.word	0x3b3972a6
 8002740:	40efe864 	.word	0x40efe864
 8002744:	200005c4 	.word	0x200005c4
 8002748:	40012c00 	.word	0x40012c00
 800274c:	40013400 	.word	0x40013400
 8002750:	40014000 	.word	0x40014000
 8002754:	40014400 	.word	0x40014400
 8002758:	2000065c 	.word	0x2000065c
 800275c:	200006a8 	.word	0x200006a8
 8002760:	200006f4 	.word	0x200006f4
 8002764:	43480000 	.word	0x43480000
 8002768:	20000000 	.word	0x20000000
 800276c:	20000884 	.word	0x20000884
 8002770:	2000087c 	.word	0x2000087c
 8002774:	20000888 	.word	0x20000888
 8002778:	20000874 	.word	0x20000874
 800277c:	42480000 	.word	0x42480000
 8002780:	c2480000 	.word	0xc2480000
            else
                salida_PI[0] = velocidad_ref.u_1 - salida_PI[0];
 8002784:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002788:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800278c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002790:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

            // limitador
            if (salida_PI[0] < -vel_maxima)
 8002794:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002798:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800279c:	eef1 7a67 	vneg.f32	s15, s15
 80027a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	d505      	bpl.n	80027b6 <StartControlVel+0x306>
                salida_PI[0] = -vel_maxima;
 80027aa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80027ae:	eef1 7a67 	vneg.f32	s15, s15
 80027b2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
            if (salida_PI[0] > vel_maxima)
 80027b6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80027ba:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80027be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c6:	d502      	bpl.n	80027ce <StartControlVel+0x31e>
                salida_PI[0] = vel_maxima;
 80027c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027cc:	64bb      	str	r3, [r7, #72]	; 0x48

            // Conversion: velocidad en rpm [(-195rpm)-(+195rpm)] -> duty [0-maxDuty]
            u_1_duty = (salida_PI[0] / vel_maxima) * (maxDuty / 2.0) + (maxDuty / 2.0);
 80027ce:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80027d2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80027d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80027da:	ee16 0a90 	vmov	r0, s13
 80027de:	f7fd febb 	bl	8000558 <__aeabi_f2d>
 80027e2:	4604      	mov	r4, r0
 80027e4:	460d      	mov	r5, r1
 80027e6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fea2 	bl	8000534 <__aeabi_i2d>
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027f8:	f7fe f830 	bl	800085c <__aeabi_ddiv>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4620      	mov	r0, r4
 8002802:	4629      	mov	r1, r5
 8002804:	f7fd ff00 	bl	8000608 <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4614      	mov	r4, r2
 800280e:	461d      	mov	r5, r3
 8002810:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd fe8d 	bl	8000534 <__aeabi_i2d>
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002822:	f7fe f81b 	bl	800085c <__aeabi_ddiv>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4620      	mov	r0, r4
 800282c:	4629      	mov	r1, r5
 800282e:	f7fd fd35 	bl	800029c <__adddf3>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	f7fe f995 	bl	8000b68 <__aeabi_d2iz>
 800283e:	4603      	mov	r3, r0
 8002840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
//            u_1_duty = (velocidad_ref.u_1 / vel_maxima) * (maxDuty / 2.0) + (maxDuty / 2.0);
            if (((float)u_1_duty / (float)maxDuty < 0.6) && ((float)u_1_duty / (float)maxDuty > 0.4))
 8002844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002850:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002854:	ee07 3a90 	vmov	s15, r3
 8002858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800285c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002860:	ee16 0a90 	vmov	r0, s13
 8002864:	f7fd fe78 	bl	8000558 <__aeabi_f2d>
 8002868:	a3ed      	add	r3, pc, #948	; (adr r3, 8002c20 <StartControlVel+0x770>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fe f93d 	bl	8000aec <__aeabi_dcmplt>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d023      	beq.n	80028c0 <StartControlVel+0x410>
 8002878:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002884:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002890:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002894:	ee16 0a90 	vmov	r0, s13
 8002898:	f7fd fe5e 	bl	8000558 <__aeabi_f2d>
 800289c:	a3e2      	add	r3, pc, #904	; (adr r3, 8002c28 <StartControlVel+0x778>)
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	f7fe f941 	bl	8000b28 <__aeabi_dcmpgt>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d009      	beq.n	80028c0 <StartControlVel+0x410>
            {
                u_1_duty = maxDuty/2;
 80028ac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	            H_1[0] = 0.0;
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028be:	e01a      	b.n	80028f6 <StartControlVel+0x446>
            }
            else if ((velocidad_ref.u_1 < 15.0) && (velocidad_ref.u_1 > -15.0))
 80028c0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80028c4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80028c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d0:	d511      	bpl.n	80028f6 <StartControlVel+0x446>
 80028d2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80028d6:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 80028da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e2:	dd08      	ble.n	80028f6 <StartControlVel+0x446>
			{
				u_1_duty = maxDuty/2;
 80028e4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	            H_1[0] = 0.0;
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
			}
            
            TIM8->CCR1 = u_1_duty;
 80028f6:	4ace      	ldr	r2, [pc, #824]	; (8002c30 <StartControlVel+0x780>)
 80028f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028fc:	6353      	str	r3, [r2, #52]	; 0x34
            ////////////////////////////////////////////////////////////////////////////////////////////////////
            ////////////////// Rueda 2 ///////////////////////
            //////////////////////////////////////////////////

            /////////// Sentido de giro positivo /////////////
            if (velocidad_ref.u_2 >= 0.0)
 80028fe:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	db08      	blt.n	800291e <StartControlVel+0x46e>
            {
                error_velocidad.u_2 = velocidad_ref.u_2 - velocidad_medida.u_2;
 800290c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002910:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002918:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 800291c:	e009      	b.n	8002932 <StartControlVel+0x482>
            }
            /////////// Sentido de giro negativo /////////////
            else
            {
                error_velocidad.u_2 = -(velocidad_ref.u_2) - velocidad_medida.u_2;
 800291e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002922:	eeb1 7a67 	vneg.f32	s14, s15
 8002926:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800292a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
            }
            // A partir de acá el control no distingue entre vel_ref positiva o negativa
            entrada_PI[1] = error_velocidad.u_2;
 8002932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002934:	65fb      	str	r3, [r7, #92]	; 0x5c
            // Bloque P:
            P[1] = entrada_PI[1] * Kp;
 8002936:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800293a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002942:	edc7 7a03 	vstr	s15, [r7, #12]
            // Anti-windup -> el acumulador (integrador del PI) solo funcionará cuando el error de velocidad sea menor a 20rpm
            if ((error_velocidad.u_2 < 50.0) && (error_velocidad.u_2 > -50.0))
 8002946:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800294a:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8002c34 <StartControlVel+0x784>
 800294e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002956:	d511      	bpl.n	800297c <StartControlVel+0x4cc>
 8002958:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800295c:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002c38 <StartControlVel+0x788>
 8002960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002968:	dd08      	ble.n	800297c <StartControlVel+0x4cc>
                H[1] = entrada_PI[1] + H_1[1];
 800296a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800296e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002976:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800297a:	e005      	b.n	8002988 <StartControlVel+0x4d8>
            else
            {
                H[1] = 0.0;
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	63fb      	str	r3, [r7, #60]	; 0x3c
                H_1[1] = 0.0;
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            // Bloque I:
            I[1] = Kt * (H[1] + H_1[1]);
 8002988:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800298c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002994:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299c:	edc7 7a07 	vstr	s15, [r7, #28]
            // Sumo la parte proporcional e integral para obtener el PI completo
            salida_PI[1] = P[1] + I[1];
 80029a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80029a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80029a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ac:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            H_1[1] = H[1];
 80029b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c


            if (velocidad_ref.u_2 >= 0.0)
 80029b4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80029b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c0:	db08      	blt.n	80029d4 <StartControlVel+0x524>
                salida_PI[1] = velocidad_ref.u_2 + salida_PI[1];
 80029c2:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80029c6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80029ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ce:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 80029d2:	e007      	b.n	80029e4 <StartControlVel+0x534>
            else
                salida_PI[1] = velocidad_ref.u_2 - salida_PI[1];
 80029d4:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80029d8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80029dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

            // limitador
            if (salida_PI[1] < -vel_maxima)
 80029e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80029e8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80029ec:	eef1 7a67 	vneg.f32	s15, s15
 80029f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f8:	d502      	bpl.n	8002a00 <StartControlVel+0x550>
                salida_PI[1] = vel_maxima;
 80029fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029fe:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (salida_PI[1] > vel_maxima)
 8002a00:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002a04:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a10:	d502      	bpl.n	8002a18 <StartControlVel+0x568>
                salida_PI[1] = vel_maxima;
 8002a12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a16:	64fb      	str	r3, [r7, #76]	; 0x4c

            // Conversion: velocidad en rpm [(-195rpm)-(+195rpm)] -> duty [0-maxDuty]
            u_2_duty = (salida_PI[1] / vel_maxima) * (maxDuty / 2.0) + (maxDuty / 2.0);
 8002a18:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002a1c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002a20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a24:	ee16 0a90 	vmov	r0, s13
 8002a28:	f7fd fd96 	bl	8000558 <__aeabi_f2d>
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	460d      	mov	r5, r1
 8002a30:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd7d 	bl	8000534 <__aeabi_i2d>
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a42:	f7fd ff0b 	bl	800085c <__aeabi_ddiv>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	f7fd fddb 	bl	8000608 <__aeabi_dmul>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4614      	mov	r4, r2
 8002a58:	461d      	mov	r5, r3
 8002a5a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fd68 	bl	8000534 <__aeabi_i2d>
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a6c:	f7fd fef6 	bl	800085c <__aeabi_ddiv>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4620      	mov	r0, r4
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7fd fc10 	bl	800029c <__adddf3>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f870 	bl	8000b68 <__aeabi_d2iz>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
//            u_2_duty = (velocidad_ref.u_2 / vel_maxima) * (maxDuty / 2.0) + (maxDuty / 2.0);
            if (((float)u_2_duty / (float)maxDuty < 0.6) && ((float)u_2_duty / (float)maxDuty > 0.4))
 8002a8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a9a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002a9e:	ee07 3a90 	vmov	s15, r3
 8002aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002aaa:	ee16 0a90 	vmov	r0, s13
 8002aae:	f7fd fd53 	bl	8000558 <__aeabi_f2d>
 8002ab2:	a35b      	add	r3, pc, #364	; (adr r3, 8002c20 <StartControlVel+0x770>)
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	f7fe f818 	bl	8000aec <__aeabi_dcmplt>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d023      	beq.n	8002b0a <StartControlVel+0x65a>
 8002ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ace:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ada:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ade:	ee16 0a90 	vmov	r0, s13
 8002ae2:	f7fd fd39 	bl	8000558 <__aeabi_f2d>
 8002ae6:	a350      	add	r3, pc, #320	; (adr r3, 8002c28 <StartControlVel+0x778>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fe f81c 	bl	8000b28 <__aeabi_dcmpgt>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <StartControlVel+0x65a>
            {
                u_2_duty = maxDuty / 2;
 8002af6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002afa:	085b      	lsrs	r3, r3, #1
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	            H_1[1] = 0.0;
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b08:	e01a      	b.n	8002b40 <StartControlVel+0x690>
            }

            else if ((velocidad_ref.u_2 < 15.0) && (velocidad_ref.u_2 > -15.0))
 8002b0a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002b0e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	d511      	bpl.n	8002b40 <StartControlVel+0x690>
 8002b1c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002b20:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8002b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2c:	dd08      	ble.n	8002b40 <StartControlVel+0x690>
            {
            	u_2_duty = maxDuty / 2;
 8002b2e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	            H_1[1] = 0.0;
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            TIM16->CCR1 = u_2_duty;
 8002b40:	4a3e      	ldr	r2, [pc, #248]	; (8002c3c <StartControlVel+0x78c>)
 8002b42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b46:	6353      	str	r3, [r2, #52]	; 0x34
            ////////////////////////////////////////////////////////////////////////////////////////////////////
            ////////////////// Rueda3 ///////////////////////
            //////////////////////////////////////////////////

            /////////// Sentido de giro positivo /////////////
            if (velocidad_ref.u_3 >= 0.0)
 8002b48:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b54:	db08      	blt.n	8002b68 <StartControlVel+0x6b8>
            {
                error_velocidad.u_3 = velocidad_ref.u_3 - velocidad_medida.u_3;
 8002b56:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b5a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b62:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8002b66:	e009      	b.n	8002b7c <StartControlVel+0x6cc>
            }
            /////////// Sentido de giro negativo /////////////
            else
            {
                error_velocidad.u_3 = -(velocidad_ref.u_3) - velocidad_medida.u_3;
 8002b68:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002b6c:	eeb1 7a67 	vneg.f32	s14, s15
 8002b70:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b78:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            }
            // A partir de acá el control no distingue entre vel_ref positiva o negativa
            entrada_PI[2] = error_velocidad.u_3;
 8002b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b7e:	663b      	str	r3, [r7, #96]	; 0x60
            // Bloque P:
            P[2] = entrada_PI[2] * Kp;
 8002b80:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002b84:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8c:	edc7 7a04 	vstr	s15, [r7, #16]
            // Anti-windup -> el acumulador (integrador del PI) solo funcionará cuando el error de velocidad sea menor a 20rpm
            if ((error_velocidad.u_3 < 50.0) && (error_velocidad.u_3 > -50.0))
 8002b90:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002b94:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002c34 <StartControlVel+0x784>
 8002b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba0:	d511      	bpl.n	8002bc6 <StartControlVel+0x716>
 8002ba2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002ba6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002c38 <StartControlVel+0x788>
 8002baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb2:	dd08      	ble.n	8002bc6 <StartControlVel+0x716>
                H[2] = entrada_PI[2] + H_1[2];
 8002bb4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002bb8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8002bc4:	e005      	b.n	8002bd2 <StartControlVel+0x722>
            else
            {
                H[2] = 0.0;
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	643b      	str	r3, [r7, #64]	; 0x40
                H_1[2] = 0.0;
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	633b      	str	r3, [r7, #48]	; 0x30
            }
            // Bloque I:
            I[2] = Kt * (H[2] + H_1[2]);
 8002bd2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002bd6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bde:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be6:	edc7 7a08 	vstr	s15, [r7, #32]
            // Sumo la parte proporcional e integral para obtener el PI completo
            salida_PI[2] = P[2] + I[2];
 8002bea:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bee:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            H_1[2] = H[2];
 8002bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30

            if (velocidad_ref.u_3 >= 0.0)
 8002bfe:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002c02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	db19      	blt.n	8002c40 <StartControlVel+0x790>
                salida_PI[2] = velocidad_ref.u_3 + salida_PI[2];
 8002c0c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002c10:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c18:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8002c1c:	e018      	b.n	8002c50 <StartControlVel+0x7a0>
 8002c1e:	bf00      	nop
 8002c20:	33333333 	.word	0x33333333
 8002c24:	3fe33333 	.word	0x3fe33333
 8002c28:	9999999a 	.word	0x9999999a
 8002c2c:	3fd99999 	.word	0x3fd99999
 8002c30:	40013400 	.word	0x40013400
 8002c34:	42480000 	.word	0x42480000
 8002c38:	c2480000 	.word	0xc2480000
 8002c3c:	40014400 	.word	0x40014400
            else
                salida_PI[2] = velocidad_ref.u_3 - salida_PI[2];
 8002c40:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002c44:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

            // limitador
            if (salida_PI[2] < -vel_maxima)
 8002c50:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002c54:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002c58:	eef1 7a67 	vneg.f32	s15, s15
 8002c5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c64:	d505      	bpl.n	8002c72 <StartControlVel+0x7c2>
                salida_PI[2] = -vel_maxima;
 8002c66:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002c6a:	eef1 7a67 	vneg.f32	s15, s15
 8002c6e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            if (salida_PI[2] > vel_maxima)
 8002c72:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002c76:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002c7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c82:	d502      	bpl.n	8002c8a <StartControlVel+0x7da>
                salida_PI[2] = vel_maxima;
 8002c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c88:	653b      	str	r3, [r7, #80]	; 0x50

            // Conversion: velocidad en rpm [(-195rpm)-(+195rpm)] -> duty [0-maxDuty]
            u_3_duty = (salida_PI[2] / vel_maxima) * (maxDuty / 2.0) + (maxDuty / 2.0);
 8002c8a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002c8e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002c92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c96:	ee16 0a90 	vmov	r0, s13
 8002c9a:	f7fd fc5d 	bl	8000558 <__aeabi_f2d>
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	460d      	mov	r5, r1
 8002ca2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc44 	bl	8000534 <__aeabi_i2d>
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cb4:	f7fd fdd2 	bl	800085c <__aeabi_ddiv>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	f7fd fca2 	bl	8000608 <__aeabi_dmul>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4614      	mov	r4, r2
 8002cca:	461d      	mov	r5, r3
 8002ccc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fc2f 	bl	8000534 <__aeabi_i2d>
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cde:	f7fd fdbd 	bl	800085c <__aeabi_ddiv>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	4629      	mov	r1, r5
 8002cea:	f7fd fad7 	bl	800029c <__adddf3>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7fd ff37 	bl	8000b68 <__aeabi_d2iz>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
//            u_3_duty = (velocidad_ref.u_3 / vel_maxima) * (maxDuty / 2.0) + (maxDuty / 2./0);
            if (((float)u_3_duty / (float)maxDuty < 0.6) && ((float)u_3_duty / (float)maxDuty > 0.4))
 8002d00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d04:	ee07 3a90 	vmov	s15, r3
 8002d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d0c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d18:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d1c:	ee16 0a90 	vmov	r0, s13
 8002d20:	f7fd fc1a 	bl	8000558 <__aeabi_f2d>
 8002d24:	a3bc      	add	r3, pc, #752	; (adr r3, 8003018 <StartControlVel+0xb68>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fedf 	bl	8000aec <__aeabi_dcmplt>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d023      	beq.n	8002d7c <StartControlVel+0x8cc>
 8002d34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d40:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d50:	ee16 0a90 	vmov	r0, s13
 8002d54:	f7fd fc00 	bl	8000558 <__aeabi_f2d>
 8002d58:	a3b1      	add	r3, pc, #708	; (adr r3, 8003020 <StartControlVel+0xb70>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f7fd fee3 	bl	8000b28 <__aeabi_dcmpgt>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d009      	beq.n	8002d7c <StartControlVel+0x8cc>
            {
                u_3_duty = maxDuty / 2;
 8002d68:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	            H_1[2] = 0.0;
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	633b      	str	r3, [r7, #48]	; 0x30
 8002d7a:	e01a      	b.n	8002db2 <StartControlVel+0x902>
            }
            else if ((velocidad_ref.u_3 < 15.0) && (velocidad_ref.u_3 > -15.0))
 8002d7c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002d80:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8c:	d511      	bpl.n	8002db2 <StartControlVel+0x902>
 8002d8e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002d92:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8002d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9e:	dd08      	ble.n	8002db2 <StartControlVel+0x902>
            {
            	u_3_duty = maxDuty / 2;
 8002da0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	            H_1[2] = 0.0;
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	633b      	str	r3, [r7, #48]	; 0x30
            }
            TIM15->CCR1 = u_3_duty;
 8002db2:	4a9d      	ldr	r2, [pc, #628]	; (8003028 <StartControlVel+0xb78>)
 8002db4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002db8:	6353      	str	r3, [r2, #52]	; 0x34
            ////////////////////////////////////////////////////////////////////////////////////////////////////
            ////////////////// Rueda 4 ///////////////////////
            //////////////////////////////////////////////////

            /////////// Sentido de giro positivo /////////////
            if (velocidad_ref.u_4 >= 0.0)
 8002dba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002dbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc6:	db08      	blt.n	8002dda <StartControlVel+0x92a>
            {
                error_velocidad.u_4 = velocidad_ref.u_4 - velocidad_medida.u_4;
 8002dc8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002dcc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8002dd8:	e009      	b.n	8002dee <StartControlVel+0x93e>
            }
            /////////// Sentido de giro negativo /////////////
            else
            {
                error_velocidad.u_4 = -(velocidad_ref.u_4) - velocidad_medida.u_4;
 8002dda:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002dde:	eeb1 7a67 	vneg.f32	s14, s15
 8002de2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dea:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
            }
            // A partir de acá el control no distingue entre vel_ref positiva o negativa
            entrada_PI[3] = error_velocidad.u_4;
 8002dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df0:	667b      	str	r3, [r7, #100]	; 0x64
            // Bloque P:
            P[3] = entrada_PI[3] * Kp;
 8002df2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002df6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfe:	edc7 7a05 	vstr	s15, [r7, #20]
            // Anti-windup -> el acumulador (integrador del PI) solo funcionará cuando el error de velocidad sea menor a 20rpm
            if ((error_velocidad.u_4 < 50.0) && (error_velocidad.u_4 > -50.0))
 8002e02:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002e06:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800302c <StartControlVel+0xb7c>
 8002e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e12:	d511      	bpl.n	8002e38 <StartControlVel+0x988>
 8002e14:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002e18:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8003030 <StartControlVel+0xb80>
 8002e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e24:	dd08      	ble.n	8002e38 <StartControlVel+0x988>
                H[3] = entrada_PI[3] + H_1[3];
 8002e26:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002e2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e32:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8002e36:	e005      	b.n	8002e44 <StartControlVel+0x994>
            else
            {
                H[3] = 0.0;
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	647b      	str	r3, [r7, #68]	; 0x44
                H_1[3] = 0.0;
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	637b      	str	r3, [r7, #52]	; 0x34
            }
            // Bloque I:
            I[3] = Kt * (H[3] + H_1[3]);
 8002e44:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002e48:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e50:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            // Sumo la parte proporcional e integral para obtener el PI completo
            salida_PI[3] = P[3] + I[3];
 8002e5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e68:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            H_1[3] = H[3];
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34

            if (velocidad_ref.u_4 >= 0.0)
 8002e70:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002e74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	db08      	blt.n	8002e90 <StartControlVel+0x9e0>
                salida_PI[3] = velocidad_ref.u_4 + salida_PI[3];
 8002e7e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002e82:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e8a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8002e8e:	e007      	b.n	8002ea0 <StartControlVel+0x9f0>
            else
                salida_PI[3] = velocidad_ref.u_4 - salida_PI[3];
 8002e90:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002e94:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

            // limitador
            if (salida_PI[3] < -vel_maxima)
 8002ea0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002ea4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002ea8:	eef1 7a67 	vneg.f32	s15, s15
 8002eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb4:	d505      	bpl.n	8002ec2 <StartControlVel+0xa12>
                salida_PI[3] = -vel_maxima;
 8002eb6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002eba:	eef1 7a67 	vneg.f32	s15, s15
 8002ebe:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            if (salida_PI[3] > vel_maxima)
 8002ec2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002ec6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002eca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed2:	d502      	bpl.n	8002eda <StartControlVel+0xa2a>
                salida_PI[3] = vel_maxima;
 8002ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ed8:	657b      	str	r3, [r7, #84]	; 0x54

            // Conversion: velocidad en rpm [(-195rpm)-(+195rpm)] -> duty [0-maxDuty]
            u_4_duty = (salida_PI[3] / vel_maxima) * (maxDuty / 2.0) + (maxDuty / 2.0);
 8002eda:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002ede:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002ee2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ee6:	ee16 0a90 	vmov	r0, s13
 8002eea:	f7fd fb35 	bl	8000558 <__aeabi_f2d>
 8002eee:	4604      	mov	r4, r0
 8002ef0:	460d      	mov	r5, r1
 8002ef2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fb1c 	bl	8000534 <__aeabi_i2d>
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f04:	f7fd fcaa 	bl	800085c <__aeabi_ddiv>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	4629      	mov	r1, r5
 8002f10:	f7fd fb7a 	bl	8000608 <__aeabi_dmul>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4614      	mov	r4, r2
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fb07 	bl	8000534 <__aeabi_i2d>
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f2e:	f7fd fc95 	bl	800085c <__aeabi_ddiv>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4620      	mov	r0, r4
 8002f38:	4629      	mov	r1, r5
 8002f3a:	f7fd f9af 	bl	800029c <__adddf3>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	f7fd fe0f 	bl	8000b68 <__aeabi_d2iz>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
//            u_4_duty = (velocidad_ref.u_4 / vel_maxima) * (maxDuty / 2.0) + (maxDuty / 2.0);
            if (((float)u_4_duty / (float)maxDuty < 0.6) && ((float)u_4_duty / (float)maxDuty > 0.4))
 8002f50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f54:	ee07 3a90 	vmov	s15, r3
 8002f58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f5c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002f60:	ee07 3a90 	vmov	s15, r3
 8002f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f6c:	ee16 0a90 	vmov	r0, s13
 8002f70:	f7fd faf2 	bl	8000558 <__aeabi_f2d>
 8002f74:	a328      	add	r3, pc, #160	; (adr r3, 8003018 <StartControlVel+0xb68>)
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	f7fd fdb7 	bl	8000aec <__aeabi_dcmplt>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d023      	beq.n	8002fcc <StartControlVel+0xb1c>
 8002f84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f90:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fa0:	ee16 0a90 	vmov	r0, s13
 8002fa4:	f7fd fad8 	bl	8000558 <__aeabi_f2d>
 8002fa8:	a31d      	add	r3, pc, #116	; (adr r3, 8003020 <StartControlVel+0xb70>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f7fd fdbb 	bl	8000b28 <__aeabi_dcmpgt>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <StartControlVel+0xb1c>
            {
                u_4_duty = maxDuty / 2;
 8002fb8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002fbc:	085b      	lsrs	r3, r3, #1
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	            H_1[3] = 0.0;
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fca:	e01a      	b.n	8003002 <StartControlVel+0xb52>
            }
            else if ((velocidad_ref.u_4 < 15.0) && (velocidad_ref.u_4 > -15.0))
 8002fcc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002fd0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fdc:	d511      	bpl.n	8003002 <StartControlVel+0xb52>
 8002fde:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002fe2:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8002fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	dd08      	ble.n	8003002 <StartControlVel+0xb52>
            {
            	u_4_duty = maxDuty / 2;
 8002ff0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	            H_1[3] = 0.0;
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	637b      	str	r3, [r7, #52]	; 0x34
            }
            TIM1->CCR1 = u_4_duty;
 8003002:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <StartControlVel+0xb84>)
 8003004:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003008:	6353      	str	r3, [r2, #52]	; 0x34
		  // Hago el control
		  // TIM1->CCR1 = velocidad_medida.w_00;
	//	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)vel, 1);
  	  
	  osDelay(1);
 800300a:	2001      	movs	r0, #1
 800300c:	f00a f88a 	bl	800d124 <osDelay>
	if (state == RUN_State){
 8003010:	f7ff bafd 	b.w	800260e <StartControlVel+0x15e>
 8003014:	f3af 8000 	nop.w
 8003018:	33333333 	.word	0x33333333
 800301c:	3fe33333 	.word	0x3fe33333
 8003020:	9999999a 	.word	0x9999999a
 8003024:	3fd99999 	.word	0x3fd99999
 8003028:	40014000 	.word	0x40014000
 800302c:	42480000 	.word	0x42480000
 8003030:	c2480000 	.word	0xc2480000
 8003034:	40012c00 	.word	0x40012c00

08003038 <StartMeasureAccel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMeasureAccel */
void StartMeasureAccel(void const * argument)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMeasureAccel */
	s_Aceleracion aceleracion;
//	char str[100];
	int16_t valor;
	uint8_t data_tx[2] ={0,0};
 8003040:	2300      	movs	r3, #0
 8003042:	81bb      	strh	r3, [r7, #12]
	uint8_t data_rx[2] ={0,0};
 8003044:	2300      	movs	r3, #0
 8003046:	813b      	strh	r3, [r7, #8]
    // Configuracion de la imu: reiniciar, leer los valores actuales y aplicarle un offset a cada parametro.
    // ACLARACION: Si el MSB = 0 de la trama, se realiza lectura. Si MSB = 1, se realiza escritura.
    ////////////////////

    // Reseteo. Setear GLOB_CMD[1] = 1.
    data_tx[0] = 0xBE;     // byte MAS significativo del DIN para realizar "Restoring Factory Calibration"
 8003048:	23be      	movs	r3, #190	; 0xbe
 800304a:	733b      	strb	r3, [r7, #12]
    data_tx[1] = 0x02;     // byte MENOS significativo del DIN para realizar "Restoring Factory Calibration"
 800304c:	2302      	movs	r3, #2
 800304e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_RESET); // Habilitar el chip select
 8003050:	2200      	movs	r2, #0
 8003052:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003056:	48b6      	ldr	r0, [pc, #728]	; (8003330 <StartMeasureAccel+0x2f8>)
 8003058:	f003 f908 	bl	800626c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data_tx, 2, 500); // Envio comando de reseteo
 800305c:	f107 010c 	add.w	r1, r7, #12
 8003060:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003064:	2202      	movs	r2, #2
 8003066:	48b3      	ldr	r0, [pc, #716]	; (8003334 <StartMeasureAccel+0x2fc>)
 8003068:	f006 f9d3 	bl	8009412 <HAL_SPI_Transmit>
    HAL_Delay(100); // Espero los 50 ms que tarda el sensor en terminar el reseteo
 800306c:	2064      	movs	r0, #100	; 0x64
 800306e:	f001 f819 	bl	80040a4 <HAL_Delay>
    
    // Calibracion automatica. Setear GLOB_CMD[0] = 1.
    data_tx[0] = 0xBE;     // byte MAS significativo del DIN para realizar "Gyroscope Automatic Bias Null Calibration	"
 8003072:	23be      	movs	r3, #190	; 0xbe
 8003074:	733b      	strb	r3, [r7, #12]
    data_tx[1] = 0x01;     // byte MENOS significativo del DIN para realizar "Gyroscope Automatic Bias Null Calibration"
 8003076:	2301      	movs	r3, #1
 8003078:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, data_tx, 2, 500); // Envio comando de reseteo
 800307a:	f107 010c 	add.w	r1, r7, #12
 800307e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003082:	2202      	movs	r2, #2
 8003084:	48ab      	ldr	r0, [pc, #684]	; (8003334 <StartMeasureAccel+0x2fc>)
 8003086:	f006 f9c4 	bl	8009412 <HAL_SPI_Transmit>
    HAL_Delay(100); // Espero los 50 ms que tarda el sensor en terminar el reseteo
 800308a:	2064      	movs	r0, #100	; 0x64
 800308c:	f001 f80a 	bl	80040a4 <HAL_Delay>
    // Finalizo escritura del registro ZACCL_OFF
    /////////////////////////////////////////////////////////////////////////////////
    */

    // declaracion de bandera
    uint8_t flag_adis16364_error = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	77fb      	strb	r3, [r7, #31]

    HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_SET); // Deshabilitar el chip select
 8003094:	2201      	movs	r2, #1
 8003096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800309a:	48a5      	ldr	r0, [pc, #660]	; (8003330 <StartMeasureAccel+0x2f8>)
 800309c:	f003 f8e6 	bl	800626c <HAL_GPIO_WritePin>

    xSemaphoreGive( myBinarySemAccelTxHandle );
 80030a0:	4ba5      	ldr	r3, [pc, #660]	; (8003338 <StartMeasureAccel+0x300>)
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	2300      	movs	r3, #0
 80030a6:	2200      	movs	r2, #0
 80030a8:	2100      	movs	r1, #0
 80030aa:	f00a fa99 	bl	800d5e0 <xQueueGenericSend>
  /* Infinite loop */
  for(;;)
  {
	  if ( state == RUN_State){
 80030ae:	4ba3      	ldr	r3, [pc, #652]	; (800333c <StartMeasureAccel+0x304>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	f040 815b 	bne.w	800336e <StartMeasureAccel+0x336>
          // Leo rotaciones
          // Leo XGYRO_OUT
        data_tx[0] = ADIS16364_XGYRO_OUT;
 80030b8:	2304      	movs	r3, #4
 80030ba:	733b      	strb	r3, [r7, #12]
        HAL_SPI_Transmit(&hspi1, data_tx, 2, 200);
 80030bc:	f107 010c 	add.w	r1, r7, #12
 80030c0:	23c8      	movs	r3, #200	; 0xc8
 80030c2:	2202      	movs	r2, #2
 80030c4:	489b      	ldr	r0, [pc, #620]	; (8003334 <StartMeasureAccel+0x2fc>)
 80030c6:	f006 f9a4 	bl	8009412 <HAL_SPI_Transmit>
        if (HAL_SPI_Receive(&hspi1, data_rx, 2, 200) == HAL_OK)
 80030ca:	f107 0108 	add.w	r1, r7, #8
 80030ce:	23c8      	movs	r3, #200	; 0xc8
 80030d0:	2202      	movs	r2, #2
 80030d2:	4898      	ldr	r0, [pc, #608]	; (8003334 <StartMeasureAccel+0x2fc>)
 80030d4:	f006 fb12 	bl	80096fc <HAL_SPI_Receive>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d11f      	bne.n	800311e <StartMeasureAccel+0xe6>
        {
            valor = (data_rx[0] & 0x3F) << 8 | (data_rx[1]);
 80030de:	7a3b      	ldrb	r3, [r7, #8]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	b21b      	sxth	r3, r3
 80030e4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80030e8:	b21a      	sxth	r2, r3
 80030ea:	7a7b      	ldrb	r3, [r7, #9]
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	4313      	orrs	r3, r2
 80030f0:	83bb      	strh	r3, [r7, #28]
            valor = (int16_t)(valor | (valor & 0x2000) << 1 | (valor & 0x2000) << 2);
 80030f2:	8bbb      	ldrh	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	b21b      	sxth	r3, r3
 80030f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fc:	b21a      	sxth	r2, r3
 80030fe:	8bbb      	ldrh	r3, [r7, #28]
 8003100:	4313      	orrs	r3, r2
 8003102:	b21a      	sxth	r2, r3
 8003104:	8bbb      	ldrh	r3, [r7, #28]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	b21b      	sxth	r3, r3
 800310a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800310e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003112:	b21b      	sxth	r3, r3
 8003114:	4313      	orrs	r3, r2
 8003116:	83bb      	strh	r3, [r7, #28]
//            {
//                valor = (int16_t)((valor)^(0xFFFF) + 1);
//            }
            
            // Guardo valor en la estructura de aceleracion.
            aceleracion.phi_m[0] = valor;
 8003118:	8bbb      	ldrh	r3, [r7, #28]
 800311a:	823b      	strh	r3, [r7, #16]
 800311c:	e001      	b.n	8003122 <StartMeasureAccel+0xea>
        }
        else
        {
            flag_adis16364_error = 1;
 800311e:	2301      	movs	r3, #1
 8003120:	77fb      	strb	r3, [r7, #31]
        }

        // Leo YGYRO_OUT
        data_tx[0] = ADIS16364_YGYRO_OUT;
 8003122:	2306      	movs	r3, #6
 8003124:	733b      	strb	r3, [r7, #12]
        HAL_SPI_Transmit(&hspi1, data_tx, 2, 200);
 8003126:	f107 010c 	add.w	r1, r7, #12
 800312a:	23c8      	movs	r3, #200	; 0xc8
 800312c:	2202      	movs	r2, #2
 800312e:	4881      	ldr	r0, [pc, #516]	; (8003334 <StartMeasureAccel+0x2fc>)
 8003130:	f006 f96f 	bl	8009412 <HAL_SPI_Transmit>
        if (HAL_SPI_Receive(&hspi1, data_rx, 2, 200) == HAL_OK){
 8003134:	f107 0108 	add.w	r1, r7, #8
 8003138:	23c8      	movs	r3, #200	; 0xc8
 800313a:	2202      	movs	r2, #2
 800313c:	487d      	ldr	r0, [pc, #500]	; (8003334 <StartMeasureAccel+0x2fc>)
 800313e:	f006 fadd 	bl	80096fc <HAL_SPI_Receive>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d11f      	bne.n	8003188 <StartMeasureAccel+0x150>
            valor = (data_rx[0] & 0x3F) << 8 | (data_rx[1]);
 8003148:	7a3b      	ldrb	r3, [r7, #8]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	b21b      	sxth	r3, r3
 800314e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003152:	b21a      	sxth	r2, r3
 8003154:	7a7b      	ldrb	r3, [r7, #9]
 8003156:	b21b      	sxth	r3, r3
 8003158:	4313      	orrs	r3, r2
 800315a:	83bb      	strh	r3, [r7, #28]
             valor = (int16_t)(valor | (valor & 0x2000) << 1 | (valor & 0x2000) << 2);
 800315c:	8bbb      	ldrh	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	b21b      	sxth	r3, r3
 8003162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003166:	b21a      	sxth	r2, r3
 8003168:	8bbb      	ldrh	r3, [r7, #28]
 800316a:	4313      	orrs	r3, r2
 800316c:	b21a      	sxth	r2, r3
 800316e:	8bbb      	ldrh	r3, [r7, #28]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	b21b      	sxth	r3, r3
 8003174:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003178:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800317c:	b21b      	sxth	r3, r3
 800317e:	4313      	orrs	r3, r2
 8003180:	83bb      	strh	r3, [r7, #28]
//            {
//                valor = (int16_t)((valor) ^ (0xFFFF) + 1);
//            }

            // Guardo valor en la estructura de aceleracion.
            aceleracion.phi_m[1] = valor;
 8003182:	8bbb      	ldrh	r3, [r7, #28]
 8003184:	827b      	strh	r3, [r7, #18]
 8003186:	e001      	b.n	800318c <StartMeasureAccel+0x154>
        }
        else
        {
            flag_adis16364_error = 1;
 8003188:	2301      	movs	r3, #1
 800318a:	77fb      	strb	r3, [r7, #31]
        }

        // Leo ZGYRO_OUT
        data_tx[0] = ADIS16364_ZGYRO_OUT;
 800318c:	2308      	movs	r3, #8
 800318e:	733b      	strb	r3, [r7, #12]
        HAL_SPI_Transmit(&hspi1, data_tx, 2, 200);
 8003190:	f107 010c 	add.w	r1, r7, #12
 8003194:	23c8      	movs	r3, #200	; 0xc8
 8003196:	2202      	movs	r2, #2
 8003198:	4866      	ldr	r0, [pc, #408]	; (8003334 <StartMeasureAccel+0x2fc>)
 800319a:	f006 f93a 	bl	8009412 <HAL_SPI_Transmit>
        if(HAL_SPI_Receive(&hspi1, data_rx, 2, 200) == HAL_OK)
 800319e:	f107 0108 	add.w	r1, r7, #8
 80031a2:	23c8      	movs	r3, #200	; 0xc8
 80031a4:	2202      	movs	r2, #2
 80031a6:	4863      	ldr	r0, [pc, #396]	; (8003334 <StartMeasureAccel+0x2fc>)
 80031a8:	f006 faa8 	bl	80096fc <HAL_SPI_Receive>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d11f      	bne.n	80031f2 <StartMeasureAccel+0x1ba>
        {
            valor = (data_rx[0] & 0x3F) << 8 | (data_rx[1]);
 80031b2:	7a3b      	ldrb	r3, [r7, #8]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	b21b      	sxth	r3, r3
 80031b8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80031bc:	b21a      	sxth	r2, r3
 80031be:	7a7b      	ldrb	r3, [r7, #9]
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	4313      	orrs	r3, r2
 80031c4:	83bb      	strh	r3, [r7, #28]
             valor = (int16_t)(valor | (valor & 0x2000) << 1 | (valor & 0x2000) << 2);
 80031c6:	8bbb      	ldrh	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	b21b      	sxth	r3, r3
 80031cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d0:	b21a      	sxth	r2, r3
 80031d2:	8bbb      	ldrh	r3, [r7, #28]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	b21a      	sxth	r2, r3
 80031d8:	8bbb      	ldrh	r3, [r7, #28]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	b21b      	sxth	r3, r3
 80031de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80031e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80031e6:	b21b      	sxth	r3, r3
 80031e8:	4313      	orrs	r3, r2
 80031ea:	83bb      	strh	r3, [r7, #28]
//            if (valor > 0x1FFF)
//            {
//                valor = (int16_t)((valor) ^ (0xFFFF) + 1);
//            }
            // Guardo valor en la estructura de aceleracion.
            aceleracion.phi_m[2] = valor;
 80031ec:	8bbb      	ldrh	r3, [r7, #28]
 80031ee:	82bb      	strh	r3, [r7, #20]
 80031f0:	e001      	b.n	80031f6 <StartMeasureAccel+0x1be>
        }
        else
        {
            flag_adis16364_error = 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	77fb      	strb	r3, [r7, #31]
        }

        // Leo XACCL_OUT
        data_tx[0] = ADIS16364_XACCL_OUT;
 80031f6:	230a      	movs	r3, #10
 80031f8:	733b      	strb	r3, [r7, #12]
        HAL_SPI_Transmit(&hspi1, data_tx, 2, 200);
 80031fa:	f107 010c 	add.w	r1, r7, #12
 80031fe:	23c8      	movs	r3, #200	; 0xc8
 8003200:	2202      	movs	r2, #2
 8003202:	484c      	ldr	r0, [pc, #304]	; (8003334 <StartMeasureAccel+0x2fc>)
 8003204:	f006 f905 	bl	8009412 <HAL_SPI_Transmit>
        if(HAL_SPI_Receive(&hspi1, data_rx, 2, 200) == HAL_OK)
 8003208:	f107 0108 	add.w	r1, r7, #8
 800320c:	23c8      	movs	r3, #200	; 0xc8
 800320e:	2202      	movs	r2, #2
 8003210:	4848      	ldr	r0, [pc, #288]	; (8003334 <StartMeasureAccel+0x2fc>)
 8003212:	f006 fa73 	bl	80096fc <HAL_SPI_Receive>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d11f      	bne.n	800325c <StartMeasureAccel+0x224>
        {
            valor = (data_rx[0] & 0x3F) << 8 | (data_rx[1]);
 800321c:	7a3b      	ldrb	r3, [r7, #8]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	b21b      	sxth	r3, r3
 8003222:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003226:	b21a      	sxth	r2, r3
 8003228:	7a7b      	ldrb	r3, [r7, #9]
 800322a:	b21b      	sxth	r3, r3
 800322c:	4313      	orrs	r3, r2
 800322e:	83bb      	strh	r3, [r7, #28]
             valor = (int16_t)(valor | (valor & 0x2000) << 1 | (valor & 0x2000) << 2);
 8003230:	8bbb      	ldrh	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	b21b      	sxth	r3, r3
 8003236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323a:	b21a      	sxth	r2, r3
 800323c:	8bbb      	ldrh	r3, [r7, #28]
 800323e:	4313      	orrs	r3, r2
 8003240:	b21a      	sxth	r2, r3
 8003242:	8bbb      	ldrh	r3, [r7, #28]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	b21b      	sxth	r3, r3
 8003248:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800324c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003250:	b21b      	sxth	r3, r3
 8003252:	4313      	orrs	r3, r2
 8003254:	83bb      	strh	r3, [r7, #28]
//            if (valor > 0x1FFF)
//            {
//                valor = (int16_t)((valor) ^ (0xFFFF) + 1);
//            }
            // Guardo valor en la estructura de aceleracion.
            aceleracion.a_m[0] = valor;
 8003256:	8bbb      	ldrh	r3, [r7, #28]
 8003258:	82fb      	strh	r3, [r7, #22]
 800325a:	e001      	b.n	8003260 <StartMeasureAccel+0x228>
        }
        else
        {
            flag_adis16364_error = 1;
 800325c:	2301      	movs	r3, #1
 800325e:	77fb      	strb	r3, [r7, #31]
        }

        // Leo YACCL_OUT
        data_tx[0] = ADIS16364_YACCL_OUT;
 8003260:	230c      	movs	r3, #12
 8003262:	733b      	strb	r3, [r7, #12]
        HAL_SPI_Transmit(&hspi1, data_tx, 2, 200);
 8003264:	f107 010c 	add.w	r1, r7, #12
 8003268:	23c8      	movs	r3, #200	; 0xc8
 800326a:	2202      	movs	r2, #2
 800326c:	4831      	ldr	r0, [pc, #196]	; (8003334 <StartMeasureAccel+0x2fc>)
 800326e:	f006 f8d0 	bl	8009412 <HAL_SPI_Transmit>
        if(HAL_SPI_Receive(&hspi1, data_rx, 2, 200) == HAL_OK)
 8003272:	f107 0108 	add.w	r1, r7, #8
 8003276:	23c8      	movs	r3, #200	; 0xc8
 8003278:	2202      	movs	r2, #2
 800327a:	482e      	ldr	r0, [pc, #184]	; (8003334 <StartMeasureAccel+0x2fc>)
 800327c:	f006 fa3e 	bl	80096fc <HAL_SPI_Receive>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d11f      	bne.n	80032c6 <StartMeasureAccel+0x28e>
        {
            valor = (data_rx[0] & 0x3F) << 8 | (data_rx[1]);
 8003286:	7a3b      	ldrb	r3, [r7, #8]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	b21b      	sxth	r3, r3
 800328c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003290:	b21a      	sxth	r2, r3
 8003292:	7a7b      	ldrb	r3, [r7, #9]
 8003294:	b21b      	sxth	r3, r3
 8003296:	4313      	orrs	r3, r2
 8003298:	83bb      	strh	r3, [r7, #28]
             valor = (int16_t)(valor | (valor & 0x2000) << 1 | (valor & 0x2000) << 2);
 800329a:	8bbb      	ldrh	r3, [r7, #28]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	b21b      	sxth	r3, r3
 80032a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a4:	b21a      	sxth	r2, r3
 80032a6:	8bbb      	ldrh	r3, [r7, #28]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b21a      	sxth	r2, r3
 80032ac:	8bbb      	ldrh	r3, [r7, #28]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80032ba:	b21b      	sxth	r3, r3
 80032bc:	4313      	orrs	r3, r2
 80032be:	83bb      	strh	r3, [r7, #28]
//            if (valor > 0x1FFF)
//            {
//                valor = (int16_t)((valor) ^ (0xFFFF) + 1);
//            }
            // Guardo valor en la estructura de aceleracion.
            aceleracion.a_m[1] = valor;
 80032c0:	8bbb      	ldrh	r3, [r7, #28]
 80032c2:	833b      	strh	r3, [r7, #24]
 80032c4:	e001      	b.n	80032ca <StartMeasureAccel+0x292>
        }
        else
        {
            flag_adis16364_error = 1;
 80032c6:	2301      	movs	r3, #1
 80032c8:	77fb      	strb	r3, [r7, #31]
        }

        // Leo ZACCL_OUT
        data_tx[0] = ADIS16364_ZACCL_OUT;
 80032ca:	230e      	movs	r3, #14
 80032cc:	733b      	strb	r3, [r7, #12]
        HAL_SPI_Transmit(&hspi1, data_tx, 2, 200);
 80032ce:	f107 010c 	add.w	r1, r7, #12
 80032d2:	23c8      	movs	r3, #200	; 0xc8
 80032d4:	2202      	movs	r2, #2
 80032d6:	4817      	ldr	r0, [pc, #92]	; (8003334 <StartMeasureAccel+0x2fc>)
 80032d8:	f006 f89b 	bl	8009412 <HAL_SPI_Transmit>
        if (HAL_SPI_Receive(&hspi1, data_rx, 2, 200) == HAL_OK)
 80032dc:	f107 0108 	add.w	r1, r7, #8
 80032e0:	23c8      	movs	r3, #200	; 0xc8
 80032e2:	2202      	movs	r2, #2
 80032e4:	4813      	ldr	r0, [pc, #76]	; (8003334 <StartMeasureAccel+0x2fc>)
 80032e6:	f006 fa09 	bl	80096fc <HAL_SPI_Receive>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d127      	bne.n	8003340 <StartMeasureAccel+0x308>
        {
            valor = (data_rx[0] & 0x3F) << 8 | (data_rx[1]);
 80032f0:	7a3b      	ldrb	r3, [r7, #8]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	b21b      	sxth	r3, r3
 80032f6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80032fa:	b21a      	sxth	r2, r3
 80032fc:	7a7b      	ldrb	r3, [r7, #9]
 80032fe:	b21b      	sxth	r3, r3
 8003300:	4313      	orrs	r3, r2
 8003302:	83bb      	strh	r3, [r7, #28]
             valor = (int16_t)(valor | (valor & 0x2000) << 1 | (valor & 0x2000) << 2);
 8003304:	8bbb      	ldrh	r3, [r7, #28]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	b21b      	sxth	r3, r3
 800330a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330e:	b21a      	sxth	r2, r3
 8003310:	8bbb      	ldrh	r3, [r7, #28]
 8003312:	4313      	orrs	r3, r2
 8003314:	b21a      	sxth	r2, r3
 8003316:	8bbb      	ldrh	r3, [r7, #28]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	b21b      	sxth	r3, r3
 800331c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003324:	b21b      	sxth	r3, r3
 8003326:	4313      	orrs	r3, r2
 8003328:	83bb      	strh	r3, [r7, #28]
//            if (valor > 0x1FFF)
//            {
//                valor = (int16_t)((valor) ^ (0xFFFF) + 1);
//            }
            // Guardo valor en la estructura de aceleracion.
            aceleracion.a_m[2] = valor;
 800332a:	8bbb      	ldrh	r3, [r7, #28]
 800332c:	837b      	strh	r3, [r7, #26]
 800332e:	e009      	b.n	8003344 <StartMeasureAccel+0x30c>
 8003330:	48000400 	.word	0x48000400
 8003334:	20000560 	.word	0x20000560
 8003338:	2000086c 	.word	0x2000086c
 800333c:	20000000 	.word	0x20000000
        }
        else
        {
            flag_adis16364_error = 1;
 8003340:	2301      	movs	r3, #1
 8003342:	77fb      	strb	r3, [r7, #31]
        }

        if (flag_adis16364_error == 0){
 8003344:	7ffb      	ldrb	r3, [r7, #31]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d111      	bne.n	800336e <StartMeasureAccel+0x336>
            if( xSemaphoreTake( myBinarySemAccelTxHandle, ( TickType_t ) 0 ) == pdTRUE )
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <StartMeasureAccel+0x344>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f00a fb23 	bl	800d99c <xQueueSemaphoreTake>
 8003356:	4603      	mov	r3, r0
 8003358:	2b01      	cmp	r3, #1
 800335a:	d108      	bne.n	800336e <StartMeasureAccel+0x336>
            {
                //Envio las aceleraciones a la tarea de transmitir valores medidos
                if( xQueueSend(myQueueAccelTxHandle, &aceleracion, portMAX_DELAY) == pdPASS ){
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <StartMeasureAccel+0x348>)
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	f107 0110 	add.w	r1, r7, #16
 8003364:	2300      	movs	r3, #0
 8003366:	f04f 32ff 	mov.w	r2, #4294967295
 800336a:	f00a f939 	bl	800d5e0 <xQueueGenericSend>
                    // Debug
                }
            }
        }
	  }
    flag_adis16364_error = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	77fb      	strb	r3, [r7, #31]
    osDelay(5);
 8003372:	2005      	movs	r0, #5
 8003374:	f009 fed6 	bl	800d124 <osDelay>
	  if ( state == RUN_State){
 8003378:	e699      	b.n	80030ae <StartMeasureAccel+0x76>
 800337a:	bf00      	nop
 800337c:	2000086c 	.word	0x2000086c
 8003380:	20000890 	.word	0x20000890

08003384 <StartMeasureVel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMeasureVel */
void StartMeasureVel(void const * argument)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMeasureVel */
	s_Velocidad_ruedas vel_medida;
	int STOP_FLAG[4] = {0,0,0,0};
 800338c:	f107 0308 	add.w	r3, r7, #8
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
	vel_medida.u_1 = 0.0;
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]
	vel_medida.u_2 = 0.0;
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
	vel_medida.u_3 = 0.0;
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	623b      	str	r3, [r7, #32]
	vel_medida.u_4 = 0.0;
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
//	char str[100];
	xSemaphoreGive( myBinarySemVelControlHandle );
 80033b2:	4b57      	ldr	r3, [pc, #348]	; (8003510 <StartMeasureVel+0x18c>)
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	2300      	movs	r3, #0
 80033b8:	2200      	movs	r2, #0
 80033ba:	2100      	movs	r1, #0
 80033bc:	f00a f910 	bl	800d5e0 <xQueueGenericSend>
	xSemaphoreGive( myBinarySemVelTxHandle );
 80033c0:	4b54      	ldr	r3, [pc, #336]	; (8003514 <StartMeasureVel+0x190>)
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	2300      	movs	r3, #0
 80033c6:	2200      	movs	r2, #0
 80033c8:	2100      	movs	r1, #0
 80033ca:	f00a f909 	bl	800d5e0 <xQueueGenericSend>
  /* Infinite loop */
  for(;;)
  {
	if ( state == RUN_State){
 80033ce:	4b52      	ldr	r3, [pc, #328]	; (8003518 <StartMeasureVel+0x194>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	f040 8098 	bne.w	8003508 <StartMeasureVel+0x184>
		counter_stop[0] = counter_stop[0] + 1;
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <StartMeasureVel+0x198>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3301      	adds	r3, #1
 80033de:	4a4f      	ldr	r2, [pc, #316]	; (800351c <StartMeasureVel+0x198>)
 80033e0:	6013      	str	r3, [r2, #0]
		if(counter_stop[0]>=1000){
 80033e2:	4b4e      	ldr	r3, [pc, #312]	; (800351c <StartMeasureVel+0x198>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033ea:	db06      	blt.n	80033fa <StartMeasureVel+0x76>
			STOP_FLAG[0] = 1;
 80033ec:	2301      	movs	r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
			counter_stop[0] = 1000;
 80033f0:	4b4a      	ldr	r3, [pc, #296]	; (800351c <StartMeasureVel+0x198>)
 80033f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	e001      	b.n	80033fe <StartMeasureVel+0x7a>
		}
		else
			STOP_FLAG[0] = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]

		counter_stop[1] = counter_stop[1] + 1;
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <StartMeasureVel+0x198>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	3301      	adds	r3, #1
 8003404:	4a45      	ldr	r2, [pc, #276]	; (800351c <StartMeasureVel+0x198>)
 8003406:	6053      	str	r3, [r2, #4]
		if(counter_stop[1]>=1000){
 8003408:	4b44      	ldr	r3, [pc, #272]	; (800351c <StartMeasureVel+0x198>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003410:	db06      	blt.n	8003420 <StartMeasureVel+0x9c>
			STOP_FLAG[1] = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
			counter_stop[1] = 1000;
 8003416:	4b41      	ldr	r3, [pc, #260]	; (800351c <StartMeasureVel+0x198>)
 8003418:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	e001      	b.n	8003424 <StartMeasureVel+0xa0>
		}
		else
			STOP_FLAG[1] = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]

		counter_stop[2] = counter_stop[2] + 1;
 8003424:	4b3d      	ldr	r3, [pc, #244]	; (800351c <StartMeasureVel+0x198>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	3301      	adds	r3, #1
 800342a:	4a3c      	ldr	r2, [pc, #240]	; (800351c <StartMeasureVel+0x198>)
 800342c:	6093      	str	r3, [r2, #8]
		if(counter_stop[2]>=1000){
 800342e:	4b3b      	ldr	r3, [pc, #236]	; (800351c <StartMeasureVel+0x198>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003436:	db06      	blt.n	8003446 <StartMeasureVel+0xc2>
			STOP_FLAG[2] = 1;
 8003438:	2301      	movs	r3, #1
 800343a:	613b      	str	r3, [r7, #16]
			counter_stop[2] = 1000;
 800343c:	4b37      	ldr	r3, [pc, #220]	; (800351c <StartMeasureVel+0x198>)
 800343e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	e001      	b.n	800344a <StartMeasureVel+0xc6>
		}
		else
			STOP_FLAG[2] = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]

		counter_stop[3] = counter_stop[3] + 1;
 800344a:	4b34      	ldr	r3, [pc, #208]	; (800351c <StartMeasureVel+0x198>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	4a32      	ldr	r2, [pc, #200]	; (800351c <StartMeasureVel+0x198>)
 8003452:	60d3      	str	r3, [r2, #12]
		if(counter_stop[3]>=1000){
 8003454:	4b31      	ldr	r3, [pc, #196]	; (800351c <StartMeasureVel+0x198>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800345c:	db06      	blt.n	800346c <StartMeasureVel+0xe8>
			STOP_FLAG[3] = 1;
 800345e:	2301      	movs	r3, #1
 8003460:	617b      	str	r3, [r7, #20]
			counter_stop[3] = 1000;
 8003462:	4b2e      	ldr	r3, [pc, #184]	; (800351c <StartMeasureVel+0x198>)
 8003464:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	e001      	b.n	8003470 <StartMeasureVel+0xec>
		}
		else
			STOP_FLAG[3] = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]

		// Guarda velocidad de cada rueda 
		if (STOP_FLAG[0] == 1)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d103      	bne.n	800347e <StartMeasureVel+0xfa>
			vel_medida.u_1 = 0.0;
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	e002      	b.n	8003484 <StartMeasureVel+0x100>
		else
			vel_medida.u_1 = u1_medida;
 800347e:	4b28      	ldr	r3, [pc, #160]	; (8003520 <StartMeasureVel+0x19c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	61bb      	str	r3, [r7, #24]

		if (STOP_FLAG[1] == 1)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d103      	bne.n	8003492 <StartMeasureVel+0x10e>
			vel_medida.u_2 = 0.0;
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	e002      	b.n	8003498 <StartMeasureVel+0x114>
		else
			vel_medida.u_2 = u2_medida;
 8003492:	4b24      	ldr	r3, [pc, #144]	; (8003524 <StartMeasureVel+0x1a0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61fb      	str	r3, [r7, #28]

		if (STOP_FLAG[2] == 1)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d103      	bne.n	80034a6 <StartMeasureVel+0x122>
			vel_medida.u_3 = 0.0;
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	623b      	str	r3, [r7, #32]
 80034a4:	e002      	b.n	80034ac <StartMeasureVel+0x128>
		else
			vel_medida.u_3 = u3_medida;
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <StartMeasureVel+0x1a4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	623b      	str	r3, [r7, #32]

		if (STOP_FLAG[3] == 1)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d103      	bne.n	80034ba <StartMeasureVel+0x136>
			vel_medida.u_4 = 0.0;
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	e002      	b.n	80034c0 <StartMeasureVel+0x13c>
		else
			vel_medida.u_4 = u4_medida;
 80034ba:	4b1c      	ldr	r3, [pc, #112]	; (800352c <StartMeasureVel+0x1a8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	627b      	str	r3, [r7, #36]	; 0x24


		// Intento tomar el semaforo
		if( xSemaphoreTake( myBinarySemVelControlHandle, ( TickType_t ) 0 ) == pdTRUE )
 80034c0:	4b13      	ldr	r3, [pc, #76]	; (8003510 <StartMeasureVel+0x18c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00a fa68 	bl	800d99c <xQueueSemaphoreTake>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d108      	bne.n	80034e4 <StartMeasureVel+0x160>
		{
			// Envio velocidad a la tarea de control de motores
			if( xQueueSend(myQueueVelControlHandle, &vel_medida, portMAX_DELAY) == pdPASS ){
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <StartMeasureVel+0x1ac>)
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	f107 0118 	add.w	r1, r7, #24
 80034da:	2300      	movs	r3, #0
 80034dc:	f04f 32ff 	mov.w	r2, #4294967295
 80034e0:	f00a f87e 	bl	800d5e0 <xQueueGenericSend>
                // Debug
			}
		}

		// Intento tomar el semaforo
		if( xSemaphoreTake( myBinarySemVelTxHandle, ( TickType_t ) 0 ) == pdTRUE )
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <StartMeasureVel+0x190>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f00a fa56 	bl	800d99c <xQueueSemaphoreTake>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d108      	bne.n	8003508 <StartMeasureVel+0x184>
		{
			// Envio velocidad a la tarea que transmite los valores
			if( xQueueSend(myQueueVelTxHandle, &vel_medida, portMAX_DELAY) == pdPASS ){
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <StartMeasureVel+0x1b0>)
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	f107 0118 	add.w	r1, r7, #24
 80034fe:	2300      	movs	r3, #0
 8003500:	f04f 32ff 	mov.w	r2, #4294967295
 8003504:	f00a f86c 	bl	800d5e0 <xQueueGenericSend>
			}
		}


	  }
	  osDelay(1);
 8003508:	2001      	movs	r0, #1
 800350a:	f009 fe0b 	bl	800d124 <osDelay>
	if ( state == RUN_State){
 800350e:	e75e      	b.n	80033ce <StartMeasureVel+0x4a>
 8003510:	20000874 	.word	0x20000874
 8003514:	20000870 	.word	0x20000870
 8003518:	20000000 	.word	0x20000000
 800351c:	200008dc 	.word	0x200008dc
 8003520:	200008c4 	.word	0x200008c4
 8003524:	200008c8 	.word	0x200008c8
 8003528:	200008cc 	.word	0x200008cc
 800352c:	200008d0 	.word	0x200008d0
 8003530:	20000888 	.word	0x20000888
 8003534:	2000088c 	.word	0x2000088c

08003538 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a04      	ldr	r2, [pc, #16]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800354a:	f000 fd8b 	bl	8004064 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40001000 	.word	0x40001000

0800355c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003560:	b672      	cpsid	i
}
 8003562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003564:	e7fe      	b.n	8003564 <Error_Handler+0x8>
	...

08003568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <HAL_MspInit+0x4c>)
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	4a10      	ldr	r2, [pc, #64]	; (80035b4 <HAL_MspInit+0x4c>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6193      	str	r3, [r2, #24]
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <HAL_MspInit+0x4c>)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_MspInit+0x4c>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <HAL_MspInit+0x4c>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	61d3      	str	r3, [r2, #28]
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <HAL_MspInit+0x4c>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800359e:	2200      	movs	r2, #0
 80035a0:	210f      	movs	r1, #15
 80035a2:	f06f 0001 	mvn.w	r0, #1
 80035a6:	f002 f877 	bl	8005698 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000

080035b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a19      	ldr	r2, [pc, #100]	; (800363c <HAL_ADC_MspInit+0x84>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d12b      	bne.n	8003632 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80035da:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_ADC_MspInit+0x88>)
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	4a18      	ldr	r2, [pc, #96]	; (8003640 <HAL_ADC_MspInit+0x88>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e4:	6153      	str	r3, [r2, #20]
 80035e6:	4b16      	ldr	r3, [pc, #88]	; (8003640 <HAL_ADC_MspInit+0x88>)
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <HAL_ADC_MspInit+0x88>)
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	4a12      	ldr	r2, [pc, #72]	; (8003640 <HAL_ADC_MspInit+0x88>)
 80035f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035fc:	6153      	str	r3, [r2, #20]
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_ADC_MspInit+0x88>)
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC5     ------> ADC2_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800360a:	2320      	movs	r3, #32
 800360c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800360e:	2303      	movs	r3, #3
 8003610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003616:	f107 0314 	add.w	r3, r7, #20
 800361a:	4619      	mov	r1, r3
 800361c:	4809      	ldr	r0, [pc, #36]	; (8003644 <HAL_ADC_MspInit+0x8c>)
 800361e:	f002 fc9b 	bl	8005f58 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8003622:	2200      	movs	r2, #0
 8003624:	2105      	movs	r1, #5
 8003626:	2012      	movs	r0, #18
 8003628:	f002 f836 	bl	8005698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800362c:	2012      	movs	r0, #18
 800362e:	f002 f84f 	bl	80056d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003632:	bf00      	nop
 8003634:	3728      	adds	r7, #40	; 0x28
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	50000100 	.word	0x50000100
 8003640:	40021000 	.word	0x40021000
 8003644:	48000800 	.word	0x48000800

08003648 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <HAL_CRC_MspInit+0x38>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d10b      	bne.n	8003672 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_CRC_MspInit+0x3c>)
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	4a09      	ldr	r2, [pc, #36]	; (8003684 <HAL_CRC_MspInit+0x3c>)
 8003660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003664:	6153      	str	r3, [r2, #20]
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <HAL_CRC_MspInit+0x3c>)
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40023000 	.word	0x40023000
 8003684:	40021000 	.word	0x40021000

08003688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1f      	ldr	r2, [pc, #124]	; (8003724 <HAL_I2C_MspInit+0x9c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d138      	bne.n	800371c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036aa:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <HAL_I2C_MspInit+0xa0>)
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <HAL_I2C_MspInit+0xa0>)
 80036b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b4:	6153      	str	r3, [r2, #20]
 80036b6:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <HAL_I2C_MspInit+0xa0>)
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036c8:	2312      	movs	r3, #18
 80036ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036d0:	2303      	movs	r3, #3
 80036d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036d4:	2304      	movs	r3, #4
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	4619      	mov	r1, r3
 80036de:	4813      	ldr	r0, [pc, #76]	; (800372c <HAL_I2C_MspInit+0xa4>)
 80036e0:	f002 fc3a 	bl	8005f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_I2C_MspInit+0xa0>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	4a0f      	ldr	r2, [pc, #60]	; (8003728 <HAL_I2C_MspInit+0xa0>)
 80036ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036ee:	61d3      	str	r3, [r2, #28]
 80036f0:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <HAL_I2C_MspInit+0xa0>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80036fc:	2200      	movs	r2, #0
 80036fe:	2105      	movs	r1, #5
 8003700:	201f      	movs	r0, #31
 8003702:	f001 ffc9 	bl	8005698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003706:	201f      	movs	r0, #31
 8003708:	f001 ffe2 	bl	80056d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800370c:	2200      	movs	r2, #0
 800370e:	2105      	movs	r1, #5
 8003710:	2020      	movs	r0, #32
 8003712:	f001 ffc1 	bl	8005698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003716:	2020      	movs	r0, #32
 8003718:	f001 ffda 	bl	80056d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800371c:	bf00      	nop
 800371e:	3728      	adds	r7, #40	; 0x28
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40005400 	.word	0x40005400
 8003728:	40021000 	.word	0x40021000
 800372c:	48000400 	.word	0x48000400

08003730 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	; 0x28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a17      	ldr	r2, [pc, #92]	; (80037ac <HAL_SPI_MspInit+0x7c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d128      	bne.n	80037a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003752:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <HAL_SPI_MspInit+0x80>)
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <HAL_SPI_MspInit+0x80>)
 8003758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800375c:	6193      	str	r3, [r2, #24]
 800375e:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <HAL_SPI_MspInit+0x80>)
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_SPI_MspInit+0x80>)
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	4a10      	ldr	r2, [pc, #64]	; (80037b0 <HAL_SPI_MspInit+0x80>)
 8003770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003774:	6153      	str	r3, [r2, #20]
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <HAL_SPI_MspInit+0x80>)
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003782:	23e0      	movs	r3, #224	; 0xe0
 8003784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800378e:	2303      	movs	r3, #3
 8003790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003792:	2305      	movs	r3, #5
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003796:	f107 0314 	add.w	r3, r7, #20
 800379a:	4619      	mov	r1, r3
 800379c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a0:	f002 fbda 	bl	8005f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80037a4:	bf00      	nop
 80037a6:	3728      	adds	r7, #40	; 0x28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40013000 	.word	0x40013000
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2e      	ldr	r2, [pc, #184]	; (800387c <HAL_TIM_Base_MspInit+0xc8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d10c      	bne.n	80037e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037c6:	4b2e      	ldr	r3, [pc, #184]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	4a2d      	ldr	r2, [pc, #180]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 80037cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037d0:	6193      	str	r3, [r2, #24]
 80037d2:	4b2b      	ldr	r3, [pc, #172]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80037de:	e046      	b.n	800386e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e8:	d10c      	bne.n	8003804 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037ea:	4b25      	ldr	r3, [pc, #148]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4a24      	ldr	r2, [pc, #144]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	61d3      	str	r3, [r2, #28]
 80037f6:	4b22      	ldr	r3, [pc, #136]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	69bb      	ldr	r3, [r7, #24]
}
 8003802:	e034      	b.n	800386e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1e      	ldr	r2, [pc, #120]	; (8003884 <HAL_TIM_Base_MspInit+0xd0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d10c      	bne.n	8003828 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800380e:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 8003814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003818:	6193      	str	r3, [r2, #24]
 800381a:	4b19      	ldr	r3, [pc, #100]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697b      	ldr	r3, [r7, #20]
}
 8003826:	e022      	b.n	800386e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM15)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a16      	ldr	r2, [pc, #88]	; (8003888 <HAL_TIM_Base_MspInit+0xd4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d10c      	bne.n	800384c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003832:	4b13      	ldr	r3, [pc, #76]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	4a12      	ldr	r2, [pc, #72]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6193      	str	r3, [r2, #24]
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
}
 800384a:	e010      	b.n	800386e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM16)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0e      	ldr	r2, [pc, #56]	; (800388c <HAL_TIM_Base_MspInit+0xd8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10b      	bne.n	800386e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	4a09      	ldr	r2, [pc, #36]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 800385c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003860:	6193      	str	r3, [r2, #24]
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <HAL_TIM_Base_MspInit+0xcc>)
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
}
 800386e:	bf00      	nop
 8003870:	3724      	adds	r7, #36	; 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40021000 	.word	0x40021000
 8003884:	40013400 	.word	0x40013400
 8003888:	40014000 	.word	0x40014000
 800388c:	40014400 	.word	0x40014400

08003890 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b090      	sub	sp, #64	; 0x40
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a80      	ldr	r2, [pc, #512]	; (8003ab0 <HAL_TIM_MspPostInit+0x220>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d139      	bne.n	8003926 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b2:	4b80      	ldr	r3, [pc, #512]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	4a7f      	ldr	r2, [pc, #508]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 80038b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038bc:	6153      	str	r3, [r2, #20]
 80038be:	4b7d      	ldr	r3, [pc, #500]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ca:	4b7a      	ldr	r3, [pc, #488]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	4a79      	ldr	r2, [pc, #484]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 80038d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d4:	6153      	str	r3, [r2, #20]
 80038d6:	4b77      	ldr	r3, [pc, #476]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038e2:	2301      	movs	r3, #1
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ee:	2300      	movs	r3, #0
 80038f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80038f2:	2302      	movs	r3, #2
 80038f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038fa:	4619      	mov	r1, r3
 80038fc:	486e      	ldr	r0, [pc, #440]	; (8003ab8 <HAL_TIM_MspPostInit+0x228>)
 80038fe:	f002 fb2b 	bl	8005f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003910:	2300      	movs	r3, #0
 8003912:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003914:	2306      	movs	r3, #6
 8003916:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800391c:	4619      	mov	r1, r3
 800391e:	4867      	ldr	r0, [pc, #412]	; (8003abc <HAL_TIM_MspPostInit+0x22c>)
 8003920:	f002 fb1a 	bl	8005f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003924:	e0bf      	b.n	8003aa6 <HAL_TIM_MspPostInit+0x216>
  else if(htim->Instance==TIM8)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a65      	ldr	r2, [pc, #404]	; (8003ac0 <HAL_TIM_MspPostInit+0x230>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d13b      	bne.n	80039a8 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003930:	4b60      	ldr	r3, [pc, #384]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	4a5f      	ldr	r2, [pc, #380]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 8003936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800393a:	6153      	str	r3, [r2, #20]
 800393c:	4b5d      	ldr	r3, [pc, #372]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	623b      	str	r3, [r7, #32]
 8003946:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003948:	4b5a      	ldr	r3, [pc, #360]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	4a59      	ldr	r2, [pc, #356]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 800394e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003952:	6153      	str	r3, [r2, #20]
 8003954:	4b57      	ldr	r3, [pc, #348]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2302      	movs	r3, #2
 8003968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396e:	2300      	movs	r3, #0
 8003970:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8003972:	2302      	movs	r3, #2
 8003974:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800397a:	4619      	mov	r1, r3
 800397c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003980:	f002 faea 	bl	8005f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398a:	2302      	movs	r3, #2
 800398c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	2300      	movs	r3, #0
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003992:	2300      	movs	r3, #0
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003996:	2304      	movs	r3, #4
 8003998:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800399a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800399e:	4619      	mov	r1, r3
 80039a0:	4845      	ldr	r0, [pc, #276]	; (8003ab8 <HAL_TIM_MspPostInit+0x228>)
 80039a2:	f002 fad9 	bl	8005f58 <HAL_GPIO_Init>
}
 80039a6:	e07e      	b.n	8003aa6 <HAL_TIM_MspPostInit+0x216>
  else if(htim->Instance==TIM15)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a45      	ldr	r2, [pc, #276]	; (8003ac4 <HAL_TIM_MspPostInit+0x234>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d13a      	bne.n	8003a28 <HAL_TIM_MspPostInit+0x198>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b2:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4a3f      	ldr	r2, [pc, #252]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 80039b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039bc:	6153      	str	r3, [r2, #20]
 80039be:	4b3d      	ldr	r3, [pc, #244]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ca:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	4a39      	ldr	r2, [pc, #228]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 80039d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d4:	6153      	str	r3, [r2, #20]
 80039d6:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80039e2:	2302      	movs	r3, #2
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e6:	2302      	movs	r3, #2
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ee:	2300      	movs	r3, #0
 80039f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80039f2:	2309      	movs	r3, #9
 80039f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039fa:	4619      	mov	r1, r3
 80039fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a00:	f002 faaa 	bl	8005f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003a04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	2300      	movs	r3, #0
 8003a14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003a16:	2301      	movs	r3, #1
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4826      	ldr	r0, [pc, #152]	; (8003abc <HAL_TIM_MspPostInit+0x22c>)
 8003a22:	f002 fa99 	bl	8005f58 <HAL_GPIO_Init>
}
 8003a26:	e03e      	b.n	8003aa6 <HAL_TIM_MspPostInit+0x216>
  else if(htim->Instance==TIM16)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a26      	ldr	r2, [pc, #152]	; (8003ac8 <HAL_TIM_MspPostInit+0x238>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d139      	bne.n	8003aa6 <HAL_TIM_MspPostInit+0x216>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a32:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4a1f      	ldr	r2, [pc, #124]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 8003a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3c:	6153      	str	r3, [r2, #20]
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a4a:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	4a19      	ldr	r2, [pc, #100]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 8003a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a54:	6153      	str	r3, [r2, #20]
 8003a56:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <HAL_TIM_MspPostInit+0x224>)
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a70:	2300      	movs	r3, #0
 8003a72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003a74:	2301      	movs	r3, #1
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a82:	f002 fa69 	bl	8005f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a86:	2340      	movs	r3, #64	; 0x40
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a92:	2300      	movs	r3, #0
 8003a94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003a96:	2301      	movs	r3, #1
 8003a98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4806      	ldr	r0, [pc, #24]	; (8003abc <HAL_TIM_MspPostInit+0x22c>)
 8003aa2:	f002 fa59 	bl	8005f58 <HAL_GPIO_Init>
}
 8003aa6:	bf00      	nop
 8003aa8:	3740      	adds	r7, #64	; 0x40
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	48000800 	.word	0x48000800
 8003abc:	48000400 	.word	0x48000400
 8003ac0:	40013400 	.word	0x40013400
 8003ac4:	40014000 	.word	0x40014000
 8003ac8:	40014400 	.word	0x40014400

08003acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad4:	f107 0314 	add.w	r3, r7, #20
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a50      	ldr	r2, [pc, #320]	; (8003c2c <HAL_UART_MspInit+0x160>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	f040 809a 	bne.w	8003c24 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003af0:	4b4f      	ldr	r3, [pc, #316]	; (8003c30 <HAL_UART_MspInit+0x164>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	4a4e      	ldr	r2, [pc, #312]	; (8003c30 <HAL_UART_MspInit+0x164>)
 8003af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003afa:	6193      	str	r3, [r2, #24]
 8003afc:	4b4c      	ldr	r3, [pc, #304]	; (8003c30 <HAL_UART_MspInit+0x164>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b08:	4b49      	ldr	r3, [pc, #292]	; (8003c30 <HAL_UART_MspInit+0x164>)
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	4a48      	ldr	r2, [pc, #288]	; (8003c30 <HAL_UART_MspInit+0x164>)
 8003b0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b12:	6153      	str	r3, [r2, #20]
 8003b14:	4b46      	ldr	r3, [pc, #280]	; (8003c30 <HAL_UART_MspInit+0x164>)
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b20:	4b43      	ldr	r3, [pc, #268]	; (8003c30 <HAL_UART_MspInit+0x164>)
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	4a42      	ldr	r2, [pc, #264]	; (8003c30 <HAL_UART_MspInit+0x164>)
 8003b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2a:	6153      	str	r3, [r2, #20]
 8003b2c:	4b40      	ldr	r3, [pc, #256]	; (8003c30 <HAL_UART_MspInit+0x164>)
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b38:	2310      	movs	r3, #16
 8003b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b44:	2303      	movs	r3, #3
 8003b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b48:	2307      	movs	r3, #7
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	4619      	mov	r1, r3
 8003b52:	4838      	ldr	r0, [pc, #224]	; (8003c34 <HAL_UART_MspInit+0x168>)
 8003b54:	f002 fa00 	bl	8005f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b66:	2303      	movs	r3, #3
 8003b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b6a:	2307      	movs	r3, #7
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6e:	f107 0314 	add.w	r3, r7, #20
 8003b72:	4619      	mov	r1, r3
 8003b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b78:	f002 f9ee 	bl	8005f58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <HAL_UART_MspInit+0x16c>)
 8003b7e:	4a2f      	ldr	r2, [pc, #188]	; (8003c3c <HAL_UART_MspInit+0x170>)
 8003b80:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b82:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_UART_MspInit+0x16c>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_UART_MspInit+0x16c>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <HAL_UART_MspInit+0x16c>)
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b94:	4b28      	ldr	r3, [pc, #160]	; (8003c38 <HAL_UART_MspInit+0x16c>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b9a:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <HAL_UART_MspInit+0x16c>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003ba0:	4b25      	ldr	r3, [pc, #148]	; (8003c38 <HAL_UART_MspInit+0x16c>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ba6:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <HAL_UART_MspInit+0x16c>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003bac:	4822      	ldr	r0, [pc, #136]	; (8003c38 <HAL_UART_MspInit+0x16c>)
 8003bae:	f001 ff9b 	bl	8005ae8 <HAL_DMA_Init>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8003bb8:	f7ff fcd0 	bl	800355c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1e      	ldr	r2, [pc, #120]	; (8003c38 <HAL_UART_MspInit+0x16c>)
 8003bc0:	675a      	str	r2, [r3, #116]	; 0x74
 8003bc2:	4a1d      	ldr	r2, [pc, #116]	; (8003c38 <HAL_UART_MspInit+0x16c>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_UART_MspInit+0x174>)
 8003bca:	4a1e      	ldr	r2, [pc, #120]	; (8003c44 <HAL_UART_MspInit+0x178>)
 8003bcc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bce:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <HAL_UART_MspInit+0x174>)
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_UART_MspInit+0x174>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bda:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_UART_MspInit+0x174>)
 8003bdc:	2280      	movs	r2, #128	; 0x80
 8003bde:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003be0:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_UART_MspInit+0x174>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003be6:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <HAL_UART_MspInit+0x174>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003bec:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <HAL_UART_MspInit+0x174>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_UART_MspInit+0x174>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003bf8:	4811      	ldr	r0, [pc, #68]	; (8003c40 <HAL_UART_MspInit+0x174>)
 8003bfa:	f001 ff75 	bl	8005ae8 <HAL_DMA_Init>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8003c04:	f7ff fcaa 	bl	800355c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a0d      	ldr	r2, [pc, #52]	; (8003c40 <HAL_UART_MspInit+0x174>)
 8003c0c:	671a      	str	r2, [r3, #112]	; 0x70
 8003c0e:	4a0c      	ldr	r2, [pc, #48]	; (8003c40 <HAL_UART_MspInit+0x174>)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003c14:	2200      	movs	r2, #0
 8003c16:	2105      	movs	r1, #5
 8003c18:	2025      	movs	r0, #37	; 0x25
 8003c1a:	f001 fd3d 	bl	8005698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c1e:	2025      	movs	r0, #37	; 0x25
 8003c20:	f001 fd56 	bl	80056d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c24:	bf00      	nop
 8003c26:	3728      	adds	r7, #40	; 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40013800 	.word	0x40013800
 8003c30:	40021000 	.word	0x40021000
 8003c34:	48000800 	.word	0x48000800
 8003c38:	200007c8 	.word	0x200007c8
 8003c3c:	40020058 	.word	0x40020058
 8003c40:	2000080c 	.word	0x2000080c
 8003c44:	40020044 	.word	0x40020044

08003c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08e      	sub	sp, #56	; 0x38
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c58:	4b33      	ldr	r3, [pc, #204]	; (8003d28 <HAL_InitTick+0xe0>)
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	4a32      	ldr	r2, [pc, #200]	; (8003d28 <HAL_InitTick+0xe0>)
 8003c5e:	f043 0310 	orr.w	r3, r3, #16
 8003c62:	61d3      	str	r3, [r2, #28]
 8003c64:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <HAL_InitTick+0xe0>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c70:	f107 0210 	add.w	r2, r7, #16
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4611      	mov	r1, r2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f005 f8ce 	bl	8008e1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d103      	bne.n	8003c92 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003c8a:	f005 f883 	bl	8008d94 <HAL_RCC_GetPCLK1Freq>
 8003c8e:	6378      	str	r0, [r7, #52]	; 0x34
 8003c90:	e004      	b.n	8003c9c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003c92:	f005 f87f 	bl	8008d94 <HAL_RCC_GetPCLK1Freq>
 8003c96:	4603      	mov	r3, r0
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9e:	4a23      	ldr	r2, [pc, #140]	; (8003d2c <HAL_InitTick+0xe4>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	0c9b      	lsrs	r3, r3, #18
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003caa:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <HAL_InitTick+0xe8>)
 8003cac:	4a21      	ldr	r2, [pc, #132]	; (8003d34 <HAL_InitTick+0xec>)
 8003cae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003cb0:	4b1f      	ldr	r3, [pc, #124]	; (8003d30 <HAL_InitTick+0xe8>)
 8003cb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_InitTick+0xe8>)
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <HAL_InitTick+0xe8>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <HAL_InitTick+0xe8>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cca:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <HAL_InitTick+0xe8>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003cd0:	4817      	ldr	r0, [pc, #92]	; (8003d30 <HAL_InitTick+0xe8>)
 8003cd2:	f006 fa29 	bl	800a128 <HAL_TIM_Base_Init>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11b      	bne.n	8003d1c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003ce4:	4812      	ldr	r0, [pc, #72]	; (8003d30 <HAL_InitTick+0xe8>)
 8003ce6:	f006 fa77 	bl	800a1d8 <HAL_TIM_Base_Start_IT>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003cf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d111      	bne.n	8003d1c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003cf8:	2036      	movs	r0, #54	; 0x36
 8003cfa:	f001 fce9 	bl	80056d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b0f      	cmp	r3, #15
 8003d02:	d808      	bhi.n	8003d16 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003d04:	2200      	movs	r2, #0
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	2036      	movs	r0, #54	; 0x36
 8003d0a:	f001 fcc5 	bl	8005698 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d0e:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <HAL_InitTick+0xf0>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	e002      	b.n	8003d1c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003d1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3738      	adds	r7, #56	; 0x38
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	431bde83 	.word	0x431bde83
 8003d30:	200008f4 	.word	0x200008f4
 8003d34:	40001000 	.word	0x40001000
 8003d38:	20000008 	.word	0x20000008

08003d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d40:	e7fe      	b.n	8003d40 <NMI_Handler+0x4>

08003d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d46:	e7fe      	b.n	8003d46 <HardFault_Handler+0x4>

08003d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d4c:	e7fe      	b.n	8003d4c <MemManage_Handler+0x4>

08003d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d52:	e7fe      	b.n	8003d52 <BusFault_Handler+0x4>

08003d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d58:	e7fe      	b.n	8003d58 <UsageFault_Handler+0x4>

08003d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder4_Pin);
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f002 fa95 	bl	800629c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003d7c:	4802      	ldr	r0, [pc, #8]	; (8003d88 <DMA1_Channel4_IRQHandler+0x10>)
 8003d7e:	f001 ffd0 	bl	8005d22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	2000080c 	.word	0x2000080c

08003d8c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d90:	4802      	ldr	r0, [pc, #8]	; (8003d9c <DMA1_Channel5_IRQHandler+0x10>)
 8003d92:	f001 ffc6 	bl	8005d22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	200007c8 	.word	0x200007c8

08003da0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8003da4:	4802      	ldr	r0, [pc, #8]	; (8003db0 <ADC1_2_IRQHandler+0x10>)
 8003da6:	f000 fcfd 	bl	80047a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000498 	.word	0x20000498

08003db4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder3_Pin);
 8003db8:	2040      	movs	r0, #64	; 0x40
 8003dba:	f002 fa6f 	bl	800629c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encoder2_Pin);
 8003dbe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003dc2:	f002 fa6b 	bl	800629c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003dd0:	4802      	ldr	r0, [pc, #8]	; (8003ddc <I2C1_EV_IRQHandler+0x10>)
 8003dd2:	f002 fcf5 	bl	80067c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	2000050c 	.word	0x2000050c

08003de0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003de4:	4802      	ldr	r0, [pc, #8]	; (8003df0 <I2C1_ER_IRQHandler+0x10>)
 8003de6:	f002 fd05 	bl	80067f4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	2000050c 	.word	0x2000050c

08003df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003df8:	4802      	ldr	r0, [pc, #8]	; (8003e04 <USART1_IRQHandler+0x10>)
 8003dfa:	f007 ffcb 	bl	800bd94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000740 	.word	0x20000740

08003e08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Pin);
 8003e0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003e10:	f002 fa44 	bl	800629c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003e14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e18:	f002 fa40 	bl	800629c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e24:	4802      	ldr	r0, [pc, #8]	; (8003e30 <TIM6_DAC_IRQHandler+0x10>)
 8003e26:	f006 fd0d 	bl	800a844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	200008f4 	.word	0x200008f4

08003e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return 1;
 8003e38:	2301      	movs	r3, #1
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <_kill>:

int _kill(int pid, int sig)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e4e:	f00c fa11 	bl	8010274 <__errno>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2216      	movs	r2, #22
 8003e56:	601a      	str	r2, [r3, #0]
  return -1;
 8003e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <_exit>:

void _exit (int status)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ffe7 	bl	8003e44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e76:	e7fe      	b.n	8003e76 <_exit+0x12>

08003e78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e00a      	b.n	8003ea0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e8a:	f3af 8000 	nop.w
 8003e8e:	4601      	mov	r1, r0
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	60ba      	str	r2, [r7, #8]
 8003e96:	b2ca      	uxtb	r2, r1
 8003e98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	dbf0      	blt.n	8003e8a <_read+0x12>
  }

  return len;
 8003ea8:	687b      	ldr	r3, [r7, #4]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b086      	sub	sp, #24
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e009      	b.n	8003ed8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	60ba      	str	r2, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	dbf1      	blt.n	8003ec4 <_write+0x12>
  }
  return len;
 8003ee0:	687b      	ldr	r3, [r7, #4]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <_close>:

int _close(int file)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f12:	605a      	str	r2, [r3, #4]
  return 0;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <_isatty>:

int _isatty(int file)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f2a:	2301      	movs	r3, #1
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <_sbrk+0x5c>)
 8003f5e:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <_sbrk+0x60>)
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <_sbrk+0x64>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d102      	bne.n	8003f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f70:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <_sbrk+0x64>)
 8003f72:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <_sbrk+0x68>)
 8003f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <_sbrk+0x64>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d207      	bcs.n	8003f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f84:	f00c f976 	bl	8010274 <__errno>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	220c      	movs	r2, #12
 8003f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f92:	e009      	b.n	8003fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <_sbrk+0x64>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <_sbrk+0x64>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	4a05      	ldr	r2, [pc, #20]	; (8003fb8 <_sbrk+0x64>)
 8003fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20010000 	.word	0x20010000
 8003fb4:	00000400 	.word	0x00000400
 8003fb8:	20000940 	.word	0x20000940
 8003fbc:	20005a00 	.word	0x20005a00

08003fc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <SystemInit+0x20>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <SystemInit+0x20>)
 8003fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000ed00 	.word	0xe000ed00

08003fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800401c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003fe8:	f7ff ffea 	bl	8003fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fec:	480c      	ldr	r0, [pc, #48]	; (8004020 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fee:	490d      	ldr	r1, [pc, #52]	; (8004024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ff0:	4a0d      	ldr	r2, [pc, #52]	; (8004028 <LoopForever+0xe>)
  movs r3, #0
 8003ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ff4:	e002      	b.n	8003ffc <LoopCopyDataInit>

08003ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ffa:	3304      	adds	r3, #4

08003ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004000:	d3f9      	bcc.n	8003ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004004:	4c0a      	ldr	r4, [pc, #40]	; (8004030 <LoopForever+0x16>)
  movs r3, #0
 8004006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004008:	e001      	b.n	800400e <LoopFillZerobss>

0800400a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800400a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800400c:	3204      	adds	r2, #4

0800400e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800400e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004010:	d3fb      	bcc.n	800400a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004012:	f00c f935 	bl	8010280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004016:	f7fc ffb9 	bl	8000f8c <main>

0800401a <LoopForever>:

LoopForever:
    b LoopForever
 800401a:	e7fe      	b.n	800401a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800401c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004024:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004028:	08012584 	.word	0x08012584
  ldr r2, =_sbss
 800402c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004030:	20005a00 	.word	0x20005a00

08004034 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004034:	e7fe      	b.n	8004034 <ADC3_IRQHandler>
	...

08004038 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800403c:	4b08      	ldr	r3, [pc, #32]	; (8004060 <HAL_Init+0x28>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a07      	ldr	r2, [pc, #28]	; (8004060 <HAL_Init+0x28>)
 8004042:	f043 0310 	orr.w	r3, r3, #16
 8004046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004048:	2003      	movs	r0, #3
 800404a:	f001 fb1a 	bl	8005682 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800404e:	200f      	movs	r0, #15
 8004050:	f7ff fdfa 	bl	8003c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004054:	f7ff fa88 	bl	8003568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40022000 	.word	0x40022000

08004064 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_IncTick+0x20>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_IncTick+0x24>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4413      	add	r3, r2
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <HAL_IncTick+0x24>)
 8004076:	6013      	str	r3, [r2, #0]
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	2000000c 	.word	0x2000000c
 8004088:	20000944 	.word	0x20000944

0800408c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return uwTick;  
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <HAL_GetTick+0x14>)
 8004092:	681b      	ldr	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000944 	.word	0x20000944

080040a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040ac:	f7ff ffee 	bl	800408c <HAL_GetTick>
 80040b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d005      	beq.n	80040ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <HAL_Delay+0x44>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80040ca:	bf00      	nop
 80040cc:	f7ff ffde 	bl	800408c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d8f7      	bhi.n	80040cc <HAL_Delay+0x28>
  {
  }
}
 80040dc:	bf00      	nop
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	2000000c 	.word	0x2000000c

080040ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b09a      	sub	sp, #104	; 0x68
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e1e3      	b.n	80044fc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d176      	bne.n	8004234 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d152      	bne.n	80041f4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fa25 	bl	80035b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d13b      	bne.n	80041f4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f001 f96d 	bl	800545c <ADC_Disable>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d12f      	bne.n	80041f4 <HAL_ADC_Init+0xe0>
 8004194:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004198:	2b00      	cmp	r3, #0
 800419a:	d12b      	bne.n	80041f4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041a4:	f023 0302 	bic.w	r3, r3, #2
 80041a8:	f043 0202 	orr.w	r2, r3, #2
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041be:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041ce:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041d0:	4b92      	ldr	r3, [pc, #584]	; (800441c <HAL_ADC_Init+0x308>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a92      	ldr	r2, [pc, #584]	; (8004420 <HAL_ADC_Init+0x30c>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	0c9a      	lsrs	r2, r3, #18
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041e6:	e002      	b.n	80041ee <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f9      	bne.n	80041e8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800420c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004210:	d110      	bne.n	8004234 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f023 0312 	bic.w	r3, r3, #18
 800421a:	f043 0210 	orr.w	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f043 0201 	orr.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	2b00      	cmp	r3, #0
 800423e:	f040 8150 	bne.w	80044e2 <HAL_ADC_Init+0x3ce>
 8004242:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004246:	2b00      	cmp	r3, #0
 8004248:	f040 814b 	bne.w	80044e2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 8143 	bne.w	80044e2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004264:	f043 0202 	orr.w	r2, r3, #2
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004274:	d004      	beq.n	8004280 <HAL_ADC_Init+0x16c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a6a      	ldr	r2, [pc, #424]	; (8004424 <HAL_ADC_Init+0x310>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <HAL_ADC_Init+0x170>
 8004280:	4b69      	ldr	r3, [pc, #420]	; (8004428 <HAL_ADC_Init+0x314>)
 8004282:	e000      	b.n	8004286 <HAL_ADC_Init+0x172>
 8004284:	4b69      	ldr	r3, [pc, #420]	; (800442c <HAL_ADC_Init+0x318>)
 8004286:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004290:	d102      	bne.n	8004298 <HAL_ADC_Init+0x184>
 8004292:	4b64      	ldr	r3, [pc, #400]	; (8004424 <HAL_ADC_Init+0x310>)
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	e01a      	b.n	80042ce <HAL_ADC_Init+0x1ba>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a61      	ldr	r2, [pc, #388]	; (8004424 <HAL_ADC_Init+0x310>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d103      	bne.n	80042aa <HAL_ADC_Init+0x196>
 80042a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	e011      	b.n	80042ce <HAL_ADC_Init+0x1ba>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a60      	ldr	r2, [pc, #384]	; (8004430 <HAL_ADC_Init+0x31c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d102      	bne.n	80042ba <HAL_ADC_Init+0x1a6>
 80042b4:	4b5f      	ldr	r3, [pc, #380]	; (8004434 <HAL_ADC_Init+0x320>)
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	e009      	b.n	80042ce <HAL_ADC_Init+0x1ba>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a5d      	ldr	r2, [pc, #372]	; (8004434 <HAL_ADC_Init+0x320>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d102      	bne.n	80042ca <HAL_ADC_Init+0x1b6>
 80042c4:	4b5a      	ldr	r3, [pc, #360]	; (8004430 <HAL_ADC_Init+0x31c>)
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	e001      	b.n	80042ce <HAL_ADC_Init+0x1ba>
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d108      	bne.n	80042ee <HAL_ADC_Init+0x1da>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_ADC_Init+0x1da>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <HAL_ADC_Init+0x1dc>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d11c      	bne.n	800432e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80042f4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d010      	beq.n	800431c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d107      	bne.n	8004316 <HAL_ADC_Init+0x202>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_ADC_Init+0x202>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_ADC_Init+0x204>
 8004316:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004318:	2b00      	cmp	r3, #0
 800431a:	d108      	bne.n	800432e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800431c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	431a      	orrs	r2, r3
 800432a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800432c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	7e5b      	ldrb	r3, [r3, #25]
 8004332:	035b      	lsls	r3, r3, #13
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004338:	2a01      	cmp	r2, #1
 800433a:	d002      	beq.n	8004342 <HAL_ADC_Init+0x22e>
 800433c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004340:	e000      	b.n	8004344 <HAL_ADC_Init+0x230>
 8004342:	2200      	movs	r2, #0
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4313      	orrs	r3, r2
 8004352:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004354:	4313      	orrs	r3, r2
 8004356:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d11b      	bne.n	800439a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	7e5b      	ldrb	r3, [r3, #25]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	3b01      	subs	r3, #1
 8004370:	045a      	lsls	r2, r3, #17
 8004372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004374:	4313      	orrs	r3, r2
 8004376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437a:	663b      	str	r3, [r7, #96]	; 0x60
 800437c:	e00d      	b.n	800439a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004386:	f043 0220 	orr.w	r2, r3, #32
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f043 0201 	orr.w	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d054      	beq.n	800444c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a22      	ldr	r2, [pc, #136]	; (8004430 <HAL_ADC_Init+0x31c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_ADC_Init+0x2a2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a20      	ldr	r2, [pc, #128]	; (8004434 <HAL_ADC_Init+0x320>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d140      	bne.n	8004438 <HAL_ADC_Init+0x324>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80043be:	d02a      	beq.n	8004416 <HAL_ADC_Init+0x302>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c8:	d022      	beq.n	8004410 <HAL_ADC_Init+0x2fc>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80043d2:	d01a      	beq.n	800440a <HAL_ADC_Init+0x2f6>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80043dc:	d012      	beq.n	8004404 <HAL_ADC_Init+0x2f0>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80043e6:	d00a      	beq.n	80043fe <HAL_ADC_Init+0x2ea>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80043f0:	d002      	beq.n	80043f8 <HAL_ADC_Init+0x2e4>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	e023      	b.n	8004440 <HAL_ADC_Init+0x32c>
 80043f8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80043fc:	e020      	b.n	8004440 <HAL_ADC_Init+0x32c>
 80043fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004402:	e01d      	b.n	8004440 <HAL_ADC_Init+0x32c>
 8004404:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004408:	e01a      	b.n	8004440 <HAL_ADC_Init+0x32c>
 800440a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800440e:	e017      	b.n	8004440 <HAL_ADC_Init+0x32c>
 8004410:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004414:	e014      	b.n	8004440 <HAL_ADC_Init+0x32c>
 8004416:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800441a:	e011      	b.n	8004440 <HAL_ADC_Init+0x32c>
 800441c:	20000004 	.word	0x20000004
 8004420:	431bde83 	.word	0x431bde83
 8004424:	50000100 	.word	0x50000100
 8004428:	50000300 	.word	0x50000300
 800442c:	50000700 	.word	0x50000700
 8004430:	50000400 	.word	0x50000400
 8004434:	50000500 	.word	0x50000500
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004444:	4313      	orrs	r3, r2
 8004446:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004448:	4313      	orrs	r3, r2
 800444a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b00      	cmp	r3, #0
 8004458:	d114      	bne.n	8004484 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004468:	f023 0302 	bic.w	r3, r3, #2
 800446c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7e1b      	ldrb	r3, [r3, #24]
 8004472:	039a      	lsls	r2, r3, #14
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	4313      	orrs	r3, r2
 800447e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004480:	4313      	orrs	r3, r2
 8004482:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <HAL_ADC_Init+0x3f0>)
 800448c:	4013      	ands	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004494:	430b      	orrs	r3, r1
 8004496:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d10c      	bne.n	80044ba <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	f023 010f 	bic.w	r1, r3, #15
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	1e5a      	subs	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
 80044b8:	e007      	b.n	80044ca <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 020f 	bic.w	r2, r2, #15
 80044c8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f023 0303 	bic.w	r3, r3, #3
 80044d8:	f043 0201 	orr.w	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
 80044e0:	e00a      	b.n	80044f8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f023 0312 	bic.w	r3, r3, #18
 80044ea:	f043 0210 	orr.w	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80044f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3768      	adds	r7, #104	; 0x68
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	fff0c007 	.word	0xfff0c007

08004508 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b00      	cmp	r3, #0
 8004520:	f040 8123 	bne.w	800476a <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_ADC_Start_IT+0x2a>
 800452e:	2302      	movs	r3, #2
 8004530:	e11e      	b.n	8004770 <HAL_ADC_Start_IT+0x268>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 ff2a 	bl	8005394 <ADC_Enable>
 8004540:	4603      	mov	r3, r0
 8004542:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 810a 	bne.w	8004760 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004568:	d004      	beq.n	8004574 <HAL_ADC_Start_IT+0x6c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a82      	ldr	r2, [pc, #520]	; (8004778 <HAL_ADC_Start_IT+0x270>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d106      	bne.n	8004582 <HAL_ADC_Start_IT+0x7a>
 8004574:	4b81      	ldr	r3, [pc, #516]	; (800477c <HAL_ADC_Start_IT+0x274>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2b00      	cmp	r3, #0
 800457e:	d010      	beq.n	80045a2 <HAL_ADC_Start_IT+0x9a>
 8004580:	e005      	b.n	800458e <HAL_ADC_Start_IT+0x86>
 8004582:	4b7f      	ldr	r3, [pc, #508]	; (8004780 <HAL_ADC_Start_IT+0x278>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_ADC_Start_IT+0x9a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004596:	d004      	beq.n	80045a2 <HAL_ADC_Start_IT+0x9a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a79      	ldr	r2, [pc, #484]	; (8004784 <HAL_ADC_Start_IT+0x27c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d115      	bne.n	80045ce <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d036      	beq.n	800462a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80045cc:	e02d      	b.n	800462a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045e2:	d004      	beq.n	80045ee <HAL_ADC_Start_IT+0xe6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a63      	ldr	r2, [pc, #396]	; (8004778 <HAL_ADC_Start_IT+0x270>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d10a      	bne.n	8004604 <HAL_ADC_Start_IT+0xfc>
 80045ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	e008      	b.n	8004616 <HAL_ADC_Start_IT+0x10e>
 8004604:	4b5f      	ldr	r3, [pc, #380]	; (8004784 <HAL_ADC_Start_IT+0x27c>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf14      	ite	ne
 8004610:	2301      	movne	r3, #1
 8004612:	2300      	moveq	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004622:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004636:	d106      	bne.n	8004646 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463c:	f023 0206 	bic.w	r2, r3, #6
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	645a      	str	r2, [r3, #68]	; 0x44
 8004644:	e002      	b.n	800464c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	221c      	movs	r2, #28
 800465a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d110      	bne.n	8004686 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0204 	bic.w	r2, r2, #4
 8004672:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0208 	orr.w	r2, r2, #8
 8004682:	605a      	str	r2, [r3, #4]
          break;
 8004684:	e008      	b.n	8004698 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 020c 	orr.w	r2, r2, #12
 8004694:	605a      	str	r2, [r3, #4]
          break;
 8004696:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469c:	2b01      	cmp	r3, #1
 800469e:	d107      	bne.n	80046b0 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0210 	bic.w	r2, r2, #16
 80046ae:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b8:	d004      	beq.n	80046c4 <HAL_ADC_Start_IT+0x1bc>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a2e      	ldr	r2, [pc, #184]	; (8004778 <HAL_ADC_Start_IT+0x270>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d106      	bne.n	80046d2 <HAL_ADC_Start_IT+0x1ca>
 80046c4:	4b2d      	ldr	r3, [pc, #180]	; (800477c <HAL_ADC_Start_IT+0x274>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d03e      	beq.n	800474e <HAL_ADC_Start_IT+0x246>
 80046d0:	e005      	b.n	80046de <HAL_ADC_Start_IT+0x1d6>
 80046d2:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <HAL_ADC_Start_IT+0x278>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d037      	beq.n	800474e <HAL_ADC_Start_IT+0x246>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046e6:	d004      	beq.n	80046f2 <HAL_ADC_Start_IT+0x1ea>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a22      	ldr	r2, [pc, #136]	; (8004778 <HAL_ADC_Start_IT+0x270>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d106      	bne.n	8004700 <HAL_ADC_Start_IT+0x1f8>
 80046f2:	4b22      	ldr	r3, [pc, #136]	; (800477c <HAL_ADC_Start_IT+0x274>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	2b05      	cmp	r3, #5
 80046fc:	d027      	beq.n	800474e <HAL_ADC_Start_IT+0x246>
 80046fe:	e005      	b.n	800470c <HAL_ADC_Start_IT+0x204>
 8004700:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <HAL_ADC_Start_IT+0x278>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 031f 	and.w	r3, r3, #31
 8004708:	2b05      	cmp	r3, #5
 800470a:	d020      	beq.n	800474e <HAL_ADC_Start_IT+0x246>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004714:	d004      	beq.n	8004720 <HAL_ADC_Start_IT+0x218>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a17      	ldr	r2, [pc, #92]	; (8004778 <HAL_ADC_Start_IT+0x270>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d106      	bne.n	800472e <HAL_ADC_Start_IT+0x226>
 8004720:	4b16      	ldr	r3, [pc, #88]	; (800477c <HAL_ADC_Start_IT+0x274>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2b09      	cmp	r3, #9
 800472a:	d010      	beq.n	800474e <HAL_ADC_Start_IT+0x246>
 800472c:	e005      	b.n	800473a <HAL_ADC_Start_IT+0x232>
 800472e:	4b14      	ldr	r3, [pc, #80]	; (8004780 <HAL_ADC_Start_IT+0x278>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	2b09      	cmp	r3, #9
 8004738:	d009      	beq.n	800474e <HAL_ADC_Start_IT+0x246>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004742:	d004      	beq.n	800474e <HAL_ADC_Start_IT+0x246>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a0e      	ldr	r2, [pc, #56]	; (8004784 <HAL_ADC_Start_IT+0x27c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10f      	bne.n	800476e <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0204 	orr.w	r2, r2, #4
 800475c:	609a      	str	r2, [r3, #8]
 800475e:	e006      	b.n	800476e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004768:	e001      	b.n	800476e <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800476a:	2302      	movs	r3, #2
 800476c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800476e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	50000100 	.word	0x50000100
 800477c:	50000300 	.word	0x50000300
 8004780:	50000700 	.word	0x50000700
 8004784:	50000400 	.word	0x50000400

08004788 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80047ac:	2300      	movs	r3, #0
 80047ae:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d004      	beq.n	80047dc <HAL_ADC_IRQHandler+0x38>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80bc 	beq.w	8004960 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80b6 	beq.w	8004960 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004814:	d004      	beq.n	8004820 <HAL_ADC_IRQHandler+0x7c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a90      	ldr	r2, [pc, #576]	; (8004a5c <HAL_ADC_IRQHandler+0x2b8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d106      	bne.n	800482e <HAL_ADC_IRQHandler+0x8a>
 8004820:	4b8f      	ldr	r3, [pc, #572]	; (8004a60 <HAL_ADC_IRQHandler+0x2bc>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2b00      	cmp	r3, #0
 800482a:	d03e      	beq.n	80048aa <HAL_ADC_IRQHandler+0x106>
 800482c:	e005      	b.n	800483a <HAL_ADC_IRQHandler+0x96>
 800482e:	4b8d      	ldr	r3, [pc, #564]	; (8004a64 <HAL_ADC_IRQHandler+0x2c0>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2b00      	cmp	r3, #0
 8004838:	d037      	beq.n	80048aa <HAL_ADC_IRQHandler+0x106>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004842:	d004      	beq.n	800484e <HAL_ADC_IRQHandler+0xaa>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a84      	ldr	r2, [pc, #528]	; (8004a5c <HAL_ADC_IRQHandler+0x2b8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d106      	bne.n	800485c <HAL_ADC_IRQHandler+0xb8>
 800484e:	4b84      	ldr	r3, [pc, #528]	; (8004a60 <HAL_ADC_IRQHandler+0x2bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	2b05      	cmp	r3, #5
 8004858:	d027      	beq.n	80048aa <HAL_ADC_IRQHandler+0x106>
 800485a:	e005      	b.n	8004868 <HAL_ADC_IRQHandler+0xc4>
 800485c:	4b81      	ldr	r3, [pc, #516]	; (8004a64 <HAL_ADC_IRQHandler+0x2c0>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	2b05      	cmp	r3, #5
 8004866:	d020      	beq.n	80048aa <HAL_ADC_IRQHandler+0x106>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004870:	d004      	beq.n	800487c <HAL_ADC_IRQHandler+0xd8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a79      	ldr	r2, [pc, #484]	; (8004a5c <HAL_ADC_IRQHandler+0x2b8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d106      	bne.n	800488a <HAL_ADC_IRQHandler+0xe6>
 800487c:	4b78      	ldr	r3, [pc, #480]	; (8004a60 <HAL_ADC_IRQHandler+0x2bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	2b09      	cmp	r3, #9
 8004886:	d010      	beq.n	80048aa <HAL_ADC_IRQHandler+0x106>
 8004888:	e005      	b.n	8004896 <HAL_ADC_IRQHandler+0xf2>
 800488a:	4b76      	ldr	r3, [pc, #472]	; (8004a64 <HAL_ADC_IRQHandler+0x2c0>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2b09      	cmp	r3, #9
 8004894:	d009      	beq.n	80048aa <HAL_ADC_IRQHandler+0x106>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800489e:	d004      	beq.n	80048aa <HAL_ADC_IRQHandler+0x106>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a70      	ldr	r2, [pc, #448]	; (8004a68 <HAL_ADC_IRQHandler+0x2c4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d104      	bne.n	80048b4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	e00f      	b.n	80048d4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048bc:	d004      	beq.n	80048c8 <HAL_ADC_IRQHandler+0x124>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a66      	ldr	r2, [pc, #408]	; (8004a5c <HAL_ADC_IRQHandler+0x2b8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d102      	bne.n	80048ce <HAL_ADC_IRQHandler+0x12a>
 80048c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80048cc:	e000      	b.n	80048d0 <HAL_ADC_IRQHandler+0x12c>
 80048ce:	4b66      	ldr	r3, [pc, #408]	; (8004a68 <HAL_ADC_IRQHandler+0x2c4>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d137      	bne.n	8004952 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d132      	bne.n	8004952 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d02d      	beq.n	8004952 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d11a      	bne.n	800493a <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 020c 	bic.w	r2, r2, #12
 8004912:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d112      	bne.n	8004952 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	f043 0201 	orr.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	641a      	str	r2, [r3, #64]	; 0x40
 8004938:	e00b      	b.n	8004952 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0210 	orr.w	r2, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f043 0201 	orr.w	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fc fb02 	bl	8000f5c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	220c      	movs	r2, #12
 800495e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d004      	beq.n	8004974 <HAL_ADC_IRQHandler+0x1d0>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 8138 	beq.w	8004bf0 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8132 	beq.w	8004bf0 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049a0:	d004      	beq.n	80049ac <HAL_ADC_IRQHandler+0x208>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2d      	ldr	r2, [pc, #180]	; (8004a5c <HAL_ADC_IRQHandler+0x2b8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d106      	bne.n	80049ba <HAL_ADC_IRQHandler+0x216>
 80049ac:	4b2c      	ldr	r3, [pc, #176]	; (8004a60 <HAL_ADC_IRQHandler+0x2bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d03e      	beq.n	8004a36 <HAL_ADC_IRQHandler+0x292>
 80049b8:	e005      	b.n	80049c6 <HAL_ADC_IRQHandler+0x222>
 80049ba:	4b2a      	ldr	r3, [pc, #168]	; (8004a64 <HAL_ADC_IRQHandler+0x2c0>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d037      	beq.n	8004a36 <HAL_ADC_IRQHandler+0x292>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049ce:	d004      	beq.n	80049da <HAL_ADC_IRQHandler+0x236>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a21      	ldr	r2, [pc, #132]	; (8004a5c <HAL_ADC_IRQHandler+0x2b8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d106      	bne.n	80049e8 <HAL_ADC_IRQHandler+0x244>
 80049da:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <HAL_ADC_IRQHandler+0x2bc>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d027      	beq.n	8004a36 <HAL_ADC_IRQHandler+0x292>
 80049e6:	e005      	b.n	80049f4 <HAL_ADC_IRQHandler+0x250>
 80049e8:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <HAL_ADC_IRQHandler+0x2c0>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	2b05      	cmp	r3, #5
 80049f2:	d020      	beq.n	8004a36 <HAL_ADC_IRQHandler+0x292>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049fc:	d004      	beq.n	8004a08 <HAL_ADC_IRQHandler+0x264>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <HAL_ADC_IRQHandler+0x2b8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d106      	bne.n	8004a16 <HAL_ADC_IRQHandler+0x272>
 8004a08:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <HAL_ADC_IRQHandler+0x2bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	2b09      	cmp	r3, #9
 8004a12:	d010      	beq.n	8004a36 <HAL_ADC_IRQHandler+0x292>
 8004a14:	e005      	b.n	8004a22 <HAL_ADC_IRQHandler+0x27e>
 8004a16:	4b13      	ldr	r3, [pc, #76]	; (8004a64 <HAL_ADC_IRQHandler+0x2c0>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	2b09      	cmp	r3, #9
 8004a20:	d009      	beq.n	8004a36 <HAL_ADC_IRQHandler+0x292>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a2a:	d004      	beq.n	8004a36 <HAL_ADC_IRQHandler+0x292>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a0d      	ldr	r2, [pc, #52]	; (8004a68 <HAL_ADC_IRQHandler+0x2c4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d104      	bne.n	8004a40 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	e018      	b.n	8004a72 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a48:	d004      	beq.n	8004a54 <HAL_ADC_IRQHandler+0x2b0>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a03      	ldr	r2, [pc, #12]	; (8004a5c <HAL_ADC_IRQHandler+0x2b8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d10b      	bne.n	8004a6c <HAL_ADC_IRQHandler+0x2c8>
 8004a54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a58:	e009      	b.n	8004a6e <HAL_ADC_IRQHandler+0x2ca>
 8004a5a:	bf00      	nop
 8004a5c:	50000100 	.word	0x50000100
 8004a60:	50000300 	.word	0x50000300
 8004a64:	50000700 	.word	0x50000700
 8004a68:	50000400 	.word	0x50000400
 8004a6c:	4b92      	ldr	r3, [pc, #584]	; (8004cb8 <HAL_ADC_IRQHandler+0x514>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 80b0 	bne.w	8004be2 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00d      	beq.n	8004aa8 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 80a3 	bne.w	8004be2 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 809d 	bne.w	8004be2 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 8097 	beq.w	8004be2 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004abc:	d004      	beq.n	8004ac8 <HAL_ADC_IRQHandler+0x324>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a7e      	ldr	r2, [pc, #504]	; (8004cbc <HAL_ADC_IRQHandler+0x518>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d106      	bne.n	8004ad6 <HAL_ADC_IRQHandler+0x332>
 8004ac8:	4b7d      	ldr	r3, [pc, #500]	; (8004cc0 <HAL_ADC_IRQHandler+0x51c>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d03e      	beq.n	8004b52 <HAL_ADC_IRQHandler+0x3ae>
 8004ad4:	e005      	b.n	8004ae2 <HAL_ADC_IRQHandler+0x33e>
 8004ad6:	4b7b      	ldr	r3, [pc, #492]	; (8004cc4 <HAL_ADC_IRQHandler+0x520>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d037      	beq.n	8004b52 <HAL_ADC_IRQHandler+0x3ae>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004aea:	d004      	beq.n	8004af6 <HAL_ADC_IRQHandler+0x352>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a72      	ldr	r2, [pc, #456]	; (8004cbc <HAL_ADC_IRQHandler+0x518>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d106      	bne.n	8004b04 <HAL_ADC_IRQHandler+0x360>
 8004af6:	4b72      	ldr	r3, [pc, #456]	; (8004cc0 <HAL_ADC_IRQHandler+0x51c>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2b06      	cmp	r3, #6
 8004b00:	d027      	beq.n	8004b52 <HAL_ADC_IRQHandler+0x3ae>
 8004b02:	e005      	b.n	8004b10 <HAL_ADC_IRQHandler+0x36c>
 8004b04:	4b6f      	ldr	r3, [pc, #444]	; (8004cc4 <HAL_ADC_IRQHandler+0x520>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	2b06      	cmp	r3, #6
 8004b0e:	d020      	beq.n	8004b52 <HAL_ADC_IRQHandler+0x3ae>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b18:	d004      	beq.n	8004b24 <HAL_ADC_IRQHandler+0x380>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a67      	ldr	r2, [pc, #412]	; (8004cbc <HAL_ADC_IRQHandler+0x518>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d106      	bne.n	8004b32 <HAL_ADC_IRQHandler+0x38e>
 8004b24:	4b66      	ldr	r3, [pc, #408]	; (8004cc0 <HAL_ADC_IRQHandler+0x51c>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	2b07      	cmp	r3, #7
 8004b2e:	d010      	beq.n	8004b52 <HAL_ADC_IRQHandler+0x3ae>
 8004b30:	e005      	b.n	8004b3e <HAL_ADC_IRQHandler+0x39a>
 8004b32:	4b64      	ldr	r3, [pc, #400]	; (8004cc4 <HAL_ADC_IRQHandler+0x520>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	2b07      	cmp	r3, #7
 8004b3c:	d009      	beq.n	8004b52 <HAL_ADC_IRQHandler+0x3ae>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b46:	d004      	beq.n	8004b52 <HAL_ADC_IRQHandler+0x3ae>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a5a      	ldr	r2, [pc, #360]	; (8004cb8 <HAL_ADC_IRQHandler+0x514>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d104      	bne.n	8004b5c <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	e00f      	b.n	8004b7c <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b64:	d004      	beq.n	8004b70 <HAL_ADC_IRQHandler+0x3cc>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a54      	ldr	r2, [pc, #336]	; (8004cbc <HAL_ADC_IRQHandler+0x518>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d102      	bne.n	8004b76 <HAL_ADC_IRQHandler+0x3d2>
 8004b70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b74:	e000      	b.n	8004b78 <HAL_ADC_IRQHandler+0x3d4>
 8004b76:	4b50      	ldr	r3, [pc, #320]	; (8004cb8 <HAL_ADC_IRQHandler+0x514>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d12d      	bne.n	8004be2 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d11a      	bne.n	8004bca <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ba2:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d112      	bne.n	8004be2 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	f043 0201 	orr.w	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
 8004bc8:	e00b      	b.n	8004be2 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f043 0210 	orr.w	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	f043 0201 	orr.w	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f8c4 	bl	8004d70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2260      	movs	r2, #96	; 0x60
 8004bee:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d011      	beq.n	8004c1e <HAL_ADC_IRQHandler+0x47a>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00c      	beq.n	8004c1e <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff fa6b 	bl	80040ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2280      	movs	r2, #128	; 0x80
 8004c1c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d012      	beq.n	8004c4e <HAL_ADC_IRQHandler+0x4aa>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f8aa 	bl	8004d98 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c4c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d012      	beq.n	8004c7e <HAL_ADC_IRQHandler+0x4da>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00d      	beq.n	8004c7e <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f89c 	bl	8004dac <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c7c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d04f      	beq.n	8004d28 <HAL_ADC_IRQHandler+0x584>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d04a      	beq.n	8004d28 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d102      	bne.n	8004ca0 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	e02d      	b.n	8004cfc <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ca8:	d004      	beq.n	8004cb4 <HAL_ADC_IRQHandler+0x510>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a03      	ldr	r2, [pc, #12]	; (8004cbc <HAL_ADC_IRQHandler+0x518>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d109      	bne.n	8004cc8 <HAL_ADC_IRQHandler+0x524>
 8004cb4:	4b02      	ldr	r3, [pc, #8]	; (8004cc0 <HAL_ADC_IRQHandler+0x51c>)
 8004cb6:	e008      	b.n	8004cca <HAL_ADC_IRQHandler+0x526>
 8004cb8:	50000400 	.word	0x50000400
 8004cbc:	50000100 	.word	0x50000100
 8004cc0:	50000300 	.word	0x50000300
 8004cc4:	50000700 	.word	0x50000700
 8004cc8:	4b28      	ldr	r3, [pc, #160]	; (8004d6c <HAL_ADC_IRQHandler+0x5c8>)
 8004cca:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 031f 	and.w	r3, r3, #31
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d10a      	bne.n	8004cfc <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	e007      	b.n	8004cfc <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10e      	bne.n	8004d20 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	f043 0202 	orr.w	r2, r3, #2
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff f9f0 	bl	8004100 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2210      	movs	r2, #16
 8004d26:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d018      	beq.n	8004d64 <HAL_ADC_IRQHandler+0x5c0>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4c:	f043 0208 	orr.w	r2, r3, #8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d5c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f810 	bl	8004d84 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8004d64:	bf00      	nop
 8004d66:	3720      	adds	r7, #32
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	50000700 	.word	0x50000700

08004d70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b09b      	sub	sp, #108	; 0x6c
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x22>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e2c8      	b.n	8005374 <HAL_ADC_ConfigChannel+0x5b4>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f040 82ac 	bne.w	8005352 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d81c      	bhi.n	8004e3c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	4413      	add	r3, r2
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	461a      	mov	r2, r3
 8004e16:	231f      	movs	r3, #31
 8004e18:	4093      	lsls	r3, r2
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	4019      	ands	r1, r3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30
 8004e3a:	e063      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b09      	cmp	r3, #9
 8004e42:	d81e      	bhi.n	8004e82 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4413      	add	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	3b1e      	subs	r3, #30
 8004e58:	221f      	movs	r2, #31
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	4019      	ands	r1, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	4413      	add	r3, r2
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	3b1e      	subs	r3, #30
 8004e74:	fa00 f203 	lsl.w	r2, r0, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	635a      	str	r2, [r3, #52]	; 0x34
 8004e80:	e040      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b0e      	cmp	r3, #14
 8004e88:	d81e      	bhi.n	8004ec8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	4413      	add	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	3b3c      	subs	r3, #60	; 0x3c
 8004e9e:	221f      	movs	r2, #31
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	4019      	ands	r1, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4413      	add	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	3b3c      	subs	r3, #60	; 0x3c
 8004eba:	fa00 f203 	lsl.w	r2, r0, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ec6:	e01d      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	4413      	add	r3, r2
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	3b5a      	subs	r3, #90	; 0x5a
 8004edc:	221f      	movs	r2, #31
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	4019      	ands	r1, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	3b5a      	subs	r3, #90	; 0x5a
 8004ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f040 80e5 	bne.w	80050de <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b09      	cmp	r3, #9
 8004f1a:	d91c      	bls.n	8004f56 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6999      	ldr	r1, [r3, #24]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4613      	mov	r3, r2
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3b1e      	subs	r3, #30
 8004f2e:	2207      	movs	r2, #7
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	4019      	ands	r1, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	6898      	ldr	r0, [r3, #8]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	3b1e      	subs	r3, #30
 8004f48:	fa00 f203 	lsl.w	r2, r0, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	619a      	str	r2, [r3, #24]
 8004f54:	e019      	b.n	8004f8a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6959      	ldr	r1, [r3, #20]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	4413      	add	r3, r2
 8004f66:	2207      	movs	r2, #7
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	4019      	ands	r1, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6898      	ldr	r0, [r3, #8]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4413      	add	r3, r2
 8004f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	08db      	lsrs	r3, r3, #3
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d84f      	bhi.n	800504c <HAL_ADC_ConfigChannel+0x28c>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <HAL_ADC_ConfigChannel+0x1f4>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fc5 	.word	0x08004fc5
 8004fb8:	08004fe7 	.word	0x08004fe7
 8004fbc:	08005009 	.word	0x08005009
 8004fc0:	0800502b 	.word	0x0800502b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fca:	4b99      	ldr	r3, [pc, #612]	; (8005230 <HAL_ADC_ConfigChannel+0x470>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	0691      	lsls	r1, r2, #26
 8004fd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004fe2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004fe4:	e07b      	b.n	80050de <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004fec:	4b90      	ldr	r3, [pc, #576]	; (8005230 <HAL_ADC_ConfigChannel+0x470>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	0691      	lsls	r1, r2, #26
 8004ff6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005004:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005006:	e06a      	b.n	80050de <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800500e:	4b88      	ldr	r3, [pc, #544]	; (8005230 <HAL_ADC_ConfigChannel+0x470>)
 8005010:	4013      	ands	r3, r2
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	0691      	lsls	r1, r2, #26
 8005018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800501a:	430a      	orrs	r2, r1
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005026:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005028:	e059      	b.n	80050de <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005030:	4b7f      	ldr	r3, [pc, #508]	; (8005230 <HAL_ADC_ConfigChannel+0x470>)
 8005032:	4013      	ands	r3, r2
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	0691      	lsls	r1, r2, #26
 800503a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800503c:	430a      	orrs	r2, r1
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005048:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800504a:	e048      	b.n	80050de <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	069b      	lsls	r3, r3, #26
 800505c:	429a      	cmp	r2, r3
 800505e:	d107      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800506e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	069b      	lsls	r3, r3, #26
 8005080:	429a      	cmp	r2, r3
 8005082:	d107      	bne.n	8005094 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005092:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800509a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	069b      	lsls	r3, r3, #26
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d107      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80050b6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	069b      	lsls	r3, r3, #26
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d107      	bne.n	80050dc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80050da:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80050dc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d108      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x33e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x33e>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <HAL_ADC_ConfigChannel+0x340>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	f040 8131 	bne.w	8005368 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d00f      	beq.n	800512e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2201      	movs	r2, #1
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	43da      	mvns	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	400a      	ands	r2, r1
 8005128:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800512c:	e049      	b.n	80051c2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2201      	movs	r2, #1
 800513c:	409a      	lsls	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b09      	cmp	r3, #9
 800514e:	d91c      	bls.n	800518a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6999      	ldr	r1, [r3, #24]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4613      	mov	r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4413      	add	r3, r2
 8005160:	3b1b      	subs	r3, #27
 8005162:	2207      	movs	r2, #7
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	43db      	mvns	r3, r3
 800516a:	4019      	ands	r1, r3
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	6898      	ldr	r0, [r3, #8]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	4413      	add	r3, r2
 800517a:	3b1b      	subs	r3, #27
 800517c:	fa00 f203 	lsl.w	r2, r0, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	619a      	str	r2, [r3, #24]
 8005188:	e01b      	b.n	80051c2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6959      	ldr	r1, [r3, #20]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	2207      	movs	r2, #7
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	4019      	ands	r1, r3
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6898      	ldr	r0, [r3, #8]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	4613      	mov	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	4413      	add	r3, r2
 80051b6:	fa00 f203 	lsl.w	r2, r0, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ca:	d004      	beq.n	80051d6 <HAL_ADC_ConfigChannel+0x416>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a18      	ldr	r2, [pc, #96]	; (8005234 <HAL_ADC_ConfigChannel+0x474>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d101      	bne.n	80051da <HAL_ADC_ConfigChannel+0x41a>
 80051d6:	4b18      	ldr	r3, [pc, #96]	; (8005238 <HAL_ADC_ConfigChannel+0x478>)
 80051d8:	e000      	b.n	80051dc <HAL_ADC_ConfigChannel+0x41c>
 80051da:	4b18      	ldr	r3, [pc, #96]	; (800523c <HAL_ADC_ConfigChannel+0x47c>)
 80051dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b10      	cmp	r3, #16
 80051e4:	d105      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80051e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d015      	beq.n	800521e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80051f6:	2b11      	cmp	r3, #17
 80051f8:	d105      	bne.n	8005206 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80051fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800520a:	2b12      	cmp	r3, #18
 800520c:	f040 80ac 	bne.w	8005368 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005218:	2b00      	cmp	r3, #0
 800521a:	f040 80a5 	bne.w	8005368 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005226:	d10b      	bne.n	8005240 <HAL_ADC_ConfigChannel+0x480>
 8005228:	4b02      	ldr	r3, [pc, #8]	; (8005234 <HAL_ADC_ConfigChannel+0x474>)
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e023      	b.n	8005276 <HAL_ADC_ConfigChannel+0x4b6>
 800522e:	bf00      	nop
 8005230:	83fff000 	.word	0x83fff000
 8005234:	50000100 	.word	0x50000100
 8005238:	50000300 	.word	0x50000300
 800523c:	50000700 	.word	0x50000700
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a4e      	ldr	r2, [pc, #312]	; (8005380 <HAL_ADC_ConfigChannel+0x5c0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d103      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x492>
 800524a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e011      	b.n	8005276 <HAL_ADC_ConfigChannel+0x4b6>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a4b      	ldr	r2, [pc, #300]	; (8005384 <HAL_ADC_ConfigChannel+0x5c4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d102      	bne.n	8005262 <HAL_ADC_ConfigChannel+0x4a2>
 800525c:	4b4a      	ldr	r3, [pc, #296]	; (8005388 <HAL_ADC_ConfigChannel+0x5c8>)
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e009      	b.n	8005276 <HAL_ADC_ConfigChannel+0x4b6>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a48      	ldr	r2, [pc, #288]	; (8005388 <HAL_ADC_ConfigChannel+0x5c8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d102      	bne.n	8005272 <HAL_ADC_ConfigChannel+0x4b2>
 800526c:	4b45      	ldr	r3, [pc, #276]	; (8005384 <HAL_ADC_ConfigChannel+0x5c4>)
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e001      	b.n	8005276 <HAL_ADC_ConfigChannel+0x4b6>
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d108      	bne.n	8005296 <HAL_ADC_ConfigChannel+0x4d6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_ADC_ConfigChannel+0x4d6>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <HAL_ADC_ConfigChannel+0x4d8>
 8005296:	2300      	movs	r3, #0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d150      	bne.n	800533e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800529c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d010      	beq.n	80052c4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d107      	bne.n	80052be <HAL_ADC_ConfigChannel+0x4fe>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_ADC_ConfigChannel+0x4fe>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x500>
 80052be:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d13c      	bne.n	800533e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d11d      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x548>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052d4:	d118      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80052d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80052de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052e2:	4b2a      	ldr	r3, [pc, #168]	; (800538c <HAL_ADC_ConfigChannel+0x5cc>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <HAL_ADC_ConfigChannel+0x5d0>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	0c9a      	lsrs	r2, r3, #18
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80052f8:	e002      	b.n	8005300 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f9      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005306:	e02e      	b.n	8005366 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b11      	cmp	r3, #17
 800530e:	d10b      	bne.n	8005328 <HAL_ADC_ConfigChannel+0x568>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005318:	d106      	bne.n	8005328 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800531a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005324:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005326:	e01e      	b.n	8005366 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b12      	cmp	r3, #18
 800532e:	d11a      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800533a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800533c:	e013      	b.n	8005366 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f043 0220 	orr.w	r2, r3, #32
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005350:	e00a      	b.n	8005368 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005364:	e000      	b.n	8005368 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005366:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005370:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005374:	4618      	mov	r0, r3
 8005376:	376c      	adds	r7, #108	; 0x6c
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	50000100 	.word	0x50000100
 8005384:	50000400 	.word	0x50000400
 8005388:	50000500 	.word	0x50000500
 800538c:	20000004 	.word	0x20000004
 8005390:	431bde83 	.word	0x431bde83

08005394 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d108      	bne.n	80053c0 <ADC_Enable+0x2c>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <ADC_Enable+0x2c>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <ADC_Enable+0x2e>
 80053c0:	2300      	movs	r3, #0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d143      	bne.n	800544e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	4b22      	ldr	r3, [pc, #136]	; (8005458 <ADC_Enable+0xc4>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00d      	beq.n	80053f0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	f043 0210 	orr.w	r2, r3, #16
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	f043 0201 	orr.w	r2, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e02f      	b.n	8005450 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005400:	f7fe fe44 	bl	800408c <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005406:	e01b      	b.n	8005440 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005408:	f7fe fe40 	bl	800408c <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d914      	bls.n	8005440 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b01      	cmp	r3, #1
 8005422:	d00d      	beq.n	8005440 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	f043 0210 	orr.w	r2, r3, #16
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e007      	b.n	8005450 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d1dc      	bne.n	8005408 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	8000003f 	.word	0x8000003f

0800545c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b01      	cmp	r3, #1
 8005474:	d108      	bne.n	8005488 <ADC_Disable+0x2c>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <ADC_Disable+0x2c>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <ADC_Disable+0x2e>
 8005488:	2300      	movs	r3, #0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d047      	beq.n	800551e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 030d 	and.w	r3, r3, #13
 8005498:	2b01      	cmp	r3, #1
 800549a:	d10f      	bne.n	80054bc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0202 	orr.w	r2, r2, #2
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2203      	movs	r2, #3
 80054b2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80054b4:	f7fe fdea 	bl	800408c <HAL_GetTick>
 80054b8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80054ba:	e029      	b.n	8005510 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	f043 0210 	orr.w	r2, r3, #16
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054cc:	f043 0201 	orr.w	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e023      	b.n	8005520 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80054d8:	f7fe fdd8 	bl	800408c <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d914      	bls.n	8005510 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d10d      	bne.n	8005510 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	f043 0210 	orr.w	r2, r3, #16
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005504:	f043 0201 	orr.w	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e007      	b.n	8005520 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	d0dc      	beq.n	80054d8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005538:	4b0c      	ldr	r3, [pc, #48]	; (800556c <__NVIC_SetPriorityGrouping+0x44>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005544:	4013      	ands	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800555a:	4a04      	ldr	r2, [pc, #16]	; (800556c <__NVIC_SetPriorityGrouping+0x44>)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	60d3      	str	r3, [r2, #12]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	e000ed00 	.word	0xe000ed00

08005570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <__NVIC_GetPriorityGrouping+0x18>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	0a1b      	lsrs	r3, r3, #8
 800557a:	f003 0307 	and.w	r3, r3, #7
}
 800557e:	4618      	mov	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	e000ed00 	.word	0xe000ed00

0800558c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800559a:	2b00      	cmp	r3, #0
 800559c:	db0b      	blt.n	80055b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	f003 021f 	and.w	r2, r3, #31
 80055a4:	4907      	ldr	r1, [pc, #28]	; (80055c4 <__NVIC_EnableIRQ+0x38>)
 80055a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	2001      	movs	r0, #1
 80055ae:	fa00 f202 	lsl.w	r2, r0, r2
 80055b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	e000e100 	.word	0xe000e100

080055c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	6039      	str	r1, [r7, #0]
 80055d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	db0a      	blt.n	80055f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	490c      	ldr	r1, [pc, #48]	; (8005614 <__NVIC_SetPriority+0x4c>)
 80055e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e6:	0112      	lsls	r2, r2, #4
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	440b      	add	r3, r1
 80055ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055f0:	e00a      	b.n	8005608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	4908      	ldr	r1, [pc, #32]	; (8005618 <__NVIC_SetPriority+0x50>)
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	3b04      	subs	r3, #4
 8005600:	0112      	lsls	r2, r2, #4
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	440b      	add	r3, r1
 8005606:	761a      	strb	r2, [r3, #24]
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	e000e100 	.word	0xe000e100
 8005618:	e000ed00 	.word	0xe000ed00

0800561c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800561c:	b480      	push	{r7}
 800561e:	b089      	sub	sp, #36	; 0x24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f1c3 0307 	rsb	r3, r3, #7
 8005636:	2b04      	cmp	r3, #4
 8005638:	bf28      	it	cs
 800563a:	2304      	movcs	r3, #4
 800563c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	3304      	adds	r3, #4
 8005642:	2b06      	cmp	r3, #6
 8005644:	d902      	bls.n	800564c <NVIC_EncodePriority+0x30>
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	3b03      	subs	r3, #3
 800564a:	e000      	b.n	800564e <NVIC_EncodePriority+0x32>
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005650:	f04f 32ff 	mov.w	r2, #4294967295
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	43da      	mvns	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	401a      	ands	r2, r3
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005664:	f04f 31ff 	mov.w	r1, #4294967295
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	fa01 f303 	lsl.w	r3, r1, r3
 800566e:	43d9      	mvns	r1, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005674:	4313      	orrs	r3, r2
         );
}
 8005676:	4618      	mov	r0, r3
 8005678:	3724      	adds	r7, #36	; 0x24
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff ff4c 	bl	8005528 <__NVIC_SetPriorityGrouping>
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056aa:	f7ff ff61 	bl	8005570 <__NVIC_GetPriorityGrouping>
 80056ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	6978      	ldr	r0, [r7, #20]
 80056b6:	f7ff ffb1 	bl	800561c <NVIC_EncodePriority>
 80056ba:	4602      	mov	r2, r0
 80056bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056c0:	4611      	mov	r1, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff ff80 	bl	80055c8 <__NVIC_SetPriority>
}
 80056c8:	bf00      	nop
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff ff54 	bl	800558c <__NVIC_EnableIRQ>
}
 80056e4:	bf00      	nop
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e054      	b.n	80057a8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	7f5b      	ldrb	r3, [r3, #29]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fd ff9a 	bl	8003648 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	791b      	ldrb	r3, [r3, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10c      	bne.n	800573c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a22      	ldr	r2, [pc, #136]	; (80057b0 <HAL_CRC_Init+0xc4>)
 8005728:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0218 	bic.w	r2, r2, #24
 8005738:	609a      	str	r2, [r3, #8]
 800573a:	e00c      	b.n	8005756 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6899      	ldr	r1, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	461a      	mov	r2, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f940 	bl	80059cc <HAL_CRCEx_Polynomial_Set>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e028      	b.n	80057a8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	795b      	ldrb	r3, [r3, #5]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d105      	bne.n	800576a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f04f 32ff 	mov.w	r2, #4294967295
 8005766:	611a      	str	r2, [r3, #16]
 8005768:	e004      	b.n	8005774 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6912      	ldr	r2, [r2, #16]
 8005772:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699a      	ldr	r2, [r3, #24]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	04c11db7 	.word	0x04c11db7

080057b4 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2202      	movs	r2, #2
 80057c8:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d006      	beq.n	80057e0 <HAL_CRC_Accumulate+0x2c>
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d829      	bhi.n	800582a <HAL_CRC_Accumulate+0x76>
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d019      	beq.n	800580e <HAL_CRC_Accumulate+0x5a>
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d01e      	beq.n	800581c <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 80057de:	e024      	b.n	800582a <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e00a      	b.n	80057fc <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	441a      	add	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6812      	ldr	r2, [r2, #0]
 80057f4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	3301      	adds	r3, #1
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	d3f0      	bcc.n	80057e6 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	613b      	str	r3, [r7, #16]
      break;
 800580c:	e00e      	b.n	800582c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f812 	bl	800583c <CRC_Handle_8>
 8005818:	6138      	str	r0, [r7, #16]
      break;
 800581a:	e007      	b.n	800582c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f899 	bl	8005958 <CRC_Handle_16>
 8005826:	6138      	str	r0, [r7, #16]
      break;
 8005828:	e000      	b.n	800582c <HAL_CRC_Accumulate+0x78>
      break;
 800582a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005832:	693b      	ldr	r3, [r7, #16]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800583c:	b480      	push	{r7}
 800583e:	b089      	sub	sp, #36	; 0x24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005848:	2300      	movs	r3, #0
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	e023      	b.n	8005896 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	4413      	add	r3, r2
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	3301      	adds	r3, #1
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	440b      	add	r3, r1
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005868:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	3302      	adds	r3, #2
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	440b      	add	r3, r1
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005878:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	3303      	adds	r3, #3
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	440b      	add	r3, r1
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800588c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800588e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3301      	adds	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	089b      	lsrs	r3, r3, #2
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	429a      	cmp	r2, r3
 800589e:	d3d6      	bcc.n	800584e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d04d      	beq.n	8005946 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d107      	bne.n	80058c4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	4413      	add	r3, r2
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d116      	bne.n	80058fc <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	4413      	add	r3, r2
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	b21a      	sxth	r2, r3
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	3301      	adds	r3, #1
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	440b      	add	r3, r1
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b21b      	sxth	r3, r3
 80058ea:	4313      	orrs	r3, r2
 80058ec:	b21b      	sxth	r3, r3
 80058ee:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	8b7a      	ldrh	r2, [r7, #26]
 80058fa:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b03      	cmp	r3, #3
 8005904:	d11f      	bne.n	8005946 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	4413      	add	r3, r2
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	b21a      	sxth	r2, r3
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	3301      	adds	r3, #1
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	440b      	add	r3, r1
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b21b      	sxth	r3, r3
 8005922:	4313      	orrs	r3, r2
 8005924:	b21b      	sxth	r3, r3
 8005926:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	8b7a      	ldrh	r2, [r7, #26]
 8005932:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	3302      	adds	r3, #2
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	4413      	add	r3, r2
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3724      	adds	r7, #36	; 0x24
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005964:	2300      	movs	r3, #0
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	e013      	b.n	8005992 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	4413      	add	r3, r2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	041a      	lsls	r2, r3, #16
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	3302      	adds	r3, #2
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	440b      	add	r3, r1
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	4619      	mov	r1, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	3301      	adds	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	429a      	cmp	r2, r3
 800599a:	d3e6      	bcc.n	800596a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	4413      	add	r3, r2
 80059b4:	881a      	ldrh	r2, [r3, #0]
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80059dc:	231f      	movs	r3, #31
 80059de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d102      	bne.n	80059f0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
 80059ee:	e063      	b.n	8005ab8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80059f0:	bf00      	nop
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1e5a      	subs	r2, r3, #1
 80059f6:	613a      	str	r2, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d009      	beq.n	8005a10 <HAL_CRCEx_Polynomial_Set+0x44>
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0f0      	beq.n	80059f2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b18      	cmp	r3, #24
 8005a14:	d846      	bhi.n	8005aa4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005a16:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <HAL_CRCEx_Polynomial_Set+0x50>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005aab 	.word	0x08005aab
 8005a20:	08005aa5 	.word	0x08005aa5
 8005a24:	08005aa5 	.word	0x08005aa5
 8005a28:	08005aa5 	.word	0x08005aa5
 8005a2c:	08005aa5 	.word	0x08005aa5
 8005a30:	08005aa5 	.word	0x08005aa5
 8005a34:	08005aa5 	.word	0x08005aa5
 8005a38:	08005aa5 	.word	0x08005aa5
 8005a3c:	08005a99 	.word	0x08005a99
 8005a40:	08005aa5 	.word	0x08005aa5
 8005a44:	08005aa5 	.word	0x08005aa5
 8005a48:	08005aa5 	.word	0x08005aa5
 8005a4c:	08005aa5 	.word	0x08005aa5
 8005a50:	08005aa5 	.word	0x08005aa5
 8005a54:	08005aa5 	.word	0x08005aa5
 8005a58:	08005aa5 	.word	0x08005aa5
 8005a5c:	08005a8d 	.word	0x08005a8d
 8005a60:	08005aa5 	.word	0x08005aa5
 8005a64:	08005aa5 	.word	0x08005aa5
 8005a68:	08005aa5 	.word	0x08005aa5
 8005a6c:	08005aa5 	.word	0x08005aa5
 8005a70:	08005aa5 	.word	0x08005aa5
 8005a74:	08005aa5 	.word	0x08005aa5
 8005a78:	08005aa5 	.word	0x08005aa5
 8005a7c:	08005a81 	.word	0x08005a81
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b06      	cmp	r3, #6
 8005a84:	d913      	bls.n	8005aae <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005a8a:	e010      	b.n	8005aae <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	2b07      	cmp	r3, #7
 8005a90:	d90f      	bls.n	8005ab2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005a96:	e00c      	b.n	8005ab2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b0f      	cmp	r3, #15
 8005a9c:	d90b      	bls.n	8005ab6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005aa2:	e008      	b.n	8005ab6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	75fb      	strb	r3, [r7, #23]
        break;
 8005aa8:	e006      	b.n	8005ab8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005aaa:	bf00      	nop
 8005aac:	e004      	b.n	8005ab8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005aae:	bf00      	nop
 8005ab0:	e002      	b.n	8005ab8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005ab2:	bf00      	nop
 8005ab4:	e000      	b.n	8005ab8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005ab6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10d      	bne.n	8005ada <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f023 0118 	bic.w	r1, r3, #24
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e037      	b.n	8005b6e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2202      	movs	r2, #2
 8005b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b14:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005b18:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f9c5 	bl	8005ee0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}  
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b086      	sub	sp, #24
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	607a      	str	r2, [r7, #4]
 8005b82:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_DMA_Start_IT+0x20>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e04a      	b.n	8005c2c <HAL_DMA_Start_IT+0xb6>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d13a      	bne.n	8005c1e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0201 	bic.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f958 	bl	8005e82 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d008      	beq.n	8005bec <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f042 020e 	orr.w	r2, r2, #14
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e00f      	b.n	8005c0c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 020a 	orr.w	r2, r2, #10
 8005bfa:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0204 	bic.w	r2, r2, #4
 8005c0a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	e005      	b.n	8005c2a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005c26:	2302      	movs	r3, #2
 8005c28:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d008      	beq.n	8005c58 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2204      	movs	r2, #4
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e020      	b.n	8005c9a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 020e 	bic.w	r2, r2, #14
 8005c66:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c80:	2101      	movs	r1, #1
 8005c82:	fa01 f202 	lsl.w	r2, r1, r2
 8005c86:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d005      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
 8005cc6:	e027      	b.n	8005d18 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 020e 	bic.w	r2, r2, #14
 8005cd6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
    } 
  }
  return status;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	2204      	movs	r2, #4
 8005d40:	409a      	lsls	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d024      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x72>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01f      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d107      	bne.n	8005d72 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0204 	bic.w	r2, r2, #4
 8005d70:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	2104      	movs	r1, #4
 8005d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d80:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d06a      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005d92:	e065      	b.n	8005e60 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	2202      	movs	r2, #2
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d02c      	beq.n	8005dfe <HAL_DMA_IRQHandler+0xdc>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d027      	beq.n	8005dfe <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 020a 	bic.w	r2, r2, #10
 8005dca:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ddc:	2102      	movs	r1, #2
 8005dde:	fa01 f202 	lsl.w	r2, r1, r2
 8005de2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d035      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005dfc:	e030      	b.n	8005e60 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	2208      	movs	r2, #8
 8005e04:	409a      	lsls	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d028      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x13e>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d023      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 020e 	bic.w	r2, r2, #14
 8005e26:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	2101      	movs	r1, #1
 8005e32:	fa01 f202 	lsl.w	r2, r1, r2
 8005e36:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	4798      	blx	r3
    }
  }
}  
 8005e5e:	e7ff      	b.n	8005e60 <HAL_DMA_IRQHandler+0x13e>
 8005e60:	bf00      	nop
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e98:	2101      	movs	r1, #1
 8005e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e9e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d108      	bne.n	8005ec2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ec0:	e007      	b.n	8005ed2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	60da      	str	r2, [r3, #12]
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
	...

08005ee0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <DMA_CalcBaseAndBitshift+0x60>)
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d80f      	bhi.n	8005f14 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <DMA_CalcBaseAndBitshift+0x64>)
 8005efc:	4413      	add	r3, r2
 8005efe:	4a12      	ldr	r2, [pc, #72]	; (8005f48 <DMA_CalcBaseAndBitshift+0x68>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	009a      	lsls	r2, r3, #2
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a0f      	ldr	r2, [pc, #60]	; (8005f4c <DMA_CalcBaseAndBitshift+0x6c>)
 8005f10:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005f12:	e00e      	b.n	8005f32 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	; (8005f50 <DMA_CalcBaseAndBitshift+0x70>)
 8005f1c:	4413      	add	r3, r2
 8005f1e:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <DMA_CalcBaseAndBitshift+0x68>)
 8005f20:	fba2 2303 	umull	r2, r3, r2, r3
 8005f24:	091b      	lsrs	r3, r3, #4
 8005f26:	009a      	lsls	r2, r3, #2
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a09      	ldr	r2, [pc, #36]	; (8005f54 <DMA_CalcBaseAndBitshift+0x74>)
 8005f30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40020407 	.word	0x40020407
 8005f44:	bffdfff8 	.word	0xbffdfff8
 8005f48:	cccccccd 	.word	0xcccccccd
 8005f4c:	40020000 	.word	0x40020000
 8005f50:	bffdfbf8 	.word	0xbffdfbf8
 8005f54:	40020400 	.word	0x40020400

08005f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f66:	e160      	b.n	800622a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	fa01 f303 	lsl.w	r3, r1, r3
 8005f74:	4013      	ands	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 8152 	beq.w	8006224 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f003 0303 	and.w	r3, r3, #3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d005      	beq.n	8005f98 <HAL_GPIO_Init+0x40>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d130      	bne.n	8005ffa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4013      	ands	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fce:	2201      	movs	r2, #1
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	091b      	lsrs	r3, r3, #4
 8005fe4:	f003 0201 	and.w	r2, r3, #1
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	fa02 f303 	lsl.w	r3, r2, r3
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	2b03      	cmp	r3, #3
 8006004:	d017      	beq.n	8006036 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	2203      	movs	r2, #3
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	43db      	mvns	r3, r3
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4013      	ands	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	fa02 f303 	lsl.w	r3, r2, r3
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d123      	bne.n	800608a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	08da      	lsrs	r2, r3, #3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3208      	adds	r2, #8
 800604a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	220f      	movs	r2, #15
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	43db      	mvns	r3, r3
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4013      	ands	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	08da      	lsrs	r2, r3, #3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3208      	adds	r2, #8
 8006084:	6939      	ldr	r1, [r7, #16]
 8006086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	2203      	movs	r2, #3
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	43db      	mvns	r3, r3
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4013      	ands	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f003 0203 	and.w	r2, r3, #3
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 80ac 	beq.w	8006224 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060cc:	4b5e      	ldr	r3, [pc, #376]	; (8006248 <HAL_GPIO_Init+0x2f0>)
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	4a5d      	ldr	r2, [pc, #372]	; (8006248 <HAL_GPIO_Init+0x2f0>)
 80060d2:	f043 0301 	orr.w	r3, r3, #1
 80060d6:	6193      	str	r3, [r2, #24]
 80060d8:	4b5b      	ldr	r3, [pc, #364]	; (8006248 <HAL_GPIO_Init+0x2f0>)
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	60bb      	str	r3, [r7, #8]
 80060e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80060e4:	4a59      	ldr	r2, [pc, #356]	; (800624c <HAL_GPIO_Init+0x2f4>)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	089b      	lsrs	r3, r3, #2
 80060ea:	3302      	adds	r3, #2
 80060ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f003 0303 	and.w	r3, r3, #3
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	220f      	movs	r2, #15
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	43db      	mvns	r3, r3
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4013      	ands	r3, r2
 8006106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800610e:	d025      	beq.n	800615c <HAL_GPIO_Init+0x204>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a4f      	ldr	r2, [pc, #316]	; (8006250 <HAL_GPIO_Init+0x2f8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d01f      	beq.n	8006158 <HAL_GPIO_Init+0x200>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a4e      	ldr	r2, [pc, #312]	; (8006254 <HAL_GPIO_Init+0x2fc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d019      	beq.n	8006154 <HAL_GPIO_Init+0x1fc>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a4d      	ldr	r2, [pc, #308]	; (8006258 <HAL_GPIO_Init+0x300>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d013      	beq.n	8006150 <HAL_GPIO_Init+0x1f8>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a4c      	ldr	r2, [pc, #304]	; (800625c <HAL_GPIO_Init+0x304>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00d      	beq.n	800614c <HAL_GPIO_Init+0x1f4>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a4b      	ldr	r2, [pc, #300]	; (8006260 <HAL_GPIO_Init+0x308>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d007      	beq.n	8006148 <HAL_GPIO_Init+0x1f0>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a4a      	ldr	r2, [pc, #296]	; (8006264 <HAL_GPIO_Init+0x30c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d101      	bne.n	8006144 <HAL_GPIO_Init+0x1ec>
 8006140:	2306      	movs	r3, #6
 8006142:	e00c      	b.n	800615e <HAL_GPIO_Init+0x206>
 8006144:	2307      	movs	r3, #7
 8006146:	e00a      	b.n	800615e <HAL_GPIO_Init+0x206>
 8006148:	2305      	movs	r3, #5
 800614a:	e008      	b.n	800615e <HAL_GPIO_Init+0x206>
 800614c:	2304      	movs	r3, #4
 800614e:	e006      	b.n	800615e <HAL_GPIO_Init+0x206>
 8006150:	2303      	movs	r3, #3
 8006152:	e004      	b.n	800615e <HAL_GPIO_Init+0x206>
 8006154:	2302      	movs	r3, #2
 8006156:	e002      	b.n	800615e <HAL_GPIO_Init+0x206>
 8006158:	2301      	movs	r3, #1
 800615a:	e000      	b.n	800615e <HAL_GPIO_Init+0x206>
 800615c:	2300      	movs	r3, #0
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	f002 0203 	and.w	r2, r2, #3
 8006164:	0092      	lsls	r2, r2, #2
 8006166:	4093      	lsls	r3, r2
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800616e:	4937      	ldr	r1, [pc, #220]	; (800624c <HAL_GPIO_Init+0x2f4>)
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	089b      	lsrs	r3, r3, #2
 8006174:	3302      	adds	r3, #2
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800617c:	4b3a      	ldr	r3, [pc, #232]	; (8006268 <HAL_GPIO_Init+0x310>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	43db      	mvns	r3, r3
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4013      	ands	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80061a0:	4a31      	ldr	r2, [pc, #196]	; (8006268 <HAL_GPIO_Init+0x310>)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061a6:	4b30      	ldr	r3, [pc, #192]	; (8006268 <HAL_GPIO_Init+0x310>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	43db      	mvns	r3, r3
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4013      	ands	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80061ca:	4a27      	ldr	r2, [pc, #156]	; (8006268 <HAL_GPIO_Init+0x310>)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061d0:	4b25      	ldr	r3, [pc, #148]	; (8006268 <HAL_GPIO_Init+0x310>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	43db      	mvns	r3, r3
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4013      	ands	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80061f4:	4a1c      	ldr	r2, [pc, #112]	; (8006268 <HAL_GPIO_Init+0x310>)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061fa:	4b1b      	ldr	r3, [pc, #108]	; (8006268 <HAL_GPIO_Init+0x310>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	43db      	mvns	r3, r3
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4013      	ands	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800621e:	4a12      	ldr	r2, [pc, #72]	; (8006268 <HAL_GPIO_Init+0x310>)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	3301      	adds	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	f47f ae97 	bne.w	8005f68 <HAL_GPIO_Init+0x10>
  }
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	40021000 	.word	0x40021000
 800624c:	40010000 	.word	0x40010000
 8006250:	48000400 	.word	0x48000400
 8006254:	48000800 	.word	0x48000800
 8006258:	48000c00 	.word	0x48000c00
 800625c:	48001000 	.word	0x48001000
 8006260:	48001400 	.word	0x48001400
 8006264:	48001800 	.word	0x48001800
 8006268:	40010400 	.word	0x40010400

0800626c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	807b      	strh	r3, [r7, #2]
 8006278:	4613      	mov	r3, r2
 800627a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800627c:	787b      	ldrb	r3, [r7, #1]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006282:	887a      	ldrh	r2, [r7, #2]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006288:	e002      	b.n	8006290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800628a:	887a      	ldrh	r2, [r7, #2]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	4603      	mov	r3, r0
 80062a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062a8:	695a      	ldr	r2, [r3, #20]
 80062aa:	88fb      	ldrh	r3, [r7, #6]
 80062ac:	4013      	ands	r3, r2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d006      	beq.n	80062c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062b2:	4a05      	ldr	r2, [pc, #20]	; (80062c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062b8:	88fb      	ldrh	r3, [r7, #6]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fa fd18 	bl	8000cf0 <HAL_GPIO_EXTI_Callback>
  }
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40010400 	.word	0x40010400

080062cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e081      	b.n	80063e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d106      	bne.n	80062f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fd f9c8 	bl	8003688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2224      	movs	r2, #36	; 0x24
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800631c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800632c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d107      	bne.n	8006346 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006342:	609a      	str	r2, [r3, #8]
 8006344:	e006      	b.n	8006354 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006352:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d104      	bne.n	8006366 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006364:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6812      	ldr	r2, [r2, #0]
 8006370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006378:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006388:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	69d9      	ldr	r1, [r3, #28]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1a      	ldr	r2, [r3, #32]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	461a      	mov	r2, r3
 80063f8:	460b      	mov	r3, r1
 80063fa:	817b      	strh	r3, [r7, #10]
 80063fc:	4613      	mov	r3, r2
 80063fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b20      	cmp	r3, #32
 800640a:	f040 80da 	bne.w	80065c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_I2C_Master_Transmit+0x30>
 8006418:	2302      	movs	r3, #2
 800641a:	e0d3      	b.n	80065c4 <HAL_I2C_Master_Transmit+0x1d8>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006424:	f7fd fe32 	bl	800408c <HAL_GetTick>
 8006428:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	2319      	movs	r3, #25
 8006430:	2201      	movs	r2, #1
 8006432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 ff03 	bl	8007242 <I2C_WaitOnFlagUntilTimeout>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e0be      	b.n	80065c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2221      	movs	r2, #33	; 0x21
 800644a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2210      	movs	r2, #16
 8006452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	893a      	ldrh	r2, [r7, #8]
 8006466:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006472:	b29b      	uxth	r3, r3
 8006474:	2bff      	cmp	r3, #255	; 0xff
 8006476:	d90e      	bls.n	8006496 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	22ff      	movs	r2, #255	; 0xff
 800647c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006482:	b2da      	uxtb	r2, r3
 8006484:	8979      	ldrh	r1, [r7, #10]
 8006486:	4b51      	ldr	r3, [pc, #324]	; (80065cc <HAL_I2C_Master_Transmit+0x1e0>)
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f001 f912 	bl	80076b8 <I2C_TransferConfig>
 8006494:	e06c      	b.n	8006570 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	8979      	ldrh	r1, [r7, #10]
 80064a8:	4b48      	ldr	r3, [pc, #288]	; (80065cc <HAL_I2C_Master_Transmit+0x1e0>)
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f001 f901 	bl	80076b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80064b6:	e05b      	b.n	8006570 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	6a39      	ldr	r1, [r7, #32]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 ff0f 	bl	80072e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e07b      	b.n	80065c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	781a      	ldrb	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d034      	beq.n	8006570 <HAL_I2C_Master_Transmit+0x184>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650a:	2b00      	cmp	r3, #0
 800650c:	d130      	bne.n	8006570 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	2200      	movs	r2, #0
 8006516:	2180      	movs	r1, #128	; 0x80
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fe92 	bl	8007242 <I2C_WaitOnFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e04d      	b.n	80065c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652c:	b29b      	uxth	r3, r3
 800652e:	2bff      	cmp	r3, #255	; 0xff
 8006530:	d90e      	bls.n	8006550 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	22ff      	movs	r2, #255	; 0xff
 8006536:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653c:	b2da      	uxtb	r2, r3
 800653e:	8979      	ldrh	r1, [r7, #10]
 8006540:	2300      	movs	r3, #0
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f001 f8b5 	bl	80076b8 <I2C_TransferConfig>
 800654e:	e00f      	b.n	8006570 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	b2da      	uxtb	r2, r3
 8006560:	8979      	ldrh	r1, [r7, #10]
 8006562:	2300      	movs	r3, #0
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f001 f8a4 	bl	80076b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d19e      	bne.n	80064b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	6a39      	ldr	r1, [r7, #32]
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fef5 	bl	800736e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e01a      	b.n	80065c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2220      	movs	r2, #32
 8006594:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6859      	ldr	r1, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80065a2:	400b      	ands	r3, r1
 80065a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	e000      	b.n	80065c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80065c2:	2302      	movs	r3, #2
  }
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	80002000 	.word	0x80002000
 80065d0:	fe00e800 	.word	0xfe00e800

080065d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	461a      	mov	r2, r3
 80065e0:	460b      	mov	r3, r1
 80065e2:	817b      	strh	r3, [r7, #10]
 80065e4:	4613      	mov	r3, r2
 80065e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	f040 80db 	bne.w	80067ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_I2C_Master_Receive+0x30>
 8006600:	2302      	movs	r3, #2
 8006602:	e0d4      	b.n	80067ae <HAL_I2C_Master_Receive+0x1da>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800660c:	f7fd fd3e 	bl	800408c <HAL_GetTick>
 8006610:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	2319      	movs	r3, #25
 8006618:	2201      	movs	r2, #1
 800661a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fe0f 	bl	8007242 <I2C_WaitOnFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e0bf      	b.n	80067ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2222      	movs	r2, #34	; 0x22
 8006632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2210      	movs	r2, #16
 800663a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	893a      	ldrh	r2, [r7, #8]
 800664e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665a:	b29b      	uxth	r3, r3
 800665c:	2bff      	cmp	r3, #255	; 0xff
 800665e:	d90e      	bls.n	800667e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	22ff      	movs	r2, #255	; 0xff
 8006664:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666a:	b2da      	uxtb	r2, r3
 800666c:	8979      	ldrh	r1, [r7, #10]
 800666e:	4b52      	ldr	r3, [pc, #328]	; (80067b8 <HAL_I2C_Master_Receive+0x1e4>)
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f001 f81e 	bl	80076b8 <I2C_TransferConfig>
 800667c:	e06d      	b.n	800675a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668c:	b2da      	uxtb	r2, r3
 800668e:	8979      	ldrh	r1, [r7, #10]
 8006690:	4b49      	ldr	r3, [pc, #292]	; (80067b8 <HAL_I2C_Master_Receive+0x1e4>)
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f001 f80d 	bl	80076b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800669e:	e05c      	b.n	800675a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	6a39      	ldr	r1, [r7, #32]
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 fea5 	bl	80073f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e07c      	b.n	80067ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066dc:	b29b      	uxth	r3, r3
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d034      	beq.n	800675a <HAL_I2C_Master_Receive+0x186>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d130      	bne.n	800675a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	2200      	movs	r2, #0
 8006700:	2180      	movs	r1, #128	; 0x80
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 fd9d 	bl	8007242 <I2C_WaitOnFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e04d      	b.n	80067ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006716:	b29b      	uxth	r3, r3
 8006718:	2bff      	cmp	r3, #255	; 0xff
 800671a:	d90e      	bls.n	800673a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	22ff      	movs	r2, #255	; 0xff
 8006720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006726:	b2da      	uxtb	r2, r3
 8006728:	8979      	ldrh	r1, [r7, #10]
 800672a:	2300      	movs	r3, #0
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 ffc0 	bl	80076b8 <I2C_TransferConfig>
 8006738:	e00f      	b.n	800675a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006748:	b2da      	uxtb	r2, r3
 800674a:	8979      	ldrh	r1, [r7, #10]
 800674c:	2300      	movs	r3, #0
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 ffaf 	bl	80076b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d19d      	bne.n	80066a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	6a39      	ldr	r1, [r7, #32]
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 fe00 	bl	800736e <I2C_WaitOnSTOPFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e01a      	b.n	80067ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2220      	movs	r2, #32
 800677e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6859      	ldr	r1, [r3, #4]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <HAL_I2C_Master_Receive+0x1e8>)
 800678c:	400b      	ands	r3, r1
 800678e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	e000      	b.n	80067ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80067ac:	2302      	movs	r3, #2
  }
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	80002400 	.word	0x80002400
 80067bc:	fe00e800 	.word	0xfe00e800

080067c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	4798      	blx	r3
  }
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00f      	beq.n	8006836 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006824:	f043 0201 	orr.w	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006834:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00f      	beq.n	8006860 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	f043 0208 	orr.w	r2, r3, #8
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800685e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00f      	beq.n	800688a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006878:	f043 0202 	orr.w	r2, r3, #2
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006888:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f003 030b 	and.w	r3, r3, #11
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800689a:	68f9      	ldr	r1, [r7, #12]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fb77 	bl	8006f90 <I2C_ITError>
  }
}
 80068a2:	bf00      	nop
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	460b      	mov	r3, r1
 80068dc:	70fb      	strb	r3, [r7, #3]
 80068de:	4613      	mov	r3, r2
 80068e0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <I2C_Slave_ISR_IT+0x24>
 800694a:	2302      	movs	r3, #2
 800694c:	e0e1      	b.n	8006b12 <I2C_Slave_ISR_IT+0x1e8>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	2b00      	cmp	r3, #0
 800695e:	d008      	beq.n	8006972 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800696a:	6939      	ldr	r1, [r7, #16]
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 f9b5 	bl	8006cdc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b00      	cmp	r3, #0
 800697a:	d04b      	beq.n	8006a14 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006982:	2b00      	cmp	r3, #0
 8006984:	d046      	beq.n	8006a14 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d128      	bne.n	80069e2 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b28      	cmp	r3, #40	; 0x28
 800699a:	d108      	bne.n	80069ae <I2C_Slave_ISR_IT+0x84>
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069a2:	d104      	bne.n	80069ae <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80069a4:	6939      	ldr	r1, [r7, #16]
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fa9e 	bl	8006ee8 <I2C_ITListenCplt>
 80069ac:	e031      	b.n	8006a12 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b29      	cmp	r3, #41	; 0x29
 80069b8:	d10e      	bne.n	80069d8 <I2C_Slave_ISR_IT+0xae>
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069c0:	d00a      	beq.n	80069d8 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2210      	movs	r2, #16
 80069c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fbf7 	bl	80071be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f926 	bl	8006c22 <I2C_ITSlaveSeqCplt>
 80069d6:	e01c      	b.n	8006a12 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2210      	movs	r2, #16
 80069de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80069e0:	e08f      	b.n	8006b02 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2210      	movs	r2, #16
 80069e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ee:	f043 0204 	orr.w	r2, r3, #4
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <I2C_Slave_ISR_IT+0xda>
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a02:	d17e      	bne.n	8006b02 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a08:	4619      	mov	r1, r3
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fac0 	bl	8006f90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006a10:	e077      	b.n	8006b02 <I2C_Slave_ISR_IT+0x1d8>
 8006a12:	e076      	b.n	8006b02 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d02f      	beq.n	8006a7e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d02a      	beq.n	8006a7e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d018      	beq.n	8006a64 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d14b      	bne.n	8006b06 <I2C_Slave_ISR_IT+0x1dc>
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a74:	d047      	beq.n	8006b06 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 f8d3 	bl	8006c22 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006a7c:	e043      	b.n	8006b06 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f003 0308 	and.w	r3, r3, #8
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d009      	beq.n	8006a9c <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006a92:	6939      	ldr	r1, [r7, #16]
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f840 	bl	8006b1a <I2C_ITAddrCplt>
 8006a9a:	e035      	b.n	8006b08 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d030      	beq.n	8006b08 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d02b      	beq.n	8006b08 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d018      	beq.n	8006aec <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	781a      	ldrb	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	851a      	strh	r2, [r3, #40]	; 0x28
 8006aea:	e00d      	b.n	8006b08 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006af2:	d002      	beq.n	8006afa <I2C_Slave_ISR_IT+0x1d0>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d106      	bne.n	8006b08 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f891 	bl	8006c22 <I2C_ITSlaveSeqCplt>
 8006b00:	e002      	b.n	8006b08 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8006b02:	bf00      	nop
 8006b04:	e000      	b.n	8006b08 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8006b06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b30:	2b28      	cmp	r3, #40	; 0x28
 8006b32:	d16a      	bne.n	8006c0a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	0c1b      	lsrs	r3, r3, #16
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	0c1b      	lsrs	r3, r3, #16
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006b52:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b60:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006b6e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d138      	bne.n	8006bea <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006b78:	897b      	ldrh	r3, [r7, #10]
 8006b7a:	09db      	lsrs	r3, r3, #7
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	89bb      	ldrh	r3, [r7, #12]
 8006b80:	4053      	eors	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f003 0306 	and.w	r3, r3, #6
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d11c      	bne.n	8006bc6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006b8c:	897b      	ldrh	r3, [r7, #10]
 8006b8e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d13b      	bne.n	8006c1a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2208      	movs	r2, #8
 8006bae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bb8:	89ba      	ldrh	r2, [r7, #12]
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7ff fe87 	bl	80068d2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006bc4:	e029      	b.n	8006c1a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006bc6:	893b      	ldrh	r3, [r7, #8]
 8006bc8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fda4 	bl	800771c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bdc:	89ba      	ldrh	r2, [r7, #12]
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff fe75 	bl	80068d2 <HAL_I2C_AddrCallback>
}
 8006be8:	e017      	b.n	8006c1a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fd94 	bl	800771c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bfc:	89ba      	ldrh	r2, [r7, #12]
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fe65 	bl	80068d2 <HAL_I2C_AddrCallback>
}
 8006c08:	e007      	b.n	8006c1a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2208      	movs	r2, #8
 8006c10:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d008      	beq.n	8006c56 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	e00c      	b.n	8006c70 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c6e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b29      	cmp	r3, #41	; 0x29
 8006c7a:	d112      	bne.n	8006ca2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2228      	movs	r2, #40	; 0x28
 8006c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2221      	movs	r2, #33	; 0x21
 8006c88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fd45 	bl	800771c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fe05 	bl	80068aa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ca0:	e017      	b.n	8006cd2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b2a      	cmp	r3, #42	; 0x2a
 8006cac:	d111      	bne.n	8006cd2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2228      	movs	r2, #40	; 0x28
 8006cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2222      	movs	r2, #34	; 0x22
 8006cba:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006cbc:	2102      	movs	r1, #2
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fd2c 	bl	800771c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff fdf6 	bl	80068be <HAL_I2C_SlaveRxCpltCallback>
}
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cf8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2b21      	cmp	r3, #33	; 0x21
 8006d06:	d002      	beq.n	8006d0e <I2C_ITSlaveCplt+0x32>
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	2b29      	cmp	r3, #41	; 0x29
 8006d0c:	d108      	bne.n	8006d20 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006d0e:	f248 0101 	movw	r1, #32769	; 0x8001
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fd02 	bl	800771c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2221      	movs	r2, #33	; 0x21
 8006d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d1e:	e00d      	b.n	8006d3c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	2b22      	cmp	r3, #34	; 0x22
 8006d24:	d002      	beq.n	8006d2c <I2C_ITSlaveCplt+0x50>
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	2b2a      	cmp	r3, #42	; 0x2a
 8006d2a:	d107      	bne.n	8006d3c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006d2c:	f248 0102 	movw	r1, #32770	; 0x8002
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fcf3 	bl	800771c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2222      	movs	r2, #34	; 0x22
 8006d3a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d4a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6859      	ldr	r1, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	4b62      	ldr	r3, [pc, #392]	; (8006ee0 <I2C_ITSlaveCplt+0x204>)
 8006d58:	400b      	ands	r3, r1
 8006d5a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fa2e 	bl	80071be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d013      	beq.n	8006d94 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d7a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01f      	beq.n	8006dc4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d92:	e017      	b.n	8006dc4 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d012      	beq.n	8006dc4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d006      	beq.n	8006dc4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d020      	beq.n	8006e10 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f023 0304 	bic.w	r3, r3, #4
 8006dd4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00c      	beq.n	8006e10 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d005      	beq.n	8006e26 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1e:	f043 0204 	orr.w	r2, r3, #4
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d010      	beq.n	8006e5e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f8a4 	bl	8006f90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b28      	cmp	r3, #40	; 0x28
 8006e52:	d141      	bne.n	8006ed8 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e54:	6979      	ldr	r1, [r7, #20]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f846 	bl	8006ee8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e5c:	e03c      	b.n	8006ed8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e66:	d014      	beq.n	8006e92 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff feda 	bl	8006c22 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a1c      	ldr	r2, [pc, #112]	; (8006ee4 <I2C_ITSlaveCplt+0x208>)
 8006e72:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff fd2f 	bl	80068ee <HAL_I2C_ListenCpltCallback>
}
 8006e90:	e022      	b.n	8006ed8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b22      	cmp	r3, #34	; 0x22
 8006e9c:	d10e      	bne.n	8006ebc <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff fd02 	bl	80068be <HAL_I2C_SlaveRxCpltCallback>
}
 8006eba:	e00d      	b.n	8006ed8 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff fce9 	bl	80068aa <HAL_I2C_SlaveTxCpltCallback>
}
 8006ed8:	bf00      	nop
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	fe00e800 	.word	0xfe00e800
 8006ee4:	ffff0000 	.word	0xffff0000

08006ee8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a25      	ldr	r2, [pc, #148]	; (8006f8c <I2C_ITListenCplt+0xa4>)
 8006ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d022      	beq.n	8006f64 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d012      	beq.n	8006f64 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5c:	f043 0204 	orr.w	r2, r3, #4
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f64:	f248 0103 	movw	r1, #32771	; 0x8003
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fbd7 	bl	800771c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2210      	movs	r2, #16
 8006f74:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff fcb5 	bl	80068ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	ffff0000 	.word	0xffff0000

08006f90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a6d      	ldr	r2, [pc, #436]	; (8007164 <I2C_ITError+0x1d4>)
 8006fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	2b28      	cmp	r3, #40	; 0x28
 8006fc6:	d005      	beq.n	8006fd4 <I2C_ITError+0x44>
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	2b29      	cmp	r3, #41	; 0x29
 8006fcc:	d002      	beq.n	8006fd4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd2:	d10b      	bne.n	8006fec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fd4:	2103      	movs	r1, #3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fba0 	bl	800771c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2228      	movs	r2, #40	; 0x28
 8006fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a60      	ldr	r2, [pc, #384]	; (8007168 <I2C_ITError+0x1d8>)
 8006fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8006fea:	e030      	b.n	800704e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fec:	f248 0103 	movw	r1, #32771	; 0x8003
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fb93 	bl	800771c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f8e1 	bl	80071be <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b60      	cmp	r3, #96	; 0x60
 8007006:	d01f      	beq.n	8007048 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b20      	cmp	r3, #32
 800701c:	d114      	bne.n	8007048 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	2b10      	cmp	r3, #16
 800702a:	d109      	bne.n	8007040 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2210      	movs	r2, #16
 8007032:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007038:	f043 0204 	orr.w	r2, r3, #4
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2220      	movs	r2, #32
 8007046:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	2b00      	cmp	r3, #0
 800705a:	d039      	beq.n	80070d0 <I2C_ITError+0x140>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b11      	cmp	r3, #17
 8007060:	d002      	beq.n	8007068 <I2C_ITError+0xd8>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b21      	cmp	r3, #33	; 0x21
 8007066:	d133      	bne.n	80070d0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007076:	d107      	bne.n	8007088 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007086:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe feeb 	bl	8005e68 <HAL_DMA_GetState>
 8007092:	4603      	mov	r3, r0
 8007094:	2b01      	cmp	r3, #1
 8007096:	d017      	beq.n	80070c8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	4a33      	ldr	r2, [pc, #204]	; (800716c <I2C_ITError+0x1dc>)
 800709e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fe fdfa 	bl	8005ca6 <HAL_DMA_Abort_IT>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d04d      	beq.n	8007154 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070c2:	4610      	mov	r0, r2
 80070c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070c6:	e045      	b.n	8007154 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f851 	bl	8007170 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070ce:	e041      	b.n	8007154 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d039      	beq.n	800714c <I2C_ITError+0x1bc>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b12      	cmp	r3, #18
 80070dc:	d002      	beq.n	80070e4 <I2C_ITError+0x154>
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b22      	cmp	r3, #34	; 0x22
 80070e2:	d133      	bne.n	800714c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f2:	d107      	bne.n	8007104 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007102:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe fead 	bl	8005e68 <HAL_DMA_GetState>
 800710e:	4603      	mov	r3, r0
 8007110:	2b01      	cmp	r3, #1
 8007112:	d017      	beq.n	8007144 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007118:	4a14      	ldr	r2, [pc, #80]	; (800716c <I2C_ITError+0x1dc>)
 800711a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe fdbc 	bl	8005ca6 <HAL_DMA_Abort_IT>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d011      	beq.n	8007158 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800713e:	4610      	mov	r0, r2
 8007140:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007142:	e009      	b.n	8007158 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f813 	bl	8007170 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800714a:	e005      	b.n	8007158 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f80f 	bl	8007170 <I2C_TreatErrorCallback>
  }
}
 8007152:	e002      	b.n	800715a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007154:	bf00      	nop
 8007156:	e000      	b.n	800715a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007158:	bf00      	nop
}
 800715a:	bf00      	nop
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	ffff0000 	.word	0xffff0000
 8007168:	0800692b 	.word	0x0800692b
 800716c:	08007207 	.word	0x08007207

08007170 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b60      	cmp	r3, #96	; 0x60
 8007182:	d10e      	bne.n	80071a2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff fbbb 	bl	8006916 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071a0:	e009      	b.n	80071b6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff fba6 	bl	8006902 <HAL_I2C_ErrorCallback>
}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d103      	bne.n	80071dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2200      	movs	r2, #0
 80071da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d007      	beq.n	80071fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f042 0201 	orr.w	r2, r2, #1
 80071f8:	619a      	str	r2, [r3, #24]
  }
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007212:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007220:	2200      	movs	r2, #0
 8007222:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007230:	2200      	movs	r2, #0
 8007232:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff ff9b 	bl	8007170 <I2C_TreatErrorCallback>
}
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	603b      	str	r3, [r7, #0]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007252:	e031      	b.n	80072b8 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725a:	d02d      	beq.n	80072b8 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725c:	f7fc ff16 	bl	800408c <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d302      	bcc.n	8007272 <I2C_WaitOnFlagUntilTimeout+0x30>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d122      	bne.n	80072b8 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	699a      	ldr	r2, [r3, #24]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4013      	ands	r3, r2
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	bf0c      	ite	eq
 8007282:	2301      	moveq	r3, #1
 8007284:	2300      	movne	r3, #0
 8007286:	b2db      	uxtb	r3, r3
 8007288:	461a      	mov	r2, r3
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	429a      	cmp	r2, r3
 800728e:	d113      	bne.n	80072b8 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007294:	f043 0220 	orr.w	r2, r3, #32
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e00f      	b.n	80072d8 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	4013      	ands	r3, r2
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	bf0c      	ite	eq
 80072c8:	2301      	moveq	r3, #1
 80072ca:	2300      	movne	r3, #0
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d0be      	beq.n	8007254 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072ec:	e033      	b.n	8007356 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	68b9      	ldr	r1, [r7, #8]
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 f900 	bl	80074f8 <I2C_IsErrorOccurred>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e031      	b.n	8007366 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007308:	d025      	beq.n	8007356 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730a:	f7fc febf 	bl	800408c <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	429a      	cmp	r2, r3
 8007318:	d302      	bcc.n	8007320 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d11a      	bne.n	8007356 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b02      	cmp	r3, #2
 800732c:	d013      	beq.n	8007356 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007332:	f043 0220 	orr.w	r2, r3, #32
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e007      	b.n	8007366 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b02      	cmp	r3, #2
 8007362:	d1c4      	bne.n	80072ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800737a:	e02f      	b.n	80073dc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 f8b9 	bl	80074f8 <I2C_IsErrorOccurred>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e02d      	b.n	80073ec <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007390:	f7fc fe7c 	bl	800408c <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	429a      	cmp	r2, r3
 800739e:	d302      	bcc.n	80073a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d11a      	bne.n	80073dc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d013      	beq.n	80073dc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b8:	f043 0220 	orr.w	r2, r3, #32
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e007      	b.n	80073ec <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b20      	cmp	r3, #32
 80073e8:	d1c8      	bne.n	800737c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007400:	e06b      	b.n	80074da <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	68b9      	ldr	r1, [r7, #8]
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 f876 	bl	80074f8 <I2C_IsErrorOccurred>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e069      	b.n	80074ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b20      	cmp	r3, #32
 8007422:	d138      	bne.n	8007496 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	f003 0304 	and.w	r3, r3, #4
 800742e:	2b04      	cmp	r3, #4
 8007430:	d105      	bne.n	800743e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	e055      	b.n	80074ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b10      	cmp	r3, #16
 800744a:	d107      	bne.n	800745c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2210      	movs	r2, #16
 8007452:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2204      	movs	r2, #4
 8007458:	645a      	str	r2, [r3, #68]	; 0x44
 800745a:	e002      	b.n	8007462 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2220      	movs	r2, #32
 8007468:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6859      	ldr	r1, [r3, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	4b1f      	ldr	r3, [pc, #124]	; (80074f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8007476:	400b      	ands	r3, r1
 8007478:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2220      	movs	r2, #32
 800747e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e029      	b.n	80074ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007496:	f7fc fdf9 	bl	800408c <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d302      	bcc.n	80074ac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d116      	bne.n	80074da <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d00f      	beq.n	80074da <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074be:	f043 0220 	orr.w	r2, r3, #32
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e007      	b.n	80074ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d18c      	bne.n	8007402 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	fe00e800 	.word	0xfe00e800

080074f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	; 0x28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	f003 0310 	and.w	r3, r3, #16
 8007520:	2b00      	cmp	r3, #0
 8007522:	d068      	beq.n	80075f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2210      	movs	r2, #16
 800752a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800752c:	e049      	b.n	80075c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d045      	beq.n	80075c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007536:	f7fc fda9 	bl	800408c <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	429a      	cmp	r2, r3
 8007544:	d302      	bcc.n	800754c <I2C_IsErrorOccurred+0x54>
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d13a      	bne.n	80075c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007556:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800755e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800756a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800756e:	d121      	bne.n	80075b4 <I2C_IsErrorOccurred+0xbc>
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007576:	d01d      	beq.n	80075b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007578:	7cfb      	ldrb	r3, [r7, #19]
 800757a:	2b20      	cmp	r3, #32
 800757c:	d01a      	beq.n	80075b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800758c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800758e:	f7fc fd7d 	bl	800408c <HAL_GetTick>
 8007592:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007594:	e00e      	b.n	80075b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007596:	f7fc fd79 	bl	800408c <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b19      	cmp	r3, #25
 80075a2:	d907      	bls.n	80075b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	f043 0320 	orr.w	r3, r3, #32
 80075aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80075b2:	e006      	b.n	80075c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f003 0320 	and.w	r3, r3, #32
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d1e9      	bne.n	8007596 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	d003      	beq.n	80075d8 <I2C_IsErrorOccurred+0xe0>
 80075d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0aa      	beq.n	800752e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80075d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d103      	bne.n	80075e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2220      	movs	r2, #32
 80075e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	f043 0304 	orr.w	r3, r3, #4
 80075ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	f043 0301 	orr.w	r3, r3, #1
 800760e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007618:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00b      	beq.n	8007642 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	f043 0308 	orr.w	r3, r3, #8
 8007630:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800763a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	f043 0302 	orr.w	r3, r3, #2
 8007652:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800765c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01c      	beq.n	80076a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7ff fda6 	bl	80071be <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6859      	ldr	r1, [r3, #4]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	4b0d      	ldr	r3, [pc, #52]	; (80076b4 <I2C_IsErrorOccurred+0x1bc>)
 800767e:	400b      	ands	r3, r1
 8007680:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	431a      	orrs	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80076a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3728      	adds	r7, #40	; 0x28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	fe00e800 	.word	0xfe00e800

080076b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	607b      	str	r3, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	817b      	strh	r3, [r7, #10]
 80076c6:	4613      	mov	r3, r2
 80076c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076ca:	897b      	ldrh	r3, [r7, #10]
 80076cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80076d0:	7a7b      	ldrb	r3, [r7, #9]
 80076d2:	041b      	lsls	r3, r3, #16
 80076d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	0d5b      	lsrs	r3, r3, #21
 80076f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80076f6:	4b08      	ldr	r3, [pc, #32]	; (8007718 <I2C_TransferConfig+0x60>)
 80076f8:	430b      	orrs	r3, r1
 80076fa:	43db      	mvns	r3, r3
 80076fc:	ea02 0103 	and.w	r1, r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	430a      	orrs	r2, r1
 8007708:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800770a:	bf00      	nop
 800770c:	371c      	adds	r7, #28
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	03ff63ff 	.word	0x03ff63ff

0800771c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800772c:	887b      	ldrh	r3, [r7, #2]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00f      	beq.n	8007756 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800773c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800774a:	2b28      	cmp	r3, #40	; 0x28
 800774c:	d003      	beq.n	8007756 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007754:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007756:	887b      	ldrh	r3, [r7, #2]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00f      	beq.n	8007780 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007766:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800776e:	b2db      	uxtb	r3, r3
 8007770:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007774:	2b28      	cmp	r3, #40	; 0x28
 8007776:	d003      	beq.n	8007780 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800777e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007780:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007784:	2b00      	cmp	r3, #0
 8007786:	da03      	bge.n	8007790 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800778e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007790:	887b      	ldrh	r3, [r7, #2]
 8007792:	2b10      	cmp	r3, #16
 8007794:	d103      	bne.n	800779e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800779c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800779e:	887b      	ldrh	r3, [r7, #2]
 80077a0:	2b20      	cmp	r3, #32
 80077a2:	d103      	bne.n	80077ac <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f043 0320 	orr.w	r3, r3, #32
 80077aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80077ac:	887b      	ldrh	r3, [r7, #2]
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d103      	bne.n	80077ba <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6819      	ldr	r1, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	43da      	mvns	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	400a      	ands	r2, r1
 80077ca:	601a      	str	r2, [r3, #0]
}
 80077cc:	bf00      	nop
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b20      	cmp	r3, #32
 80077ec:	d138      	bne.n	8007860 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077f8:	2302      	movs	r3, #2
 80077fa:	e032      	b.n	8007862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2224      	movs	r2, #36	; 0x24
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0201 	bic.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800782a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6819      	ldr	r1, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f042 0201 	orr.w	r2, r2, #1
 800784a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	e000      	b.n	8007862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007860:	2302      	movs	r3, #2
  }
}
 8007862:	4618      	mov	r0, r3
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800786e:	b480      	push	{r7}
 8007870:	b085      	sub	sp, #20
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b20      	cmp	r3, #32
 8007882:	d139      	bne.n	80078f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800788e:	2302      	movs	r3, #2
 8007890:	e033      	b.n	80078fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2224      	movs	r2, #36	; 0x24
 800789e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0201 	bic.w	r2, r2, #1
 80078b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80078c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e000      	b.n	80078fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
	...

08007908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800790e:	af00      	add	r7, sp, #0
 8007910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007914:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007918:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800791a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800791e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d102      	bne.n	800792e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	f001 b83a 	b.w	80089a2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800792e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007932:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 816f 	beq.w	8007c22 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007944:	4bb5      	ldr	r3, [pc, #724]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f003 030c 	and.w	r3, r3, #12
 800794c:	2b04      	cmp	r3, #4
 800794e:	d00c      	beq.n	800796a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007950:	4bb2      	ldr	r3, [pc, #712]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f003 030c 	and.w	r3, r3, #12
 8007958:	2b08      	cmp	r3, #8
 800795a:	d15c      	bne.n	8007a16 <HAL_RCC_OscConfig+0x10e>
 800795c:	4baf      	ldr	r3, [pc, #700]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007968:	d155      	bne.n	8007a16 <HAL_RCC_OscConfig+0x10e>
 800796a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800796e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007972:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007976:	fa93 f3a3 	rbit	r3, r3
 800797a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800797e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007982:	fab3 f383 	clz	r3, r3
 8007986:	b2db      	uxtb	r3, r3
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	b2db      	uxtb	r3, r3
 800798c:	f043 0301 	orr.w	r3, r3, #1
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b01      	cmp	r3, #1
 8007994:	d102      	bne.n	800799c <HAL_RCC_OscConfig+0x94>
 8007996:	4ba1      	ldr	r3, [pc, #644]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	e015      	b.n	80079c8 <HAL_RCC_OscConfig+0xc0>
 800799c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80079a8:	fa93 f3a3 	rbit	r3, r3
 80079ac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80079b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079b4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80079b8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80079bc:	fa93 f3a3 	rbit	r3, r3
 80079c0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80079c4:	4b95      	ldr	r3, [pc, #596]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80079cc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80079d0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80079d4:	fa92 f2a2 	rbit	r2, r2
 80079d8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80079dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80079e0:	fab2 f282 	clz	r2, r2
 80079e4:	b2d2      	uxtb	r2, r2
 80079e6:	f042 0220 	orr.w	r2, r2, #32
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	f002 021f 	and.w	r2, r2, #31
 80079f0:	2101      	movs	r1, #1
 80079f2:	fa01 f202 	lsl.w	r2, r1, r2
 80079f6:	4013      	ands	r3, r2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8111 	beq.w	8007c20 <HAL_RCC_OscConfig+0x318>
 80079fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007a02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f040 8108 	bne.w	8007c20 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	f000 bfc6 	b.w	80089a2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007a1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a26:	d106      	bne.n	8007a36 <HAL_RCC_OscConfig+0x12e>
 8007a28:	4b7c      	ldr	r3, [pc, #496]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a7b      	ldr	r2, [pc, #492]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	e036      	b.n	8007aa4 <HAL_RCC_OscConfig+0x19c>
 8007a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007a3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10c      	bne.n	8007a60 <HAL_RCC_OscConfig+0x158>
 8007a46:	4b75      	ldr	r3, [pc, #468]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a74      	ldr	r2, [pc, #464]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a50:	6013      	str	r3, [r2, #0]
 8007a52:	4b72      	ldr	r3, [pc, #456]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a71      	ldr	r2, [pc, #452]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	e021      	b.n	8007aa4 <HAL_RCC_OscConfig+0x19c>
 8007a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007a64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a70:	d10c      	bne.n	8007a8c <HAL_RCC_OscConfig+0x184>
 8007a72:	4b6a      	ldr	r3, [pc, #424]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a69      	ldr	r2, [pc, #420]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	4b67      	ldr	r3, [pc, #412]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a66      	ldr	r2, [pc, #408]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	e00b      	b.n	8007aa4 <HAL_RCC_OscConfig+0x19c>
 8007a8c:	4b63      	ldr	r3, [pc, #396]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a62      	ldr	r2, [pc, #392]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	4b60      	ldr	r3, [pc, #384]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a5f      	ldr	r2, [pc, #380]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007aa2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007aa8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d059      	beq.n	8007b68 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab4:	f7fc faea 	bl	800408c <HAL_GetTick>
 8007ab8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007abc:	e00a      	b.n	8007ad4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007abe:	f7fc fae5 	bl	800408c <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b64      	cmp	r3, #100	; 0x64
 8007acc:	d902      	bls.n	8007ad4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	f000 bf67 	b.w	80089a2 <HAL_RCC_OscConfig+0x109a>
 8007ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ad8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007adc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8007ae0:	fa93 f3a3 	rbit	r3, r3
 8007ae4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8007ae8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aec:	fab3 f383 	clz	r3, r3
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	095b      	lsrs	r3, r3, #5
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	f043 0301 	orr.w	r3, r3, #1
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d102      	bne.n	8007b06 <HAL_RCC_OscConfig+0x1fe>
 8007b00:	4b46      	ldr	r3, [pc, #280]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	e015      	b.n	8007b32 <HAL_RCC_OscConfig+0x22a>
 8007b06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b0a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007b12:	fa93 f3a3 	rbit	r3, r3
 8007b16:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8007b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b1e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007b22:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007b26:	fa93 f3a3 	rbit	r3, r3
 8007b2a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007b2e:	4b3b      	ldr	r3, [pc, #236]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b36:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8007b3a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8007b3e:	fa92 f2a2 	rbit	r2, r2
 8007b42:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8007b46:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007b4a:	fab2 f282 	clz	r2, r2
 8007b4e:	b2d2      	uxtb	r2, r2
 8007b50:	f042 0220 	orr.w	r2, r2, #32
 8007b54:	b2d2      	uxtb	r2, r2
 8007b56:	f002 021f 	and.w	r2, r2, #31
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8007b60:	4013      	ands	r3, r2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0ab      	beq.n	8007abe <HAL_RCC_OscConfig+0x1b6>
 8007b66:	e05c      	b.n	8007c22 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b68:	f7fc fa90 	bl	800408c <HAL_GetTick>
 8007b6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b70:	e00a      	b.n	8007b88 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b72:	f7fc fa8b 	bl	800408c <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b64      	cmp	r3, #100	; 0x64
 8007b80:	d902      	bls.n	8007b88 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	f000 bf0d 	b.w	80089a2 <HAL_RCC_OscConfig+0x109a>
 8007b88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b8c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007b94:	fa93 f3a3 	rbit	r3, r3
 8007b98:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8007b9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ba0:	fab3 f383 	clz	r3, r3
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	f043 0301 	orr.w	r3, r3, #1
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d102      	bne.n	8007bba <HAL_RCC_OscConfig+0x2b2>
 8007bb4:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	e015      	b.n	8007be6 <HAL_RCC_OscConfig+0x2de>
 8007bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bbe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bc2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007bc6:	fa93 f3a3 	rbit	r3, r3
 8007bca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8007bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bd2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007bd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007bda:	fa93 f3a3 	rbit	r3, r3
 8007bde:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007be2:	4b0e      	ldr	r3, [pc, #56]	; (8007c1c <HAL_RCC_OscConfig+0x314>)
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007bea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8007bee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007bf2:	fa92 f2a2 	rbit	r2, r2
 8007bf6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8007bfa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007bfe:	fab2 f282 	clz	r2, r2
 8007c02:	b2d2      	uxtb	r2, r2
 8007c04:	f042 0220 	orr.w	r2, r2, #32
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	f002 021f 	and.w	r2, r2, #31
 8007c0e:	2101      	movs	r1, #1
 8007c10:	fa01 f202 	lsl.w	r2, r1, r2
 8007c14:	4013      	ands	r3, r2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1ab      	bne.n	8007b72 <HAL_RCC_OscConfig+0x26a>
 8007c1a:	e002      	b.n	8007c22 <HAL_RCC_OscConfig+0x31a>
 8007c1c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 817f 	beq.w	8007f36 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007c38:	4ba7      	ldr	r3, [pc, #668]	; (8007ed8 <HAL_RCC_OscConfig+0x5d0>)
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f003 030c 	and.w	r3, r3, #12
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00c      	beq.n	8007c5e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007c44:	4ba4      	ldr	r3, [pc, #656]	; (8007ed8 <HAL_RCC_OscConfig+0x5d0>)
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f003 030c 	and.w	r3, r3, #12
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d173      	bne.n	8007d38 <HAL_RCC_OscConfig+0x430>
 8007c50:	4ba1      	ldr	r3, [pc, #644]	; (8007ed8 <HAL_RCC_OscConfig+0x5d0>)
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c5c:	d16c      	bne.n	8007d38 <HAL_RCC_OscConfig+0x430>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c64:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8007c68:	fa93 f3a3 	rbit	r3, r3
 8007c6c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8007c70:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c74:	fab3 f383 	clz	r3, r3
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	095b      	lsrs	r3, r3, #5
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d102      	bne.n	8007c8e <HAL_RCC_OscConfig+0x386>
 8007c88:	4b93      	ldr	r3, [pc, #588]	; (8007ed8 <HAL_RCC_OscConfig+0x5d0>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	e013      	b.n	8007cb6 <HAL_RCC_OscConfig+0x3ae>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c94:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007c98:	fa93 f3a3 	rbit	r3, r3
 8007c9c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007ca6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007caa:	fa93 f3a3 	rbit	r3, r3
 8007cae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007cb2:	4b89      	ldr	r3, [pc, #548]	; (8007ed8 <HAL_RCC_OscConfig+0x5d0>)
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8007cbc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8007cc0:	fa92 f2a2 	rbit	r2, r2
 8007cc4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8007cc8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007ccc:	fab2 f282 	clz	r2, r2
 8007cd0:	b2d2      	uxtb	r2, r2
 8007cd2:	f042 0220 	orr.w	r2, r2, #32
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	f002 021f 	and.w	r2, r2, #31
 8007cdc:	2101      	movs	r1, #1
 8007cde:	fa01 f202 	lsl.w	r2, r1, r2
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <HAL_RCC_OscConfig+0x3f6>
 8007ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007cec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d002      	beq.n	8007cfe <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f000 be52 	b.w	80089a2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cfe:	4b76      	ldr	r3, [pc, #472]	; (8007ed8 <HAL_RCC_OscConfig+0x5d0>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	21f8      	movs	r1, #248	; 0xf8
 8007d14:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d18:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8007d1c:	fa91 f1a1 	rbit	r1, r1
 8007d20:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8007d24:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007d28:	fab1 f181 	clz	r1, r1
 8007d2c:	b2c9      	uxtb	r1, r1
 8007d2e:	408b      	lsls	r3, r1
 8007d30:	4969      	ldr	r1, [pc, #420]	; (8007ed8 <HAL_RCC_OscConfig+0x5d0>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d36:	e0fe      	b.n	8007f36 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 8088 	beq.w	8007e5a <HAL_RCC_OscConfig+0x552>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d50:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8007d54:	fa93 f3a3 	rbit	r3, r3
 8007d58:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8007d5c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d60:	fab3 f383 	clz	r3, r3
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	461a      	mov	r2, r3
 8007d72:	2301      	movs	r3, #1
 8007d74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d76:	f7fc f989 	bl	800408c <HAL_GetTick>
 8007d7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d7e:	e00a      	b.n	8007d96 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d80:	f7fc f984 	bl	800408c <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d902      	bls.n	8007d96 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	f000 be06 	b.w	80089a2 <HAL_RCC_OscConfig+0x109a>
 8007d96:	2302      	movs	r3, #2
 8007d98:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d9c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007da0:	fa93 f3a3 	rbit	r3, r3
 8007da4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8007da8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dac:	fab3 f383 	clz	r3, r3
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	095b      	lsrs	r3, r3, #5
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	f043 0301 	orr.w	r3, r3, #1
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d102      	bne.n	8007dc6 <HAL_RCC_OscConfig+0x4be>
 8007dc0:	4b45      	ldr	r3, [pc, #276]	; (8007ed8 <HAL_RCC_OscConfig+0x5d0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	e013      	b.n	8007dee <HAL_RCC_OscConfig+0x4e6>
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dcc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007dd0:	fa93 f3a3 	rbit	r3, r3
 8007dd4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8007dd8:	2302      	movs	r3, #2
 8007dda:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007dde:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007de2:	fa93 f3a3 	rbit	r3, r3
 8007de6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007dea:	4b3b      	ldr	r3, [pc, #236]	; (8007ed8 <HAL_RCC_OscConfig+0x5d0>)
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	2202      	movs	r2, #2
 8007df0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8007df4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007df8:	fa92 f2a2 	rbit	r2, r2
 8007dfc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8007e00:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007e04:	fab2 f282 	clz	r2, r2
 8007e08:	b2d2      	uxtb	r2, r2
 8007e0a:	f042 0220 	orr.w	r2, r2, #32
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	f002 021f 	and.w	r2, r2, #31
 8007e14:	2101      	movs	r1, #1
 8007e16:	fa01 f202 	lsl.w	r2, r1, r2
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d0af      	beq.n	8007d80 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e20:	4b2d      	ldr	r3, [pc, #180]	; (8007ed8 <HAL_RCC_OscConfig+0x5d0>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	21f8      	movs	r1, #248	; 0xf8
 8007e36:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e3a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8007e3e:	fa91 f1a1 	rbit	r1, r1
 8007e42:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8007e46:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007e4a:	fab1 f181 	clz	r1, r1
 8007e4e:	b2c9      	uxtb	r1, r1
 8007e50:	408b      	lsls	r3, r1
 8007e52:	4921      	ldr	r1, [pc, #132]	; (8007ed8 <HAL_RCC_OscConfig+0x5d0>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	600b      	str	r3, [r1, #0]
 8007e58:	e06d      	b.n	8007f36 <HAL_RCC_OscConfig+0x62e>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e60:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007e64:	fa93 f3a3 	rbit	r3, r3
 8007e68:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8007e6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e70:	fab3 f383 	clz	r3, r3
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007e7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	461a      	mov	r2, r3
 8007e82:	2300      	movs	r3, #0
 8007e84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e86:	f7fc f901 	bl	800408c <HAL_GetTick>
 8007e8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e8e:	e00a      	b.n	8007ea6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e90:	f7fc f8fc 	bl	800408c <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d902      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	f000 bd7e 	b.w	80089a2 <HAL_RCC_OscConfig+0x109a>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007eb0:	fa93 f3a3 	rbit	r3, r3
 8007eb4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8007eb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ebc:	fab3 f383 	clz	r3, r3
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	095b      	lsrs	r3, r3, #5
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	f043 0301 	orr.w	r3, r3, #1
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d105      	bne.n	8007edc <HAL_RCC_OscConfig+0x5d4>
 8007ed0:	4b01      	ldr	r3, [pc, #4]	; (8007ed8 <HAL_RCC_OscConfig+0x5d0>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	e016      	b.n	8007f04 <HAL_RCC_OscConfig+0x5fc>
 8007ed6:	bf00      	nop
 8007ed8:	40021000 	.word	0x40021000
 8007edc:	2302      	movs	r3, #2
 8007ede:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee6:	fa93 f3a3 	rbit	r3, r3
 8007eea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007eee:	2302      	movs	r3, #2
 8007ef0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007ef4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007ef8:	fa93 f3a3 	rbit	r3, r3
 8007efc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007f00:	4bbf      	ldr	r3, [pc, #764]	; (8008200 <HAL_RCC_OscConfig+0x8f8>)
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	2202      	movs	r2, #2
 8007f06:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007f0a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007f0e:	fa92 f2a2 	rbit	r2, r2
 8007f12:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8007f16:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007f1a:	fab2 f282 	clz	r2, r2
 8007f1e:	b2d2      	uxtb	r2, r2
 8007f20:	f042 0220 	orr.w	r2, r2, #32
 8007f24:	b2d2      	uxtb	r2, r2
 8007f26:	f002 021f 	and.w	r2, r2, #31
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f30:	4013      	ands	r3, r2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1ac      	bne.n	8007e90 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0308 	and.w	r3, r3, #8
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 8113 	beq.w	8008172 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d07c      	beq.n	8008056 <HAL_RCC_OscConfig+0x74e>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f66:	fa93 f3a3 	rbit	r3, r3
 8007f6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8007f6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f72:	fab3 f383 	clz	r3, r3
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	4ba2      	ldr	r3, [pc, #648]	; (8008204 <HAL_RCC_OscConfig+0x8fc>)
 8007f7c:	4413      	add	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	461a      	mov	r2, r3
 8007f82:	2301      	movs	r3, #1
 8007f84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f86:	f7fc f881 	bl	800408c <HAL_GetTick>
 8007f8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f8e:	e00a      	b.n	8007fa6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f90:	f7fc f87c 	bl	800408c <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d902      	bls.n	8007fa6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	f000 bcfe 	b.w	80089a2 <HAL_RCC_OscConfig+0x109a>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fb0:	fa93 f2a3 	rbit	r2, r3
 8007fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fb8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	fa93 f2a3 	rbit	r2, r3
 8007fd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fe6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007fea:	2202      	movs	r2, #2
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ff2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	fa93 f2a3 	rbit	r2, r3
 8007ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008000:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008004:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008006:	4b7e      	ldr	r3, [pc, #504]	; (8008200 <HAL_RCC_OscConfig+0x8f8>)
 8008008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800800a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800800e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008012:	2102      	movs	r1, #2
 8008014:	6019      	str	r1, [r3, #0]
 8008016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800801a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	fa93 f1a3 	rbit	r1, r3
 8008024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008028:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800802c:	6019      	str	r1, [r3, #0]
  return result;
 800802e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008032:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	fab3 f383 	clz	r3, r3
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008042:	b2db      	uxtb	r3, r3
 8008044:	f003 031f 	and.w	r3, r3, #31
 8008048:	2101      	movs	r1, #1
 800804a:	fa01 f303 	lsl.w	r3, r1, r3
 800804e:	4013      	ands	r3, r2
 8008050:	2b00      	cmp	r3, #0
 8008052:	d09d      	beq.n	8007f90 <HAL_RCC_OscConfig+0x688>
 8008054:	e08d      	b.n	8008172 <HAL_RCC_OscConfig+0x86a>
 8008056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800805a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800805e:	2201      	movs	r2, #1
 8008060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008066:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	fa93 f2a3 	rbit	r2, r3
 8008070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008074:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008078:	601a      	str	r2, [r3, #0]
  return result;
 800807a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800807e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008082:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008084:	fab3 f383 	clz	r3, r3
 8008088:	b2db      	uxtb	r3, r3
 800808a:	461a      	mov	r2, r3
 800808c:	4b5d      	ldr	r3, [pc, #372]	; (8008204 <HAL_RCC_OscConfig+0x8fc>)
 800808e:	4413      	add	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	461a      	mov	r2, r3
 8008094:	2300      	movs	r3, #0
 8008096:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008098:	f7fb fff8 	bl	800408c <HAL_GetTick>
 800809c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080a0:	e00a      	b.n	80080b8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080a2:	f7fb fff3 	bl	800408c <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d902      	bls.n	80080b8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	f000 bc75 	b.w	80089a2 <HAL_RCC_OscConfig+0x109a>
 80080b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80080c0:	2202      	movs	r2, #2
 80080c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	fa93 f2a3 	rbit	r2, r3
 80080d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080e4:	2202      	movs	r2, #2
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	fa93 f2a3 	rbit	r2, r3
 80080f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008104:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008108:	2202      	movs	r2, #2
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008110:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	fa93 f2a3 	rbit	r2, r3
 800811a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800811e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008122:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008124:	4b36      	ldr	r3, [pc, #216]	; (8008200 <HAL_RCC_OscConfig+0x8f8>)
 8008126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800812c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008130:	2102      	movs	r1, #2
 8008132:	6019      	str	r1, [r3, #0]
 8008134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008138:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	fa93 f1a3 	rbit	r1, r3
 8008142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008146:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800814a:	6019      	str	r1, [r3, #0]
  return result;
 800814c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008150:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	fab3 f383 	clz	r3, r3
 800815a:	b2db      	uxtb	r3, r3
 800815c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f003 031f 	and.w	r3, r3, #31
 8008166:	2101      	movs	r1, #1
 8008168:	fa01 f303 	lsl.w	r3, r1, r3
 800816c:	4013      	ands	r3, r2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d197      	bne.n	80080a2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008176:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0304 	and.w	r3, r3, #4
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 81a5 	beq.w	80084d2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008188:	2300      	movs	r3, #0
 800818a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800818e:	4b1c      	ldr	r3, [pc, #112]	; (8008200 <HAL_RCC_OscConfig+0x8f8>)
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d116      	bne.n	80081c8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800819a:	4b19      	ldr	r3, [pc, #100]	; (8008200 <HAL_RCC_OscConfig+0x8f8>)
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	4a18      	ldr	r2, [pc, #96]	; (8008200 <HAL_RCC_OscConfig+0x8f8>)
 80081a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081a4:	61d3      	str	r3, [r2, #28]
 80081a6:	4b16      	ldr	r3, [pc, #88]	; (8008200 <HAL_RCC_OscConfig+0x8f8>)
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80081ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081c0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081c8:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <HAL_RCC_OscConfig+0x900>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d121      	bne.n	8008218 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081d4:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <HAL_RCC_OscConfig+0x900>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a0b      	ldr	r2, [pc, #44]	; (8008208 <HAL_RCC_OscConfig+0x900>)
 80081da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081de:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081e0:	f7fb ff54 	bl	800408c <HAL_GetTick>
 80081e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081e8:	e010      	b.n	800820c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ea:	f7fb ff4f 	bl	800408c <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	2b64      	cmp	r3, #100	; 0x64
 80081f8:	d908      	bls.n	800820c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e3d1      	b.n	80089a2 <HAL_RCC_OscConfig+0x109a>
 80081fe:	bf00      	nop
 8008200:	40021000 	.word	0x40021000
 8008204:	10908120 	.word	0x10908120
 8008208:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800820c:	4b8d      	ldr	r3, [pc, #564]	; (8008444 <HAL_RCC_OscConfig+0xb3c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008214:	2b00      	cmp	r3, #0
 8008216:	d0e8      	beq.n	80081ea <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800821c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d106      	bne.n	8008236 <HAL_RCC_OscConfig+0x92e>
 8008228:	4b87      	ldr	r3, [pc, #540]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	4a86      	ldr	r2, [pc, #536]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	6213      	str	r3, [r2, #32]
 8008234:	e035      	b.n	80082a2 <HAL_RCC_OscConfig+0x99a>
 8008236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800823a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10c      	bne.n	8008260 <HAL_RCC_OscConfig+0x958>
 8008246:	4b80      	ldr	r3, [pc, #512]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	4a7f      	ldr	r2, [pc, #508]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 800824c:	f023 0301 	bic.w	r3, r3, #1
 8008250:	6213      	str	r3, [r2, #32]
 8008252:	4b7d      	ldr	r3, [pc, #500]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	4a7c      	ldr	r2, [pc, #496]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 8008258:	f023 0304 	bic.w	r3, r3, #4
 800825c:	6213      	str	r3, [r2, #32]
 800825e:	e020      	b.n	80082a2 <HAL_RCC_OscConfig+0x99a>
 8008260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008264:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	2b05      	cmp	r3, #5
 800826e:	d10c      	bne.n	800828a <HAL_RCC_OscConfig+0x982>
 8008270:	4b75      	ldr	r3, [pc, #468]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	4a74      	ldr	r2, [pc, #464]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 8008276:	f043 0304 	orr.w	r3, r3, #4
 800827a:	6213      	str	r3, [r2, #32]
 800827c:	4b72      	ldr	r3, [pc, #456]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	4a71      	ldr	r2, [pc, #452]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 8008282:	f043 0301 	orr.w	r3, r3, #1
 8008286:	6213      	str	r3, [r2, #32]
 8008288:	e00b      	b.n	80082a2 <HAL_RCC_OscConfig+0x99a>
 800828a:	4b6f      	ldr	r3, [pc, #444]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	4a6e      	ldr	r2, [pc, #440]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 8008290:	f023 0301 	bic.w	r3, r3, #1
 8008294:	6213      	str	r3, [r2, #32]
 8008296:	4b6c      	ldr	r3, [pc, #432]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	4a6b      	ldr	r2, [pc, #428]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 800829c:	f023 0304 	bic.w	r3, r3, #4
 80082a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 8081 	beq.w	80083b6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082b4:	f7fb feea 	bl	800408c <HAL_GetTick>
 80082b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082bc:	e00b      	b.n	80082d6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082be:	f7fb fee5 	bl	800408c <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e365      	b.n	80089a2 <HAL_RCC_OscConfig+0x109a>
 80082d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80082de:	2202      	movs	r2, #2
 80082e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	fa93 f2a3 	rbit	r2, r3
 80082f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008302:	2202      	movs	r2, #2
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800830a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	fa93 f2a3 	rbit	r2, r3
 8008314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008318:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800831c:	601a      	str	r2, [r3, #0]
  return result;
 800831e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008322:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008326:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008328:	fab3 f383 	clz	r3, r3
 800832c:	b2db      	uxtb	r3, r3
 800832e:	095b      	lsrs	r3, r3, #5
 8008330:	b2db      	uxtb	r3, r3
 8008332:	f043 0302 	orr.w	r3, r3, #2
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d102      	bne.n	8008342 <HAL_RCC_OscConfig+0xa3a>
 800833c:	4b42      	ldr	r3, [pc, #264]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	e013      	b.n	800836a <HAL_RCC_OscConfig+0xa62>
 8008342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008346:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800834a:	2202      	movs	r2, #2
 800834c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800834e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008352:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	fa93 f2a3 	rbit	r2, r3
 800835c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008360:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	4b38      	ldr	r3, [pc, #224]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800836e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8008372:	2102      	movs	r1, #2
 8008374:	6011      	str	r1, [r2, #0]
 8008376:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800837a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800837e:	6812      	ldr	r2, [r2, #0]
 8008380:	fa92 f1a2 	rbit	r1, r2
 8008384:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008388:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800838c:	6011      	str	r1, [r2, #0]
  return result;
 800838e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008392:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8008396:	6812      	ldr	r2, [r2, #0]
 8008398:	fab2 f282 	clz	r2, r2
 800839c:	b2d2      	uxtb	r2, r2
 800839e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	f002 021f 	and.w	r2, r2, #31
 80083a8:	2101      	movs	r1, #1
 80083aa:	fa01 f202 	lsl.w	r2, r1, r2
 80083ae:	4013      	ands	r3, r2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d084      	beq.n	80082be <HAL_RCC_OscConfig+0x9b6>
 80083b4:	e083      	b.n	80084be <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083b6:	f7fb fe69 	bl	800408c <HAL_GetTick>
 80083ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083be:	e00b      	b.n	80083d8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083c0:	f7fb fe64 	bl	800408c <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e2e4      	b.n	80089a2 <HAL_RCC_OscConfig+0x109a>
 80083d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083dc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80083e0:	2202      	movs	r2, #2
 80083e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	fa93 f2a3 	rbit	r2, r3
 80083f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008400:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008404:	2202      	movs	r2, #2
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800840c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	fa93 f2a3 	rbit	r2, r3
 8008416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800841a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800841e:	601a      	str	r2, [r3, #0]
  return result;
 8008420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008424:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008428:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800842a:	fab3 f383 	clz	r3, r3
 800842e:	b2db      	uxtb	r3, r3
 8008430:	095b      	lsrs	r3, r3, #5
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f043 0302 	orr.w	r3, r3, #2
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b02      	cmp	r3, #2
 800843c:	d106      	bne.n	800844c <HAL_RCC_OscConfig+0xb44>
 800843e:	4b02      	ldr	r3, [pc, #8]	; (8008448 <HAL_RCC_OscConfig+0xb40>)
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	e017      	b.n	8008474 <HAL_RCC_OscConfig+0xb6c>
 8008444:	40007000 	.word	0x40007000
 8008448:	40021000 	.word	0x40021000
 800844c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008450:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008454:	2202      	movs	r2, #2
 8008456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800845c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	fa93 f2a3 	rbit	r2, r3
 8008466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800846a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800846e:	601a      	str	r2, [r3, #0]
 8008470:	4bb3      	ldr	r3, [pc, #716]	; (8008740 <HAL_RCC_OscConfig+0xe38>)
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008478:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800847c:	2102      	movs	r1, #2
 800847e:	6011      	str	r1, [r2, #0]
 8008480:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008484:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8008488:	6812      	ldr	r2, [r2, #0]
 800848a:	fa92 f1a2 	rbit	r1, r2
 800848e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008492:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8008496:	6011      	str	r1, [r2, #0]
  return result;
 8008498:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800849c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80084a0:	6812      	ldr	r2, [r2, #0]
 80084a2:	fab2 f282 	clz	r2, r2
 80084a6:	b2d2      	uxtb	r2, r2
 80084a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084ac:	b2d2      	uxtb	r2, r2
 80084ae:	f002 021f 	and.w	r2, r2, #31
 80084b2:	2101      	movs	r1, #1
 80084b4:	fa01 f202 	lsl.w	r2, r1, r2
 80084b8:	4013      	ands	r3, r2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d180      	bne.n	80083c0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80084be:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d105      	bne.n	80084d2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084c6:	4b9e      	ldr	r3, [pc, #632]	; (8008740 <HAL_RCC_OscConfig+0xe38>)
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	4a9d      	ldr	r2, [pc, #628]	; (8008740 <HAL_RCC_OscConfig+0xe38>)
 80084cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084d0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 825e 	beq.w	80089a0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084e4:	4b96      	ldr	r3, [pc, #600]	; (8008740 <HAL_RCC_OscConfig+0xe38>)
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f003 030c 	and.w	r3, r3, #12
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	f000 821f 	beq.w	8008930 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	2b02      	cmp	r3, #2
 8008500:	f040 8170 	bne.w	80087e4 <HAL_RCC_OscConfig+0xedc>
 8008504:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008508:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800850c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008516:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	fa93 f2a3 	rbit	r2, r3
 8008520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008524:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008528:	601a      	str	r2, [r3, #0]
  return result;
 800852a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800852e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008532:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008534:	fab3 f383 	clz	r3, r3
 8008538:	b2db      	uxtb	r3, r3
 800853a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800853e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	461a      	mov	r2, r3
 8008546:	2300      	movs	r3, #0
 8008548:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800854a:	f7fb fd9f 	bl	800408c <HAL_GetTick>
 800854e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008552:	e009      	b.n	8008568 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008554:	f7fb fd9a 	bl	800408c <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e21c      	b.n	80089a2 <HAL_RCC_OscConfig+0x109a>
 8008568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800856c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008570:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800857a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	fa93 f2a3 	rbit	r2, r3
 8008584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008588:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800858c:	601a      	str	r2, [r3, #0]
  return result;
 800858e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008592:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008596:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008598:	fab3 f383 	clz	r3, r3
 800859c:	b2db      	uxtb	r3, r3
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	f043 0301 	orr.w	r3, r3, #1
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d102      	bne.n	80085b2 <HAL_RCC_OscConfig+0xcaa>
 80085ac:	4b64      	ldr	r3, [pc, #400]	; (8008740 <HAL_RCC_OscConfig+0xe38>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	e027      	b.n	8008602 <HAL_RCC_OscConfig+0xcfa>
 80085b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085b6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80085ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80085be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085c4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	fa93 f2a3 	rbit	r2, r3
 80085ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085dc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80085e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085ea:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	fa93 f2a3 	rbit	r2, r3
 80085f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80085f8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	4b50      	ldr	r3, [pc, #320]	; (8008740 <HAL_RCC_OscConfig+0xe38>)
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008606:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800860a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800860e:	6011      	str	r1, [r2, #0]
 8008610:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008614:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008618:	6812      	ldr	r2, [r2, #0]
 800861a:	fa92 f1a2 	rbit	r1, r2
 800861e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008622:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8008626:	6011      	str	r1, [r2, #0]
  return result;
 8008628:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800862c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8008630:	6812      	ldr	r2, [r2, #0]
 8008632:	fab2 f282 	clz	r2, r2
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	f042 0220 	orr.w	r2, r2, #32
 800863c:	b2d2      	uxtb	r2, r2
 800863e:	f002 021f 	and.w	r2, r2, #31
 8008642:	2101      	movs	r1, #1
 8008644:	fa01 f202 	lsl.w	r2, r1, r2
 8008648:	4013      	ands	r3, r2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d182      	bne.n	8008554 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800864e:	4b3c      	ldr	r3, [pc, #240]	; (8008740 <HAL_RCC_OscConfig+0xe38>)
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	f023 020f 	bic.w	r2, r3, #15
 8008656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800865a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	4937      	ldr	r1, [pc, #220]	; (8008740 <HAL_RCC_OscConfig+0xe38>)
 8008664:	4313      	orrs	r3, r2
 8008666:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008668:	4b35      	ldr	r3, [pc, #212]	; (8008740 <HAL_RCC_OscConfig+0xe38>)
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8008670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008674:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6a19      	ldr	r1, [r3, #32]
 800867c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008680:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	430b      	orrs	r3, r1
 800868a:	492d      	ldr	r1, [pc, #180]	; (8008740 <HAL_RCC_OscConfig+0xe38>)
 800868c:	4313      	orrs	r3, r2
 800868e:	604b      	str	r3, [r1, #4]
 8008690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008694:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008698:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800869c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800869e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	fa93 f2a3 	rbit	r2, r3
 80086ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086b0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80086b4:	601a      	str	r2, [r3, #0]
  return result;
 80086b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086ba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80086be:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086c0:	fab3 f383 	clz	r3, r3
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80086ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	461a      	mov	r2, r3
 80086d2:	2301      	movs	r3, #1
 80086d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d6:	f7fb fcd9 	bl	800408c <HAL_GetTick>
 80086da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80086de:	e009      	b.n	80086f4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086e0:	f7fb fcd4 	bl	800408c <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d901      	bls.n	80086f4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e156      	b.n	80089a2 <HAL_RCC_OscConfig+0x109a>
 80086f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086f8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80086fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008706:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	fa93 f2a3 	rbit	r2, r3
 8008710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008714:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008718:	601a      	str	r2, [r3, #0]
  return result;
 800871a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800871e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008722:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008724:	fab3 f383 	clz	r3, r3
 8008728:	b2db      	uxtb	r3, r3
 800872a:	095b      	lsrs	r3, r3, #5
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f043 0301 	orr.w	r3, r3, #1
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b01      	cmp	r3, #1
 8008736:	d105      	bne.n	8008744 <HAL_RCC_OscConfig+0xe3c>
 8008738:	4b01      	ldr	r3, [pc, #4]	; (8008740 <HAL_RCC_OscConfig+0xe38>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	e02a      	b.n	8008794 <HAL_RCC_OscConfig+0xe8c>
 800873e:	bf00      	nop
 8008740:	40021000 	.word	0x40021000
 8008744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008748:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800874c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008756:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	fa93 f2a3 	rbit	r2, r3
 8008760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008764:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800876e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8008772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800877c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	fa93 f2a3 	rbit	r2, r3
 8008786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800878a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	4b86      	ldr	r3, [pc, #536]	; (80089ac <HAL_RCC_OscConfig+0x10a4>)
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008798:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800879c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80087a0:	6011      	str	r1, [r2, #0]
 80087a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80087a6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80087aa:	6812      	ldr	r2, [r2, #0]
 80087ac:	fa92 f1a2 	rbit	r1, r2
 80087b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80087b4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80087b8:	6011      	str	r1, [r2, #0]
  return result;
 80087ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80087be:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80087c2:	6812      	ldr	r2, [r2, #0]
 80087c4:	fab2 f282 	clz	r2, r2
 80087c8:	b2d2      	uxtb	r2, r2
 80087ca:	f042 0220 	orr.w	r2, r2, #32
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	f002 021f 	and.w	r2, r2, #31
 80087d4:	2101      	movs	r1, #1
 80087d6:	fa01 f202 	lsl.w	r2, r1, r2
 80087da:	4013      	ands	r3, r2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f43f af7f 	beq.w	80086e0 <HAL_RCC_OscConfig+0xdd8>
 80087e2:	e0dd      	b.n	80089a0 <HAL_RCC_OscConfig+0x1098>
 80087e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80087ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087f6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	fa93 f2a3 	rbit	r2, r3
 8008800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008804:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008808:	601a      	str	r2, [r3, #0]
  return result;
 800880a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800880e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008812:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008814:	fab3 f383 	clz	r3, r3
 8008818:	b2db      	uxtb	r3, r3
 800881a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800881e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	461a      	mov	r2, r3
 8008826:	2300      	movs	r3, #0
 8008828:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800882a:	f7fb fc2f 	bl	800408c <HAL_GetTick>
 800882e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008832:	e009      	b.n	8008848 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008834:	f7fb fc2a 	bl	800408c <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b02      	cmp	r3, #2
 8008842:	d901      	bls.n	8008848 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e0ac      	b.n	80089a2 <HAL_RCC_OscConfig+0x109a>
 8008848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800884c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800885a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	fa93 f2a3 	rbit	r2, r3
 8008864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008868:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800886c:	601a      	str	r2, [r3, #0]
  return result;
 800886e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008872:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008876:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008878:	fab3 f383 	clz	r3, r3
 800887c:	b2db      	uxtb	r3, r3
 800887e:	095b      	lsrs	r3, r3, #5
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f043 0301 	orr.w	r3, r3, #1
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b01      	cmp	r3, #1
 800888a:	d102      	bne.n	8008892 <HAL_RCC_OscConfig+0xf8a>
 800888c:	4b47      	ldr	r3, [pc, #284]	; (80089ac <HAL_RCC_OscConfig+0x10a4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	e027      	b.n	80088e2 <HAL_RCC_OscConfig+0xfda>
 8008892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008896:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800889a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800889e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	fa93 f2a3 	rbit	r2, r3
 80088ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088b2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088bc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80088c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088ca:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	fa93 f2a3 	rbit	r2, r3
 80088d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80088d8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	4b33      	ldr	r3, [pc, #204]	; (80089ac <HAL_RCC_OscConfig+0x10a4>)
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80088e6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80088ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80088ee:	6011      	str	r1, [r2, #0]
 80088f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80088f4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80088f8:	6812      	ldr	r2, [r2, #0]
 80088fa:	fa92 f1a2 	rbit	r1, r2
 80088fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008902:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8008906:	6011      	str	r1, [r2, #0]
  return result;
 8008908:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800890c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8008910:	6812      	ldr	r2, [r2, #0]
 8008912:	fab2 f282 	clz	r2, r2
 8008916:	b2d2      	uxtb	r2, r2
 8008918:	f042 0220 	orr.w	r2, r2, #32
 800891c:	b2d2      	uxtb	r2, r2
 800891e:	f002 021f 	and.w	r2, r2, #31
 8008922:	2101      	movs	r1, #1
 8008924:	fa01 f202 	lsl.w	r2, r1, r2
 8008928:	4013      	ands	r3, r2
 800892a:	2b00      	cmp	r3, #0
 800892c:	d182      	bne.n	8008834 <HAL_RCC_OscConfig+0xf2c>
 800892e:	e037      	b.n	80089a0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008934:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d101      	bne.n	8008944 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e02e      	b.n	80089a2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008944:	4b19      	ldr	r3, [pc, #100]	; (80089ac <HAL_RCC_OscConfig+0x10a4>)
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800894c:	4b17      	ldr	r3, [pc, #92]	; (80089ac <HAL_RCC_OscConfig+0x10a4>)
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008954:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008958:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800895c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008960:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	429a      	cmp	r2, r3
 800896a:	d117      	bne.n	800899c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800896c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008970:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008978:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008980:	429a      	cmp	r2, r3
 8008982:	d10b      	bne.n	800899c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8008984:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008988:	f003 020f 	and.w	r2, r3, #15
 800898c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008990:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8008998:	429a      	cmp	r2, r3
 800899a:	d001      	beq.n	80089a0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e000      	b.n	80089a2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	40021000 	.word	0x40021000

080089b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b09e      	sub	sp, #120	; 0x78
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e162      	b.n	8008c8e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089c8:	4b90      	ldr	r3, [pc, #576]	; (8008c0c <HAL_RCC_ClockConfig+0x25c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0307 	and.w	r3, r3, #7
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d910      	bls.n	80089f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089d6:	4b8d      	ldr	r3, [pc, #564]	; (8008c0c <HAL_RCC_ClockConfig+0x25c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f023 0207 	bic.w	r2, r3, #7
 80089de:	498b      	ldr	r1, [pc, #556]	; (8008c0c <HAL_RCC_ClockConfig+0x25c>)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089e6:	4b89      	ldr	r3, [pc, #548]	; (8008c0c <HAL_RCC_ClockConfig+0x25c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d001      	beq.n	80089f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e14a      	b.n	8008c8e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d008      	beq.n	8008a16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a04:	4b82      	ldr	r3, [pc, #520]	; (8008c10 <HAL_RCC_ClockConfig+0x260>)
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	497f      	ldr	r1, [pc, #508]	; (8008c10 <HAL_RCC_ClockConfig+0x260>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 80dc 	beq.w	8008bdc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d13c      	bne.n	8008aa6 <HAL_RCC_ClockConfig+0xf6>
 8008a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a34:	fa93 f3a3 	rbit	r3, r3
 8008a38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a3c:	fab3 f383 	clz	r3, r3
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	095b      	lsrs	r3, r3, #5
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	f043 0301 	orr.w	r3, r3, #1
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d102      	bne.n	8008a56 <HAL_RCC_ClockConfig+0xa6>
 8008a50:	4b6f      	ldr	r3, [pc, #444]	; (8008c10 <HAL_RCC_ClockConfig+0x260>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	e00f      	b.n	8008a76 <HAL_RCC_ClockConfig+0xc6>
 8008a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a5e:	fa93 f3a3 	rbit	r3, r3
 8008a62:	667b      	str	r3, [r7, #100]	; 0x64
 8008a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a68:	663b      	str	r3, [r7, #96]	; 0x60
 8008a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a6c:	fa93 f3a3 	rbit	r3, r3
 8008a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a72:	4b67      	ldr	r3, [pc, #412]	; (8008c10 <HAL_RCC_ClockConfig+0x260>)
 8008a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008a7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a7e:	fa92 f2a2 	rbit	r2, r2
 8008a82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008a84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a86:	fab2 f282 	clz	r2, r2
 8008a8a:	b2d2      	uxtb	r2, r2
 8008a8c:	f042 0220 	orr.w	r2, r2, #32
 8008a90:	b2d2      	uxtb	r2, r2
 8008a92:	f002 021f 	and.w	r2, r2, #31
 8008a96:	2101      	movs	r1, #1
 8008a98:	fa01 f202 	lsl.w	r2, r1, r2
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d17b      	bne.n	8008b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e0f3      	b.n	8008c8e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d13c      	bne.n	8008b28 <HAL_RCC_ClockConfig+0x178>
 8008aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ab2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ab6:	fa93 f3a3 	rbit	r3, r3
 8008aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008abe:	fab3 f383 	clz	r3, r3
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	095b      	lsrs	r3, r3, #5
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f043 0301 	orr.w	r3, r3, #1
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d102      	bne.n	8008ad8 <HAL_RCC_ClockConfig+0x128>
 8008ad2:	4b4f      	ldr	r3, [pc, #316]	; (8008c10 <HAL_RCC_ClockConfig+0x260>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	e00f      	b.n	8008af8 <HAL_RCC_ClockConfig+0x148>
 8008ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008adc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ae0:	fa93 f3a3 	rbit	r3, r3
 8008ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008aea:	643b      	str	r3, [r7, #64]	; 0x40
 8008aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aee:	fa93 f3a3 	rbit	r3, r3
 8008af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008af4:	4b46      	ldr	r3, [pc, #280]	; (8008c10 <HAL_RCC_ClockConfig+0x260>)
 8008af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008afc:	63ba      	str	r2, [r7, #56]	; 0x38
 8008afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b00:	fa92 f2a2 	rbit	r2, r2
 8008b04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b08:	fab2 f282 	clz	r2, r2
 8008b0c:	b2d2      	uxtb	r2, r2
 8008b0e:	f042 0220 	orr.w	r2, r2, #32
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	f002 021f 	and.w	r2, r2, #31
 8008b18:	2101      	movs	r1, #1
 8008b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8008b1e:	4013      	ands	r3, r2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d13a      	bne.n	8008b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e0b2      	b.n	8008c8e <HAL_RCC_ClockConfig+0x2de>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2e:	fa93 f3a3 	rbit	r3, r3
 8008b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b36:	fab3 f383 	clz	r3, r3
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	095b      	lsrs	r3, r3, #5
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	f043 0301 	orr.w	r3, r3, #1
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d102      	bne.n	8008b50 <HAL_RCC_ClockConfig+0x1a0>
 8008b4a:	4b31      	ldr	r3, [pc, #196]	; (8008c10 <HAL_RCC_ClockConfig+0x260>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	e00d      	b.n	8008b6c <HAL_RCC_ClockConfig+0x1bc>
 8008b50:	2302      	movs	r3, #2
 8008b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	fa93 f3a3 	rbit	r3, r3
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	623b      	str	r3, [r7, #32]
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	fa93 f3a3 	rbit	r3, r3
 8008b66:	61fb      	str	r3, [r7, #28]
 8008b68:	4b29      	ldr	r3, [pc, #164]	; (8008c10 <HAL_RCC_ClockConfig+0x260>)
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	61ba      	str	r2, [r7, #24]
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	fa92 f2a2 	rbit	r2, r2
 8008b76:	617a      	str	r2, [r7, #20]
  return result;
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	fab2 f282 	clz	r2, r2
 8008b7e:	b2d2      	uxtb	r2, r2
 8008b80:	f042 0220 	orr.w	r2, r2, #32
 8008b84:	b2d2      	uxtb	r2, r2
 8008b86:	f002 021f 	and.w	r2, r2, #31
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8008b90:	4013      	ands	r3, r2
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e079      	b.n	8008c8e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b9a:	4b1d      	ldr	r3, [pc, #116]	; (8008c10 <HAL_RCC_ClockConfig+0x260>)
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f023 0203 	bic.w	r2, r3, #3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	491a      	ldr	r1, [pc, #104]	; (8008c10 <HAL_RCC_ClockConfig+0x260>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bac:	f7fb fa6e 	bl	800408c <HAL_GetTick>
 8008bb0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bb2:	e00a      	b.n	8008bca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bb4:	f7fb fa6a 	bl	800408c <HAL_GetTick>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d901      	bls.n	8008bca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e061      	b.n	8008c8e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bca:	4b11      	ldr	r3, [pc, #68]	; (8008c10 <HAL_RCC_ClockConfig+0x260>)
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f003 020c 	and.w	r2, r3, #12
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d1eb      	bne.n	8008bb4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bdc:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <HAL_RCC_ClockConfig+0x25c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d214      	bcs.n	8008c14 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bea:	4b08      	ldr	r3, [pc, #32]	; (8008c0c <HAL_RCC_ClockConfig+0x25c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f023 0207 	bic.w	r2, r3, #7
 8008bf2:	4906      	ldr	r1, [pc, #24]	; (8008c0c <HAL_RCC_ClockConfig+0x25c>)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bfa:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <HAL_RCC_ClockConfig+0x25c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0307 	and.w	r3, r3, #7
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d005      	beq.n	8008c14 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e040      	b.n	8008c8e <HAL_RCC_ClockConfig+0x2de>
 8008c0c:	40022000 	.word	0x40022000
 8008c10:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0304 	and.w	r3, r3, #4
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d008      	beq.n	8008c32 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c20:	4b1d      	ldr	r3, [pc, #116]	; (8008c98 <HAL_RCC_ClockConfig+0x2e8>)
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	491a      	ldr	r1, [pc, #104]	; (8008c98 <HAL_RCC_ClockConfig+0x2e8>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0308 	and.w	r3, r3, #8
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c3e:	4b16      	ldr	r3, [pc, #88]	; (8008c98 <HAL_RCC_ClockConfig+0x2e8>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	4912      	ldr	r1, [pc, #72]	; (8008c98 <HAL_RCC_ClockConfig+0x2e8>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008c52:	f000 f829 	bl	8008ca8 <HAL_RCC_GetSysClockFreq>
 8008c56:	4601      	mov	r1, r0
 8008c58:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <HAL_RCC_ClockConfig+0x2e8>)
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c60:	22f0      	movs	r2, #240	; 0xf0
 8008c62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	fa92 f2a2 	rbit	r2, r2
 8008c6a:	60fa      	str	r2, [r7, #12]
  return result;
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	fab2 f282 	clz	r2, r2
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	40d3      	lsrs	r3, r2
 8008c76:	4a09      	ldr	r2, [pc, #36]	; (8008c9c <HAL_RCC_ClockConfig+0x2ec>)
 8008c78:	5cd3      	ldrb	r3, [r2, r3]
 8008c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8008c7e:	4a08      	ldr	r2, [pc, #32]	; (8008ca0 <HAL_RCC_ClockConfig+0x2f0>)
 8008c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008c82:	4b08      	ldr	r3, [pc, #32]	; (8008ca4 <HAL_RCC_ClockConfig+0x2f4>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fa ffde 	bl	8003c48 <HAL_InitTick>
  
  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3778      	adds	r7, #120	; 0x78
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	40021000 	.word	0x40021000
 8008c9c:	080121d0 	.word	0x080121d0
 8008ca0:	20000004 	.word	0x20000004
 8008ca4:	20000008 	.word	0x20000008

08008ca8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b08b      	sub	sp, #44	; 0x2c
 8008cac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	61fb      	str	r3, [r7, #28]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	61bb      	str	r3, [r7, #24]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cba:	2300      	movs	r3, #0
 8008cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008cc2:	4b2a      	ldr	r3, [pc, #168]	; (8008d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	f003 030c 	and.w	r3, r3, #12
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d002      	beq.n	8008cd8 <HAL_RCC_GetSysClockFreq+0x30>
 8008cd2:	2b08      	cmp	r3, #8
 8008cd4:	d003      	beq.n	8008cde <HAL_RCC_GetSysClockFreq+0x36>
 8008cd6:	e03f      	b.n	8008d58 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008cd8:	4b25      	ldr	r3, [pc, #148]	; (8008d70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008cda:	623b      	str	r3, [r7, #32]
      break;
 8008cdc:	e03f      	b.n	8008d5e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008ce4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008ce8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	fa92 f2a2 	rbit	r2, r2
 8008cf0:	607a      	str	r2, [r7, #4]
  return result;
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	fab2 f282 	clz	r2, r2
 8008cf8:	b2d2      	uxtb	r2, r2
 8008cfa:	40d3      	lsrs	r3, r2
 8008cfc:	4a1d      	ldr	r2, [pc, #116]	; (8008d74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008cfe:	5cd3      	ldrb	r3, [r2, r3]
 8008d00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008d02:	4b1a      	ldr	r3, [pc, #104]	; (8008d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d06:	f003 030f 	and.w	r3, r3, #15
 8008d0a:	220f      	movs	r2, #15
 8008d0c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	fa92 f2a2 	rbit	r2, r2
 8008d14:	60fa      	str	r2, [r7, #12]
  return result;
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	fab2 f282 	clz	r2, r2
 8008d1c:	b2d2      	uxtb	r2, r2
 8008d1e:	40d3      	lsrs	r3, r2
 8008d20:	4a15      	ldr	r2, [pc, #84]	; (8008d78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008d22:	5cd3      	ldrb	r3, [r2, r3]
 8008d24:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d008      	beq.n	8008d42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008d30:	4a0f      	ldr	r2, [pc, #60]	; (8008d70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	fb02 f303 	mul.w	r3, r2, r3
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d40:	e007      	b.n	8008d52 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008d42:	4a0b      	ldr	r2, [pc, #44]	; (8008d70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	623b      	str	r3, [r7, #32]
      break;
 8008d56:	e002      	b.n	8008d5e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008d58:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008d5a:	623b      	str	r3, [r7, #32]
      break;
 8008d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	372c      	adds	r7, #44	; 0x2c
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	40021000 	.word	0x40021000
 8008d70:	007a1200 	.word	0x007a1200
 8008d74:	080121e8 	.word	0x080121e8
 8008d78:	080121f8 	.word	0x080121f8

08008d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d80:	4b03      	ldr	r3, [pc, #12]	; (8008d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d82:	681b      	ldr	r3, [r3, #0]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	20000004 	.word	0x20000004

08008d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008d9a:	f7ff ffef 	bl	8008d7c <HAL_RCC_GetHCLKFreq>
 8008d9e:	4601      	mov	r1, r0
 8008da0:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008da8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008dac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	fa92 f2a2 	rbit	r2, r2
 8008db4:	603a      	str	r2, [r7, #0]
  return result;
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	fab2 f282 	clz	r2, r2
 8008dbc:	b2d2      	uxtb	r2, r2
 8008dbe:	40d3      	lsrs	r3, r2
 8008dc0:	4a04      	ldr	r2, [pc, #16]	; (8008dd4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008dc2:	5cd3      	ldrb	r3, [r2, r3]
 8008dc4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	40021000 	.word	0x40021000
 8008dd4:	080121e0 	.word	0x080121e0

08008dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008dde:	f7ff ffcd 	bl	8008d7c <HAL_RCC_GetHCLKFreq>
 8008de2:	4601      	mov	r1, r0
 8008de4:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008dec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008df0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	fa92 f2a2 	rbit	r2, r2
 8008df8:	603a      	str	r2, [r7, #0]
  return result;
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	fab2 f282 	clz	r2, r2
 8008e00:	b2d2      	uxtb	r2, r2
 8008e02:	40d3      	lsrs	r3, r2
 8008e04:	4a04      	ldr	r2, [pc, #16]	; (8008e18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008e06:	5cd3      	ldrb	r3, [r2, r3]
 8008e08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	40021000 	.word	0x40021000
 8008e18:	080121e0 	.word	0x080121e0

08008e1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	220f      	movs	r2, #15
 8008e2a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e2c:	4b12      	ldr	r3, [pc, #72]	; (8008e78 <HAL_RCC_GetClockConfig+0x5c>)
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f003 0203 	and.w	r2, r3, #3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8008e38:	4b0f      	ldr	r3, [pc, #60]	; (8008e78 <HAL_RCC_GetClockConfig+0x5c>)
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8008e44:	4b0c      	ldr	r3, [pc, #48]	; (8008e78 <HAL_RCC_GetClockConfig+0x5c>)
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008e50:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <HAL_RCC_GetClockConfig+0x5c>)
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	08db      	lsrs	r3, r3, #3
 8008e56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8008e5e:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <HAL_RCC_GetClockConfig+0x60>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0207 	and.w	r2, r3, #7
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	601a      	str	r2, [r3, #0]
}
 8008e6a:	bf00      	nop
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	40021000 	.word	0x40021000
 8008e7c:	40022000 	.word	0x40022000

08008e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b092      	sub	sp, #72	; 0x48
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008e90:	2300      	movs	r3, #0
 8008e92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f000 80d4 	beq.w	800904c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ea4:	4b4e      	ldr	r3, [pc, #312]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10e      	bne.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eb0:	4b4b      	ldr	r3, [pc, #300]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	4a4a      	ldr	r2, [pc, #296]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eba:	61d3      	str	r3, [r2, #28]
 8008ebc:	4b48      	ldr	r3, [pc, #288]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ec4:	60bb      	str	r3, [r7, #8]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ece:	4b45      	ldr	r3, [pc, #276]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d118      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008eda:	4b42      	ldr	r3, [pc, #264]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a41      	ldr	r2, [pc, #260]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ee4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ee6:	f7fb f8d1 	bl	800408c <HAL_GetTick>
 8008eea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eec:	e008      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eee:	f7fb f8cd 	bl	800408c <HAL_GetTick>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	2b64      	cmp	r3, #100	; 0x64
 8008efa:	d901      	bls.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008efc:	2303      	movs	r3, #3
 8008efe:	e1d6      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f00:	4b38      	ldr	r3, [pc, #224]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d0f0      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f0c:	4b34      	ldr	r3, [pc, #208]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f0e:	6a1b      	ldr	r3, [r3, #32]
 8008f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 8084 	beq.w	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d07c      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f2c:	4b2c      	ldr	r3, [pc, #176]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	fa93 f3a3 	rbit	r3, r3
 8008f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f46:	fab3 f383 	clz	r3, r3
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4b26      	ldr	r3, [pc, #152]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008f50:	4413      	add	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	461a      	mov	r2, r3
 8008f56:	2301      	movs	r3, #1
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	fa93 f3a3 	rbit	r3, r3
 8008f66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f6a:	fab3 f383 	clz	r3, r3
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	461a      	mov	r2, r3
 8008f72:	4b1d      	ldr	r3, [pc, #116]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008f74:	4413      	add	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	461a      	mov	r2, r3
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008f7e:	4a18      	ldr	r2, [pc, #96]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d04b      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f8e:	f7fb f87d 	bl	800408c <HAL_GetTick>
 8008f92:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f94:	e00a      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f96:	f7fb f879 	bl	800408c <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d901      	bls.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e180      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008fac:	2302      	movs	r3, #2
 8008fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	fa93 f3a3 	rbit	r3, r3
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb8:	2302      	movs	r3, #2
 8008fba:	623b      	str	r3, [r7, #32]
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	fa93 f3a3 	rbit	r3, r3
 8008fc2:	61fb      	str	r3, [r7, #28]
  return result;
 8008fc4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fc6:	fab3 f383 	clz	r3, r3
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	095b      	lsrs	r3, r3, #5
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f043 0302 	orr.w	r3, r3, #2
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d108      	bne.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008fda:	4b01      	ldr	r3, [pc, #4]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	e00d      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008fe0:	40021000 	.word	0x40021000
 8008fe4:	40007000 	.word	0x40007000
 8008fe8:	10908100 	.word	0x10908100
 8008fec:	2302      	movs	r3, #2
 8008fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	fa93 f3a3 	rbit	r3, r3
 8008ff6:	617b      	str	r3, [r7, #20]
 8008ff8:	4b9a      	ldr	r3, [pc, #616]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	613a      	str	r2, [r7, #16]
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	fa92 f2a2 	rbit	r2, r2
 8009006:	60fa      	str	r2, [r7, #12]
  return result;
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	fab2 f282 	clz	r2, r2
 800900e:	b2d2      	uxtb	r2, r2
 8009010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	f002 021f 	and.w	r2, r2, #31
 800901a:	2101      	movs	r1, #1
 800901c:	fa01 f202 	lsl.w	r2, r1, r2
 8009020:	4013      	ands	r3, r2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0b7      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009026:	4b8f      	ldr	r3, [pc, #572]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	498c      	ldr	r1, [pc, #560]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009034:	4313      	orrs	r3, r2
 8009036:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009038:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800903c:	2b01      	cmp	r3, #1
 800903e:	d105      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009040:	4b88      	ldr	r3, [pc, #544]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	4a87      	ldr	r2, [pc, #540]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800904a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d008      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009058:	4b82      	ldr	r3, [pc, #520]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800905a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905c:	f023 0203 	bic.w	r2, r3, #3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	497f      	ldr	r1, [pc, #508]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009066:	4313      	orrs	r3, r2
 8009068:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d008      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009076:	4b7b      	ldr	r3, [pc, #492]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	4978      	ldr	r1, [pc, #480]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009084:	4313      	orrs	r3, r2
 8009086:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d008      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009094:	4b73      	ldr	r3, [pc, #460]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	4970      	ldr	r1, [pc, #448]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d008      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80090b2:	4b6c      	ldr	r3, [pc, #432]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b6:	f023 0210 	bic.w	r2, r3, #16
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	4969      	ldr	r1, [pc, #420]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090c0:	4313      	orrs	r3, r2
 80090c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d008      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80090d0:	4b64      	ldr	r3, [pc, #400]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090dc:	4961      	ldr	r1, [pc, #388]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d008      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80090ee:	4b5d      	ldr	r3, [pc, #372]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	f023 0220 	bic.w	r2, r3, #32
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	495a      	ldr	r1, [pc, #360]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d008      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800910c:	4b55      	ldr	r3, [pc, #340]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800910e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009110:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	4952      	ldr	r1, [pc, #328]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800911a:	4313      	orrs	r3, r2
 800911c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0308 	and.w	r3, r3, #8
 8009126:	2b00      	cmp	r3, #0
 8009128:	d008      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800912a:	4b4e      	ldr	r3, [pc, #312]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800912c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	494b      	ldr	r1, [pc, #300]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009138:	4313      	orrs	r3, r2
 800913a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0310 	and.w	r3, r3, #16
 8009144:	2b00      	cmp	r3, #0
 8009146:	d008      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009148:	4b46      	ldr	r3, [pc, #280]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800914a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	4943      	ldr	r1, [pc, #268]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009156:	4313      	orrs	r3, r2
 8009158:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009162:	2b00      	cmp	r3, #0
 8009164:	d008      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009166:	4b3f      	ldr	r3, [pc, #252]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009172:	493c      	ldr	r1, [pc, #240]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009174:	4313      	orrs	r3, r2
 8009176:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009180:	2b00      	cmp	r3, #0
 8009182:	d008      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009184:	4b37      	ldr	r3, [pc, #220]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009188:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009190:	4934      	ldr	r1, [pc, #208]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009192:	4313      	orrs	r3, r2
 8009194:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d008      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80091a2:	4b30      	ldr	r3, [pc, #192]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ae:	492d      	ldr	r1, [pc, #180]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d008      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80091c0:	4b28      	ldr	r3, [pc, #160]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091cc:	4925      	ldr	r1, [pc, #148]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d008      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80091de:	4b21      	ldr	r3, [pc, #132]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ea:	491e      	ldr	r1, [pc, #120]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d008      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80091fc:	4b19      	ldr	r3, [pc, #100]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80091fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009200:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009208:	4916      	ldr	r1, [pc, #88]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800920a:	4313      	orrs	r3, r2
 800920c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d008      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800921a:	4b12      	ldr	r3, [pc, #72]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800921c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009226:	490f      	ldr	r1, [pc, #60]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009228:	4313      	orrs	r3, r2
 800922a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d008      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8009238:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800923a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009244:	4907      	ldr	r1, [pc, #28]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009246:	4313      	orrs	r3, r2
 8009248:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00c      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8009256:	4b03      	ldr	r3, [pc, #12]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	e002      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009262:	bf00      	nop
 8009264:	40021000 	.word	0x40021000
 8009268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800926a:	4913      	ldr	r1, [pc, #76]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800926c:	4313      	orrs	r3, r2
 800926e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d008      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800927c:	4b0e      	ldr	r3, [pc, #56]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800927e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009280:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009288:	490b      	ldr	r1, [pc, #44]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800928a:	4313      	orrs	r3, r2
 800928c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d008      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800929a:	4b07      	ldr	r3, [pc, #28]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800929c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a6:	4904      	ldr	r1, [pc, #16]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3748      	adds	r7, #72	; 0x48
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	40021000 	.word	0x40021000

080092bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e09d      	b.n	800940a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d108      	bne.n	80092e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092de:	d009      	beq.n	80092f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	61da      	str	r2, [r3, #28]
 80092e6:	e005      	b.n	80092f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	d106      	bne.n	8009314 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7fa fa0e 	bl	8003730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2202      	movs	r2, #2
 8009318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800932a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009334:	d902      	bls.n	800933c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009336:	2300      	movs	r3, #0
 8009338:	60fb      	str	r3, [r7, #12]
 800933a:	e002      	b.n	8009342 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800933c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009340:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800934a:	d007      	beq.n	800935c <HAL_SPI_Init+0xa0>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009354:	d002      	beq.n	800935c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800936c:	431a      	orrs	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	431a      	orrs	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	431a      	orrs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009394:	431a      	orrs	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800939e:	ea42 0103 	orr.w	r1, r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	0c1b      	lsrs	r3, r3, #16
 80093b8:	f003 0204 	and.w	r2, r3, #4
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	f003 0310 	and.w	r3, r3, #16
 80093c4:	431a      	orrs	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ca:	f003 0308 	and.w	r3, r3, #8
 80093ce:	431a      	orrs	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80093d8:	ea42 0103 	orr.w	r1, r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69da      	ldr	r2, [r3, #28]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b088      	sub	sp, #32
 8009416:	af00      	add	r7, sp, #0
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	60b9      	str	r1, [r7, #8]
 800941c:	603b      	str	r3, [r7, #0]
 800941e:	4613      	mov	r3, r2
 8009420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800942c:	2b01      	cmp	r3, #1
 800942e:	d101      	bne.n	8009434 <HAL_SPI_Transmit+0x22>
 8009430:	2302      	movs	r3, #2
 8009432:	e15f      	b.n	80096f4 <HAL_SPI_Transmit+0x2e2>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800943c:	f7fa fe26 	bl	800408c <HAL_GetTick>
 8009440:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009442:	88fb      	ldrh	r3, [r7, #6]
 8009444:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b01      	cmp	r3, #1
 8009450:	d002      	beq.n	8009458 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009452:	2302      	movs	r3, #2
 8009454:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009456:	e148      	b.n	80096ea <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <HAL_SPI_Transmit+0x52>
 800945e:	88fb      	ldrh	r3, [r7, #6]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d102      	bne.n	800946a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009468:	e13f      	b.n	80096ea <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2203      	movs	r2, #3
 800946e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	88fa      	ldrh	r2, [r7, #6]
 8009482:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	88fa      	ldrh	r2, [r7, #6]
 8009488:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094b4:	d10f      	bne.n	80094d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e0:	2b40      	cmp	r3, #64	; 0x40
 80094e2:	d007      	beq.n	80094f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094fc:	d94f      	bls.n	800959e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d002      	beq.n	800950c <HAL_SPI_Transmit+0xfa>
 8009506:	8afb      	ldrh	r3, [r7, #22]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d142      	bne.n	8009592 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009510:	881a      	ldrh	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951c:	1c9a      	adds	r2, r3, #2
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009526:	b29b      	uxth	r3, r3
 8009528:	3b01      	subs	r3, #1
 800952a:	b29a      	uxth	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009530:	e02f      	b.n	8009592 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	2b02      	cmp	r3, #2
 800953e:	d112      	bne.n	8009566 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009544:	881a      	ldrh	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	1c9a      	adds	r2, r3, #2
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800955a:	b29b      	uxth	r3, r3
 800955c:	3b01      	subs	r3, #1
 800955e:	b29a      	uxth	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009564:	e015      	b.n	8009592 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009566:	f7fa fd91 	bl	800408c <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	429a      	cmp	r2, r3
 8009574:	d803      	bhi.n	800957e <HAL_SPI_Transmit+0x16c>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957c:	d102      	bne.n	8009584 <HAL_SPI_Transmit+0x172>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d106      	bne.n	8009592 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8009584:	2303      	movs	r3, #3
 8009586:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8009590:	e0ab      	b.n	80096ea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009596:	b29b      	uxth	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1ca      	bne.n	8009532 <HAL_SPI_Transmit+0x120>
 800959c:	e080      	b.n	80096a0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d002      	beq.n	80095ac <HAL_SPI_Transmit+0x19a>
 80095a6:	8afb      	ldrh	r3, [r7, #22]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d174      	bne.n	8009696 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d912      	bls.n	80095dc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ba:	881a      	ldrh	r2, [r3, #0]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c6:	1c9a      	adds	r2, r3, #2
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	3b02      	subs	r3, #2
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095da:	e05c      	b.n	8009696 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	330c      	adds	r3, #12
 80095e6:	7812      	ldrb	r2, [r2, #0]
 80095e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009602:	e048      	b.n	8009696 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b02      	cmp	r3, #2
 8009610:	d12b      	bne.n	800966a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009616:	b29b      	uxth	r3, r3
 8009618:	2b01      	cmp	r3, #1
 800961a:	d912      	bls.n	8009642 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009620:	881a      	ldrh	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962c:	1c9a      	adds	r2, r3, #2
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009636:	b29b      	uxth	r3, r3
 8009638:	3b02      	subs	r3, #2
 800963a:	b29a      	uxth	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009640:	e029      	b.n	8009696 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	330c      	adds	r3, #12
 800964c:	7812      	ldrb	r2, [r2, #0]
 800964e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800965e:	b29b      	uxth	r3, r3
 8009660:	3b01      	subs	r3, #1
 8009662:	b29a      	uxth	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009668:	e015      	b.n	8009696 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800966a:	f7fa fd0f 	bl	800408c <HAL_GetTick>
 800966e:	4602      	mov	r2, r0
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	d803      	bhi.n	8009682 <HAL_SPI_Transmit+0x270>
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009680:	d102      	bne.n	8009688 <HAL_SPI_Transmit+0x276>
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d106      	bne.n	8009696 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009688:	2303      	movs	r3, #3
 800968a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8009694:	e029      	b.n	80096ea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1b1      	bne.n	8009604 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 fcf9 	bl	800a09c <SPI_EndRxTxTransaction>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2220      	movs	r2, #32
 80096b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10a      	bne.n	80096d4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096be:	2300      	movs	r3, #0
 80096c0:	613b      	str	r3, [r7, #16]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	613b      	str	r3, [r7, #16]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	613b      	str	r3, [r7, #16]
 80096d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	77fb      	strb	r3, [r7, #31]
 80096e0:	e003      	b.n	80096ea <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80096f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3720      	adds	r7, #32
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af02      	add	r7, sp, #8
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	603b      	str	r3, [r7, #0]
 8009708:	4613      	mov	r3, r2
 800970a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b01      	cmp	r3, #1
 800971a:	d002      	beq.n	8009722 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800971c:	2302      	movs	r3, #2
 800971e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009720:	e11a      	b.n	8009958 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800972a:	d112      	bne.n	8009752 <HAL_SPI_Receive+0x56>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10e      	bne.n	8009752 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2204      	movs	r2, #4
 8009738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800973c:	88fa      	ldrh	r2, [r7, #6]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	4613      	mov	r3, r2
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	68b9      	ldr	r1, [r7, #8]
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 f90e 	bl	800996a <HAL_SPI_TransmitReceive>
 800974e:	4603      	mov	r3, r0
 8009750:	e107      	b.n	8009962 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_SPI_Receive+0x64>
 800975c:	2302      	movs	r3, #2
 800975e:	e100      	b.n	8009962 <HAL_SPI_Receive+0x266>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009768:	f7fa fc90 	bl	800408c <HAL_GetTick>
 800976c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <HAL_SPI_Receive+0x7e>
 8009774:	88fb      	ldrh	r3, [r7, #6]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800977e:	e0eb      	b.n	8009958 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2204      	movs	r2, #4
 8009784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	88fa      	ldrh	r2, [r7, #6]
 8009798:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	88fa      	ldrh	r2, [r7, #6]
 80097a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097ca:	d908      	bls.n	80097de <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097da:	605a      	str	r2, [r3, #4]
 80097dc:	e007      	b.n	80097ee <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097ec:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097f6:	d10f      	bne.n	8009818 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009806:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009816:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009822:	2b40      	cmp	r3, #64	; 0x40
 8009824:	d007      	beq.n	8009836 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009834:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800983e:	d86f      	bhi.n	8009920 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009840:	e034      	b.n	80098ac <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b01      	cmp	r3, #1
 800984e:	d117      	bne.n	8009880 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f103 020c 	add.w	r2, r3, #12
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985c:	7812      	ldrb	r2, [r2, #0]
 800985e:	b2d2      	uxtb	r2, r2
 8009860:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	1c5a      	adds	r2, r3, #1
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009872:	b29b      	uxth	r3, r3
 8009874:	3b01      	subs	r3, #1
 8009876:	b29a      	uxth	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800987e:	e015      	b.n	80098ac <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009880:	f7fa fc04 	bl	800408c <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	429a      	cmp	r2, r3
 800988e:	d803      	bhi.n	8009898 <HAL_SPI_Receive+0x19c>
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009896:	d102      	bne.n	800989e <HAL_SPI_Receive+0x1a2>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d106      	bne.n	80098ac <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80098aa:	e055      	b.n	8009958 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1c4      	bne.n	8009842 <HAL_SPI_Receive+0x146>
 80098b8:	e038      	b.n	800992c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d115      	bne.n	80098f4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d2:	b292      	uxth	r2, r2
 80098d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098da:	1c9a      	adds	r2, r3, #2
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80098f2:	e015      	b.n	8009920 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098f4:	f7fa fbca 	bl	800408c <HAL_GetTick>
 80098f8:	4602      	mov	r2, r0
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	429a      	cmp	r2, r3
 8009902:	d803      	bhi.n	800990c <HAL_SPI_Receive+0x210>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990a:	d102      	bne.n	8009912 <HAL_SPI_Receive+0x216>
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800991e:	e01b      	b.n	8009958 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009926:	b29b      	uxth	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1c6      	bne.n	80098ba <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 fb5b 	bl	8009fec <SPI_EndRxTransaction>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2220      	movs	r2, #32
 8009940:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	75fb      	strb	r3, [r7, #23]
 800994e:	e003      	b.n	8009958 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009960:	7dfb      	ldrb	r3, [r7, #23]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b08a      	sub	sp, #40	; 0x28
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	60b9      	str	r1, [r7, #8]
 8009974:	607a      	str	r2, [r7, #4]
 8009976:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009978:	2301      	movs	r3, #1
 800997a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009988:	2b01      	cmp	r3, #1
 800998a:	d101      	bne.n	8009990 <HAL_SPI_TransmitReceive+0x26>
 800998c:	2302      	movs	r3, #2
 800998e:	e20a      	b.n	8009da6 <HAL_SPI_TransmitReceive+0x43c>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009998:	f7fa fb78 	bl	800408c <HAL_GetTick>
 800999c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099a4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80099ac:	887b      	ldrh	r3, [r7, #2]
 80099ae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80099b0:	887b      	ldrh	r3, [r7, #2]
 80099b2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80099b4:	7efb      	ldrb	r3, [r7, #27]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d00e      	beq.n	80099d8 <HAL_SPI_TransmitReceive+0x6e>
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099c0:	d106      	bne.n	80099d0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d102      	bne.n	80099d0 <HAL_SPI_TransmitReceive+0x66>
 80099ca:	7efb      	ldrb	r3, [r7, #27]
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d003      	beq.n	80099d8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80099d0:	2302      	movs	r3, #2
 80099d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80099d6:	e1e0      	b.n	8009d9a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d005      	beq.n	80099ea <HAL_SPI_TransmitReceive+0x80>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <HAL_SPI_TransmitReceive+0x80>
 80099e4:	887b      	ldrh	r3, [r7, #2]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d103      	bne.n	80099f2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80099f0:	e1d3      	b.n	8009d9a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b04      	cmp	r3, #4
 80099fc:	d003      	beq.n	8009a06 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2205      	movs	r2, #5
 8009a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	887a      	ldrh	r2, [r7, #2]
 8009a16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	887a      	ldrh	r2, [r7, #2]
 8009a1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	887a      	ldrh	r2, [r7, #2]
 8009a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	887a      	ldrh	r2, [r7, #2]
 8009a32:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a48:	d802      	bhi.n	8009a50 <HAL_SPI_TransmitReceive+0xe6>
 8009a4a:	8a3b      	ldrh	r3, [r7, #16]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d908      	bls.n	8009a62 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a5e:	605a      	str	r2, [r3, #4]
 8009a60:	e007      	b.n	8009a72 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a70:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7c:	2b40      	cmp	r3, #64	; 0x40
 8009a7e:	d007      	beq.n	8009a90 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a98:	f240 8081 	bls.w	8009b9e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <HAL_SPI_TransmitReceive+0x140>
 8009aa4:	8a7b      	ldrh	r3, [r7, #18]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d16d      	bne.n	8009b86 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aae:	881a      	ldrh	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aba:	1c9a      	adds	r2, r3, #2
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ace:	e05a      	b.n	8009b86 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f003 0302 	and.w	r3, r3, #2
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d11b      	bne.n	8009b16 <HAL_SPI_TransmitReceive+0x1ac>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d016      	beq.n	8009b16 <HAL_SPI_TransmitReceive+0x1ac>
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d113      	bne.n	8009b16 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af2:	881a      	ldrh	r2, [r3, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afe:	1c9a      	adds	r2, r3, #2
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f003 0301 	and.w	r3, r3, #1
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d11c      	bne.n	8009b5e <HAL_SPI_TransmitReceive+0x1f4>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d016      	beq.n	8009b5e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68da      	ldr	r2, [r3, #12]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3a:	b292      	uxth	r2, r2
 8009b3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b42:	1c9a      	adds	r2, r3, #2
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	3b01      	subs	r3, #1
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b5e:	f7fa fa95 	bl	800408c <HAL_GetTick>
 8009b62:	4602      	mov	r2, r0
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d80b      	bhi.n	8009b86 <HAL_SPI_TransmitReceive+0x21c>
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b74:	d007      	beq.n	8009b86 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8009b84:	e109      	b.n	8009d9a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d19f      	bne.n	8009ad0 <HAL_SPI_TransmitReceive+0x166>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d199      	bne.n	8009ad0 <HAL_SPI_TransmitReceive+0x166>
 8009b9c:	e0e3      	b.n	8009d66 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <HAL_SPI_TransmitReceive+0x244>
 8009ba6:	8a7b      	ldrh	r3, [r7, #18]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	f040 80cf 	bne.w	8009d4c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d912      	bls.n	8009bde <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbc:	881a      	ldrh	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc8:	1c9a      	adds	r2, r3, #2
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	3b02      	subs	r3, #2
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009bdc:	e0b6      	b.n	8009d4c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	330c      	adds	r3, #12
 8009be8:	7812      	ldrb	r2, [r2, #0]
 8009bea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c04:	e0a2      	b.n	8009d4c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d134      	bne.n	8009c7e <HAL_SPI_TransmitReceive+0x314>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d02f      	beq.n	8009c7e <HAL_SPI_TransmitReceive+0x314>
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d12c      	bne.n	8009c7e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d912      	bls.n	8009c54 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c32:	881a      	ldrh	r2, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3e:	1c9a      	adds	r2, r3, #2
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	3b02      	subs	r3, #2
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c52:	e012      	b.n	8009c7a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	330c      	adds	r3, #12
 8009c5e:	7812      	ldrb	r2, [r2, #0]
 8009c60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c66:	1c5a      	adds	r2, r3, #1
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	3b01      	subs	r3, #1
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d148      	bne.n	8009d1e <HAL_SPI_TransmitReceive+0x3b4>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d042      	beq.n	8009d1e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d923      	bls.n	8009cec <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	b292      	uxth	r2, r2
 8009cb0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb6:	1c9a      	adds	r2, r3, #2
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	3b02      	subs	r3, #2
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d81f      	bhi.n	8009d1a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ce8:	605a      	str	r2, [r3, #4]
 8009cea:	e016      	b.n	8009d1a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f103 020c 	add.w	r2, r3, #12
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf8:	7812      	ldrb	r2, [r2, #0]
 8009cfa:	b2d2      	uxtb	r2, r2
 8009cfc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	3b01      	subs	r3, #1
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d1e:	f7fa f9b5 	bl	800408c <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d803      	bhi.n	8009d36 <HAL_SPI_TransmitReceive+0x3cc>
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d34:	d102      	bne.n	8009d3c <HAL_SPI_TransmitReceive+0x3d2>
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d107      	bne.n	8009d4c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8009d4a:	e026      	b.n	8009d9a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f47f af57 	bne.w	8009c06 <HAL_SPI_TransmitReceive+0x29c>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f47f af50 	bne.w	8009c06 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d66:	69fa      	ldr	r2, [r7, #28]
 8009d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f996 	bl	800a09c <SPI_EndRxTxTransaction>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d005      	beq.n	8009d82 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d90:	e003      	b.n	8009d9a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009da2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3728      	adds	r7, #40	; 0x28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
	...

08009db0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	603b      	str	r3, [r7, #0]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009dc0:	f7fa f964 	bl	800408c <HAL_GetTick>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	1a9b      	subs	r3, r3, r2
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	4413      	add	r3, r2
 8009dce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009dd0:	f7fa f95c 	bl	800408c <HAL_GetTick>
 8009dd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009dd6:	4b39      	ldr	r3, [pc, #228]	; (8009ebc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	015b      	lsls	r3, r3, #5
 8009ddc:	0d1b      	lsrs	r3, r3, #20
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	fb02 f303 	mul.w	r3, r2, r3
 8009de4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009de6:	e054      	b.n	8009e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dee:	d050      	beq.n	8009e92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009df0:	f7fa f94c 	bl	800408c <HAL_GetTick>
 8009df4:	4602      	mov	r2, r0
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	69fa      	ldr	r2, [r7, #28]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d902      	bls.n	8009e06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d13d      	bne.n	8009e82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e1e:	d111      	bne.n	8009e44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e28:	d004      	beq.n	8009e34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e32:	d107      	bne.n	8009e44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e4c:	d10f      	bne.n	8009e6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e017      	b.n	8009eb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	bf0c      	ite	eq
 8009ea2:	2301      	moveq	r3, #1
 8009ea4:	2300      	movne	r3, #0
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	79fb      	ldrb	r3, [r7, #7]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d19b      	bne.n	8009de8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3720      	adds	r7, #32
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000004 	.word	0x20000004

08009ec0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08a      	sub	sp, #40	; 0x28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
 8009ecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009ed2:	f7fa f8db 	bl	800408c <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eda:	1a9b      	subs	r3, r3, r2
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	4413      	add	r3, r2
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009ee2:	f7fa f8d3 	bl	800408c <HAL_GetTick>
 8009ee6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	330c      	adds	r3, #12
 8009eee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009ef0:	4b3d      	ldr	r3, [pc, #244]	; (8009fe8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	00da      	lsls	r2, r3, #3
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	0d1b      	lsrs	r3, r3, #20
 8009f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f02:	fb02 f303 	mul.w	r3, r2, r3
 8009f06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009f08:	e060      	b.n	8009fcc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009f10:	d107      	bne.n	8009f22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d104      	bne.n	8009f22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009f20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f28:	d050      	beq.n	8009fcc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f2a:	f7fa f8af 	bl	800408c <HAL_GetTick>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d902      	bls.n	8009f40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d13d      	bne.n	8009fbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	685a      	ldr	r2, [r3, #4]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f58:	d111      	bne.n	8009f7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f62:	d004      	beq.n	8009f6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f6c:	d107      	bne.n	8009f7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f86:	d10f      	bne.n	8009fa8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fa6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e010      	b.n	8009fde <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	689a      	ldr	r2, [r3, #8]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d196      	bne.n	8009f0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3728      	adds	r7, #40	; 0x28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000004 	.word	0x20000004

08009fec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af02      	add	r7, sp, #8
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a000:	d111      	bne.n	800a026 <SPI_EndRxTransaction+0x3a>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a00a:	d004      	beq.n	800a016 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a014:	d107      	bne.n	800a026 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a024:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2200      	movs	r2, #0
 800a02e:	2180      	movs	r1, #128	; 0x80
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f7ff febd 	bl	8009db0 <SPI_WaitFlagStateUntilTimeout>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d007      	beq.n	800a04c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a040:	f043 0220 	orr.w	r2, r3, #32
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e023      	b.n	800a094 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a054:	d11d      	bne.n	800a092 <SPI_EndRxTransaction+0xa6>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a05e:	d004      	beq.n	800a06a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a068:	d113      	bne.n	800a092 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2200      	movs	r2, #0
 800a072:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f7ff ff22 	bl	8009ec0 <SPI_WaitFifoStateUntilTimeout>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d007      	beq.n	800a092 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a086:	f043 0220 	orr.w	r2, r3, #32
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e000      	b.n	800a094 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af02      	add	r7, sp, #8
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f7ff ff03 	bl	8009ec0 <SPI_WaitFifoStateUntilTimeout>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d007      	beq.n	800a0d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0c4:	f043 0220 	orr.w	r2, r3, #32
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e027      	b.n	800a120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2180      	movs	r1, #128	; 0x80
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7ff fe68 	bl	8009db0 <SPI_WaitFlagStateUntilTimeout>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d007      	beq.n	800a0f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0ea:	f043 0220 	orr.w	r2, r3, #32
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	e014      	b.n	800a120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7ff fedc 	bl	8009ec0 <SPI_WaitFifoStateUntilTimeout>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d007      	beq.n	800a11e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a112:	f043 0220 	orr.w	r2, r3, #32
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e000      	b.n	800a120 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d101      	bne.n	800a13a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	e049      	b.n	800a1ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d106      	bne.n	800a154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f7f9 fb30 	bl	80037b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3304      	adds	r3, #4
 800a164:	4619      	mov	r1, r3
 800a166:	4610      	mov	r0, r2
 800a168:	f000 fe92 	bl	800ae90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d001      	beq.n	800a1f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e04f      	b.n	800a290 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f042 0201 	orr.w	r2, r2, #1
 800a206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a23      	ldr	r2, [pc, #140]	; (800a29c <HAL_TIM_Base_Start_IT+0xc4>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d01d      	beq.n	800a24e <HAL_TIM_Base_Start_IT+0x76>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a21a:	d018      	beq.n	800a24e <HAL_TIM_Base_Start_IT+0x76>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a1f      	ldr	r2, [pc, #124]	; (800a2a0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d013      	beq.n	800a24e <HAL_TIM_Base_Start_IT+0x76>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a1e      	ldr	r2, [pc, #120]	; (800a2a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d00e      	beq.n	800a24e <HAL_TIM_Base_Start_IT+0x76>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a1c      	ldr	r2, [pc, #112]	; (800a2a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d009      	beq.n	800a24e <HAL_TIM_Base_Start_IT+0x76>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a1b      	ldr	r2, [pc, #108]	; (800a2ac <HAL_TIM_Base_Start_IT+0xd4>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d004      	beq.n	800a24e <HAL_TIM_Base_Start_IT+0x76>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a19      	ldr	r2, [pc, #100]	; (800a2b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d115      	bne.n	800a27a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	689a      	ldr	r2, [r3, #8]
 800a254:	4b17      	ldr	r3, [pc, #92]	; (800a2b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a256:	4013      	ands	r3, r2
 800a258:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b06      	cmp	r3, #6
 800a25e:	d015      	beq.n	800a28c <HAL_TIM_Base_Start_IT+0xb4>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a266:	d011      	beq.n	800a28c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f042 0201 	orr.w	r2, r2, #1
 800a276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a278:	e008      	b.n	800a28c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f042 0201 	orr.w	r2, r2, #1
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	e000      	b.n	800a28e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a28c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	40012c00 	.word	0x40012c00
 800a2a0:	40000400 	.word	0x40000400
 800a2a4:	40000800 	.word	0x40000800
 800a2a8:	40013400 	.word	0x40013400
 800a2ac:	40014000 	.word	0x40014000
 800a2b0:	40015000 	.word	0x40015000
 800a2b4:	00010007 	.word	0x00010007

0800a2b8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d109      	bne.n	800a2e0 <HAL_TIM_OC_Start_IT+0x28>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	bf14      	ite	ne
 800a2d8:	2301      	movne	r3, #1
 800a2da:	2300      	moveq	r3, #0
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	e03c      	b.n	800a35a <HAL_TIM_OC_Start_IT+0xa2>
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2b04      	cmp	r3, #4
 800a2e4:	d109      	bne.n	800a2fa <HAL_TIM_OC_Start_IT+0x42>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	bf14      	ite	ne
 800a2f2:	2301      	movne	r3, #1
 800a2f4:	2300      	moveq	r3, #0
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	e02f      	b.n	800a35a <HAL_TIM_OC_Start_IT+0xa2>
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b08      	cmp	r3, #8
 800a2fe:	d109      	bne.n	800a314 <HAL_TIM_OC_Start_IT+0x5c>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b01      	cmp	r3, #1
 800a30a:	bf14      	ite	ne
 800a30c:	2301      	movne	r3, #1
 800a30e:	2300      	moveq	r3, #0
 800a310:	b2db      	uxtb	r3, r3
 800a312:	e022      	b.n	800a35a <HAL_TIM_OC_Start_IT+0xa2>
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	2b0c      	cmp	r3, #12
 800a318:	d109      	bne.n	800a32e <HAL_TIM_OC_Start_IT+0x76>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a320:	b2db      	uxtb	r3, r3
 800a322:	2b01      	cmp	r3, #1
 800a324:	bf14      	ite	ne
 800a326:	2301      	movne	r3, #1
 800a328:	2300      	moveq	r3, #0
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	e015      	b.n	800a35a <HAL_TIM_OC_Start_IT+0xa2>
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b10      	cmp	r3, #16
 800a332:	d109      	bne.n	800a348 <HAL_TIM_OC_Start_IT+0x90>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	bf14      	ite	ne
 800a340:	2301      	movne	r3, #1
 800a342:	2300      	moveq	r3, #0
 800a344:	b2db      	uxtb	r3, r3
 800a346:	e008      	b.n	800a35a <HAL_TIM_OC_Start_IT+0xa2>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b01      	cmp	r3, #1
 800a352:	bf14      	ite	ne
 800a354:	2301      	movne	r3, #1
 800a356:	2300      	moveq	r3, #0
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e0ec      	b.n	800a53c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d104      	bne.n	800a372 <HAL_TIM_OC_Start_IT+0xba>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2202      	movs	r2, #2
 800a36c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a370:	e023      	b.n	800a3ba <HAL_TIM_OC_Start_IT+0x102>
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b04      	cmp	r3, #4
 800a376:	d104      	bne.n	800a382 <HAL_TIM_OC_Start_IT+0xca>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a380:	e01b      	b.n	800a3ba <HAL_TIM_OC_Start_IT+0x102>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b08      	cmp	r3, #8
 800a386:	d104      	bne.n	800a392 <HAL_TIM_OC_Start_IT+0xda>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2202      	movs	r2, #2
 800a38c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a390:	e013      	b.n	800a3ba <HAL_TIM_OC_Start_IT+0x102>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2b0c      	cmp	r3, #12
 800a396:	d104      	bne.n	800a3a2 <HAL_TIM_OC_Start_IT+0xea>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3a0:	e00b      	b.n	800a3ba <HAL_TIM_OC_Start_IT+0x102>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b10      	cmp	r3, #16
 800a3a6:	d104      	bne.n	800a3b2 <HAL_TIM_OC_Start_IT+0xfa>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3b0:	e003      	b.n	800a3ba <HAL_TIM_OC_Start_IT+0x102>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b0c      	cmp	r3, #12
 800a3be:	d841      	bhi.n	800a444 <HAL_TIM_OC_Start_IT+0x18c>
 800a3c0:	a201      	add	r2, pc, #4	; (adr r2, 800a3c8 <HAL_TIM_OC_Start_IT+0x110>)
 800a3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c6:	bf00      	nop
 800a3c8:	0800a3fd 	.word	0x0800a3fd
 800a3cc:	0800a445 	.word	0x0800a445
 800a3d0:	0800a445 	.word	0x0800a445
 800a3d4:	0800a445 	.word	0x0800a445
 800a3d8:	0800a40f 	.word	0x0800a40f
 800a3dc:	0800a445 	.word	0x0800a445
 800a3e0:	0800a445 	.word	0x0800a445
 800a3e4:	0800a445 	.word	0x0800a445
 800a3e8:	0800a421 	.word	0x0800a421
 800a3ec:	0800a445 	.word	0x0800a445
 800a3f0:	0800a445 	.word	0x0800a445
 800a3f4:	0800a445 	.word	0x0800a445
 800a3f8:	0800a433 	.word	0x0800a433
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f042 0202 	orr.w	r2, r2, #2
 800a40a:	60da      	str	r2, [r3, #12]
      break;
 800a40c:	e01d      	b.n	800a44a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68da      	ldr	r2, [r3, #12]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f042 0204 	orr.w	r2, r2, #4
 800a41c:	60da      	str	r2, [r3, #12]
      break;
 800a41e:	e014      	b.n	800a44a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f042 0208 	orr.w	r2, r2, #8
 800a42e:	60da      	str	r2, [r3, #12]
      break;
 800a430:	e00b      	b.n	800a44a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68da      	ldr	r2, [r3, #12]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f042 0210 	orr.w	r2, r2, #16
 800a440:	60da      	str	r2, [r3, #12]
      break;
 800a442:	e002      	b.n	800a44a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	73fb      	strb	r3, [r7, #15]
      break;
 800a448:	bf00      	nop
  }

  if (status == HAL_OK)
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d174      	bne.n	800a53a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2201      	movs	r2, #1
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	4618      	mov	r0, r3
 800a45a:	f001 f957 	bl	800b70c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a38      	ldr	r2, [pc, #224]	; (800a544 <HAL_TIM_OC_Start_IT+0x28c>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d018      	beq.n	800a49a <HAL_TIM_OC_Start_IT+0x1e2>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a36      	ldr	r2, [pc, #216]	; (800a548 <HAL_TIM_OC_Start_IT+0x290>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d013      	beq.n	800a49a <HAL_TIM_OC_Start_IT+0x1e2>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a35      	ldr	r2, [pc, #212]	; (800a54c <HAL_TIM_OC_Start_IT+0x294>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d00e      	beq.n	800a49a <HAL_TIM_OC_Start_IT+0x1e2>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a33      	ldr	r2, [pc, #204]	; (800a550 <HAL_TIM_OC_Start_IT+0x298>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d009      	beq.n	800a49a <HAL_TIM_OC_Start_IT+0x1e2>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a32      	ldr	r2, [pc, #200]	; (800a554 <HAL_TIM_OC_Start_IT+0x29c>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d004      	beq.n	800a49a <HAL_TIM_OC_Start_IT+0x1e2>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a30      	ldr	r2, [pc, #192]	; (800a558 <HAL_TIM_OC_Start_IT+0x2a0>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d101      	bne.n	800a49e <HAL_TIM_OC_Start_IT+0x1e6>
 800a49a:	2301      	movs	r3, #1
 800a49c:	e000      	b.n	800a4a0 <HAL_TIM_OC_Start_IT+0x1e8>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d007      	beq.n	800a4b4 <HAL_TIM_OC_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a22      	ldr	r2, [pc, #136]	; (800a544 <HAL_TIM_OC_Start_IT+0x28c>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d01d      	beq.n	800a4fa <HAL_TIM_OC_Start_IT+0x242>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4c6:	d018      	beq.n	800a4fa <HAL_TIM_OC_Start_IT+0x242>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a23      	ldr	r2, [pc, #140]	; (800a55c <HAL_TIM_OC_Start_IT+0x2a4>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d013      	beq.n	800a4fa <HAL_TIM_OC_Start_IT+0x242>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a22      	ldr	r2, [pc, #136]	; (800a560 <HAL_TIM_OC_Start_IT+0x2a8>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d00e      	beq.n	800a4fa <HAL_TIM_OC_Start_IT+0x242>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a19      	ldr	r2, [pc, #100]	; (800a548 <HAL_TIM_OC_Start_IT+0x290>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d009      	beq.n	800a4fa <HAL_TIM_OC_Start_IT+0x242>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a18      	ldr	r2, [pc, #96]	; (800a54c <HAL_TIM_OC_Start_IT+0x294>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d004      	beq.n	800a4fa <HAL_TIM_OC_Start_IT+0x242>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a18      	ldr	r2, [pc, #96]	; (800a558 <HAL_TIM_OC_Start_IT+0x2a0>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d115      	bne.n	800a526 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	689a      	ldr	r2, [r3, #8]
 800a500:	4b18      	ldr	r3, [pc, #96]	; (800a564 <HAL_TIM_OC_Start_IT+0x2ac>)
 800a502:	4013      	ands	r3, r2
 800a504:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b06      	cmp	r3, #6
 800a50a:	d015      	beq.n	800a538 <HAL_TIM_OC_Start_IT+0x280>
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a512:	d011      	beq.n	800a538 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f042 0201 	orr.w	r2, r2, #1
 800a522:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a524:	e008      	b.n	800a538 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f042 0201 	orr.w	r2, r2, #1
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	e000      	b.n	800a53a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a538:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	40012c00 	.word	0x40012c00
 800a548:	40013400 	.word	0x40013400
 800a54c:	40014000 	.word	0x40014000
 800a550:	40014400 	.word	0x40014400
 800a554:	40014800 	.word	0x40014800
 800a558:	40015000 	.word	0x40015000
 800a55c:	40000400 	.word	0x40000400
 800a560:	40000800 	.word	0x40000800
 800a564:	00010007 	.word	0x00010007

0800a568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e049      	b.n	800a60e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f841 	bl	800a616 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2202      	movs	r2, #2
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	4610      	mov	r0, r2
 800a5a8:	f000 fc72 	bl	800ae90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a616:	b480      	push	{r7}
 800a618:	b083      	sub	sp, #12
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a61e:	bf00      	nop
 800a620:	370c      	adds	r7, #12
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
	...

0800a62c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d109      	bne.n	800a650 <HAL_TIM_PWM_Start+0x24>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b01      	cmp	r3, #1
 800a646:	bf14      	ite	ne
 800a648:	2301      	movne	r3, #1
 800a64a:	2300      	moveq	r3, #0
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	e03c      	b.n	800a6ca <HAL_TIM_PWM_Start+0x9e>
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	2b04      	cmp	r3, #4
 800a654:	d109      	bne.n	800a66a <HAL_TIM_PWM_Start+0x3e>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	2b01      	cmp	r3, #1
 800a660:	bf14      	ite	ne
 800a662:	2301      	movne	r3, #1
 800a664:	2300      	moveq	r3, #0
 800a666:	b2db      	uxtb	r3, r3
 800a668:	e02f      	b.n	800a6ca <HAL_TIM_PWM_Start+0x9e>
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b08      	cmp	r3, #8
 800a66e:	d109      	bne.n	800a684 <HAL_TIM_PWM_Start+0x58>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b01      	cmp	r3, #1
 800a67a:	bf14      	ite	ne
 800a67c:	2301      	movne	r3, #1
 800a67e:	2300      	moveq	r3, #0
 800a680:	b2db      	uxtb	r3, r3
 800a682:	e022      	b.n	800a6ca <HAL_TIM_PWM_Start+0x9e>
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	2b0c      	cmp	r3, #12
 800a688:	d109      	bne.n	800a69e <HAL_TIM_PWM_Start+0x72>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b01      	cmp	r3, #1
 800a694:	bf14      	ite	ne
 800a696:	2301      	movne	r3, #1
 800a698:	2300      	moveq	r3, #0
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	e015      	b.n	800a6ca <HAL_TIM_PWM_Start+0x9e>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	2b10      	cmp	r3, #16
 800a6a2:	d109      	bne.n	800a6b8 <HAL_TIM_PWM_Start+0x8c>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	bf14      	ite	ne
 800a6b0:	2301      	movne	r3, #1
 800a6b2:	2300      	moveq	r3, #0
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	e008      	b.n	800a6ca <HAL_TIM_PWM_Start+0x9e>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	bf14      	ite	ne
 800a6c4:	2301      	movne	r3, #1
 800a6c6:	2300      	moveq	r3, #0
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e0a1      	b.n	800a816 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d104      	bne.n	800a6e2 <HAL_TIM_PWM_Start+0xb6>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6e0:	e023      	b.n	800a72a <HAL_TIM_PWM_Start+0xfe>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b04      	cmp	r3, #4
 800a6e6:	d104      	bne.n	800a6f2 <HAL_TIM_PWM_Start+0xc6>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6f0:	e01b      	b.n	800a72a <HAL_TIM_PWM_Start+0xfe>
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b08      	cmp	r3, #8
 800a6f6:	d104      	bne.n	800a702 <HAL_TIM_PWM_Start+0xd6>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a700:	e013      	b.n	800a72a <HAL_TIM_PWM_Start+0xfe>
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	2b0c      	cmp	r3, #12
 800a706:	d104      	bne.n	800a712 <HAL_TIM_PWM_Start+0xe6>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2202      	movs	r2, #2
 800a70c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a710:	e00b      	b.n	800a72a <HAL_TIM_PWM_Start+0xfe>
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2b10      	cmp	r3, #16
 800a716:	d104      	bne.n	800a722 <HAL_TIM_PWM_Start+0xf6>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2202      	movs	r2, #2
 800a71c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a720:	e003      	b.n	800a72a <HAL_TIM_PWM_Start+0xfe>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2202      	movs	r2, #2
 800a726:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2201      	movs	r2, #1
 800a730:	6839      	ldr	r1, [r7, #0]
 800a732:	4618      	mov	r0, r3
 800a734:	f000 ffea 	bl	800b70c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a38      	ldr	r2, [pc, #224]	; (800a820 <HAL_TIM_PWM_Start+0x1f4>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d018      	beq.n	800a774 <HAL_TIM_PWM_Start+0x148>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a37      	ldr	r2, [pc, #220]	; (800a824 <HAL_TIM_PWM_Start+0x1f8>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d013      	beq.n	800a774 <HAL_TIM_PWM_Start+0x148>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a35      	ldr	r2, [pc, #212]	; (800a828 <HAL_TIM_PWM_Start+0x1fc>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d00e      	beq.n	800a774 <HAL_TIM_PWM_Start+0x148>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a34      	ldr	r2, [pc, #208]	; (800a82c <HAL_TIM_PWM_Start+0x200>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d009      	beq.n	800a774 <HAL_TIM_PWM_Start+0x148>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a32      	ldr	r2, [pc, #200]	; (800a830 <HAL_TIM_PWM_Start+0x204>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d004      	beq.n	800a774 <HAL_TIM_PWM_Start+0x148>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a31      	ldr	r2, [pc, #196]	; (800a834 <HAL_TIM_PWM_Start+0x208>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d101      	bne.n	800a778 <HAL_TIM_PWM_Start+0x14c>
 800a774:	2301      	movs	r3, #1
 800a776:	e000      	b.n	800a77a <HAL_TIM_PWM_Start+0x14e>
 800a778:	2300      	movs	r3, #0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d007      	beq.n	800a78e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a78c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a23      	ldr	r2, [pc, #140]	; (800a820 <HAL_TIM_PWM_Start+0x1f4>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d01d      	beq.n	800a7d4 <HAL_TIM_PWM_Start+0x1a8>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a0:	d018      	beq.n	800a7d4 <HAL_TIM_PWM_Start+0x1a8>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a24      	ldr	r2, [pc, #144]	; (800a838 <HAL_TIM_PWM_Start+0x20c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d013      	beq.n	800a7d4 <HAL_TIM_PWM_Start+0x1a8>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a22      	ldr	r2, [pc, #136]	; (800a83c <HAL_TIM_PWM_Start+0x210>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d00e      	beq.n	800a7d4 <HAL_TIM_PWM_Start+0x1a8>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a1a      	ldr	r2, [pc, #104]	; (800a824 <HAL_TIM_PWM_Start+0x1f8>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d009      	beq.n	800a7d4 <HAL_TIM_PWM_Start+0x1a8>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a18      	ldr	r2, [pc, #96]	; (800a828 <HAL_TIM_PWM_Start+0x1fc>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d004      	beq.n	800a7d4 <HAL_TIM_PWM_Start+0x1a8>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a19      	ldr	r2, [pc, #100]	; (800a834 <HAL_TIM_PWM_Start+0x208>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d115      	bne.n	800a800 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	689a      	ldr	r2, [r3, #8]
 800a7da:	4b19      	ldr	r3, [pc, #100]	; (800a840 <HAL_TIM_PWM_Start+0x214>)
 800a7dc:	4013      	ands	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b06      	cmp	r3, #6
 800a7e4:	d015      	beq.n	800a812 <HAL_TIM_PWM_Start+0x1e6>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ec:	d011      	beq.n	800a812 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f042 0201 	orr.w	r2, r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7fe:	e008      	b.n	800a812 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f042 0201 	orr.w	r2, r2, #1
 800a80e:	601a      	str	r2, [r3, #0]
 800a810:	e000      	b.n	800a814 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	40012c00 	.word	0x40012c00
 800a824:	40013400 	.word	0x40013400
 800a828:	40014000 	.word	0x40014000
 800a82c:	40014400 	.word	0x40014400
 800a830:	40014800 	.word	0x40014800
 800a834:	40015000 	.word	0x40015000
 800a838:	40000400 	.word	0x40000400
 800a83c:	40000800 	.word	0x40000800
 800a840:	00010007 	.word	0x00010007

0800a844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	f003 0302 	and.w	r3, r3, #2
 800a856:	2b02      	cmp	r3, #2
 800a858:	d122      	bne.n	800a8a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	f003 0302 	and.w	r3, r3, #2
 800a864:	2b02      	cmp	r3, #2
 800a866:	d11b      	bne.n	800a8a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f06f 0202 	mvn.w	r2, #2
 800a870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	f003 0303 	and.w	r3, r3, #3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fae3 	bl	800ae52 <HAL_TIM_IC_CaptureCallback>
 800a88c:	e005      	b.n	800a89a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fad5 	bl	800ae3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fae6 	bl	800ae66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	f003 0304 	and.w	r3, r3, #4
 800a8aa:	2b04      	cmp	r3, #4
 800a8ac:	d122      	bne.n	800a8f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	f003 0304 	and.w	r3, r3, #4
 800a8b8:	2b04      	cmp	r3, #4
 800a8ba:	d11b      	bne.n	800a8f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f06f 0204 	mvn.w	r2, #4
 800a8c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fab9 	bl	800ae52 <HAL_TIM_IC_CaptureCallback>
 800a8e0:	e005      	b.n	800a8ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 faab 	bl	800ae3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fabc 	bl	800ae66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	f003 0308 	and.w	r3, r3, #8
 800a8fe:	2b08      	cmp	r3, #8
 800a900:	d122      	bne.n	800a948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	f003 0308 	and.w	r3, r3, #8
 800a90c:	2b08      	cmp	r3, #8
 800a90e:	d11b      	bne.n	800a948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f06f 0208 	mvn.w	r2, #8
 800a918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2204      	movs	r2, #4
 800a91e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	69db      	ldr	r3, [r3, #28]
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fa8f 	bl	800ae52 <HAL_TIM_IC_CaptureCallback>
 800a934:	e005      	b.n	800a942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fa81 	bl	800ae3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fa92 	bl	800ae66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	f003 0310 	and.w	r3, r3, #16
 800a952:	2b10      	cmp	r3, #16
 800a954:	d122      	bne.n	800a99c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	f003 0310 	and.w	r3, r3, #16
 800a960:	2b10      	cmp	r3, #16
 800a962:	d11b      	bne.n	800a99c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f06f 0210 	mvn.w	r2, #16
 800a96c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2208      	movs	r2, #8
 800a972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fa65 	bl	800ae52 <HAL_TIM_IC_CaptureCallback>
 800a988:	e005      	b.n	800a996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fa57 	bl	800ae3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 fa68 	bl	800ae66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d10e      	bne.n	800a9c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d107      	bne.n	800a9c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f06f 0201 	mvn.w	r2, #1
 800a9c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7f8 fdb8 	bl	8003538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d2:	2b80      	cmp	r3, #128	; 0x80
 800a9d4:	d10e      	bne.n	800a9f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e0:	2b80      	cmp	r3, #128	; 0x80
 800a9e2:	d107      	bne.n	800a9f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 f888 	bl	800bb04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa02:	d10e      	bne.n	800aa22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa0e:	2b80      	cmp	r3, #128	; 0x80
 800aa10:	d107      	bne.n	800aa22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f001 f87b 	bl	800bb18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa2c:	2b40      	cmp	r3, #64	; 0x40
 800aa2e:	d10e      	bne.n	800aa4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3a:	2b40      	cmp	r3, #64	; 0x40
 800aa3c:	d107      	bne.n	800aa4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fa16 	bl	800ae7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	f003 0320 	and.w	r3, r3, #32
 800aa58:	2b20      	cmp	r3, #32
 800aa5a:	d10e      	bne.n	800aa7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	f003 0320 	and.w	r3, r3, #32
 800aa66:	2b20      	cmp	r3, #32
 800aa68:	d107      	bne.n	800aa7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f06f 0220 	mvn.w	r2, #32
 800aa72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f001 f83b 	bl	800baf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa7a:	bf00      	nop
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
	...

0800aa84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d101      	bne.n	800aaa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	e0ff      	b.n	800aca2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b14      	cmp	r3, #20
 800aaae:	f200 80f0 	bhi.w	800ac92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aab2:	a201      	add	r2, pc, #4	; (adr r2, 800aab8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab8:	0800ab0d 	.word	0x0800ab0d
 800aabc:	0800ac93 	.word	0x0800ac93
 800aac0:	0800ac93 	.word	0x0800ac93
 800aac4:	0800ac93 	.word	0x0800ac93
 800aac8:	0800ab4d 	.word	0x0800ab4d
 800aacc:	0800ac93 	.word	0x0800ac93
 800aad0:	0800ac93 	.word	0x0800ac93
 800aad4:	0800ac93 	.word	0x0800ac93
 800aad8:	0800ab8f 	.word	0x0800ab8f
 800aadc:	0800ac93 	.word	0x0800ac93
 800aae0:	0800ac93 	.word	0x0800ac93
 800aae4:	0800ac93 	.word	0x0800ac93
 800aae8:	0800abcf 	.word	0x0800abcf
 800aaec:	0800ac93 	.word	0x0800ac93
 800aaf0:	0800ac93 	.word	0x0800ac93
 800aaf4:	0800ac93 	.word	0x0800ac93
 800aaf8:	0800ac11 	.word	0x0800ac11
 800aafc:	0800ac93 	.word	0x0800ac93
 800ab00:	0800ac93 	.word	0x0800ac93
 800ab04:	0800ac93 	.word	0x0800ac93
 800ab08:	0800ac51 	.word	0x0800ac51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68b9      	ldr	r1, [r7, #8]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 fa5a 	bl	800afcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	699a      	ldr	r2, [r3, #24]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f042 0208 	orr.w	r2, r2, #8
 800ab26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	699a      	ldr	r2, [r3, #24]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f022 0204 	bic.w	r2, r2, #4
 800ab36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6999      	ldr	r1, [r3, #24]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	691a      	ldr	r2, [r3, #16]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	430a      	orrs	r2, r1
 800ab48:	619a      	str	r2, [r3, #24]
      break;
 800ab4a:	e0a5      	b.n	800ac98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68b9      	ldr	r1, [r7, #8]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 fad4 	bl	800b100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	699a      	ldr	r2, [r3, #24]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	699a      	ldr	r2, [r3, #24]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6999      	ldr	r1, [r3, #24]
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	021a      	lsls	r2, r3, #8
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	619a      	str	r2, [r3, #24]
      break;
 800ab8c:	e084      	b.n	800ac98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68b9      	ldr	r1, [r7, #8]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f000 fb47 	bl	800b228 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	69da      	ldr	r2, [r3, #28]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f042 0208 	orr.w	r2, r2, #8
 800aba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	69da      	ldr	r2, [r3, #28]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f022 0204 	bic.w	r2, r2, #4
 800abb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	69d9      	ldr	r1, [r3, #28]
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	691a      	ldr	r2, [r3, #16]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	430a      	orrs	r2, r1
 800abca:	61da      	str	r2, [r3, #28]
      break;
 800abcc:	e064      	b.n	800ac98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68b9      	ldr	r1, [r7, #8]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 fbb9 	bl	800b34c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	69da      	ldr	r2, [r3, #28]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	69da      	ldr	r2, [r3, #28]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	69d9      	ldr	r1, [r3, #28]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	021a      	lsls	r2, r3, #8
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	430a      	orrs	r2, r1
 800ac0c:	61da      	str	r2, [r3, #28]
      break;
 800ac0e:	e043      	b.n	800ac98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68b9      	ldr	r1, [r7, #8]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 fc08 	bl	800b42c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f042 0208 	orr.w	r2, r2, #8
 800ac2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f022 0204 	bic.w	r2, r2, #4
 800ac3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	691a      	ldr	r2, [r3, #16]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	430a      	orrs	r2, r1
 800ac4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac4e:	e023      	b.n	800ac98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	68b9      	ldr	r1, [r7, #8]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 fc52 	bl	800b500 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	021a      	lsls	r2, r3, #8
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	430a      	orrs	r2, r1
 800ac8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac90:	e002      	b.n	800ac98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	75fb      	strb	r3, [r7, #23]
      break;
 800ac96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3718      	adds	r7, #24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop

0800acac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d101      	bne.n	800acc8 <HAL_TIM_ConfigClockSource+0x1c>
 800acc4:	2302      	movs	r3, #2
 800acc6:	e0b6      	b.n	800ae36 <HAL_TIM_ConfigClockSource+0x18a>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2202      	movs	r2, #2
 800acd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ace6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800acea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad04:	d03e      	beq.n	800ad84 <HAL_TIM_ConfigClockSource+0xd8>
 800ad06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad0a:	f200 8087 	bhi.w	800ae1c <HAL_TIM_ConfigClockSource+0x170>
 800ad0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad12:	f000 8086 	beq.w	800ae22 <HAL_TIM_ConfigClockSource+0x176>
 800ad16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad1a:	d87f      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x170>
 800ad1c:	2b70      	cmp	r3, #112	; 0x70
 800ad1e:	d01a      	beq.n	800ad56 <HAL_TIM_ConfigClockSource+0xaa>
 800ad20:	2b70      	cmp	r3, #112	; 0x70
 800ad22:	d87b      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x170>
 800ad24:	2b60      	cmp	r3, #96	; 0x60
 800ad26:	d050      	beq.n	800adca <HAL_TIM_ConfigClockSource+0x11e>
 800ad28:	2b60      	cmp	r3, #96	; 0x60
 800ad2a:	d877      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x170>
 800ad2c:	2b50      	cmp	r3, #80	; 0x50
 800ad2e:	d03c      	beq.n	800adaa <HAL_TIM_ConfigClockSource+0xfe>
 800ad30:	2b50      	cmp	r3, #80	; 0x50
 800ad32:	d873      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x170>
 800ad34:	2b40      	cmp	r3, #64	; 0x40
 800ad36:	d058      	beq.n	800adea <HAL_TIM_ConfigClockSource+0x13e>
 800ad38:	2b40      	cmp	r3, #64	; 0x40
 800ad3a:	d86f      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x170>
 800ad3c:	2b30      	cmp	r3, #48	; 0x30
 800ad3e:	d064      	beq.n	800ae0a <HAL_TIM_ConfigClockSource+0x15e>
 800ad40:	2b30      	cmp	r3, #48	; 0x30
 800ad42:	d86b      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x170>
 800ad44:	2b20      	cmp	r3, #32
 800ad46:	d060      	beq.n	800ae0a <HAL_TIM_ConfigClockSource+0x15e>
 800ad48:	2b20      	cmp	r3, #32
 800ad4a:	d867      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x170>
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d05c      	beq.n	800ae0a <HAL_TIM_ConfigClockSource+0x15e>
 800ad50:	2b10      	cmp	r3, #16
 800ad52:	d05a      	beq.n	800ae0a <HAL_TIM_ConfigClockSource+0x15e>
 800ad54:	e062      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad66:	f000 fcb1 	bl	800b6cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	609a      	str	r2, [r3, #8]
      break;
 800ad82:	e04f      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad94:	f000 fc9a 	bl	800b6cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	689a      	ldr	r2, [r3, #8]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ada6:	609a      	str	r2, [r3, #8]
      break;
 800ada8:	e03c      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800adb6:	461a      	mov	r2, r3
 800adb8:	f000 fc0e 	bl	800b5d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2150      	movs	r1, #80	; 0x50
 800adc2:	4618      	mov	r0, r3
 800adc4:	f000 fc67 	bl	800b696 <TIM_ITRx_SetConfig>
      break;
 800adc8:	e02c      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800add6:	461a      	mov	r2, r3
 800add8:	f000 fc2d 	bl	800b636 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2160      	movs	r1, #96	; 0x60
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 fc57 	bl	800b696 <TIM_ITRx_SetConfig>
      break;
 800ade8:	e01c      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800adf6:	461a      	mov	r2, r3
 800adf8:	f000 fbee 	bl	800b5d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2140      	movs	r1, #64	; 0x40
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 fc47 	bl	800b696 <TIM_ITRx_SetConfig>
      break;
 800ae08:	e00c      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4619      	mov	r1, r3
 800ae14:	4610      	mov	r0, r2
 800ae16:	f000 fc3e 	bl	800b696 <TIM_ITRx_SetConfig>
      break;
 800ae1a:	e003      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae20:	e000      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ae22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b083      	sub	sp, #12
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae46:	bf00      	nop
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr

0800ae52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b083      	sub	sp, #12
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae5a:	bf00      	nop
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b083      	sub	sp, #12
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae6e:	bf00      	nop
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b083      	sub	sp, #12
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
	...

0800ae90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a42      	ldr	r2, [pc, #264]	; (800afac <TIM_Base_SetConfig+0x11c>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d013      	beq.n	800aed0 <TIM_Base_SetConfig+0x40>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeae:	d00f      	beq.n	800aed0 <TIM_Base_SetConfig+0x40>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a3f      	ldr	r2, [pc, #252]	; (800afb0 <TIM_Base_SetConfig+0x120>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d00b      	beq.n	800aed0 <TIM_Base_SetConfig+0x40>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a3e      	ldr	r2, [pc, #248]	; (800afb4 <TIM_Base_SetConfig+0x124>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d007      	beq.n	800aed0 <TIM_Base_SetConfig+0x40>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a3d      	ldr	r2, [pc, #244]	; (800afb8 <TIM_Base_SetConfig+0x128>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d003      	beq.n	800aed0 <TIM_Base_SetConfig+0x40>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a3c      	ldr	r2, [pc, #240]	; (800afbc <TIM_Base_SetConfig+0x12c>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d108      	bne.n	800aee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	4313      	orrs	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a31      	ldr	r2, [pc, #196]	; (800afac <TIM_Base_SetConfig+0x11c>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d01f      	beq.n	800af2a <TIM_Base_SetConfig+0x9a>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef0:	d01b      	beq.n	800af2a <TIM_Base_SetConfig+0x9a>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a2e      	ldr	r2, [pc, #184]	; (800afb0 <TIM_Base_SetConfig+0x120>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d017      	beq.n	800af2a <TIM_Base_SetConfig+0x9a>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a2d      	ldr	r2, [pc, #180]	; (800afb4 <TIM_Base_SetConfig+0x124>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d013      	beq.n	800af2a <TIM_Base_SetConfig+0x9a>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a2c      	ldr	r2, [pc, #176]	; (800afb8 <TIM_Base_SetConfig+0x128>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d00f      	beq.n	800af2a <TIM_Base_SetConfig+0x9a>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a2c      	ldr	r2, [pc, #176]	; (800afc0 <TIM_Base_SetConfig+0x130>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d00b      	beq.n	800af2a <TIM_Base_SetConfig+0x9a>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a2b      	ldr	r2, [pc, #172]	; (800afc4 <TIM_Base_SetConfig+0x134>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d007      	beq.n	800af2a <TIM_Base_SetConfig+0x9a>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a2a      	ldr	r2, [pc, #168]	; (800afc8 <TIM_Base_SetConfig+0x138>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d003      	beq.n	800af2a <TIM_Base_SetConfig+0x9a>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a25      	ldr	r2, [pc, #148]	; (800afbc <TIM_Base_SetConfig+0x12c>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d108      	bne.n	800af3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	4313      	orrs	r3, r2
 800af3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	4313      	orrs	r3, r2
 800af48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	689a      	ldr	r2, [r3, #8]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a12      	ldr	r2, [pc, #72]	; (800afac <TIM_Base_SetConfig+0x11c>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d013      	beq.n	800af90 <TIM_Base_SetConfig+0x100>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a13      	ldr	r2, [pc, #76]	; (800afb8 <TIM_Base_SetConfig+0x128>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d00f      	beq.n	800af90 <TIM_Base_SetConfig+0x100>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a13      	ldr	r2, [pc, #76]	; (800afc0 <TIM_Base_SetConfig+0x130>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d00b      	beq.n	800af90 <TIM_Base_SetConfig+0x100>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a12      	ldr	r2, [pc, #72]	; (800afc4 <TIM_Base_SetConfig+0x134>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d007      	beq.n	800af90 <TIM_Base_SetConfig+0x100>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a11      	ldr	r2, [pc, #68]	; (800afc8 <TIM_Base_SetConfig+0x138>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d003      	beq.n	800af90 <TIM_Base_SetConfig+0x100>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a0c      	ldr	r2, [pc, #48]	; (800afbc <TIM_Base_SetConfig+0x12c>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d103      	bne.n	800af98 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	691a      	ldr	r2, [r3, #16]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	615a      	str	r2, [r3, #20]
}
 800af9e:	bf00      	nop
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	40012c00 	.word	0x40012c00
 800afb0:	40000400 	.word	0x40000400
 800afb4:	40000800 	.word	0x40000800
 800afb8:	40013400 	.word	0x40013400
 800afbc:	40015000 	.word	0x40015000
 800afc0:	40014000 	.word	0x40014000
 800afc4:	40014400 	.word	0x40014400
 800afc8:	40014800 	.word	0x40014800

0800afcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	f023 0201 	bic.w	r2, r3, #1
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800affa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800affe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f023 0303 	bic.w	r3, r3, #3
 800b006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	4313      	orrs	r3, r2
 800b010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	f023 0302 	bic.w	r3, r3, #2
 800b018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	4313      	orrs	r3, r2
 800b022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a30      	ldr	r2, [pc, #192]	; (800b0e8 <TIM_OC1_SetConfig+0x11c>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d013      	beq.n	800b054 <TIM_OC1_SetConfig+0x88>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a2f      	ldr	r2, [pc, #188]	; (800b0ec <TIM_OC1_SetConfig+0x120>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d00f      	beq.n	800b054 <TIM_OC1_SetConfig+0x88>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a2e      	ldr	r2, [pc, #184]	; (800b0f0 <TIM_OC1_SetConfig+0x124>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d00b      	beq.n	800b054 <TIM_OC1_SetConfig+0x88>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a2d      	ldr	r2, [pc, #180]	; (800b0f4 <TIM_OC1_SetConfig+0x128>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d007      	beq.n	800b054 <TIM_OC1_SetConfig+0x88>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a2c      	ldr	r2, [pc, #176]	; (800b0f8 <TIM_OC1_SetConfig+0x12c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d003      	beq.n	800b054 <TIM_OC1_SetConfig+0x88>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a2b      	ldr	r2, [pc, #172]	; (800b0fc <TIM_OC1_SetConfig+0x130>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d10c      	bne.n	800b06e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	f023 0308 	bic.w	r3, r3, #8
 800b05a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	697a      	ldr	r2, [r7, #20]
 800b062:	4313      	orrs	r3, r2
 800b064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	f023 0304 	bic.w	r3, r3, #4
 800b06c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a1d      	ldr	r2, [pc, #116]	; (800b0e8 <TIM_OC1_SetConfig+0x11c>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d013      	beq.n	800b09e <TIM_OC1_SetConfig+0xd2>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a1c      	ldr	r2, [pc, #112]	; (800b0ec <TIM_OC1_SetConfig+0x120>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d00f      	beq.n	800b09e <TIM_OC1_SetConfig+0xd2>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a1b      	ldr	r2, [pc, #108]	; (800b0f0 <TIM_OC1_SetConfig+0x124>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d00b      	beq.n	800b09e <TIM_OC1_SetConfig+0xd2>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a1a      	ldr	r2, [pc, #104]	; (800b0f4 <TIM_OC1_SetConfig+0x128>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d007      	beq.n	800b09e <TIM_OC1_SetConfig+0xd2>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a19      	ldr	r2, [pc, #100]	; (800b0f8 <TIM_OC1_SetConfig+0x12c>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d003      	beq.n	800b09e <TIM_OC1_SetConfig+0xd2>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a18      	ldr	r2, [pc, #96]	; (800b0fc <TIM_OC1_SetConfig+0x130>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d111      	bne.n	800b0c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	695b      	ldr	r3, [r3, #20]
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	693a      	ldr	r2, [r7, #16]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	685a      	ldr	r2, [r3, #4]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	621a      	str	r2, [r3, #32]
}
 800b0dc:	bf00      	nop
 800b0de:	371c      	adds	r7, #28
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr
 800b0e8:	40012c00 	.word	0x40012c00
 800b0ec:	40013400 	.word	0x40013400
 800b0f0:	40014000 	.word	0x40014000
 800b0f4:	40014400 	.word	0x40014400
 800b0f8:	40014800 	.word	0x40014800
 800b0fc:	40015000 	.word	0x40015000

0800b100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b100:	b480      	push	{r7}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	f023 0210 	bic.w	r2, r3, #16
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	699b      	ldr	r3, [r3, #24]
 800b126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b12e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b13a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	021b      	lsls	r3, r3, #8
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	4313      	orrs	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	f023 0320 	bic.w	r3, r3, #32
 800b14e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	011b      	lsls	r3, r3, #4
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	4313      	orrs	r3, r2
 800b15a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a2c      	ldr	r2, [pc, #176]	; (800b210 <TIM_OC2_SetConfig+0x110>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d007      	beq.n	800b174 <TIM_OC2_SetConfig+0x74>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a2b      	ldr	r2, [pc, #172]	; (800b214 <TIM_OC2_SetConfig+0x114>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d003      	beq.n	800b174 <TIM_OC2_SetConfig+0x74>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a2a      	ldr	r2, [pc, #168]	; (800b218 <TIM_OC2_SetConfig+0x118>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d10d      	bne.n	800b190 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b17a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	011b      	lsls	r3, r3, #4
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	4313      	orrs	r3, r2
 800b186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b18e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4a1f      	ldr	r2, [pc, #124]	; (800b210 <TIM_OC2_SetConfig+0x110>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d013      	beq.n	800b1c0 <TIM_OC2_SetConfig+0xc0>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a1e      	ldr	r2, [pc, #120]	; (800b214 <TIM_OC2_SetConfig+0x114>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d00f      	beq.n	800b1c0 <TIM_OC2_SetConfig+0xc0>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a1e      	ldr	r2, [pc, #120]	; (800b21c <TIM_OC2_SetConfig+0x11c>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d00b      	beq.n	800b1c0 <TIM_OC2_SetConfig+0xc0>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a1d      	ldr	r2, [pc, #116]	; (800b220 <TIM_OC2_SetConfig+0x120>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d007      	beq.n	800b1c0 <TIM_OC2_SetConfig+0xc0>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a1c      	ldr	r2, [pc, #112]	; (800b224 <TIM_OC2_SetConfig+0x124>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d003      	beq.n	800b1c0 <TIM_OC2_SetConfig+0xc0>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a17      	ldr	r2, [pc, #92]	; (800b218 <TIM_OC2_SetConfig+0x118>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d113      	bne.n	800b1e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1c6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1ce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	693a      	ldr	r2, [r7, #16]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	693a      	ldr	r2, [r7, #16]
 800b1ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	621a      	str	r2, [r3, #32]
}
 800b202:	bf00      	nop
 800b204:	371c      	adds	r7, #28
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	40012c00 	.word	0x40012c00
 800b214:	40013400 	.word	0x40013400
 800b218:	40015000 	.word	0x40015000
 800b21c:	40014000 	.word	0x40014000
 800b220:	40014400 	.word	0x40014400
 800b224:	40014800 	.word	0x40014800

0800b228 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a1b      	ldr	r3, [r3, #32]
 800b242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	69db      	ldr	r3, [r3, #28]
 800b24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b25a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f023 0303 	bic.w	r3, r3, #3
 800b262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	021b      	lsls	r3, r3, #8
 800b27c:	697a      	ldr	r2, [r7, #20]
 800b27e:	4313      	orrs	r3, r2
 800b280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a2b      	ldr	r2, [pc, #172]	; (800b334 <TIM_OC3_SetConfig+0x10c>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d007      	beq.n	800b29a <TIM_OC3_SetConfig+0x72>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a2a      	ldr	r2, [pc, #168]	; (800b338 <TIM_OC3_SetConfig+0x110>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d003      	beq.n	800b29a <TIM_OC3_SetConfig+0x72>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a29      	ldr	r2, [pc, #164]	; (800b33c <TIM_OC3_SetConfig+0x114>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d10d      	bne.n	800b2b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	021b      	lsls	r3, r3, #8
 800b2a8:	697a      	ldr	r2, [r7, #20]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a1e      	ldr	r2, [pc, #120]	; (800b334 <TIM_OC3_SetConfig+0x10c>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d013      	beq.n	800b2e6 <TIM_OC3_SetConfig+0xbe>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a1d      	ldr	r2, [pc, #116]	; (800b338 <TIM_OC3_SetConfig+0x110>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d00f      	beq.n	800b2e6 <TIM_OC3_SetConfig+0xbe>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a1d      	ldr	r2, [pc, #116]	; (800b340 <TIM_OC3_SetConfig+0x118>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d00b      	beq.n	800b2e6 <TIM_OC3_SetConfig+0xbe>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a1c      	ldr	r2, [pc, #112]	; (800b344 <TIM_OC3_SetConfig+0x11c>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d007      	beq.n	800b2e6 <TIM_OC3_SetConfig+0xbe>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a1b      	ldr	r2, [pc, #108]	; (800b348 <TIM_OC3_SetConfig+0x120>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d003      	beq.n	800b2e6 <TIM_OC3_SetConfig+0xbe>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a16      	ldr	r2, [pc, #88]	; (800b33c <TIM_OC3_SetConfig+0x114>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d113      	bne.n	800b30e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	011b      	lsls	r3, r3, #4
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	699b      	ldr	r3, [r3, #24]
 800b306:	011b      	lsls	r3, r3, #4
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	621a      	str	r2, [r3, #32]
}
 800b328:	bf00      	nop
 800b32a:	371c      	adds	r7, #28
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	40012c00 	.word	0x40012c00
 800b338:	40013400 	.word	0x40013400
 800b33c:	40015000 	.word	0x40015000
 800b340:	40014000 	.word	0x40014000
 800b344:	40014400 	.word	0x40014400
 800b348:	40014800 	.word	0x40014800

0800b34c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b087      	sub	sp, #28
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	69db      	ldr	r3, [r3, #28]
 800b372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b37a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b37e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	021b      	lsls	r3, r3, #8
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	4313      	orrs	r3, r2
 800b392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b39a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	031b      	lsls	r3, r3, #12
 800b3a2:	693a      	ldr	r2, [r7, #16]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a1a      	ldr	r2, [pc, #104]	; (800b414 <TIM_OC4_SetConfig+0xc8>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d013      	beq.n	800b3d8 <TIM_OC4_SetConfig+0x8c>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a19      	ldr	r2, [pc, #100]	; (800b418 <TIM_OC4_SetConfig+0xcc>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d00f      	beq.n	800b3d8 <TIM_OC4_SetConfig+0x8c>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a18      	ldr	r2, [pc, #96]	; (800b41c <TIM_OC4_SetConfig+0xd0>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d00b      	beq.n	800b3d8 <TIM_OC4_SetConfig+0x8c>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a17      	ldr	r2, [pc, #92]	; (800b420 <TIM_OC4_SetConfig+0xd4>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d007      	beq.n	800b3d8 <TIM_OC4_SetConfig+0x8c>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a16      	ldr	r2, [pc, #88]	; (800b424 <TIM_OC4_SetConfig+0xd8>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d003      	beq.n	800b3d8 <TIM_OC4_SetConfig+0x8c>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a15      	ldr	r2, [pc, #84]	; (800b428 <TIM_OC4_SetConfig+0xdc>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d109      	bne.n	800b3ec <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	695b      	ldr	r3, [r3, #20]
 800b3e4:	019b      	lsls	r3, r3, #6
 800b3e6:	697a      	ldr	r2, [r7, #20]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	693a      	ldr	r2, [r7, #16]
 800b404:	621a      	str	r2, [r3, #32]
}
 800b406:	bf00      	nop
 800b408:	371c      	adds	r7, #28
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	40012c00 	.word	0x40012c00
 800b418:	40013400 	.word	0x40013400
 800b41c:	40014000 	.word	0x40014000
 800b420:	40014400 	.word	0x40014400
 800b424:	40014800 	.word	0x40014800
 800b428:	40015000 	.word	0x40015000

0800b42c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b087      	sub	sp, #28
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a1b      	ldr	r3, [r3, #32]
 800b43a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a1b      	ldr	r3, [r3, #32]
 800b446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b45e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	4313      	orrs	r3, r2
 800b468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b470:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	041b      	lsls	r3, r3, #16
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a19      	ldr	r2, [pc, #100]	; (800b4e8 <TIM_OC5_SetConfig+0xbc>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d013      	beq.n	800b4ae <TIM_OC5_SetConfig+0x82>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a18      	ldr	r2, [pc, #96]	; (800b4ec <TIM_OC5_SetConfig+0xc0>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d00f      	beq.n	800b4ae <TIM_OC5_SetConfig+0x82>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a17      	ldr	r2, [pc, #92]	; (800b4f0 <TIM_OC5_SetConfig+0xc4>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d00b      	beq.n	800b4ae <TIM_OC5_SetConfig+0x82>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a16      	ldr	r2, [pc, #88]	; (800b4f4 <TIM_OC5_SetConfig+0xc8>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d007      	beq.n	800b4ae <TIM_OC5_SetConfig+0x82>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a15      	ldr	r2, [pc, #84]	; (800b4f8 <TIM_OC5_SetConfig+0xcc>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d003      	beq.n	800b4ae <TIM_OC5_SetConfig+0x82>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a14      	ldr	r2, [pc, #80]	; (800b4fc <TIM_OC5_SetConfig+0xd0>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d109      	bne.n	800b4c2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	021b      	lsls	r3, r3, #8
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	685a      	ldr	r2, [r3, #4]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	693a      	ldr	r2, [r7, #16]
 800b4da:	621a      	str	r2, [r3, #32]
}
 800b4dc:	bf00      	nop
 800b4de:	371c      	adds	r7, #28
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	40012c00 	.word	0x40012c00
 800b4ec:	40013400 	.word	0x40013400
 800b4f0:	40014000 	.word	0x40014000
 800b4f4:	40014400 	.word	0x40014400
 800b4f8:	40014800 	.word	0x40014800
 800b4fc:	40015000 	.word	0x40015000

0800b500 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b500:	b480      	push	{r7}
 800b502:	b087      	sub	sp, #28
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a1b      	ldr	r3, [r3, #32]
 800b50e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b52e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	021b      	lsls	r3, r3, #8
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	4313      	orrs	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	051b      	lsls	r3, r3, #20
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	4313      	orrs	r3, r2
 800b552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a1a      	ldr	r2, [pc, #104]	; (800b5c0 <TIM_OC6_SetConfig+0xc0>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d013      	beq.n	800b584 <TIM_OC6_SetConfig+0x84>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a19      	ldr	r2, [pc, #100]	; (800b5c4 <TIM_OC6_SetConfig+0xc4>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d00f      	beq.n	800b584 <TIM_OC6_SetConfig+0x84>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a18      	ldr	r2, [pc, #96]	; (800b5c8 <TIM_OC6_SetConfig+0xc8>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d00b      	beq.n	800b584 <TIM_OC6_SetConfig+0x84>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a17      	ldr	r2, [pc, #92]	; (800b5cc <TIM_OC6_SetConfig+0xcc>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d007      	beq.n	800b584 <TIM_OC6_SetConfig+0x84>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a16      	ldr	r2, [pc, #88]	; (800b5d0 <TIM_OC6_SetConfig+0xd0>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d003      	beq.n	800b584 <TIM_OC6_SetConfig+0x84>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a15      	ldr	r2, [pc, #84]	; (800b5d4 <TIM_OC6_SetConfig+0xd4>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d109      	bne.n	800b598 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b58a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	695b      	ldr	r3, [r3, #20]
 800b590:	029b      	lsls	r3, r3, #10
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	4313      	orrs	r3, r2
 800b596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	621a      	str	r2, [r3, #32]
}
 800b5b2:	bf00      	nop
 800b5b4:	371c      	adds	r7, #28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	40012c00 	.word	0x40012c00
 800b5c4:	40013400 	.word	0x40013400
 800b5c8:	40014000 	.word	0x40014000
 800b5cc:	40014400 	.word	0x40014400
 800b5d0:	40014800 	.word	0x40014800
 800b5d4:	40015000 	.word	0x40015000

0800b5d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b087      	sub	sp, #28
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6a1b      	ldr	r3, [r3, #32]
 800b5e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	f023 0201 	bic.w	r2, r3, #1
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	699b      	ldr	r3, [r3, #24]
 800b5fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	011b      	lsls	r3, r3, #4
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	f023 030a 	bic.w	r3, r3, #10
 800b614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	621a      	str	r2, [r3, #32]
}
 800b62a:	bf00      	nop
 800b62c:	371c      	adds	r7, #28
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr

0800b636 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b636:	b480      	push	{r7}
 800b638:	b087      	sub	sp, #28
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	60f8      	str	r0, [r7, #12]
 800b63e:	60b9      	str	r1, [r7, #8]
 800b640:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	f023 0210 	bic.w	r2, r3, #16
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	699b      	ldr	r3, [r3, #24]
 800b652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6a1b      	ldr	r3, [r3, #32]
 800b658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b660:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	031b      	lsls	r3, r3, #12
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	4313      	orrs	r3, r2
 800b66a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b672:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	011b      	lsls	r3, r3, #4
 800b678:	693a      	ldr	r2, [r7, #16]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	697a      	ldr	r2, [r7, #20]
 800b682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	621a      	str	r2, [r3, #32]
}
 800b68a:	bf00      	nop
 800b68c:	371c      	adds	r7, #28
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b696:	b480      	push	{r7}
 800b698:	b085      	sub	sp, #20
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	f043 0307 	orr.w	r3, r3, #7
 800b6b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	609a      	str	r2, [r3, #8]
}
 800b6c0:	bf00      	nop
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
 800b6d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	021a      	lsls	r2, r3, #8
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	431a      	orrs	r2, r3
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	697a      	ldr	r2, [r7, #20]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	609a      	str	r2, [r3, #8]
}
 800b700:	bf00      	nop
 800b702:	371c      	adds	r7, #28
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	f003 031f 	and.w	r3, r3, #31
 800b71e:	2201      	movs	r2, #1
 800b720:	fa02 f303 	lsl.w	r3, r2, r3
 800b724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6a1a      	ldr	r2, [r3, #32]
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	43db      	mvns	r3, r3
 800b72e:	401a      	ands	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6a1a      	ldr	r2, [r3, #32]
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	f003 031f 	and.w	r3, r3, #31
 800b73e:	6879      	ldr	r1, [r7, #4]
 800b740:	fa01 f303 	lsl.w	r3, r1, r3
 800b744:	431a      	orrs	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	621a      	str	r2, [r3, #32]
}
 800b74a:	bf00      	nop
 800b74c:	371c      	adds	r7, #28
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
	...

0800b758 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d109      	bne.n	800b77c <HAL_TIMEx_PWMN_Start+0x24>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	2b01      	cmp	r3, #1
 800b772:	bf14      	ite	ne
 800b774:	2301      	movne	r3, #1
 800b776:	2300      	moveq	r3, #0
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	e022      	b.n	800b7c2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	2b04      	cmp	r3, #4
 800b780:	d109      	bne.n	800b796 <HAL_TIMEx_PWMN_Start+0x3e>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	bf14      	ite	ne
 800b78e:	2301      	movne	r3, #1
 800b790:	2300      	moveq	r3, #0
 800b792:	b2db      	uxtb	r3, r3
 800b794:	e015      	b.n	800b7c2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2b08      	cmp	r3, #8
 800b79a:	d109      	bne.n	800b7b0 <HAL_TIMEx_PWMN_Start+0x58>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	bf14      	ite	ne
 800b7a8:	2301      	movne	r3, #1
 800b7aa:	2300      	moveq	r3, #0
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	e008      	b.n	800b7c2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	bf14      	ite	ne
 800b7bc:	2301      	movne	r3, #1
 800b7be:	2300      	moveq	r3, #0
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e06e      	b.n	800b8a8 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d104      	bne.n	800b7da <HAL_TIMEx_PWMN_Start+0x82>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7d8:	e013      	b.n	800b802 <HAL_TIMEx_PWMN_Start+0xaa>
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	2b04      	cmp	r3, #4
 800b7de:	d104      	bne.n	800b7ea <HAL_TIMEx_PWMN_Start+0x92>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7e8:	e00b      	b.n	800b802 <HAL_TIMEx_PWMN_Start+0xaa>
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	2b08      	cmp	r3, #8
 800b7ee:	d104      	bne.n	800b7fa <HAL_TIMEx_PWMN_Start+0xa2>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b7f8:	e003      	b.n	800b802 <HAL_TIMEx_PWMN_Start+0xaa>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2204      	movs	r2, #4
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 f98e 	bl	800bb2c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b81e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a22      	ldr	r2, [pc, #136]	; (800b8b0 <HAL_TIMEx_PWMN_Start+0x158>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d01d      	beq.n	800b866 <HAL_TIMEx_PWMN_Start+0x10e>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b832:	d018      	beq.n	800b866 <HAL_TIMEx_PWMN_Start+0x10e>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a1e      	ldr	r2, [pc, #120]	; (800b8b4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d013      	beq.n	800b866 <HAL_TIMEx_PWMN_Start+0x10e>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a1d      	ldr	r2, [pc, #116]	; (800b8b8 <HAL_TIMEx_PWMN_Start+0x160>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d00e      	beq.n	800b866 <HAL_TIMEx_PWMN_Start+0x10e>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a1b      	ldr	r2, [pc, #108]	; (800b8bc <HAL_TIMEx_PWMN_Start+0x164>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d009      	beq.n	800b866 <HAL_TIMEx_PWMN_Start+0x10e>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a1a      	ldr	r2, [pc, #104]	; (800b8c0 <HAL_TIMEx_PWMN_Start+0x168>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d004      	beq.n	800b866 <HAL_TIMEx_PWMN_Start+0x10e>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a18      	ldr	r2, [pc, #96]	; (800b8c4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d115      	bne.n	800b892 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	689a      	ldr	r2, [r3, #8]
 800b86c:	4b16      	ldr	r3, [pc, #88]	; (800b8c8 <HAL_TIMEx_PWMN_Start+0x170>)
 800b86e:	4013      	ands	r3, r2
 800b870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b06      	cmp	r3, #6
 800b876:	d015      	beq.n	800b8a4 <HAL_TIMEx_PWMN_Start+0x14c>
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b87e:	d011      	beq.n	800b8a4 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f042 0201 	orr.w	r2, r2, #1
 800b88e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b890:	e008      	b.n	800b8a4 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f042 0201 	orr.w	r2, r2, #1
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	e000      	b.n	800b8a6 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	40012c00 	.word	0x40012c00
 800b8b4:	40000400 	.word	0x40000400
 800b8b8:	40000800 	.word	0x40000800
 800b8bc:	40013400 	.word	0x40013400
 800b8c0:	40014000 	.word	0x40014000
 800b8c4:	40015000 	.word	0x40015000
 800b8c8:	00010007 	.word	0x00010007

0800b8cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d101      	bne.n	800b8e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8e0:	2302      	movs	r3, #2
 800b8e2:	e06d      	b.n	800b9c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a30      	ldr	r2, [pc, #192]	; (800b9cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d009      	beq.n	800b922 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a2f      	ldr	r2, [pc, #188]	; (800b9d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d004      	beq.n	800b922 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a2d      	ldr	r2, [pc, #180]	; (800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d108      	bne.n	800b934 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b928:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	4313      	orrs	r3, r2
 800b932:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b93a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	4313      	orrs	r3, r2
 800b944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a1e      	ldr	r2, [pc, #120]	; (800b9cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d01d      	beq.n	800b994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b960:	d018      	beq.n	800b994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a1c      	ldr	r2, [pc, #112]	; (800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d013      	beq.n	800b994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a1a      	ldr	r2, [pc, #104]	; (800b9dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d00e      	beq.n	800b994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a15      	ldr	r2, [pc, #84]	; (800b9d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d009      	beq.n	800b994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a16      	ldr	r2, [pc, #88]	; (800b9e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d004      	beq.n	800b994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a11      	ldr	r2, [pc, #68]	; (800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d10c      	bne.n	800b9ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b99a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3714      	adds	r7, #20
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	40012c00 	.word	0x40012c00
 800b9d0:	40013400 	.word	0x40013400
 800b9d4:	40015000 	.word	0x40015000
 800b9d8:	40000400 	.word	0x40000400
 800b9dc:	40000800 	.word	0x40000800
 800b9e0:	40014000 	.word	0x40014000

0800b9e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d101      	bne.n	800ba00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	e06a      	b.n	800bad6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	695b      	ldr	r3, [r3, #20]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba66:	4313      	orrs	r3, r2
 800ba68:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	041b      	lsls	r3, r3, #16
 800ba76:	4313      	orrs	r3, r2
 800ba78:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a19      	ldr	r2, [pc, #100]	; (800bae4 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d009      	beq.n	800ba98 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a17      	ldr	r2, [pc, #92]	; (800bae8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d004      	beq.n	800ba98 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a16      	ldr	r2, [pc, #88]	; (800baec <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d115      	bne.n	800bac4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa2:	051b      	lsls	r3, r3, #20
 800baa4:	4313      	orrs	r3, r2
 800baa6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	69db      	ldr	r3, [r3, #28]
 800bab2:	4313      	orrs	r3, r2
 800bab4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	6a1b      	ldr	r3, [r3, #32]
 800bac0:	4313      	orrs	r3, r2
 800bac2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3714      	adds	r7, #20
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	40012c00 	.word	0x40012c00
 800bae8:	40013400 	.word	0x40013400
 800baec:	40015000 	.word	0x40015000

0800baf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb0c:	bf00      	nop
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb20:	bf00      	nop
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	f003 031f 	and.w	r3, r3, #31
 800bb3e:	2204      	movs	r2, #4
 800bb40:	fa02 f303 	lsl.w	r3, r2, r3
 800bb44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6a1a      	ldr	r2, [r3, #32]
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	43db      	mvns	r3, r3
 800bb4e:	401a      	ands	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6a1a      	ldr	r2, [r3, #32]
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	f003 031f 	and.w	r3, r3, #31
 800bb5e:	6879      	ldr	r1, [r7, #4]
 800bb60:	fa01 f303 	lsl.w	r3, r1, r3
 800bb64:	431a      	orrs	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	621a      	str	r2, [r3, #32]
}
 800bb6a:	bf00      	nop
 800bb6c:	371c      	adds	r7, #28
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d101      	bne.n	800bb88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e040      	b.n	800bc0a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d106      	bne.n	800bb9e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f7f7 ff97 	bl	8003acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2224      	movs	r2, #36	; 0x24
 800bba2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f022 0201 	bic.w	r2, r2, #1
 800bbb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fc07 	bl	800c3c8 <UART_SetConfig>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d101      	bne.n	800bbc4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e022      	b.n	800bc0a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fdcf 	bl	800c770 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	685a      	ldr	r2, [r3, #4]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbe0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	689a      	ldr	r2, [r3, #8]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbf0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f042 0201 	orr.w	r2, r2, #1
 800bc00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 fe56 	bl	800c8b4 <UART_CheckIdleState>
 800bc08:	4603      	mov	r3, r0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b08a      	sub	sp, #40	; 0x28
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc26:	2b20      	cmp	r3, #32
 800bc28:	d165      	bne.n	800bcf6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <HAL_UART_Transmit_DMA+0x22>
 800bc30:	88fb      	ldrh	r3, [r7, #6]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e05e      	b.n	800bcf8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	88fa      	ldrh	r2, [r7, #6]
 800bc44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	88fa      	ldrh	r2, [r7, #6]
 800bc4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2221      	movs	r2, #33	; 0x21
 800bc5c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d027      	beq.n	800bcb6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc6a:	4a25      	ldr	r2, [pc, #148]	; (800bd00 <HAL_UART_Transmit_DMA+0xec>)
 800bc6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc72:	4a24      	ldr	r2, [pc, #144]	; (800bd04 <HAL_UART_Transmit_DMA+0xf0>)
 800bc74:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc7a:	4a23      	ldr	r2, [pc, #140]	; (800bd08 <HAL_UART_Transmit_DMA+0xf4>)
 800bc7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc82:	2200      	movs	r2, #0
 800bc84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc8e:	4619      	mov	r1, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	3328      	adds	r3, #40	; 0x28
 800bc96:	461a      	mov	r2, r3
 800bc98:	88fb      	ldrh	r3, [r7, #6]
 800bc9a:	f7f9 ff6c 	bl	8005b76 <HAL_DMA_Start_IT>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d008      	beq.n	800bcb6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2210      	movs	r2, #16
 800bca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2220      	movs	r2, #32
 800bcb0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e020      	b.n	800bcf8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2240      	movs	r2, #64	; 0x40
 800bcbc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	3308      	adds	r3, #8
 800bcc4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	e853 3f00 	ldrex	r3, [r3]
 800bccc:	613b      	str	r3, [r7, #16]
   return(result);
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcd4:	627b      	str	r3, [r7, #36]	; 0x24
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3308      	adds	r3, #8
 800bcdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcde:	623a      	str	r2, [r7, #32]
 800bce0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce2:	69f9      	ldr	r1, [r7, #28]
 800bce4:	6a3a      	ldr	r2, [r7, #32]
 800bce6:	e841 2300 	strex	r3, r2, [r1]
 800bcea:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1e5      	bne.n	800bcbe <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	e000      	b.n	800bcf8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800bcf6:	2302      	movs	r3, #2
  }
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3728      	adds	r7, #40	; 0x28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	0800cd29 	.word	0x0800cd29
 800bd04:	0800cdbd 	.word	0x0800cdbd
 800bd08:	0800cf3d 	.word	0x0800cf3d

0800bd0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b08a      	sub	sp, #40	; 0x28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	4613      	mov	r3, r2
 800bd18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd20:	2b20      	cmp	r3, #32
 800bd22:	d132      	bne.n	800bd8a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <HAL_UART_Receive_DMA+0x24>
 800bd2a:	88fb      	ldrh	r3, [r7, #6]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d101      	bne.n	800bd34 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e02b      	b.n	800bd8c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2200      	movs	r2, #0
 800bd38:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d018      	beq.n	800bd7a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	e853 3f00 	ldrex	r3, [r3]
 800bd54:	613b      	str	r3, [r7, #16]
   return(result);
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd5c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	461a      	mov	r2, r3
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd66:	623b      	str	r3, [r7, #32]
 800bd68:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6a:	69f9      	ldr	r1, [r7, #28]
 800bd6c:	6a3a      	ldr	r2, [r7, #32]
 800bd6e:	e841 2300 	strex	r3, r2, [r1]
 800bd72:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1e6      	bne.n	800bd48 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd7a:	88fb      	ldrh	r3, [r7, #6]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	68b9      	ldr	r1, [r7, #8]
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f000 fea7 	bl	800cad4 <UART_Start_Receive_DMA>
 800bd86:	4603      	mov	r3, r0
 800bd88:	e000      	b.n	800bd8c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800bd8a:	2302      	movs	r3, #2
  }
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3728      	adds	r7, #40	; 0x28
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b0ba      	sub	sp, #232	; 0xe8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	69db      	ldr	r3, [r3, #28]
 800bda2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bdba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bdbe:	f640 030f 	movw	r3, #2063	; 0x80f
 800bdc2:	4013      	ands	r3, r2
 800bdc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bdc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d115      	bne.n	800bdfc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bdd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdd4:	f003 0320 	and.w	r3, r3, #32
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00f      	beq.n	800bdfc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bde0:	f003 0320 	and.w	r3, r3, #32
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d009      	beq.n	800bdfc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f000 82ab 	beq.w	800c348 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	4798      	blx	r3
      }
      return;
 800bdfa:	e2a5      	b.n	800c348 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bdfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be00:	2b00      	cmp	r3, #0
 800be02:	f000 8117 	beq.w	800c034 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800be06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be0a:	f003 0301 	and.w	r3, r3, #1
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d106      	bne.n	800be20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800be12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800be16:	4b85      	ldr	r3, [pc, #532]	; (800c02c <HAL_UART_IRQHandler+0x298>)
 800be18:	4013      	ands	r3, r2
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f000 810a 	beq.w	800c034 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d011      	beq.n	800be50 <HAL_UART_IRQHandler+0xbc>
 800be2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00b      	beq.n	800be50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2201      	movs	r2, #1
 800be3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be46:	f043 0201 	orr.w	r2, r3, #1
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be54:	f003 0302 	and.w	r3, r3, #2
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d011      	beq.n	800be80 <HAL_UART_IRQHandler+0xec>
 800be5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00b      	beq.n	800be80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2202      	movs	r2, #2
 800be6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be76:	f043 0204 	orr.w	r2, r3, #4
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be84:	f003 0304 	and.w	r3, r3, #4
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d011      	beq.n	800beb0 <HAL_UART_IRQHandler+0x11c>
 800be8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00b      	beq.n	800beb0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2204      	movs	r2, #4
 800be9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bea6:	f043 0202 	orr.w	r2, r3, #2
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800beb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beb4:	f003 0308 	and.w	r3, r3, #8
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d017      	beq.n	800beec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bec0:	f003 0320 	and.w	r3, r3, #32
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d105      	bne.n	800bed4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800becc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00b      	beq.n	800beec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2208      	movs	r2, #8
 800beda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bee2:	f043 0208 	orr.w	r2, r3, #8
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800beec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d012      	beq.n	800bf1e <HAL_UART_IRQHandler+0x18a>
 800bef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800befc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00c      	beq.n	800bf1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf14:	f043 0220 	orr.w	r2, r3, #32
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 8211 	beq.w	800c34c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bf2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf2e:	f003 0320 	and.w	r3, r3, #32
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00d      	beq.n	800bf52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bf36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf3a:	f003 0320 	and.w	r3, r3, #32
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d007      	beq.n	800bf52 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d003      	beq.n	800bf52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf66:	2b40      	cmp	r3, #64	; 0x40
 800bf68:	d005      	beq.n	800bf76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d04f      	beq.n	800c016 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fe72 	bl	800cc60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf86:	2b40      	cmp	r3, #64	; 0x40
 800bf88:	d141      	bne.n	800c00e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3308      	adds	r3, #8
 800bf90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf98:	e853 3f00 	ldrex	r3, [r3]
 800bf9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bfa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bfb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bfba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bfc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bfc6:	e841 2300 	strex	r3, r2, [r1]
 800bfca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bfce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1d9      	bne.n	800bf8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d013      	beq.n	800c006 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfe2:	4a13      	ldr	r2, [pc, #76]	; (800c030 <HAL_UART_IRQHandler+0x29c>)
 800bfe4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7f9 fe5b 	bl	8005ca6 <HAL_DMA_Abort_IT>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d017      	beq.n	800c026 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c000:	4610      	mov	r0, r2
 800c002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c004:	e00f      	b.n	800c026 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f9c8 	bl	800c39c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c00c:	e00b      	b.n	800c026 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 f9c4 	bl	800c39c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c014:	e007      	b.n	800c026 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 f9c0 	bl	800c39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800c024:	e192      	b.n	800c34c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c026:	bf00      	nop
    return;
 800c028:	e190      	b.n	800c34c <HAL_UART_IRQHandler+0x5b8>
 800c02a:	bf00      	nop
 800c02c:	04000120 	.word	0x04000120
 800c030:	0800cfbb 	.word	0x0800cfbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c038:	2b01      	cmp	r3, #1
 800c03a:	f040 814b 	bne.w	800c2d4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c042:	f003 0310 	and.w	r3, r3, #16
 800c046:	2b00      	cmp	r3, #0
 800c048:	f000 8144 	beq.w	800c2d4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c050:	f003 0310 	and.w	r3, r3, #16
 800c054:	2b00      	cmp	r3, #0
 800c056:	f000 813d 	beq.w	800c2d4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2210      	movs	r2, #16
 800c060:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c06c:	2b40      	cmp	r3, #64	; 0x40
 800c06e:	f040 80b5 	bne.w	800c1dc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c07e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 8164 	beq.w	800c350 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c08e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c092:	429a      	cmp	r2, r3
 800c094:	f080 815c 	bcs.w	800c350 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c09e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	2b20      	cmp	r3, #32
 800c0aa:	f000 8086 	beq.w	800c1ba <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0ba:	e853 3f00 	ldrex	r3, [r3]
 800c0be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c0c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c0c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c0d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c0dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c0e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c0e8:	e841 2300 	strex	r3, r2, [r1]
 800c0ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c0f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1da      	bne.n	800c0ae <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	3308      	adds	r3, #8
 800c0fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c102:	e853 3f00 	ldrex	r3, [r3]
 800c106:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c10a:	f023 0301 	bic.w	r3, r3, #1
 800c10e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3308      	adds	r3, #8
 800c118:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c11c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c120:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c122:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c124:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c128:	e841 2300 	strex	r3, r2, [r1]
 800c12c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c12e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1e1      	bne.n	800c0f8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	3308      	adds	r3, #8
 800c13a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c14a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	3308      	adds	r3, #8
 800c154:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c158:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c15a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c15c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c15e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c160:	e841 2300 	strex	r3, r2, [r1]
 800c164:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1e3      	bne.n	800c134 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2220      	movs	r2, #32
 800c170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c182:	e853 3f00 	ldrex	r3, [r3]
 800c186:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c18a:	f023 0310 	bic.w	r3, r3, #16
 800c18e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c19c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c19e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1a4:	e841 2300 	strex	r3, r2, [r1]
 800c1a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1e4      	bne.n	800c17a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7f9 fd3d 	bl	8005c34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2202      	movs	r2, #2
 800c1be:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 f8eb 	bl	800c3b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c1da:	e0b9      	b.n	800c350 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f000 80ab 	beq.w	800c354 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800c1fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c202:	2b00      	cmp	r3, #0
 800c204:	f000 80a6 	beq.w	800c354 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c210:	e853 3f00 	ldrex	r3, [r3]
 800c214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c21c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	461a      	mov	r2, r3
 800c226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c22a:	647b      	str	r3, [r7, #68]	; 0x44
 800c22c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c232:	e841 2300 	strex	r3, r2, [r1]
 800c236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1e4      	bne.n	800c208 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	3308      	adds	r3, #8
 800c244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	e853 3f00 	ldrex	r3, [r3]
 800c24c:	623b      	str	r3, [r7, #32]
   return(result);
 800c24e:	6a3b      	ldr	r3, [r7, #32]
 800c250:	f023 0301 	bic.w	r3, r3, #1
 800c254:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3308      	adds	r3, #8
 800c25e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c262:	633a      	str	r2, [r7, #48]	; 0x30
 800c264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c26a:	e841 2300 	strex	r3, r2, [r1]
 800c26e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1e3      	bne.n	800c23e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2220      	movs	r2, #32
 800c27a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	e853 3f00 	ldrex	r3, [r3]
 800c296:	60fb      	str	r3, [r7, #12]
   return(result);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f023 0310 	bic.w	r3, r3, #16
 800c29e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c2ac:	61fb      	str	r3, [r7, #28]
 800c2ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b0:	69b9      	ldr	r1, [r7, #24]
 800c2b2:	69fa      	ldr	r2, [r7, #28]
 800c2b4:	e841 2300 	strex	r3, r2, [r1]
 800c2b8:	617b      	str	r3, [r7, #20]
   return(result);
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1e4      	bne.n	800c28a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2202      	movs	r2, #2
 800c2c4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c2c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 f86f 	bl	800c3b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2d2:	e03f      	b.n	800c354 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00e      	beq.n	800c2fe <HAL_UART_IRQHandler+0x56a>
 800c2e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d008      	beq.n	800c2fe <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c2f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 fe9f 	bl	800d03a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2fc:	e02d      	b.n	800c35a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00e      	beq.n	800c328 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c30a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c312:	2b00      	cmp	r3, #0
 800c314:	d008      	beq.n	800c328 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d01c      	beq.n	800c358 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	4798      	blx	r3
    }
    return;
 800c326:	e017      	b.n	800c358 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c330:	2b00      	cmp	r3, #0
 800c332:	d012      	beq.n	800c35a <HAL_UART_IRQHandler+0x5c6>
 800c334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00c      	beq.n	800c35a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fe50 	bl	800cfe6 <UART_EndTransmit_IT>
    return;
 800c346:	e008      	b.n	800c35a <HAL_UART_IRQHandler+0x5c6>
      return;
 800c348:	bf00      	nop
 800c34a:	e006      	b.n	800c35a <HAL_UART_IRQHandler+0x5c6>
    return;
 800c34c:	bf00      	nop
 800c34e:	e004      	b.n	800c35a <HAL_UART_IRQHandler+0x5c6>
      return;
 800c350:	bf00      	nop
 800c352:	e002      	b.n	800c35a <HAL_UART_IRQHandler+0x5c6>
      return;
 800c354:	bf00      	nop
 800c356:	e000      	b.n	800c35a <HAL_UART_IRQHandler+0x5c6>
    return;
 800c358:	bf00      	nop
  }

}
 800c35a:	37e8      	adds	r7, #232	; 0xe8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c390:	bf00      	nop
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b083      	sub	sp, #12
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c3a4:	bf00      	nop
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c3bc:	bf00      	nop
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b088      	sub	sp, #32
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	689a      	ldr	r2, [r3, #8]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	431a      	orrs	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	431a      	orrs	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	69db      	ldr	r3, [r3, #28]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	4b92      	ldr	r3, [pc, #584]	; (800c63c <UART_SetConfig+0x274>)
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	6812      	ldr	r2, [r2, #0]
 800c3fa:	6979      	ldr	r1, [r7, #20]
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	68da      	ldr	r2, [r3, #12]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	430a      	orrs	r2, r1
 800c414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a1b      	ldr	r3, [r3, #32]
 800c420:	697a      	ldr	r2, [r7, #20]
 800c422:	4313      	orrs	r3, r2
 800c424:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	430a      	orrs	r2, r1
 800c438:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a80      	ldr	r2, [pc, #512]	; (800c640 <UART_SetConfig+0x278>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d120      	bne.n	800c486 <UART_SetConfig+0xbe>
 800c444:	4b7f      	ldr	r3, [pc, #508]	; (800c644 <UART_SetConfig+0x27c>)
 800c446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c448:	f003 0303 	and.w	r3, r3, #3
 800c44c:	2b03      	cmp	r3, #3
 800c44e:	d817      	bhi.n	800c480 <UART_SetConfig+0xb8>
 800c450:	a201      	add	r2, pc, #4	; (adr r2, 800c458 <UART_SetConfig+0x90>)
 800c452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c456:	bf00      	nop
 800c458:	0800c469 	.word	0x0800c469
 800c45c:	0800c475 	.word	0x0800c475
 800c460:	0800c47b 	.word	0x0800c47b
 800c464:	0800c46f 	.word	0x0800c46f
 800c468:	2301      	movs	r3, #1
 800c46a:	77fb      	strb	r3, [r7, #31]
 800c46c:	e0b5      	b.n	800c5da <UART_SetConfig+0x212>
 800c46e:	2302      	movs	r3, #2
 800c470:	77fb      	strb	r3, [r7, #31]
 800c472:	e0b2      	b.n	800c5da <UART_SetConfig+0x212>
 800c474:	2304      	movs	r3, #4
 800c476:	77fb      	strb	r3, [r7, #31]
 800c478:	e0af      	b.n	800c5da <UART_SetConfig+0x212>
 800c47a:	2308      	movs	r3, #8
 800c47c:	77fb      	strb	r3, [r7, #31]
 800c47e:	e0ac      	b.n	800c5da <UART_SetConfig+0x212>
 800c480:	2310      	movs	r3, #16
 800c482:	77fb      	strb	r3, [r7, #31]
 800c484:	e0a9      	b.n	800c5da <UART_SetConfig+0x212>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a6f      	ldr	r2, [pc, #444]	; (800c648 <UART_SetConfig+0x280>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d124      	bne.n	800c4da <UART_SetConfig+0x112>
 800c490:	4b6c      	ldr	r3, [pc, #432]	; (800c644 <UART_SetConfig+0x27c>)
 800c492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c498:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c49c:	d011      	beq.n	800c4c2 <UART_SetConfig+0xfa>
 800c49e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c4a2:	d817      	bhi.n	800c4d4 <UART_SetConfig+0x10c>
 800c4a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4a8:	d011      	beq.n	800c4ce <UART_SetConfig+0x106>
 800c4aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4ae:	d811      	bhi.n	800c4d4 <UART_SetConfig+0x10c>
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d003      	beq.n	800c4bc <UART_SetConfig+0xf4>
 800c4b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4b8:	d006      	beq.n	800c4c8 <UART_SetConfig+0x100>
 800c4ba:	e00b      	b.n	800c4d4 <UART_SetConfig+0x10c>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	77fb      	strb	r3, [r7, #31]
 800c4c0:	e08b      	b.n	800c5da <UART_SetConfig+0x212>
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	77fb      	strb	r3, [r7, #31]
 800c4c6:	e088      	b.n	800c5da <UART_SetConfig+0x212>
 800c4c8:	2304      	movs	r3, #4
 800c4ca:	77fb      	strb	r3, [r7, #31]
 800c4cc:	e085      	b.n	800c5da <UART_SetConfig+0x212>
 800c4ce:	2308      	movs	r3, #8
 800c4d0:	77fb      	strb	r3, [r7, #31]
 800c4d2:	e082      	b.n	800c5da <UART_SetConfig+0x212>
 800c4d4:	2310      	movs	r3, #16
 800c4d6:	77fb      	strb	r3, [r7, #31]
 800c4d8:	e07f      	b.n	800c5da <UART_SetConfig+0x212>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a5b      	ldr	r2, [pc, #364]	; (800c64c <UART_SetConfig+0x284>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d124      	bne.n	800c52e <UART_SetConfig+0x166>
 800c4e4:	4b57      	ldr	r3, [pc, #348]	; (800c644 <UART_SetConfig+0x27c>)
 800c4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c4ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c4f0:	d011      	beq.n	800c516 <UART_SetConfig+0x14e>
 800c4f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c4f6:	d817      	bhi.n	800c528 <UART_SetConfig+0x160>
 800c4f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c4fc:	d011      	beq.n	800c522 <UART_SetConfig+0x15a>
 800c4fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c502:	d811      	bhi.n	800c528 <UART_SetConfig+0x160>
 800c504:	2b00      	cmp	r3, #0
 800c506:	d003      	beq.n	800c510 <UART_SetConfig+0x148>
 800c508:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c50c:	d006      	beq.n	800c51c <UART_SetConfig+0x154>
 800c50e:	e00b      	b.n	800c528 <UART_SetConfig+0x160>
 800c510:	2300      	movs	r3, #0
 800c512:	77fb      	strb	r3, [r7, #31]
 800c514:	e061      	b.n	800c5da <UART_SetConfig+0x212>
 800c516:	2302      	movs	r3, #2
 800c518:	77fb      	strb	r3, [r7, #31]
 800c51a:	e05e      	b.n	800c5da <UART_SetConfig+0x212>
 800c51c:	2304      	movs	r3, #4
 800c51e:	77fb      	strb	r3, [r7, #31]
 800c520:	e05b      	b.n	800c5da <UART_SetConfig+0x212>
 800c522:	2308      	movs	r3, #8
 800c524:	77fb      	strb	r3, [r7, #31]
 800c526:	e058      	b.n	800c5da <UART_SetConfig+0x212>
 800c528:	2310      	movs	r3, #16
 800c52a:	77fb      	strb	r3, [r7, #31]
 800c52c:	e055      	b.n	800c5da <UART_SetConfig+0x212>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a47      	ldr	r2, [pc, #284]	; (800c650 <UART_SetConfig+0x288>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d124      	bne.n	800c582 <UART_SetConfig+0x1ba>
 800c538:	4b42      	ldr	r3, [pc, #264]	; (800c644 <UART_SetConfig+0x27c>)
 800c53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c53c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c540:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c544:	d011      	beq.n	800c56a <UART_SetConfig+0x1a2>
 800c546:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c54a:	d817      	bhi.n	800c57c <UART_SetConfig+0x1b4>
 800c54c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c550:	d011      	beq.n	800c576 <UART_SetConfig+0x1ae>
 800c552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c556:	d811      	bhi.n	800c57c <UART_SetConfig+0x1b4>
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d003      	beq.n	800c564 <UART_SetConfig+0x19c>
 800c55c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c560:	d006      	beq.n	800c570 <UART_SetConfig+0x1a8>
 800c562:	e00b      	b.n	800c57c <UART_SetConfig+0x1b4>
 800c564:	2300      	movs	r3, #0
 800c566:	77fb      	strb	r3, [r7, #31]
 800c568:	e037      	b.n	800c5da <UART_SetConfig+0x212>
 800c56a:	2302      	movs	r3, #2
 800c56c:	77fb      	strb	r3, [r7, #31]
 800c56e:	e034      	b.n	800c5da <UART_SetConfig+0x212>
 800c570:	2304      	movs	r3, #4
 800c572:	77fb      	strb	r3, [r7, #31]
 800c574:	e031      	b.n	800c5da <UART_SetConfig+0x212>
 800c576:	2308      	movs	r3, #8
 800c578:	77fb      	strb	r3, [r7, #31]
 800c57a:	e02e      	b.n	800c5da <UART_SetConfig+0x212>
 800c57c:	2310      	movs	r3, #16
 800c57e:	77fb      	strb	r3, [r7, #31]
 800c580:	e02b      	b.n	800c5da <UART_SetConfig+0x212>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a33      	ldr	r2, [pc, #204]	; (800c654 <UART_SetConfig+0x28c>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d124      	bne.n	800c5d6 <UART_SetConfig+0x20e>
 800c58c:	4b2d      	ldr	r3, [pc, #180]	; (800c644 <UART_SetConfig+0x27c>)
 800c58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c590:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c594:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c598:	d011      	beq.n	800c5be <UART_SetConfig+0x1f6>
 800c59a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c59e:	d817      	bhi.n	800c5d0 <UART_SetConfig+0x208>
 800c5a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5a4:	d011      	beq.n	800c5ca <UART_SetConfig+0x202>
 800c5a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5aa:	d811      	bhi.n	800c5d0 <UART_SetConfig+0x208>
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d003      	beq.n	800c5b8 <UART_SetConfig+0x1f0>
 800c5b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5b4:	d006      	beq.n	800c5c4 <UART_SetConfig+0x1fc>
 800c5b6:	e00b      	b.n	800c5d0 <UART_SetConfig+0x208>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	77fb      	strb	r3, [r7, #31]
 800c5bc:	e00d      	b.n	800c5da <UART_SetConfig+0x212>
 800c5be:	2302      	movs	r3, #2
 800c5c0:	77fb      	strb	r3, [r7, #31]
 800c5c2:	e00a      	b.n	800c5da <UART_SetConfig+0x212>
 800c5c4:	2304      	movs	r3, #4
 800c5c6:	77fb      	strb	r3, [r7, #31]
 800c5c8:	e007      	b.n	800c5da <UART_SetConfig+0x212>
 800c5ca:	2308      	movs	r3, #8
 800c5cc:	77fb      	strb	r3, [r7, #31]
 800c5ce:	e004      	b.n	800c5da <UART_SetConfig+0x212>
 800c5d0:	2310      	movs	r3, #16
 800c5d2:	77fb      	strb	r3, [r7, #31]
 800c5d4:	e001      	b.n	800c5da <UART_SetConfig+0x212>
 800c5d6:	2310      	movs	r3, #16
 800c5d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	69db      	ldr	r3, [r3, #28]
 800c5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5e2:	d16b      	bne.n	800c6bc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800c5e4:	7ffb      	ldrb	r3, [r7, #31]
 800c5e6:	2b08      	cmp	r3, #8
 800c5e8:	d838      	bhi.n	800c65c <UART_SetConfig+0x294>
 800c5ea:	a201      	add	r2, pc, #4	; (adr r2, 800c5f0 <UART_SetConfig+0x228>)
 800c5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f0:	0800c615 	.word	0x0800c615
 800c5f4:	0800c61d 	.word	0x0800c61d
 800c5f8:	0800c625 	.word	0x0800c625
 800c5fc:	0800c65d 	.word	0x0800c65d
 800c600:	0800c62b 	.word	0x0800c62b
 800c604:	0800c65d 	.word	0x0800c65d
 800c608:	0800c65d 	.word	0x0800c65d
 800c60c:	0800c65d 	.word	0x0800c65d
 800c610:	0800c633 	.word	0x0800c633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c614:	f7fc fbbe 	bl	8008d94 <HAL_RCC_GetPCLK1Freq>
 800c618:	61b8      	str	r0, [r7, #24]
        break;
 800c61a:	e024      	b.n	800c666 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c61c:	f7fc fbdc 	bl	8008dd8 <HAL_RCC_GetPCLK2Freq>
 800c620:	61b8      	str	r0, [r7, #24]
        break;
 800c622:	e020      	b.n	800c666 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c624:	4b0c      	ldr	r3, [pc, #48]	; (800c658 <UART_SetConfig+0x290>)
 800c626:	61bb      	str	r3, [r7, #24]
        break;
 800c628:	e01d      	b.n	800c666 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c62a:	f7fc fb3d 	bl	8008ca8 <HAL_RCC_GetSysClockFreq>
 800c62e:	61b8      	str	r0, [r7, #24]
        break;
 800c630:	e019      	b.n	800c666 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c636:	61bb      	str	r3, [r7, #24]
        break;
 800c638:	e015      	b.n	800c666 <UART_SetConfig+0x29e>
 800c63a:	bf00      	nop
 800c63c:	efff69f3 	.word	0xefff69f3
 800c640:	40013800 	.word	0x40013800
 800c644:	40021000 	.word	0x40021000
 800c648:	40004400 	.word	0x40004400
 800c64c:	40004800 	.word	0x40004800
 800c650:	40004c00 	.word	0x40004c00
 800c654:	40005000 	.word	0x40005000
 800c658:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800c65c:	2300      	movs	r3, #0
 800c65e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	77bb      	strb	r3, [r7, #30]
        break;
 800c664:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d073      	beq.n	800c754 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	005a      	lsls	r2, r3, #1
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	085b      	lsrs	r3, r3, #1
 800c676:	441a      	add	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c680:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	2b0f      	cmp	r3, #15
 800c686:	d916      	bls.n	800c6b6 <UART_SetConfig+0x2ee>
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c68e:	d212      	bcs.n	800c6b6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	b29b      	uxth	r3, r3
 800c694:	f023 030f 	bic.w	r3, r3, #15
 800c698:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	085b      	lsrs	r3, r3, #1
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	f003 0307 	and.w	r3, r3, #7
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	89fb      	ldrh	r3, [r7, #14]
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	89fa      	ldrh	r2, [r7, #14]
 800c6b2:	60da      	str	r2, [r3, #12]
 800c6b4:	e04e      	b.n	800c754 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	77bb      	strb	r3, [r7, #30]
 800c6ba:	e04b      	b.n	800c754 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c6bc:	7ffb      	ldrb	r3, [r7, #31]
 800c6be:	2b08      	cmp	r3, #8
 800c6c0:	d827      	bhi.n	800c712 <UART_SetConfig+0x34a>
 800c6c2:	a201      	add	r2, pc, #4	; (adr r2, 800c6c8 <UART_SetConfig+0x300>)
 800c6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c8:	0800c6ed 	.word	0x0800c6ed
 800c6cc:	0800c6f5 	.word	0x0800c6f5
 800c6d0:	0800c6fd 	.word	0x0800c6fd
 800c6d4:	0800c713 	.word	0x0800c713
 800c6d8:	0800c703 	.word	0x0800c703
 800c6dc:	0800c713 	.word	0x0800c713
 800c6e0:	0800c713 	.word	0x0800c713
 800c6e4:	0800c713 	.word	0x0800c713
 800c6e8:	0800c70b 	.word	0x0800c70b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6ec:	f7fc fb52 	bl	8008d94 <HAL_RCC_GetPCLK1Freq>
 800c6f0:	61b8      	str	r0, [r7, #24]
        break;
 800c6f2:	e013      	b.n	800c71c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6f4:	f7fc fb70 	bl	8008dd8 <HAL_RCC_GetPCLK2Freq>
 800c6f8:	61b8      	str	r0, [r7, #24]
        break;
 800c6fa:	e00f      	b.n	800c71c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c6fc:	4b1b      	ldr	r3, [pc, #108]	; (800c76c <UART_SetConfig+0x3a4>)
 800c6fe:	61bb      	str	r3, [r7, #24]
        break;
 800c700:	e00c      	b.n	800c71c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c702:	f7fc fad1 	bl	8008ca8 <HAL_RCC_GetSysClockFreq>
 800c706:	61b8      	str	r0, [r7, #24]
        break;
 800c708:	e008      	b.n	800c71c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c70a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c70e:	61bb      	str	r3, [r7, #24]
        break;
 800c710:	e004      	b.n	800c71c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800c712:	2300      	movs	r3, #0
 800c714:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	77bb      	strb	r3, [r7, #30]
        break;
 800c71a:	bf00      	nop
    }

    if (pclk != 0U)
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d018      	beq.n	800c754 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	085a      	lsrs	r2, r3, #1
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	441a      	add	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	fbb2 f3f3 	udiv	r3, r2, r3
 800c734:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	2b0f      	cmp	r3, #15
 800c73a:	d909      	bls.n	800c750 <UART_SetConfig+0x388>
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c742:	d205      	bcs.n	800c750 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	b29a      	uxth	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	60da      	str	r2, [r3, #12]
 800c74e:	e001      	b.n	800c754 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800c760:	7fbb      	ldrb	r3, [r7, #30]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3720      	adds	r7, #32
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	007a1200 	.word	0x007a1200

0800c770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77c:	f003 0301 	and.w	r3, r3, #1
 800c780:	2b00      	cmp	r3, #0
 800c782:	d00a      	beq.n	800c79a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	430a      	orrs	r2, r1
 800c798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79e:	f003 0302 	and.w	r3, r3, #2
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00a      	beq.n	800c7bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	430a      	orrs	r2, r1
 800c7ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c0:	f003 0304 	and.w	r3, r3, #4
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00a      	beq.n	800c7de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	430a      	orrs	r2, r1
 800c7dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e2:	f003 0308 	and.w	r3, r3, #8
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00a      	beq.n	800c800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	430a      	orrs	r2, r1
 800c7fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c804:	f003 0310 	and.w	r3, r3, #16
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00a      	beq.n	800c822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	430a      	orrs	r2, r1
 800c820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c826:	f003 0320 	and.w	r3, r3, #32
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00a      	beq.n	800c844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	430a      	orrs	r2, r1
 800c842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d01a      	beq.n	800c886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	430a      	orrs	r2, r1
 800c864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c86a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c86e:	d10a      	bne.n	800c886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	430a      	orrs	r2, r1
 800c884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00a      	beq.n	800c8a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	430a      	orrs	r2, r1
 800c8a6:	605a      	str	r2, [r3, #4]
  }
}
 800c8a8:	bf00      	nop
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b098      	sub	sp, #96	; 0x60
 800c8b8:	af02      	add	r7, sp, #8
 800c8ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8c4:	f7f7 fbe2 	bl	800408c <HAL_GetTick>
 800c8c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0308 	and.w	r3, r3, #8
 800c8d4:	2b08      	cmp	r3, #8
 800c8d6:	d12e      	bne.n	800c936 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 f88c 	bl	800ca04 <UART_WaitOnFlagUntilTimeout>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d021      	beq.n	800c936 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fa:	e853 3f00 	ldrex	r3, [r3]
 800c8fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c906:	653b      	str	r3, [r7, #80]	; 0x50
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	461a      	mov	r2, r3
 800c90e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c910:	647b      	str	r3, [r7, #68]	; 0x44
 800c912:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c914:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c918:	e841 2300 	strex	r3, r2, [r1]
 800c91c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1e6      	bne.n	800c8f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2220      	movs	r2, #32
 800c928:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c932:	2303      	movs	r3, #3
 800c934:	e062      	b.n	800c9fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 0304 	and.w	r3, r3, #4
 800c940:	2b04      	cmp	r3, #4
 800c942:	d149      	bne.n	800c9d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c94c:	2200      	movs	r2, #0
 800c94e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 f856 	bl	800ca04 <UART_WaitOnFlagUntilTimeout>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d03c      	beq.n	800c9d8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c966:	e853 3f00 	ldrex	r3, [r3]
 800c96a:	623b      	str	r3, [r7, #32]
   return(result);
 800c96c:	6a3b      	ldr	r3, [r7, #32]
 800c96e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c972:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	461a      	mov	r2, r3
 800c97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c97c:	633b      	str	r3, [r7, #48]	; 0x30
 800c97e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c984:	e841 2300 	strex	r3, r2, [r1]
 800c988:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1e6      	bne.n	800c95e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3308      	adds	r3, #8
 800c996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	e853 3f00 	ldrex	r3, [r3]
 800c99e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f023 0301 	bic.w	r3, r3, #1
 800c9a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	3308      	adds	r3, #8
 800c9ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9b0:	61fa      	str	r2, [r7, #28]
 800c9b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b4:	69b9      	ldr	r1, [r7, #24]
 800c9b6:	69fa      	ldr	r2, [r7, #28]
 800c9b8:	e841 2300 	strex	r3, r2, [r1]
 800c9bc:	617b      	str	r3, [r7, #20]
   return(result);
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1e5      	bne.n	800c990 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2220      	movs	r2, #32
 800c9c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e011      	b.n	800c9fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2220      	movs	r2, #32
 800c9dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2220      	movs	r2, #32
 800c9e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3758      	adds	r7, #88	; 0x58
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	603b      	str	r3, [r7, #0]
 800ca10:	4613      	mov	r3, r2
 800ca12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca14:	e049      	b.n	800caaa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca1c:	d045      	beq.n	800caaa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca1e:	f7f7 fb35 	bl	800408c <HAL_GetTick>
 800ca22:	4602      	mov	r2, r0
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	1ad3      	subs	r3, r2, r3
 800ca28:	69ba      	ldr	r2, [r7, #24]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d302      	bcc.n	800ca34 <UART_WaitOnFlagUntilTimeout+0x30>
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d101      	bne.n	800ca38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca34:	2303      	movs	r3, #3
 800ca36:	e048      	b.n	800caca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 0304 	and.w	r3, r3, #4
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d031      	beq.n	800caaa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	69db      	ldr	r3, [r3, #28]
 800ca4c:	f003 0308 	and.w	r3, r3, #8
 800ca50:	2b08      	cmp	r3, #8
 800ca52:	d110      	bne.n	800ca76 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2208      	movs	r2, #8
 800ca5a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	f000 f8ff 	bl	800cc60 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2208      	movs	r2, #8
 800ca66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800ca72:	2301      	movs	r3, #1
 800ca74:	e029      	b.n	800caca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	69db      	ldr	r3, [r3, #28]
 800ca7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca84:	d111      	bne.n	800caaa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f000 f8e5 	bl	800cc60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2220      	movs	r2, #32
 800ca9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2200      	movs	r2, #0
 800caa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800caa6:	2303      	movs	r3, #3
 800caa8:	e00f      	b.n	800caca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	69da      	ldr	r2, [r3, #28]
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	4013      	ands	r3, r2
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	bf0c      	ite	eq
 800caba:	2301      	moveq	r3, #1
 800cabc:	2300      	movne	r3, #0
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	461a      	mov	r2, r3
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d0a6      	beq.n	800ca16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
	...

0800cad4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b096      	sub	sp, #88	; 0x58
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	4613      	mov	r3, r2
 800cae0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	88fa      	ldrh	r2, [r7, #6]
 800caec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2222      	movs	r2, #34	; 0x22
 800cafc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d028      	beq.n	800cb5a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb0c:	4a3e      	ldr	r2, [pc, #248]	; (800cc08 <UART_Start_Receive_DMA+0x134>)
 800cb0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb14:	4a3d      	ldr	r2, [pc, #244]	; (800cc0c <UART_Start_Receive_DMA+0x138>)
 800cb16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb1c:	4a3c      	ldr	r2, [pc, #240]	; (800cc10 <UART_Start_Receive_DMA+0x13c>)
 800cb1e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb24:	2200      	movs	r2, #0
 800cb26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	3324      	adds	r3, #36	; 0x24
 800cb32:	4619      	mov	r1, r3
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb38:	461a      	mov	r2, r3
 800cb3a:	88fb      	ldrh	r3, [r7, #6]
 800cb3c:	f7f9 f81b 	bl	8005b76 <HAL_DMA_Start_IT>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d009      	beq.n	800cb5a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2210      	movs	r2, #16
 800cb4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2220      	movs	r2, #32
 800cb52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e051      	b.n	800cbfe <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d018      	beq.n	800cb94 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb6a:	e853 3f00 	ldrex	r3, [r3]
 800cb6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb76:	657b      	str	r3, [r7, #84]	; 0x54
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb80:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb82:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb88:	e841 2300 	strex	r3, r2, [r1]
 800cb8c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cb8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1e6      	bne.n	800cb62 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	3308      	adds	r3, #8
 800cb9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9e:	e853 3f00 	ldrex	r3, [r3]
 800cba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	f043 0301 	orr.w	r3, r3, #1
 800cbaa:	653b      	str	r3, [r7, #80]	; 0x50
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	3308      	adds	r3, #8
 800cbb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbb4:	637a      	str	r2, [r7, #52]	; 0x34
 800cbb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbbc:	e841 2300 	strex	r3, r2, [r1]
 800cbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1e5      	bne.n	800cb94 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	3308      	adds	r3, #8
 800cbce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	e853 3f00 	ldrex	r3, [r3]
 800cbd6:	613b      	str	r3, [r7, #16]
   return(result);
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	3308      	adds	r3, #8
 800cbe6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cbe8:	623a      	str	r2, [r7, #32]
 800cbea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbec:	69f9      	ldr	r1, [r7, #28]
 800cbee:	6a3a      	ldr	r2, [r7, #32]
 800cbf0:	e841 2300 	strex	r3, r2, [r1]
 800cbf4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1e5      	bne.n	800cbc8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3758      	adds	r7, #88	; 0x58
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	0800cdd9 	.word	0x0800cdd9
 800cc0c:	0800ceff 	.word	0x0800ceff
 800cc10:	0800cf3d 	.word	0x0800cf3d

0800cc14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b089      	sub	sp, #36	; 0x24
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	e853 3f00 	ldrex	r3, [r3]
 800cc28:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc30:	61fb      	str	r3, [r7, #28]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	461a      	mov	r2, r3
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	61bb      	str	r3, [r7, #24]
 800cc3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3e:	6979      	ldr	r1, [r7, #20]
 800cc40:	69ba      	ldr	r2, [r7, #24]
 800cc42:	e841 2300 	strex	r3, r2, [r1]
 800cc46:	613b      	str	r3, [r7, #16]
   return(result);
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1e6      	bne.n	800cc1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2220      	movs	r2, #32
 800cc52:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800cc54:	bf00      	nop
 800cc56:	3724      	adds	r7, #36	; 0x24
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b095      	sub	sp, #84	; 0x54
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc70:	e853 3f00 	ldrex	r3, [r3]
 800cc74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	461a      	mov	r2, r3
 800cc84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc86:	643b      	str	r3, [r7, #64]	; 0x40
 800cc88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc8e:	e841 2300 	strex	r3, r2, [r1]
 800cc92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1e6      	bne.n	800cc68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	3308      	adds	r3, #8
 800cca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca2:	6a3b      	ldr	r3, [r7, #32]
 800cca4:	e853 3f00 	ldrex	r3, [r3]
 800cca8:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	f023 0301 	bic.w	r3, r3, #1
 800ccb0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	3308      	adds	r3, #8
 800ccb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ccbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccc2:	e841 2300 	strex	r3, r2, [r1]
 800ccc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1e5      	bne.n	800cc9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d118      	bne.n	800cd08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	e853 3f00 	ldrex	r3, [r3]
 800cce2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	f023 0310 	bic.w	r3, r3, #16
 800ccea:	647b      	str	r3, [r7, #68]	; 0x44
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccf4:	61bb      	str	r3, [r7, #24]
 800ccf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf8:	6979      	ldr	r1, [r7, #20]
 800ccfa:	69ba      	ldr	r2, [r7, #24]
 800ccfc:	e841 2300 	strex	r3, r2, [r1]
 800cd00:	613b      	str	r3, [r7, #16]
   return(result);
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e6      	bne.n	800ccd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2220      	movs	r2, #32
 800cd0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800cd1c:	bf00      	nop
 800cd1e:	3754      	adds	r7, #84	; 0x54
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b090      	sub	sp, #64	; 0x40
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd34:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	699b      	ldr	r3, [r3, #24]
 800cd3a:	2b20      	cmp	r3, #32
 800cd3c:	d037      	beq.n	800cdae <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800cd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd40:	2200      	movs	r2, #0
 800cd42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	3308      	adds	r3, #8
 800cd4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd50:	e853 3f00 	ldrex	r3, [r3]
 800cd54:	623b      	str	r3, [r7, #32]
   return(result);
 800cd56:	6a3b      	ldr	r3, [r7, #32]
 800cd58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3308      	adds	r3, #8
 800cd64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd66:	633a      	str	r2, [r7, #48]	; 0x30
 800cd68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd6e:	e841 2300 	strex	r3, r2, [r1]
 800cd72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1e5      	bne.n	800cd46 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	e853 3f00 	ldrex	r3, [r3]
 800cd86:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd8e:	637b      	str	r3, [r7, #52]	; 0x34
 800cd90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	461a      	mov	r2, r3
 800cd96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd98:	61fb      	str	r3, [r7, #28]
 800cd9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9c:	69b9      	ldr	r1, [r7, #24]
 800cd9e:	69fa      	ldr	r2, [r7, #28]
 800cda0:	e841 2300 	strex	r3, r2, [r1]
 800cda4:	617b      	str	r3, [r7, #20]
   return(result);
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1e6      	bne.n	800cd7a <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cdac:	e002      	b.n	800cdb4 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800cdae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cdb0:	f7ff fad6 	bl	800c360 <HAL_UART_TxCpltCallback>
}
 800cdb4:	bf00      	nop
 800cdb6:	3740      	adds	r7, #64	; 0x40
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f7ff fad2 	bl	800c374 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdd0:	bf00      	nop
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b09c      	sub	sp, #112	; 0x70
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	699b      	ldr	r3, [r3, #24]
 800cdea:	2b20      	cmp	r3, #32
 800cdec:	d071      	beq.n	800ced2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800cdee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdfe:	e853 3f00 	ldrex	r3, [r3]
 800ce02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ce04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	461a      	mov	r2, r3
 800ce12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce14:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce1c:	e841 2300 	strex	r3, r2, [r1]
 800ce20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1e6      	bne.n	800cdf6 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	3308      	adds	r3, #8
 800ce2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	e853 3f00 	ldrex	r3, [r3]
 800ce36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce3a:	f023 0301 	bic.w	r3, r3, #1
 800ce3e:	667b      	str	r3, [r7, #100]	; 0x64
 800ce40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3308      	adds	r3, #8
 800ce46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ce48:	647a      	str	r2, [r7, #68]	; 0x44
 800ce4a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce50:	e841 2300 	strex	r3, r2, [r1]
 800ce54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1e5      	bne.n	800ce28 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	3308      	adds	r3, #8
 800ce62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	e853 3f00 	ldrex	r3, [r3]
 800ce6a:	623b      	str	r3, [r7, #32]
   return(result);
 800ce6c:	6a3b      	ldr	r3, [r7, #32]
 800ce6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce72:	663b      	str	r3, [r7, #96]	; 0x60
 800ce74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	3308      	adds	r3, #8
 800ce7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce7c:	633a      	str	r2, [r7, #48]	; 0x30
 800ce7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce84:	e841 2300 	strex	r3, r2, [r1]
 800ce88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d1e5      	bne.n	800ce5c <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce92:	2220      	movs	r2, #32
 800ce94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d118      	bne.n	800ced2 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	e853 3f00 	ldrex	r3, [r3]
 800ceac:	60fb      	str	r3, [r7, #12]
   return(result);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f023 0310 	bic.w	r3, r3, #16
 800ceb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ceb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	461a      	mov	r2, r3
 800cebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cebe:	61fb      	str	r3, [r7, #28]
 800cec0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec2:	69b9      	ldr	r1, [r7, #24]
 800cec4:	69fa      	ldr	r2, [r7, #28]
 800cec6:	e841 2300 	strex	r3, r2, [r1]
 800ceca:	617b      	str	r3, [r7, #20]
   return(result);
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d1e6      	bne.n	800cea0 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ced2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ced4:	2200      	movs	r2, #0
 800ced6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ced8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d107      	bne.n	800cef0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cee2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cee6:	4619      	mov	r1, r3
 800cee8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ceea:	f7ff fa61 	bl	800c3b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ceee:	e002      	b.n	800cef6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800cef0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cef2:	f7f3 feeb 	bl	8000ccc <HAL_UART_RxCpltCallback>
}
 800cef6:	bf00      	nop
 800cef8:	3770      	adds	r7, #112	; 0x70
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b084      	sub	sp, #16
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d109      	bne.n	800cf2e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cf20:	085b      	lsrs	r3, r3, #1
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	4619      	mov	r1, r3
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f7ff fa42 	bl	800c3b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf2c:	e002      	b.n	800cf34 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f7ff fa2a 	bl	800c388 <HAL_UART_RxHalfCpltCallback>
}
 800cf34:	bf00      	nop
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf48:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf56:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf62:	2b80      	cmp	r3, #128	; 0x80
 800cf64:	d109      	bne.n	800cf7a <UART_DMAError+0x3e>
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	2b21      	cmp	r3, #33	; 0x21
 800cf6a:	d106      	bne.n	800cf7a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800cf74:	6978      	ldr	r0, [r7, #20]
 800cf76:	f7ff fe4d 	bl	800cc14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf84:	2b40      	cmp	r3, #64	; 0x40
 800cf86:	d109      	bne.n	800cf9c <UART_DMAError+0x60>
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2b22      	cmp	r3, #34	; 0x22
 800cf8c:	d106      	bne.n	800cf9c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	2200      	movs	r2, #0
 800cf92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800cf96:	6978      	ldr	r0, [r7, #20]
 800cf98:	f7ff fe62 	bl	800cc60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfa2:	f043 0210 	orr.w	r2, r3, #16
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfac:	6978      	ldr	r0, [r7, #20]
 800cfae:	f7ff f9f5 	bl	800c39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfb2:	bf00      	nop
 800cfb4:	3718      	adds	r7, #24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f7ff f9df 	bl	800c39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfde:	bf00      	nop
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b088      	sub	sp, #32
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	e853 3f00 	ldrex	r3, [r3]
 800cffa:	60bb      	str	r3, [r7, #8]
   return(result);
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d002:	61fb      	str	r3, [r7, #28]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	461a      	mov	r2, r3
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	61bb      	str	r3, [r7, #24]
 800d00e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d010:	6979      	ldr	r1, [r7, #20]
 800d012:	69ba      	ldr	r2, [r7, #24]
 800d014:	e841 2300 	strex	r3, r2, [r1]
 800d018:	613b      	str	r3, [r7, #16]
   return(result);
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1e6      	bne.n	800cfee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2220      	movs	r2, #32
 800d024:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff f997 	bl	800c360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d032:	bf00      	nop
 800d034:	3720      	adds	r7, #32
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d03a:	b480      	push	{r7}
 800d03c:	b083      	sub	sp, #12
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d042:	bf00      	nop
 800d044:	370c      	adds	r7, #12
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d04e:	b480      	push	{r7}
 800d050:	b085      	sub	sp, #20
 800d052:	af00      	add	r7, sp, #0
 800d054:	4603      	mov	r3, r0
 800d056:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d058:	2300      	movs	r3, #0
 800d05a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d05c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d060:	2b84      	cmp	r3, #132	; 0x84
 800d062:	d005      	beq.n	800d070 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d064:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4413      	add	r3, r2
 800d06c:	3303      	adds	r3, #3
 800d06e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d070:	68fb      	ldr	r3, [r7, #12]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr

0800d07e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d082:	f001 f895 	bl	800e1b0 <vTaskStartScheduler>
  
  return osOK;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d08e:	b089      	sub	sp, #36	; 0x24
 800d090:	af04      	add	r7, sp, #16
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	695b      	ldr	r3, [r3, #20]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d020      	beq.n	800d0e0 <osThreadCreate+0x54>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	699b      	ldr	r3, [r3, #24]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d01c      	beq.n	800d0e0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	685c      	ldr	r4, [r3, #4]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	691e      	ldr	r6, [r3, #16]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7ff ffc8 	bl	800d04e <makeFreeRtosPriority>
 800d0be:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	695b      	ldr	r3, [r3, #20]
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d0c8:	9202      	str	r2, [sp, #8]
 800d0ca:	9301      	str	r3, [sp, #4]
 800d0cc:	9100      	str	r1, [sp, #0]
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	4632      	mov	r2, r6
 800d0d2:	4629      	mov	r1, r5
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	f000 fe95 	bl	800de04 <xTaskCreateStatic>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	60fb      	str	r3, [r7, #12]
 800d0de:	e01c      	b.n	800d11a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	685c      	ldr	r4, [r3, #4]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d0ec:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7ff ffaa 	bl	800d04e <makeFreeRtosPriority>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	f107 030c 	add.w	r3, r7, #12
 800d100:	9301      	str	r3, [sp, #4]
 800d102:	9200      	str	r2, [sp, #0]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	4632      	mov	r2, r6
 800d108:	4629      	mov	r1, r5
 800d10a:	4620      	mov	r0, r4
 800d10c:	f000 fed6 	bl	800debc <xTaskCreate>
 800d110:	4603      	mov	r3, r0
 800d112:	2b01      	cmp	r3, #1
 800d114:	d001      	beq.n	800d11a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d116:	2300      	movs	r3, #0
 800d118:	e000      	b.n	800d11c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d11a:	68fb      	ldr	r3, [r7, #12]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3714      	adds	r7, #20
 800d120:	46bd      	mov	sp, r7
 800d122:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d124 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <osDelay+0x16>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	e000      	b.n	800d13c <osDelay+0x18>
 800d13a:	2301      	movs	r3, #1
 800d13c:	4618      	mov	r0, r3
 800d13e:	f001 f803 	bl	800e148 <vTaskDelay>
  
  return osOK;
 800d142:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d144:	4618      	mov	r0, r3
 800d146:	3710      	adds	r7, #16
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af02      	add	r7, sp, #8
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00f      	beq.n	800d17e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	2b01      	cmp	r3, #1
 800d162:	d10a      	bne.n	800d17a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	2203      	movs	r2, #3
 800d16a:	9200      	str	r2, [sp, #0]
 800d16c:	2200      	movs	r2, #0
 800d16e:	2100      	movs	r1, #0
 800d170:	2001      	movs	r0, #1
 800d172:	f000 f961 	bl	800d438 <xQueueGenericCreateStatic>
 800d176:	4603      	mov	r3, r0
 800d178:	e016      	b.n	800d1a8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800d17a:	2300      	movs	r3, #0
 800d17c:	e014      	b.n	800d1a8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2b01      	cmp	r3, #1
 800d182:	d110      	bne.n	800d1a6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800d184:	2203      	movs	r2, #3
 800d186:	2100      	movs	r1, #0
 800d188:	2001      	movs	r0, #1
 800d18a:	f000 f9cc 	bl	800d526 <xQueueGenericCreate>
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d005      	beq.n	800d1a2 <osSemaphoreCreate+0x56>
 800d196:	2300      	movs	r3, #0
 800d198:	2200      	movs	r2, #0
 800d19a:	2100      	movs	r1, #0
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f000 fa1f 	bl	800d5e0 <xQueueGenericSend>
      return sema;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	e000      	b.n	800d1a8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800d1a6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d1b0:	b590      	push	{r4, r7, lr}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af02      	add	r7, sp, #8
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d011      	beq.n	800d1e6 <osMessageCreate+0x36>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00d      	beq.n	800d1e6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6818      	ldr	r0, [r3, #0]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6859      	ldr	r1, [r3, #4]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	689a      	ldr	r2, [r3, #8]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	68db      	ldr	r3, [r3, #12]
 800d1da:	2400      	movs	r4, #0
 800d1dc:	9400      	str	r4, [sp, #0]
 800d1de:	f000 f92b 	bl	800d438 <xQueueGenericCreateStatic>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	e008      	b.n	800d1f8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6818      	ldr	r0, [r3, #0]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	f000 f998 	bl	800d526 <xQueueGenericCreate>
 800d1f6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd90      	pop	{r4, r7, pc}

0800d200 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f103 0208 	add.w	r2, r3, #8
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f04f 32ff 	mov.w	r2, #4294967295
 800d218:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f103 0208 	add.w	r2, r3, #8
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f103 0208 	add.w	r2, r3, #8
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d234:	bf00      	nop
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d24e:	bf00      	nop
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d25a:	b480      	push	{r7}
 800d25c:	b085      	sub	sp, #20
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	689a      	ldr	r2, [r3, #8]
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	683a      	ldr	r2, [r7, #0]
 800d27e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	683a      	ldr	r2, [r7, #0]
 800d284:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	1c5a      	adds	r2, r3, #1
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	601a      	str	r2, [r3, #0]
}
 800d296:	bf00      	nop
 800d298:	3714      	adds	r7, #20
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	b085      	sub	sp, #20
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b8:	d103      	bne.n	800d2c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	691b      	ldr	r3, [r3, #16]
 800d2be:	60fb      	str	r3, [r7, #12]
 800d2c0:	e00c      	b.n	800d2dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	3308      	adds	r3, #8
 800d2c6:	60fb      	str	r3, [r7, #12]
 800d2c8:	e002      	b.n	800d2d0 <vListInsert+0x2e>
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	60fb      	str	r3, [r7, #12]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d2f6      	bcs.n	800d2ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	683a      	ldr	r2, [r7, #0]
 800d2ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	683a      	ldr	r2, [r7, #0]
 800d2f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	1c5a      	adds	r2, r3, #1
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	601a      	str	r2, [r3, #0]
}
 800d308:	bf00      	nop
 800d30a:	3714      	adds	r7, #20
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d314:	b480      	push	{r7}
 800d316:	b085      	sub	sp, #20
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	691b      	ldr	r3, [r3, #16]
 800d320:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	6892      	ldr	r2, [r2, #8]
 800d32a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	689b      	ldr	r3, [r3, #8]
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	6852      	ldr	r2, [r2, #4]
 800d334:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d103      	bne.n	800d348 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	689a      	ldr	r2, [r3, #8]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	1e5a      	subs	r2, r3, #1
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d10a      	bne.n	800d392 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d380:	f383 8811 	msr	BASEPRI, r3
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d38e:	bf00      	nop
 800d390:	e7fe      	b.n	800d390 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d392:	f001 fe9f 	bl	800f0d4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d39e:	68f9      	ldr	r1, [r7, #12]
 800d3a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3a2:	fb01 f303 	mul.w	r3, r1, r3
 800d3a6:	441a      	add	r2, r3
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c2:	3b01      	subs	r3, #1
 800d3c4:	68f9      	ldr	r1, [r7, #12]
 800d3c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3c8:	fb01 f303 	mul.w	r3, r1, r3
 800d3cc:	441a      	add	r2, r3
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	22ff      	movs	r2, #255	; 0xff
 800d3d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	22ff      	movs	r2, #255	; 0xff
 800d3de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d114      	bne.n	800d412 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d01a      	beq.n	800d426 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	3310      	adds	r3, #16
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f001 f933 	bl	800e660 <xTaskRemoveFromEventList>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d012      	beq.n	800d426 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d400:	4b0c      	ldr	r3, [pc, #48]	; (800d434 <xQueueGenericReset+0xcc>)
 800d402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d406:	601a      	str	r2, [r3, #0]
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	e009      	b.n	800d426 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	3310      	adds	r3, #16
 800d416:	4618      	mov	r0, r3
 800d418:	f7ff fef2 	bl	800d200 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	3324      	adds	r3, #36	; 0x24
 800d420:	4618      	mov	r0, r3
 800d422:	f7ff feed 	bl	800d200 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d426:	f001 fe85 	bl	800f134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d42a:	2301      	movs	r3, #1
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	e000ed04 	.word	0xe000ed04

0800d438 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08e      	sub	sp, #56	; 0x38
 800d43c:	af02      	add	r7, sp, #8
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10a      	bne.n	800d462 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d45e:	bf00      	nop
 800d460:	e7fe      	b.n	800d460 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10a      	bne.n	800d47e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d47a:	bf00      	nop
 800d47c:	e7fe      	b.n	800d47c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d002      	beq.n	800d48a <xQueueGenericCreateStatic+0x52>
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <xQueueGenericCreateStatic+0x56>
 800d48a:	2301      	movs	r3, #1
 800d48c:	e000      	b.n	800d490 <xQueueGenericCreateStatic+0x58>
 800d48e:	2300      	movs	r3, #0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10a      	bne.n	800d4aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	623b      	str	r3, [r7, #32]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d102      	bne.n	800d4b6 <xQueueGenericCreateStatic+0x7e>
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d101      	bne.n	800d4ba <xQueueGenericCreateStatic+0x82>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e000      	b.n	800d4bc <xQueueGenericCreateStatic+0x84>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10a      	bne.n	800d4d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	61fb      	str	r3, [r7, #28]
}
 800d4d2:	bf00      	nop
 800d4d4:	e7fe      	b.n	800d4d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d4d6:	2348      	movs	r3, #72	; 0x48
 800d4d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	2b48      	cmp	r3, #72	; 0x48
 800d4de:	d00a      	beq.n	800d4f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	61bb      	str	r3, [r7, #24]
}
 800d4f2:	bf00      	nop
 800d4f4:	e7fe      	b.n	800d4f4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00d      	beq.n	800d51c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d502:	2201      	movs	r2, #1
 800d504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d508:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	4613      	mov	r3, r2
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	68b9      	ldr	r1, [r7, #8]
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f000 f843 	bl	800d5a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d51e:	4618      	mov	r0, r3
 800d520:	3730      	adds	r7, #48	; 0x30
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d526:	b580      	push	{r7, lr}
 800d528:	b08a      	sub	sp, #40	; 0x28
 800d52a:	af02      	add	r7, sp, #8
 800d52c:	60f8      	str	r0, [r7, #12]
 800d52e:	60b9      	str	r1, [r7, #8]
 800d530:	4613      	mov	r3, r2
 800d532:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10a      	bne.n	800d550 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53e:	f383 8811 	msr	BASEPRI, r3
 800d542:	f3bf 8f6f 	isb	sy
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	613b      	str	r3, [r7, #16]
}
 800d54c:	bf00      	nop
 800d54e:	e7fe      	b.n	800d54e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d102      	bne.n	800d55c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d556:	2300      	movs	r3, #0
 800d558:	61fb      	str	r3, [r7, #28]
 800d55a:	e004      	b.n	800d566 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	fb02 f303 	mul.w	r3, r2, r3
 800d564:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	3348      	adds	r3, #72	; 0x48
 800d56a:	4618      	mov	r0, r3
 800d56c:	f001 fe94 	bl	800f298 <pvPortMalloc>
 800d570:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00f      	beq.n	800d598 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	3348      	adds	r3, #72	; 0x48
 800d57c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	2200      	movs	r2, #0
 800d582:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d586:	79fa      	ldrb	r2, [r7, #7]
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	4613      	mov	r3, r2
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	68b9      	ldr	r1, [r7, #8]
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f000 f805 	bl	800d5a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800d598:	69bb      	ldr	r3, [r7, #24]
	}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3720      	adds	r7, #32
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b084      	sub	sp, #16
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	60f8      	str	r0, [r7, #12]
 800d5aa:	60b9      	str	r1, [r7, #8]
 800d5ac:	607a      	str	r2, [r7, #4]
 800d5ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d103      	bne.n	800d5be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	69ba      	ldr	r2, [r7, #24]
 800d5ba:	601a      	str	r2, [r3, #0]
 800d5bc:	e002      	b.n	800d5c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	68ba      	ldr	r2, [r7, #8]
 800d5ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d5d0:	2101      	movs	r1, #1
 800d5d2:	69b8      	ldr	r0, [r7, #24]
 800d5d4:	f7ff fec8 	bl	800d368 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d5d8:	bf00      	nop
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08e      	sub	sp, #56	; 0x38
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]
 800d5ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d10a      	bne.n	800d612 <xQueueGenericSend+0x32>
	__asm volatile
 800d5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d60e:	bf00      	nop
 800d610:	e7fe      	b.n	800d610 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d103      	bne.n	800d620 <xQueueGenericSend+0x40>
 800d618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d101      	bne.n	800d624 <xQueueGenericSend+0x44>
 800d620:	2301      	movs	r3, #1
 800d622:	e000      	b.n	800d626 <xQueueGenericSend+0x46>
 800d624:	2300      	movs	r3, #0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10a      	bne.n	800d640 <xQueueGenericSend+0x60>
	__asm volatile
 800d62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d63c:	bf00      	nop
 800d63e:	e7fe      	b.n	800d63e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	2b02      	cmp	r3, #2
 800d644:	d103      	bne.n	800d64e <xQueueGenericSend+0x6e>
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d101      	bne.n	800d652 <xQueueGenericSend+0x72>
 800d64e:	2301      	movs	r3, #1
 800d650:	e000      	b.n	800d654 <xQueueGenericSend+0x74>
 800d652:	2300      	movs	r3, #0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10a      	bne.n	800d66e <xQueueGenericSend+0x8e>
	__asm volatile
 800d658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65c:	f383 8811 	msr	BASEPRI, r3
 800d660:	f3bf 8f6f 	isb	sy
 800d664:	f3bf 8f4f 	dsb	sy
 800d668:	623b      	str	r3, [r7, #32]
}
 800d66a:	bf00      	nop
 800d66c:	e7fe      	b.n	800d66c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d66e:	f001 f9bd 	bl	800e9ec <xTaskGetSchedulerState>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d102      	bne.n	800d67e <xQueueGenericSend+0x9e>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d101      	bne.n	800d682 <xQueueGenericSend+0xa2>
 800d67e:	2301      	movs	r3, #1
 800d680:	e000      	b.n	800d684 <xQueueGenericSend+0xa4>
 800d682:	2300      	movs	r3, #0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d10a      	bne.n	800d69e <xQueueGenericSend+0xbe>
	__asm volatile
 800d688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68c:	f383 8811 	msr	BASEPRI, r3
 800d690:	f3bf 8f6f 	isb	sy
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	61fb      	str	r3, [r7, #28]
}
 800d69a:	bf00      	nop
 800d69c:	e7fe      	b.n	800d69c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d69e:	f001 fd19 	bl	800f0d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d302      	bcc.n	800d6b4 <xQueueGenericSend+0xd4>
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	d129      	bne.n	800d708 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6b4:	683a      	ldr	r2, [r7, #0]
 800d6b6:	68b9      	ldr	r1, [r7, #8]
 800d6b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ba:	f000 fa93 	bl	800dbe4 <prvCopyDataToQueue>
 800d6be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d010      	beq.n	800d6ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ca:	3324      	adds	r3, #36	; 0x24
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f000 ffc7 	bl	800e660 <xTaskRemoveFromEventList>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d013      	beq.n	800d700 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d6d8:	4b3f      	ldr	r3, [pc, #252]	; (800d7d8 <xQueueGenericSend+0x1f8>)
 800d6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6de:	601a      	str	r2, [r3, #0]
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	e00a      	b.n	800d700 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d007      	beq.n	800d700 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d6f0:	4b39      	ldr	r3, [pc, #228]	; (800d7d8 <xQueueGenericSend+0x1f8>)
 800d6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d700:	f001 fd18 	bl	800f134 <vPortExitCritical>
				return pdPASS;
 800d704:	2301      	movs	r3, #1
 800d706:	e063      	b.n	800d7d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d103      	bne.n	800d716 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d70e:	f001 fd11 	bl	800f134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d712:	2300      	movs	r3, #0
 800d714:	e05c      	b.n	800d7d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d106      	bne.n	800d72a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d71c:	f107 0314 	add.w	r3, r7, #20
 800d720:	4618      	mov	r0, r3
 800d722:	f000 ffff 	bl	800e724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d726:	2301      	movs	r3, #1
 800d728:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d72a:	f001 fd03 	bl	800f134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d72e:	f000 fda9 	bl	800e284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d732:	f001 fccf 	bl	800f0d4 <vPortEnterCritical>
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d73c:	b25b      	sxtb	r3, r3
 800d73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d742:	d103      	bne.n	800d74c <xQueueGenericSend+0x16c>
 800d744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d746:	2200      	movs	r2, #0
 800d748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d752:	b25b      	sxtb	r3, r3
 800d754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d758:	d103      	bne.n	800d762 <xQueueGenericSend+0x182>
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	2200      	movs	r2, #0
 800d75e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d762:	f001 fce7 	bl	800f134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d766:	1d3a      	adds	r2, r7, #4
 800d768:	f107 0314 	add.w	r3, r7, #20
 800d76c:	4611      	mov	r1, r2
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 ffee 	bl	800e750 <xTaskCheckForTimeOut>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d124      	bne.n	800d7c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d77c:	f000 fb2a 	bl	800ddd4 <prvIsQueueFull>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d018      	beq.n	800d7b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d788:	3310      	adds	r3, #16
 800d78a:	687a      	ldr	r2, [r7, #4]
 800d78c:	4611      	mov	r1, r2
 800d78e:	4618      	mov	r0, r3
 800d790:	f000 ff42 	bl	800e618 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d796:	f000 fab5 	bl	800dd04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d79a:	f000 fd81 	bl	800e2a0 <xTaskResumeAll>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f47f af7c 	bne.w	800d69e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d7a6:	4b0c      	ldr	r3, [pc, #48]	; (800d7d8 <xQueueGenericSend+0x1f8>)
 800d7a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7ac:	601a      	str	r2, [r3, #0]
 800d7ae:	f3bf 8f4f 	dsb	sy
 800d7b2:	f3bf 8f6f 	isb	sy
 800d7b6:	e772      	b.n	800d69e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d7b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7ba:	f000 faa3 	bl	800dd04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7be:	f000 fd6f 	bl	800e2a0 <xTaskResumeAll>
 800d7c2:	e76c      	b.n	800d69e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d7c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7c6:	f000 fa9d 	bl	800dd04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7ca:	f000 fd69 	bl	800e2a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d7ce:	2300      	movs	r3, #0
		}
	}
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3738      	adds	r7, #56	; 0x38
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	e000ed04 	.word	0xe000ed04

0800d7dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08c      	sub	sp, #48	; 0x30
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10a      	bne.n	800d80c <xQueueReceive+0x30>
	__asm volatile
 800d7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fa:	f383 8811 	msr	BASEPRI, r3
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	623b      	str	r3, [r7, #32]
}
 800d808:	bf00      	nop
 800d80a:	e7fe      	b.n	800d80a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d103      	bne.n	800d81a <xQueueReceive+0x3e>
 800d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <xQueueReceive+0x42>
 800d81a:	2301      	movs	r3, #1
 800d81c:	e000      	b.n	800d820 <xQueueReceive+0x44>
 800d81e:	2300      	movs	r3, #0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10a      	bne.n	800d83a <xQueueReceive+0x5e>
	__asm volatile
 800d824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d828:	f383 8811 	msr	BASEPRI, r3
 800d82c:	f3bf 8f6f 	isb	sy
 800d830:	f3bf 8f4f 	dsb	sy
 800d834:	61fb      	str	r3, [r7, #28]
}
 800d836:	bf00      	nop
 800d838:	e7fe      	b.n	800d838 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d83a:	f001 f8d7 	bl	800e9ec <xTaskGetSchedulerState>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d102      	bne.n	800d84a <xQueueReceive+0x6e>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <xQueueReceive+0x72>
 800d84a:	2301      	movs	r3, #1
 800d84c:	e000      	b.n	800d850 <xQueueReceive+0x74>
 800d84e:	2300      	movs	r3, #0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10a      	bne.n	800d86a <xQueueReceive+0x8e>
	__asm volatile
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	61bb      	str	r3, [r7, #24]
}
 800d866:	bf00      	nop
 800d868:	e7fe      	b.n	800d868 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d86a:	f001 fc33 	bl	800f0d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d872:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	2b00      	cmp	r3, #0
 800d878:	d01f      	beq.n	800d8ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d87a:	68b9      	ldr	r1, [r7, #8]
 800d87c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d87e:	f000 fa1b 	bl	800dcb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	1e5a      	subs	r2, r3, #1
 800d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d888:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88c:	691b      	ldr	r3, [r3, #16]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00f      	beq.n	800d8b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d894:	3310      	adds	r3, #16
 800d896:	4618      	mov	r0, r3
 800d898:	f000 fee2 	bl	800e660 <xTaskRemoveFromEventList>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d007      	beq.n	800d8b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8a2:	4b3d      	ldr	r3, [pc, #244]	; (800d998 <xQueueReceive+0x1bc>)
 800d8a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8a8:	601a      	str	r2, [r3, #0]
 800d8aa:	f3bf 8f4f 	dsb	sy
 800d8ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d8b2:	f001 fc3f 	bl	800f134 <vPortExitCritical>
				return pdPASS;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e069      	b.n	800d98e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d103      	bne.n	800d8c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d8c0:	f001 fc38 	bl	800f134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	e062      	b.n	800d98e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d106      	bne.n	800d8dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8ce:	f107 0310 	add.w	r3, r7, #16
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f000 ff26 	bl	800e724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8dc:	f001 fc2a 	bl	800f134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8e0:	f000 fcd0 	bl	800e284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8e4:	f001 fbf6 	bl	800f0d4 <vPortEnterCritical>
 800d8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8ee:	b25b      	sxtb	r3, r3
 800d8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f4:	d103      	bne.n	800d8fe <xQueueReceive+0x122>
 800d8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d904:	b25b      	sxtb	r3, r3
 800d906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90a:	d103      	bne.n	800d914 <xQueueReceive+0x138>
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d914:	f001 fc0e 	bl	800f134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d918:	1d3a      	adds	r2, r7, #4
 800d91a:	f107 0310 	add.w	r3, r7, #16
 800d91e:	4611      	mov	r1, r2
 800d920:	4618      	mov	r0, r3
 800d922:	f000 ff15 	bl	800e750 <xTaskCheckForTimeOut>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d123      	bne.n	800d974 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d92c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d92e:	f000 fa3b 	bl	800dda8 <prvIsQueueEmpty>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d017      	beq.n	800d968 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	3324      	adds	r3, #36	; 0x24
 800d93c:	687a      	ldr	r2, [r7, #4]
 800d93e:	4611      	mov	r1, r2
 800d940:	4618      	mov	r0, r3
 800d942:	f000 fe69 	bl	800e618 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d948:	f000 f9dc 	bl	800dd04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d94c:	f000 fca8 	bl	800e2a0 <xTaskResumeAll>
 800d950:	4603      	mov	r3, r0
 800d952:	2b00      	cmp	r3, #0
 800d954:	d189      	bne.n	800d86a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d956:	4b10      	ldr	r3, [pc, #64]	; (800d998 <xQueueReceive+0x1bc>)
 800d958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	f3bf 8f6f 	isb	sy
 800d966:	e780      	b.n	800d86a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d96a:	f000 f9cb 	bl	800dd04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d96e:	f000 fc97 	bl	800e2a0 <xTaskResumeAll>
 800d972:	e77a      	b.n	800d86a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d976:	f000 f9c5 	bl	800dd04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d97a:	f000 fc91 	bl	800e2a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d97e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d980:	f000 fa12 	bl	800dda8 <prvIsQueueEmpty>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	f43f af6f 	beq.w	800d86a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d98c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3730      	adds	r7, #48	; 0x30
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	e000ed04 	.word	0xe000ed04

0800d99c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b08e      	sub	sp, #56	; 0x38
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10a      	bne.n	800d9ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	623b      	str	r3, [r7, #32]
}
 800d9ca:	bf00      	nop
 800d9cc:	e7fe      	b.n	800d9cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00a      	beq.n	800d9ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9da:	f383 8811 	msr	BASEPRI, r3
 800d9de:	f3bf 8f6f 	isb	sy
 800d9e2:	f3bf 8f4f 	dsb	sy
 800d9e6:	61fb      	str	r3, [r7, #28]
}
 800d9e8:	bf00      	nop
 800d9ea:	e7fe      	b.n	800d9ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9ec:	f000 fffe 	bl	800e9ec <xTaskGetSchedulerState>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d102      	bne.n	800d9fc <xQueueSemaphoreTake+0x60>
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d101      	bne.n	800da00 <xQueueSemaphoreTake+0x64>
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	e000      	b.n	800da02 <xQueueSemaphoreTake+0x66>
 800da00:	2300      	movs	r3, #0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d10a      	bne.n	800da1c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800da06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0a:	f383 8811 	msr	BASEPRI, r3
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	f3bf 8f4f 	dsb	sy
 800da16:	61bb      	str	r3, [r7, #24]
}
 800da18:	bf00      	nop
 800da1a:	e7fe      	b.n	800da1a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800da1c:	f001 fb5a 	bl	800f0d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800da20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da24:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800da26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d024      	beq.n	800da76 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	1e5a      	subs	r2, r3, #1
 800da30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da32:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d104      	bne.n	800da46 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800da3c:	f001 f9a0 	bl	800ed80 <pvTaskIncrementMutexHeldCount>
 800da40:	4602      	mov	r2, r0
 800da42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da44:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d00f      	beq.n	800da6e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da50:	3310      	adds	r3, #16
 800da52:	4618      	mov	r0, r3
 800da54:	f000 fe04 	bl	800e660 <xTaskRemoveFromEventList>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d007      	beq.n	800da6e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da5e:	4b54      	ldr	r3, [pc, #336]	; (800dbb0 <xQueueSemaphoreTake+0x214>)
 800da60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	f3bf 8f4f 	dsb	sy
 800da6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da6e:	f001 fb61 	bl	800f134 <vPortExitCritical>
				return pdPASS;
 800da72:	2301      	movs	r3, #1
 800da74:	e097      	b.n	800dba6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d111      	bne.n	800daa0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800da7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00a      	beq.n	800da98 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da86:	f383 8811 	msr	BASEPRI, r3
 800da8a:	f3bf 8f6f 	isb	sy
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	617b      	str	r3, [r7, #20]
}
 800da94:	bf00      	nop
 800da96:	e7fe      	b.n	800da96 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800da98:	f001 fb4c 	bl	800f134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da9c:	2300      	movs	r3, #0
 800da9e:	e082      	b.n	800dba6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800daa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d106      	bne.n	800dab4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800daa6:	f107 030c 	add.w	r3, r7, #12
 800daaa:	4618      	mov	r0, r3
 800daac:	f000 fe3a 	bl	800e724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dab0:	2301      	movs	r3, #1
 800dab2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dab4:	f001 fb3e 	bl	800f134 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dab8:	f000 fbe4 	bl	800e284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dabc:	f001 fb0a 	bl	800f0d4 <vPortEnterCritical>
 800dac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dac6:	b25b      	sxtb	r3, r3
 800dac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dacc:	d103      	bne.n	800dad6 <xQueueSemaphoreTake+0x13a>
 800dace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad0:	2200      	movs	r2, #0
 800dad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dadc:	b25b      	sxtb	r3, r3
 800dade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dae2:	d103      	bne.n	800daec <xQueueSemaphoreTake+0x150>
 800dae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae6:	2200      	movs	r2, #0
 800dae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800daec:	f001 fb22 	bl	800f134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800daf0:	463a      	mov	r2, r7
 800daf2:	f107 030c 	add.w	r3, r7, #12
 800daf6:	4611      	mov	r1, r2
 800daf8:	4618      	mov	r0, r3
 800dafa:	f000 fe29 	bl	800e750 <xTaskCheckForTimeOut>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d132      	bne.n	800db6a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db06:	f000 f94f 	bl	800dda8 <prvIsQueueEmpty>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d026      	beq.n	800db5e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d109      	bne.n	800db2c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800db18:	f001 fadc 	bl	800f0d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800db1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	4618      	mov	r0, r3
 800db22:	f000 ff81 	bl	800ea28 <xTaskPriorityInherit>
 800db26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800db28:	f001 fb04 	bl	800f134 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2e:	3324      	adds	r3, #36	; 0x24
 800db30:	683a      	ldr	r2, [r7, #0]
 800db32:	4611      	mov	r1, r2
 800db34:	4618      	mov	r0, r3
 800db36:	f000 fd6f 	bl	800e618 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db3c:	f000 f8e2 	bl	800dd04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db40:	f000 fbae 	bl	800e2a0 <xTaskResumeAll>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	f47f af68 	bne.w	800da1c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800db4c:	4b18      	ldr	r3, [pc, #96]	; (800dbb0 <xQueueSemaphoreTake+0x214>)
 800db4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db52:	601a      	str	r2, [r3, #0]
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	f3bf 8f6f 	isb	sy
 800db5c:	e75e      	b.n	800da1c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800db5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db60:	f000 f8d0 	bl	800dd04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db64:	f000 fb9c 	bl	800e2a0 <xTaskResumeAll>
 800db68:	e758      	b.n	800da1c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800db6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db6c:	f000 f8ca 	bl	800dd04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db70:	f000 fb96 	bl	800e2a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db76:	f000 f917 	bl	800dda8 <prvIsQueueEmpty>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f43f af4d 	beq.w	800da1c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800db82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00d      	beq.n	800dba4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800db88:	f001 faa4 	bl	800f0d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800db8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db8e:	f000 f811 	bl	800dbb4 <prvGetDisinheritPriorityAfterTimeout>
 800db92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db9a:	4618      	mov	r0, r3
 800db9c:	f001 f850 	bl	800ec40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dba0:	f001 fac8 	bl	800f134 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dba4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3738      	adds	r7, #56	; 0x38
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	e000ed04 	.word	0xe000ed04

0800dbb4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d006      	beq.n	800dbd2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f1c3 0307 	rsb	r3, r3, #7
 800dbce:	60fb      	str	r3, [r7, #12]
 800dbd0:	e001      	b.n	800dbd6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
	}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3714      	adds	r7, #20
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b086      	sub	sp, #24
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d10d      	bne.n	800dc1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d14d      	bne.n	800dca6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f000 ff90 	bl	800eb34 <xTaskPriorityDisinherit>
 800dc14:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	605a      	str	r2, [r3, #4]
 800dc1c:	e043      	b.n	800dca6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d119      	bne.n	800dc58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6898      	ldr	r0, [r3, #8]
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	68b9      	ldr	r1, [r7, #8]
 800dc30:	f002 fb4d 	bl	80102ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	689a      	ldr	r2, [r3, #8]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc3c:	441a      	add	r2, r3
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	689a      	ldr	r2, [r3, #8]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d32b      	bcc.n	800dca6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	609a      	str	r2, [r3, #8]
 800dc56:	e026      	b.n	800dca6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	68d8      	ldr	r0, [r3, #12]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc60:	461a      	mov	r2, r3
 800dc62:	68b9      	ldr	r1, [r7, #8]
 800dc64:	f002 fb33 	bl	80102ce <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	68da      	ldr	r2, [r3, #12]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc70:	425b      	negs	r3, r3
 800dc72:	441a      	add	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	68da      	ldr	r2, [r3, #12]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d207      	bcs.n	800dc94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	685a      	ldr	r2, [r3, #4]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc8c:	425b      	negs	r3, r3
 800dc8e:	441a      	add	r2, r3
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d105      	bne.n	800dca6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	3b01      	subs	r3, #1
 800dca4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	1c5a      	adds	r2, r3, #1
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dcae:	697b      	ldr	r3, [r7, #20]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3718      	adds	r7, #24
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d018      	beq.n	800dcfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	68da      	ldr	r2, [r3, #12]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd2:	441a      	add	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	68da      	ldr	r2, [r3, #12]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d303      	bcc.n	800dcec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	68d9      	ldr	r1, [r3, #12]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	6838      	ldr	r0, [r7, #0]
 800dcf8:	f002 fae9 	bl	80102ce <memcpy>
	}
}
 800dcfc:	bf00      	nop
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd0c:	f001 f9e2 	bl	800f0d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd18:	e011      	b.n	800dd3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d012      	beq.n	800dd48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	3324      	adds	r3, #36	; 0x24
 800dd26:	4618      	mov	r0, r3
 800dd28:	f000 fc9a 	bl	800e660 <xTaskRemoveFromEventList>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d001      	beq.n	800dd36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd32:	f000 fd6f 	bl	800e814 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd36:	7bfb      	ldrb	r3, [r7, #15]
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	dce9      	bgt.n	800dd1a <prvUnlockQueue+0x16>
 800dd46:	e000      	b.n	800dd4a <prvUnlockQueue+0x46>
					break;
 800dd48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	22ff      	movs	r2, #255	; 0xff
 800dd4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dd52:	f001 f9ef 	bl	800f134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd56:	f001 f9bd 	bl	800f0d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd62:	e011      	b.n	800dd88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	691b      	ldr	r3, [r3, #16]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d012      	beq.n	800dd92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3310      	adds	r3, #16
 800dd70:	4618      	mov	r0, r3
 800dd72:	f000 fc75 	bl	800e660 <xTaskRemoveFromEventList>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd7c:	f000 fd4a 	bl	800e814 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd80:	7bbb      	ldrb	r3, [r7, #14]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	dce9      	bgt.n	800dd64 <prvUnlockQueue+0x60>
 800dd90:	e000      	b.n	800dd94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	22ff      	movs	r2, #255	; 0xff
 800dd98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dd9c:	f001 f9ca 	bl	800f134 <vPortExitCritical>
}
 800dda0:	bf00      	nop
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddb0:	f001 f990 	bl	800f0d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d102      	bne.n	800ddc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	60fb      	str	r3, [r7, #12]
 800ddc0:	e001      	b.n	800ddc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddc6:	f001 f9b5 	bl	800f134 <vPortExitCritical>

	return xReturn;
 800ddca:	68fb      	ldr	r3, [r7, #12]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3710      	adds	r7, #16
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dddc:	f001 f97a 	bl	800f0d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d102      	bne.n	800ddf2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ddec:	2301      	movs	r3, #1
 800ddee:	60fb      	str	r3, [r7, #12]
 800ddf0:	e001      	b.n	800ddf6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddf6:	f001 f99d 	bl	800f134 <vPortExitCritical>

	return xReturn;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800de04:	b580      	push	{r7, lr}
 800de06:	b08e      	sub	sp, #56	; 0x38
 800de08:	af04      	add	r7, sp, #16
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]
 800de10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800de12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10a      	bne.n	800de2e <xTaskCreateStatic+0x2a>
	__asm volatile
 800de18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de1c:	f383 8811 	msr	BASEPRI, r3
 800de20:	f3bf 8f6f 	isb	sy
 800de24:	f3bf 8f4f 	dsb	sy
 800de28:	623b      	str	r3, [r7, #32]
}
 800de2a:	bf00      	nop
 800de2c:	e7fe      	b.n	800de2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800de2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de30:	2b00      	cmp	r3, #0
 800de32:	d10a      	bne.n	800de4a <xTaskCreateStatic+0x46>
	__asm volatile
 800de34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de38:	f383 8811 	msr	BASEPRI, r3
 800de3c:	f3bf 8f6f 	isb	sy
 800de40:	f3bf 8f4f 	dsb	sy
 800de44:	61fb      	str	r3, [r7, #28]
}
 800de46:	bf00      	nop
 800de48:	e7fe      	b.n	800de48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de4a:	23a0      	movs	r3, #160	; 0xa0
 800de4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	2ba0      	cmp	r3, #160	; 0xa0
 800de52:	d00a      	beq.n	800de6a <xTaskCreateStatic+0x66>
	__asm volatile
 800de54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de58:	f383 8811 	msr	BASEPRI, r3
 800de5c:	f3bf 8f6f 	isb	sy
 800de60:	f3bf 8f4f 	dsb	sy
 800de64:	61bb      	str	r3, [r7, #24]
}
 800de66:	bf00      	nop
 800de68:	e7fe      	b.n	800de68 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d01e      	beq.n	800deae <xTaskCreateStatic+0xaa>
 800de70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de72:	2b00      	cmp	r3, #0
 800de74:	d01b      	beq.n	800deae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de82:	2202      	movs	r2, #2
 800de84:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de88:	2300      	movs	r3, #0
 800de8a:	9303      	str	r3, [sp, #12]
 800de8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8e:	9302      	str	r3, [sp, #8]
 800de90:	f107 0314 	add.w	r3, r7, #20
 800de94:	9301      	str	r3, [sp, #4]
 800de96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	68b9      	ldr	r1, [r7, #8]
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f000 f851 	bl	800df48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dea6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dea8:	f000 f8e4 	bl	800e074 <prvAddNewTaskToReadyList>
 800deac:	e001      	b.n	800deb2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800deae:	2300      	movs	r3, #0
 800deb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800deb2:	697b      	ldr	r3, [r7, #20]
	}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3728      	adds	r7, #40	; 0x28
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800debc:	b580      	push	{r7, lr}
 800debe:	b08c      	sub	sp, #48	; 0x30
 800dec0:	af04      	add	r7, sp, #16
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	603b      	str	r3, [r7, #0]
 800dec8:	4613      	mov	r3, r2
 800deca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800decc:	88fb      	ldrh	r3, [r7, #6]
 800dece:	009b      	lsls	r3, r3, #2
 800ded0:	4618      	mov	r0, r3
 800ded2:	f001 f9e1 	bl	800f298 <pvPortMalloc>
 800ded6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d00e      	beq.n	800defc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800dede:	20a0      	movs	r0, #160	; 0xa0
 800dee0:	f001 f9da 	bl	800f298 <pvPortMalloc>
 800dee4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d003      	beq.n	800def4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	697a      	ldr	r2, [r7, #20]
 800def0:	631a      	str	r2, [r3, #48]	; 0x30
 800def2:	e005      	b.n	800df00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800def4:	6978      	ldr	r0, [r7, #20]
 800def6:	f001 fa93 	bl	800f420 <vPortFree>
 800defa:	e001      	b.n	800df00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800defc:	2300      	movs	r3, #0
 800defe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d017      	beq.n	800df36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800df0e:	88fa      	ldrh	r2, [r7, #6]
 800df10:	2300      	movs	r3, #0
 800df12:	9303      	str	r3, [sp, #12]
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	9302      	str	r3, [sp, #8]
 800df18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1a:	9301      	str	r3, [sp, #4]
 800df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	68b9      	ldr	r1, [r7, #8]
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f000 f80f 	bl	800df48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df2a:	69f8      	ldr	r0, [r7, #28]
 800df2c:	f000 f8a2 	bl	800e074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800df30:	2301      	movs	r3, #1
 800df32:	61bb      	str	r3, [r7, #24]
 800df34:	e002      	b.n	800df3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800df36:	f04f 33ff 	mov.w	r3, #4294967295
 800df3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800df3c:	69bb      	ldr	r3, [r7, #24]
	}
 800df3e:	4618      	mov	r0, r3
 800df40:	3720      	adds	r7, #32
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
	...

0800df48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b088      	sub	sp, #32
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	607a      	str	r2, [r7, #4]
 800df54:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800df56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800df60:	3b01      	subs	r3, #1
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	4413      	add	r3, r2
 800df66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	f023 0307 	bic.w	r3, r3, #7
 800df6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	f003 0307 	and.w	r3, r3, #7
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00a      	beq.n	800df90 <prvInitialiseNewTask+0x48>
	__asm volatile
 800df7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7e:	f383 8811 	msr	BASEPRI, r3
 800df82:	f3bf 8f6f 	isb	sy
 800df86:	f3bf 8f4f 	dsb	sy
 800df8a:	617b      	str	r3, [r7, #20]
}
 800df8c:	bf00      	nop
 800df8e:	e7fe      	b.n	800df8e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df90:	2300      	movs	r3, #0
 800df92:	61fb      	str	r3, [r7, #28]
 800df94:	e012      	b.n	800dfbc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df96:	68ba      	ldr	r2, [r7, #8]
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	4413      	add	r3, r2
 800df9c:	7819      	ldrb	r1, [r3, #0]
 800df9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	3334      	adds	r3, #52	; 0x34
 800dfa6:	460a      	mov	r2, r1
 800dfa8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800dfaa:	68ba      	ldr	r2, [r7, #8]
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	4413      	add	r3, r2
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d006      	beq.n	800dfc4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	61fb      	str	r3, [r7, #28]
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	2b0f      	cmp	r3, #15
 800dfc0:	d9e9      	bls.n	800df96 <prvInitialiseNewTask+0x4e>
 800dfc2:	e000      	b.n	800dfc6 <prvInitialiseNewTask+0x7e>
		{
			break;
 800dfc4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd0:	2b06      	cmp	r3, #6
 800dfd2:	d901      	bls.n	800dfd8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dfd4:	2306      	movs	r3, #6
 800dfd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfec:	3304      	adds	r3, #4
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7ff f926 	bl	800d240 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff6:	3318      	adds	r3, #24
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7ff f921 	bl	800d240 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e002:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e006:	f1c3 0207 	rsb	r2, r3, #7
 800e00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e012:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e016:	2200      	movs	r2, #0
 800e018:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01e:	2200      	movs	r2, #0
 800e020:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e026:	334c      	adds	r3, #76	; 0x4c
 800e028:	224c      	movs	r2, #76	; 0x4c
 800e02a:	2100      	movs	r1, #0
 800e02c:	4618      	mov	r0, r3
 800e02e:	f002 f878 	bl	8010122 <memset>
 800e032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e034:	4a0c      	ldr	r2, [pc, #48]	; (800e068 <prvInitialiseNewTask+0x120>)
 800e036:	651a      	str	r2, [r3, #80]	; 0x50
 800e038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03a:	4a0c      	ldr	r2, [pc, #48]	; (800e06c <prvInitialiseNewTask+0x124>)
 800e03c:	655a      	str	r2, [r3, #84]	; 0x54
 800e03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e040:	4a0b      	ldr	r2, [pc, #44]	; (800e070 <prvInitialiseNewTask+0x128>)
 800e042:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e044:	683a      	ldr	r2, [r7, #0]
 800e046:	68f9      	ldr	r1, [r7, #12]
 800e048:	69b8      	ldr	r0, [r7, #24]
 800e04a:	f000 ff13 	bl	800ee74 <pxPortInitialiseStack>
 800e04e:	4602      	mov	r2, r0
 800e050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e052:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800e054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e056:	2b00      	cmp	r3, #0
 800e058:	d002      	beq.n	800e060 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e05e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e060:	bf00      	nop
 800e062:	3720      	adds	r7, #32
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	200058b4 	.word	0x200058b4
 800e06c:	2000591c 	.word	0x2000591c
 800e070:	20005984 	.word	0x20005984

0800e074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e07c:	f001 f82a 	bl	800f0d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e080:	4b2a      	ldr	r3, [pc, #168]	; (800e12c <prvAddNewTaskToReadyList+0xb8>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	3301      	adds	r3, #1
 800e086:	4a29      	ldr	r2, [pc, #164]	; (800e12c <prvAddNewTaskToReadyList+0xb8>)
 800e088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e08a:	4b29      	ldr	r3, [pc, #164]	; (800e130 <prvAddNewTaskToReadyList+0xbc>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d109      	bne.n	800e0a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e092:	4a27      	ldr	r2, [pc, #156]	; (800e130 <prvAddNewTaskToReadyList+0xbc>)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e098:	4b24      	ldr	r3, [pc, #144]	; (800e12c <prvAddNewTaskToReadyList+0xb8>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d110      	bne.n	800e0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e0a0:	f000 fbdc 	bl	800e85c <prvInitialiseTaskLists>
 800e0a4:	e00d      	b.n	800e0c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e0a6:	4b23      	ldr	r3, [pc, #140]	; (800e134 <prvAddNewTaskToReadyList+0xc0>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d109      	bne.n	800e0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e0ae:	4b20      	ldr	r3, [pc, #128]	; (800e130 <prvAddNewTaskToReadyList+0xbc>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d802      	bhi.n	800e0c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e0bc:	4a1c      	ldr	r2, [pc, #112]	; (800e130 <prvAddNewTaskToReadyList+0xbc>)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e0c2:	4b1d      	ldr	r3, [pc, #116]	; (800e138 <prvAddNewTaskToReadyList+0xc4>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	4a1b      	ldr	r2, [pc, #108]	; (800e138 <prvAddNewTaskToReadyList+0xc4>)
 800e0ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	409a      	lsls	r2, r3
 800e0d4:	4b19      	ldr	r3, [pc, #100]	; (800e13c <prvAddNewTaskToReadyList+0xc8>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	4a18      	ldr	r2, [pc, #96]	; (800e13c <prvAddNewTaskToReadyList+0xc8>)
 800e0dc:	6013      	str	r3, [r2, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	4413      	add	r3, r2
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	4a15      	ldr	r2, [pc, #84]	; (800e140 <prvAddNewTaskToReadyList+0xcc>)
 800e0ec:	441a      	add	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	3304      	adds	r3, #4
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	f7ff f8b0 	bl	800d25a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e0fa:	f001 f81b 	bl	800f134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e0fe:	4b0d      	ldr	r3, [pc, #52]	; (800e134 <prvAddNewTaskToReadyList+0xc0>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00e      	beq.n	800e124 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e106:	4b0a      	ldr	r3, [pc, #40]	; (800e130 <prvAddNewTaskToReadyList+0xbc>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e110:	429a      	cmp	r2, r3
 800e112:	d207      	bcs.n	800e124 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e114:	4b0b      	ldr	r3, [pc, #44]	; (800e144 <prvAddNewTaskToReadyList+0xd0>)
 800e116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e11a:	601a      	str	r2, [r3, #0]
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e124:	bf00      	nop
 800e126:	3708      	adds	r7, #8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	20000a48 	.word	0x20000a48
 800e130:	20000948 	.word	0x20000948
 800e134:	20000a54 	.word	0x20000a54
 800e138:	20000a64 	.word	0x20000a64
 800e13c:	20000a50 	.word	0x20000a50
 800e140:	2000094c 	.word	0x2000094c
 800e144:	e000ed04 	.word	0xe000ed04

0800e148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e150:	2300      	movs	r3, #0
 800e152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d017      	beq.n	800e18a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e15a:	4b13      	ldr	r3, [pc, #76]	; (800e1a8 <vTaskDelay+0x60>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00a      	beq.n	800e178 <vTaskDelay+0x30>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	60bb      	str	r3, [r7, #8]
}
 800e174:	bf00      	nop
 800e176:	e7fe      	b.n	800e176 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e178:	f000 f884 	bl	800e284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e17c:	2100      	movs	r1, #0
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f000 fe12 	bl	800eda8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e184:	f000 f88c 	bl	800e2a0 <xTaskResumeAll>
 800e188:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d107      	bne.n	800e1a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e190:	4b06      	ldr	r3, [pc, #24]	; (800e1ac <vTaskDelay+0x64>)
 800e192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e196:	601a      	str	r2, [r3, #0]
 800e198:	f3bf 8f4f 	dsb	sy
 800e19c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e1a0:	bf00      	nop
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	20000a70 	.word	0x20000a70
 800e1ac:	e000ed04 	.word	0xe000ed04

0800e1b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b08a      	sub	sp, #40	; 0x28
 800e1b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1be:	463a      	mov	r2, r7
 800e1c0:	1d39      	adds	r1, r7, #4
 800e1c2:	f107 0308 	add.w	r3, r7, #8
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7f2 fd66 	bl	8000c98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e1cc:	6839      	ldr	r1, [r7, #0]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	68ba      	ldr	r2, [r7, #8]
 800e1d2:	9202      	str	r2, [sp, #8]
 800e1d4:	9301      	str	r3, [sp, #4]
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	9300      	str	r3, [sp, #0]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	460a      	mov	r2, r1
 800e1de:	4921      	ldr	r1, [pc, #132]	; (800e264 <vTaskStartScheduler+0xb4>)
 800e1e0:	4821      	ldr	r0, [pc, #132]	; (800e268 <vTaskStartScheduler+0xb8>)
 800e1e2:	f7ff fe0f 	bl	800de04 <xTaskCreateStatic>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	4a20      	ldr	r2, [pc, #128]	; (800e26c <vTaskStartScheduler+0xbc>)
 800e1ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e1ec:	4b1f      	ldr	r3, [pc, #124]	; (800e26c <vTaskStartScheduler+0xbc>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	617b      	str	r3, [r7, #20]
 800e1f8:	e001      	b.n	800e1fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d11b      	bne.n	800e23c <vTaskStartScheduler+0x8c>
	__asm volatile
 800e204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e208:	f383 8811 	msr	BASEPRI, r3
 800e20c:	f3bf 8f6f 	isb	sy
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	613b      	str	r3, [r7, #16]
}
 800e216:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e218:	4b15      	ldr	r3, [pc, #84]	; (800e270 <vTaskStartScheduler+0xc0>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	334c      	adds	r3, #76	; 0x4c
 800e21e:	4a15      	ldr	r2, [pc, #84]	; (800e274 <vTaskStartScheduler+0xc4>)
 800e220:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e222:	4b15      	ldr	r3, [pc, #84]	; (800e278 <vTaskStartScheduler+0xc8>)
 800e224:	f04f 32ff 	mov.w	r2, #4294967295
 800e228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e22a:	4b14      	ldr	r3, [pc, #80]	; (800e27c <vTaskStartScheduler+0xcc>)
 800e22c:	2201      	movs	r2, #1
 800e22e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e230:	4b13      	ldr	r3, [pc, #76]	; (800e280 <vTaskStartScheduler+0xd0>)
 800e232:	2200      	movs	r2, #0
 800e234:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e236:	f000 feab 	bl	800ef90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e23a:	e00e      	b.n	800e25a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e242:	d10a      	bne.n	800e25a <vTaskStartScheduler+0xaa>
	__asm volatile
 800e244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e248:	f383 8811 	msr	BASEPRI, r3
 800e24c:	f3bf 8f6f 	isb	sy
 800e250:	f3bf 8f4f 	dsb	sy
 800e254:	60fb      	str	r3, [r7, #12]
}
 800e256:	bf00      	nop
 800e258:	e7fe      	b.n	800e258 <vTaskStartScheduler+0xa8>
}
 800e25a:	bf00      	nop
 800e25c:	3718      	adds	r7, #24
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	080121c8 	.word	0x080121c8
 800e268:	0800e82d 	.word	0x0800e82d
 800e26c:	20000a6c 	.word	0x20000a6c
 800e270:	20000948 	.word	0x20000948
 800e274:	2000006c 	.word	0x2000006c
 800e278:	20000a68 	.word	0x20000a68
 800e27c:	20000a54 	.word	0x20000a54
 800e280:	20000a4c 	.word	0x20000a4c

0800e284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e284:	b480      	push	{r7}
 800e286:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e288:	4b04      	ldr	r3, [pc, #16]	; (800e29c <vTaskSuspendAll+0x18>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3301      	adds	r3, #1
 800e28e:	4a03      	ldr	r2, [pc, #12]	; (800e29c <vTaskSuspendAll+0x18>)
 800e290:	6013      	str	r3, [r2, #0]
}
 800e292:	bf00      	nop
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr
 800e29c:	20000a70 	.word	0x20000a70

0800e2a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e2ae:	4b41      	ldr	r3, [pc, #260]	; (800e3b4 <xTaskResumeAll+0x114>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d10a      	bne.n	800e2cc <xTaskResumeAll+0x2c>
	__asm volatile
 800e2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ba:	f383 8811 	msr	BASEPRI, r3
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f3bf 8f4f 	dsb	sy
 800e2c6:	603b      	str	r3, [r7, #0]
}
 800e2c8:	bf00      	nop
 800e2ca:	e7fe      	b.n	800e2ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e2cc:	f000 ff02 	bl	800f0d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e2d0:	4b38      	ldr	r3, [pc, #224]	; (800e3b4 <xTaskResumeAll+0x114>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	3b01      	subs	r3, #1
 800e2d6:	4a37      	ldr	r2, [pc, #220]	; (800e3b4 <xTaskResumeAll+0x114>)
 800e2d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2da:	4b36      	ldr	r3, [pc, #216]	; (800e3b4 <xTaskResumeAll+0x114>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d161      	bne.n	800e3a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e2e2:	4b35      	ldr	r3, [pc, #212]	; (800e3b8 <xTaskResumeAll+0x118>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d05d      	beq.n	800e3a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2ea:	e02e      	b.n	800e34a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e2ec:	4b33      	ldr	r3, [pc, #204]	; (800e3bc <xTaskResumeAll+0x11c>)
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	3318      	adds	r3, #24
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7ff f80b 	bl	800d314 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	3304      	adds	r3, #4
 800e302:	4618      	mov	r0, r3
 800e304:	f7ff f806 	bl	800d314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30c:	2201      	movs	r2, #1
 800e30e:	409a      	lsls	r2, r3
 800e310:	4b2b      	ldr	r3, [pc, #172]	; (800e3c0 <xTaskResumeAll+0x120>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4313      	orrs	r3, r2
 800e316:	4a2a      	ldr	r2, [pc, #168]	; (800e3c0 <xTaskResumeAll+0x120>)
 800e318:	6013      	str	r3, [r2, #0]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e31e:	4613      	mov	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	4413      	add	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4a27      	ldr	r2, [pc, #156]	; (800e3c4 <xTaskResumeAll+0x124>)
 800e328:	441a      	add	r2, r3
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3304      	adds	r3, #4
 800e32e:	4619      	mov	r1, r3
 800e330:	4610      	mov	r0, r2
 800e332:	f7fe ff92 	bl	800d25a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e33a:	4b23      	ldr	r3, [pc, #140]	; (800e3c8 <xTaskResumeAll+0x128>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e340:	429a      	cmp	r2, r3
 800e342:	d302      	bcc.n	800e34a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e344:	4b21      	ldr	r3, [pc, #132]	; (800e3cc <xTaskResumeAll+0x12c>)
 800e346:	2201      	movs	r2, #1
 800e348:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e34a:	4b1c      	ldr	r3, [pc, #112]	; (800e3bc <xTaskResumeAll+0x11c>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d1cc      	bne.n	800e2ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e358:	f000 fb22 	bl	800e9a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e35c:	4b1c      	ldr	r3, [pc, #112]	; (800e3d0 <xTaskResumeAll+0x130>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d010      	beq.n	800e38a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e368:	f000 f836 	bl	800e3d8 <xTaskIncrementTick>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d002      	beq.n	800e378 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e372:	4b16      	ldr	r3, [pc, #88]	; (800e3cc <xTaskResumeAll+0x12c>)
 800e374:	2201      	movs	r2, #1
 800e376:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	3b01      	subs	r3, #1
 800e37c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d1f1      	bne.n	800e368 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e384:	4b12      	ldr	r3, [pc, #72]	; (800e3d0 <xTaskResumeAll+0x130>)
 800e386:	2200      	movs	r2, #0
 800e388:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e38a:	4b10      	ldr	r3, [pc, #64]	; (800e3cc <xTaskResumeAll+0x12c>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d009      	beq.n	800e3a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e392:	2301      	movs	r3, #1
 800e394:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e396:	4b0f      	ldr	r3, [pc, #60]	; (800e3d4 <xTaskResumeAll+0x134>)
 800e398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e39c:	601a      	str	r2, [r3, #0]
 800e39e:	f3bf 8f4f 	dsb	sy
 800e3a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e3a6:	f000 fec5 	bl	800f134 <vPortExitCritical>

	return xAlreadyYielded;
 800e3aa:	68bb      	ldr	r3, [r7, #8]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	20000a70 	.word	0x20000a70
 800e3b8:	20000a48 	.word	0x20000a48
 800e3bc:	20000a08 	.word	0x20000a08
 800e3c0:	20000a50 	.word	0x20000a50
 800e3c4:	2000094c 	.word	0x2000094c
 800e3c8:	20000948 	.word	0x20000948
 800e3cc:	20000a5c 	.word	0x20000a5c
 800e3d0:	20000a58 	.word	0x20000a58
 800e3d4:	e000ed04 	.word	0xe000ed04

0800e3d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3e2:	4b51      	ldr	r3, [pc, #324]	; (800e528 <xTaskIncrementTick+0x150>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	f040 808d 	bne.w	800e506 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e3ec:	4b4f      	ldr	r3, [pc, #316]	; (800e52c <xTaskIncrementTick+0x154>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e3f4:	4a4d      	ldr	r2, [pc, #308]	; (800e52c <xTaskIncrementTick+0x154>)
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d120      	bne.n	800e442 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e400:	4b4b      	ldr	r3, [pc, #300]	; (800e530 <xTaskIncrementTick+0x158>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00a      	beq.n	800e420 <xTaskIncrementTick+0x48>
	__asm volatile
 800e40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	603b      	str	r3, [r7, #0]
}
 800e41c:	bf00      	nop
 800e41e:	e7fe      	b.n	800e41e <xTaskIncrementTick+0x46>
 800e420:	4b43      	ldr	r3, [pc, #268]	; (800e530 <xTaskIncrementTick+0x158>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	60fb      	str	r3, [r7, #12]
 800e426:	4b43      	ldr	r3, [pc, #268]	; (800e534 <xTaskIncrementTick+0x15c>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4a41      	ldr	r2, [pc, #260]	; (800e530 <xTaskIncrementTick+0x158>)
 800e42c:	6013      	str	r3, [r2, #0]
 800e42e:	4a41      	ldr	r2, [pc, #260]	; (800e534 <xTaskIncrementTick+0x15c>)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6013      	str	r3, [r2, #0]
 800e434:	4b40      	ldr	r3, [pc, #256]	; (800e538 <xTaskIncrementTick+0x160>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	3301      	adds	r3, #1
 800e43a:	4a3f      	ldr	r2, [pc, #252]	; (800e538 <xTaskIncrementTick+0x160>)
 800e43c:	6013      	str	r3, [r2, #0]
 800e43e:	f000 faaf 	bl	800e9a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e442:	4b3e      	ldr	r3, [pc, #248]	; (800e53c <xTaskIncrementTick+0x164>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	693a      	ldr	r2, [r7, #16]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d34d      	bcc.n	800e4e8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e44c:	4b38      	ldr	r3, [pc, #224]	; (800e530 <xTaskIncrementTick+0x158>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d101      	bne.n	800e45a <xTaskIncrementTick+0x82>
 800e456:	2301      	movs	r3, #1
 800e458:	e000      	b.n	800e45c <xTaskIncrementTick+0x84>
 800e45a:	2300      	movs	r3, #0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d004      	beq.n	800e46a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e460:	4b36      	ldr	r3, [pc, #216]	; (800e53c <xTaskIncrementTick+0x164>)
 800e462:	f04f 32ff 	mov.w	r2, #4294967295
 800e466:	601a      	str	r2, [r3, #0]
					break;
 800e468:	e03e      	b.n	800e4e8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e46a:	4b31      	ldr	r3, [pc, #196]	; (800e530 <xTaskIncrementTick+0x158>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e47a:	693a      	ldr	r2, [r7, #16]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d203      	bcs.n	800e48a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e482:	4a2e      	ldr	r2, [pc, #184]	; (800e53c <xTaskIncrementTick+0x164>)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6013      	str	r3, [r2, #0]
						break;
 800e488:	e02e      	b.n	800e4e8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	3304      	adds	r3, #4
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fe ff40 	bl	800d314 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d004      	beq.n	800e4a6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	3318      	adds	r3, #24
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7fe ff37 	bl	800d314 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	409a      	lsls	r2, r3
 800e4ae:	4b24      	ldr	r3, [pc, #144]	; (800e540 <xTaskIncrementTick+0x168>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	4313      	orrs	r3, r2
 800e4b4:	4a22      	ldr	r2, [pc, #136]	; (800e540 <xTaskIncrementTick+0x168>)
 800e4b6:	6013      	str	r3, [r2, #0]
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4bc:	4613      	mov	r3, r2
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4413      	add	r3, r2
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	4a1f      	ldr	r2, [pc, #124]	; (800e544 <xTaskIncrementTick+0x16c>)
 800e4c6:	441a      	add	r2, r3
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	3304      	adds	r3, #4
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	4610      	mov	r0, r2
 800e4d0:	f7fe fec3 	bl	800d25a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d8:	4b1b      	ldr	r3, [pc, #108]	; (800e548 <xTaskIncrementTick+0x170>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d3b4      	bcc.n	800e44c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4e6:	e7b1      	b.n	800e44c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e4e8:	4b17      	ldr	r3, [pc, #92]	; (800e548 <xTaskIncrementTick+0x170>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ee:	4915      	ldr	r1, [pc, #84]	; (800e544 <xTaskIncrementTick+0x16c>)
 800e4f0:	4613      	mov	r3, r2
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	4413      	add	r3, r2
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	440b      	add	r3, r1
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d907      	bls.n	800e510 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800e500:	2301      	movs	r3, #1
 800e502:	617b      	str	r3, [r7, #20]
 800e504:	e004      	b.n	800e510 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e506:	4b11      	ldr	r3, [pc, #68]	; (800e54c <xTaskIncrementTick+0x174>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	3301      	adds	r3, #1
 800e50c:	4a0f      	ldr	r2, [pc, #60]	; (800e54c <xTaskIncrementTick+0x174>)
 800e50e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e510:	4b0f      	ldr	r3, [pc, #60]	; (800e550 <xTaskIncrementTick+0x178>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d001      	beq.n	800e51c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800e518:	2301      	movs	r3, #1
 800e51a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e51c:	697b      	ldr	r3, [r7, #20]
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3718      	adds	r7, #24
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	20000a70 	.word	0x20000a70
 800e52c:	20000a4c 	.word	0x20000a4c
 800e530:	20000a00 	.word	0x20000a00
 800e534:	20000a04 	.word	0x20000a04
 800e538:	20000a60 	.word	0x20000a60
 800e53c:	20000a68 	.word	0x20000a68
 800e540:	20000a50 	.word	0x20000a50
 800e544:	2000094c 	.word	0x2000094c
 800e548:	20000948 	.word	0x20000948
 800e54c:	20000a58 	.word	0x20000a58
 800e550:	20000a5c 	.word	0x20000a5c

0800e554 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e554:	b480      	push	{r7}
 800e556:	b087      	sub	sp, #28
 800e558:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e55a:	4b29      	ldr	r3, [pc, #164]	; (800e600 <vTaskSwitchContext+0xac>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d003      	beq.n	800e56a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e562:	4b28      	ldr	r3, [pc, #160]	; (800e604 <vTaskSwitchContext+0xb0>)
 800e564:	2201      	movs	r2, #1
 800e566:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e568:	e044      	b.n	800e5f4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e56a:	4b26      	ldr	r3, [pc, #152]	; (800e604 <vTaskSwitchContext+0xb0>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e570:	4b25      	ldr	r3, [pc, #148]	; (800e608 <vTaskSwitchContext+0xb4>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	fab3 f383 	clz	r3, r3
 800e57c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e57e:	7afb      	ldrb	r3, [r7, #11]
 800e580:	f1c3 031f 	rsb	r3, r3, #31
 800e584:	617b      	str	r3, [r7, #20]
 800e586:	4921      	ldr	r1, [pc, #132]	; (800e60c <vTaskSwitchContext+0xb8>)
 800e588:	697a      	ldr	r2, [r7, #20]
 800e58a:	4613      	mov	r3, r2
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	4413      	add	r3, r2
 800e590:	009b      	lsls	r3, r3, #2
 800e592:	440b      	add	r3, r1
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d10a      	bne.n	800e5b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	607b      	str	r3, [r7, #4]
}
 800e5ac:	bf00      	nop
 800e5ae:	e7fe      	b.n	800e5ae <vTaskSwitchContext+0x5a>
 800e5b0:	697a      	ldr	r2, [r7, #20]
 800e5b2:	4613      	mov	r3, r2
 800e5b4:	009b      	lsls	r3, r3, #2
 800e5b6:	4413      	add	r3, r2
 800e5b8:	009b      	lsls	r3, r3, #2
 800e5ba:	4a14      	ldr	r2, [pc, #80]	; (800e60c <vTaskSwitchContext+0xb8>)
 800e5bc:	4413      	add	r3, r2
 800e5be:	613b      	str	r3, [r7, #16]
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	605a      	str	r2, [r3, #4]
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	685a      	ldr	r2, [r3, #4]
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	3308      	adds	r3, #8
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d104      	bne.n	800e5e0 <vTaskSwitchContext+0x8c>
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	685a      	ldr	r2, [r3, #4]
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	605a      	str	r2, [r3, #4]
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	68db      	ldr	r3, [r3, #12]
 800e5e6:	4a0a      	ldr	r2, [pc, #40]	; (800e610 <vTaskSwitchContext+0xbc>)
 800e5e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e5ea:	4b09      	ldr	r3, [pc, #36]	; (800e610 <vTaskSwitchContext+0xbc>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	334c      	adds	r3, #76	; 0x4c
 800e5f0:	4a08      	ldr	r2, [pc, #32]	; (800e614 <vTaskSwitchContext+0xc0>)
 800e5f2:	6013      	str	r3, [r2, #0]
}
 800e5f4:	bf00      	nop
 800e5f6:	371c      	adds	r7, #28
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr
 800e600:	20000a70 	.word	0x20000a70
 800e604:	20000a5c 	.word	0x20000a5c
 800e608:	20000a50 	.word	0x20000a50
 800e60c:	2000094c 	.word	0x2000094c
 800e610:	20000948 	.word	0x20000948
 800e614:	2000006c 	.word	0x2000006c

0800e618 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d10a      	bne.n	800e63e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62c:	f383 8811 	msr	BASEPRI, r3
 800e630:	f3bf 8f6f 	isb	sy
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	60fb      	str	r3, [r7, #12]
}
 800e63a:	bf00      	nop
 800e63c:	e7fe      	b.n	800e63c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e63e:	4b07      	ldr	r3, [pc, #28]	; (800e65c <vTaskPlaceOnEventList+0x44>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3318      	adds	r3, #24
 800e644:	4619      	mov	r1, r3
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7fe fe2b 	bl	800d2a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e64c:	2101      	movs	r1, #1
 800e64e:	6838      	ldr	r0, [r7, #0]
 800e650:	f000 fbaa 	bl	800eda8 <prvAddCurrentTaskToDelayedList>
}
 800e654:	bf00      	nop
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	20000948 	.word	0x20000948

0800e660 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b086      	sub	sp, #24
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d10a      	bne.n	800e68c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e67a:	f383 8811 	msr	BASEPRI, r3
 800e67e:	f3bf 8f6f 	isb	sy
 800e682:	f3bf 8f4f 	dsb	sy
 800e686:	60fb      	str	r3, [r7, #12]
}
 800e688:	bf00      	nop
 800e68a:	e7fe      	b.n	800e68a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	3318      	adds	r3, #24
 800e690:	4618      	mov	r0, r3
 800e692:	f7fe fe3f 	bl	800d314 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e696:	4b1d      	ldr	r3, [pc, #116]	; (800e70c <xTaskRemoveFromEventList+0xac>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d11c      	bne.n	800e6d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	3304      	adds	r3, #4
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fe fe36 	bl	800d314 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	409a      	lsls	r2, r3
 800e6b0:	4b17      	ldr	r3, [pc, #92]	; (800e710 <xTaskRemoveFromEventList+0xb0>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	4a16      	ldr	r2, [pc, #88]	; (800e710 <xTaskRemoveFromEventList+0xb0>)
 800e6b8:	6013      	str	r3, [r2, #0]
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6be:	4613      	mov	r3, r2
 800e6c0:	009b      	lsls	r3, r3, #2
 800e6c2:	4413      	add	r3, r2
 800e6c4:	009b      	lsls	r3, r3, #2
 800e6c6:	4a13      	ldr	r2, [pc, #76]	; (800e714 <xTaskRemoveFromEventList+0xb4>)
 800e6c8:	441a      	add	r2, r3
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	3304      	adds	r3, #4
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	4610      	mov	r0, r2
 800e6d2:	f7fe fdc2 	bl	800d25a <vListInsertEnd>
 800e6d6:	e005      	b.n	800e6e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	3318      	adds	r3, #24
 800e6dc:	4619      	mov	r1, r3
 800e6de:	480e      	ldr	r0, [pc, #56]	; (800e718 <xTaskRemoveFromEventList+0xb8>)
 800e6e0:	f7fe fdbb 	bl	800d25a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e8:	4b0c      	ldr	r3, [pc, #48]	; (800e71c <xTaskRemoveFromEventList+0xbc>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d905      	bls.n	800e6fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e6f6:	4b0a      	ldr	r3, [pc, #40]	; (800e720 <xTaskRemoveFromEventList+0xc0>)
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	601a      	str	r2, [r3, #0]
 800e6fc:	e001      	b.n	800e702 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e6fe:	2300      	movs	r3, #0
 800e700:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800e702:	697b      	ldr	r3, [r7, #20]
}
 800e704:	4618      	mov	r0, r3
 800e706:	3718      	adds	r7, #24
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	20000a70 	.word	0x20000a70
 800e710:	20000a50 	.word	0x20000a50
 800e714:	2000094c 	.word	0x2000094c
 800e718:	20000a08 	.word	0x20000a08
 800e71c:	20000948 	.word	0x20000948
 800e720:	20000a5c 	.word	0x20000a5c

0800e724 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e72c:	4b06      	ldr	r3, [pc, #24]	; (800e748 <vTaskInternalSetTimeOutState+0x24>)
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e734:	4b05      	ldr	r3, [pc, #20]	; (800e74c <vTaskInternalSetTimeOutState+0x28>)
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	605a      	str	r2, [r3, #4]
}
 800e73c:	bf00      	nop
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr
 800e748:	20000a60 	.word	0x20000a60
 800e74c:	20000a4c 	.word	0x20000a4c

0800e750 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b088      	sub	sp, #32
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d10a      	bne.n	800e776 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	613b      	str	r3, [r7, #16]
}
 800e772:	bf00      	nop
 800e774:	e7fe      	b.n	800e774 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d10a      	bne.n	800e792 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e780:	f383 8811 	msr	BASEPRI, r3
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	60fb      	str	r3, [r7, #12]
}
 800e78e:	bf00      	nop
 800e790:	e7fe      	b.n	800e790 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e792:	f000 fc9f 	bl	800f0d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e796:	4b1d      	ldr	r3, [pc, #116]	; (800e80c <xTaskCheckForTimeOut+0xbc>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	69ba      	ldr	r2, [r7, #24]
 800e7a2:	1ad3      	subs	r3, r2, r3
 800e7a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ae:	d102      	bne.n	800e7b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	61fb      	str	r3, [r7, #28]
 800e7b4:	e023      	b.n	800e7fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	4b15      	ldr	r3, [pc, #84]	; (800e810 <xTaskCheckForTimeOut+0xc0>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d007      	beq.n	800e7d2 <xTaskCheckForTimeOut+0x82>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	69ba      	ldr	r2, [r7, #24]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d302      	bcc.n	800e7d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	61fb      	str	r3, [r7, #28]
 800e7d0:	e015      	b.n	800e7fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	697a      	ldr	r2, [r7, #20]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d20b      	bcs.n	800e7f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	1ad2      	subs	r2, r2, r3
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f7ff ff9b 	bl	800e724 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	61fb      	str	r3, [r7, #28]
 800e7f2:	e004      	b.n	800e7fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e7fe:	f000 fc99 	bl	800f134 <vPortExitCritical>

	return xReturn;
 800e802:	69fb      	ldr	r3, [r7, #28]
}
 800e804:	4618      	mov	r0, r3
 800e806:	3720      	adds	r7, #32
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	20000a4c 	.word	0x20000a4c
 800e810:	20000a60 	.word	0x20000a60

0800e814 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e814:	b480      	push	{r7}
 800e816:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e818:	4b03      	ldr	r3, [pc, #12]	; (800e828 <vTaskMissedYield+0x14>)
 800e81a:	2201      	movs	r2, #1
 800e81c:	601a      	str	r2, [r3, #0]
}
 800e81e:	bf00      	nop
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr
 800e828:	20000a5c 	.word	0x20000a5c

0800e82c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e834:	f000 f852 	bl	800e8dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e838:	4b06      	ldr	r3, [pc, #24]	; (800e854 <prvIdleTask+0x28>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d9f9      	bls.n	800e834 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e840:	4b05      	ldr	r3, [pc, #20]	; (800e858 <prvIdleTask+0x2c>)
 800e842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e846:	601a      	str	r2, [r3, #0]
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e850:	e7f0      	b.n	800e834 <prvIdleTask+0x8>
 800e852:	bf00      	nop
 800e854:	2000094c 	.word	0x2000094c
 800e858:	e000ed04 	.word	0xe000ed04

0800e85c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e862:	2300      	movs	r3, #0
 800e864:	607b      	str	r3, [r7, #4]
 800e866:	e00c      	b.n	800e882 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	4613      	mov	r3, r2
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	4413      	add	r3, r2
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	4a12      	ldr	r2, [pc, #72]	; (800e8bc <prvInitialiseTaskLists+0x60>)
 800e874:	4413      	add	r3, r2
 800e876:	4618      	mov	r0, r3
 800e878:	f7fe fcc2 	bl	800d200 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	3301      	adds	r3, #1
 800e880:	607b      	str	r3, [r7, #4]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2b06      	cmp	r3, #6
 800e886:	d9ef      	bls.n	800e868 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e888:	480d      	ldr	r0, [pc, #52]	; (800e8c0 <prvInitialiseTaskLists+0x64>)
 800e88a:	f7fe fcb9 	bl	800d200 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e88e:	480d      	ldr	r0, [pc, #52]	; (800e8c4 <prvInitialiseTaskLists+0x68>)
 800e890:	f7fe fcb6 	bl	800d200 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e894:	480c      	ldr	r0, [pc, #48]	; (800e8c8 <prvInitialiseTaskLists+0x6c>)
 800e896:	f7fe fcb3 	bl	800d200 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e89a:	480c      	ldr	r0, [pc, #48]	; (800e8cc <prvInitialiseTaskLists+0x70>)
 800e89c:	f7fe fcb0 	bl	800d200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e8a0:	480b      	ldr	r0, [pc, #44]	; (800e8d0 <prvInitialiseTaskLists+0x74>)
 800e8a2:	f7fe fcad 	bl	800d200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e8a6:	4b0b      	ldr	r3, [pc, #44]	; (800e8d4 <prvInitialiseTaskLists+0x78>)
 800e8a8:	4a05      	ldr	r2, [pc, #20]	; (800e8c0 <prvInitialiseTaskLists+0x64>)
 800e8aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e8ac:	4b0a      	ldr	r3, [pc, #40]	; (800e8d8 <prvInitialiseTaskLists+0x7c>)
 800e8ae:	4a05      	ldr	r2, [pc, #20]	; (800e8c4 <prvInitialiseTaskLists+0x68>)
 800e8b0:	601a      	str	r2, [r3, #0]
}
 800e8b2:	bf00      	nop
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	2000094c 	.word	0x2000094c
 800e8c0:	200009d8 	.word	0x200009d8
 800e8c4:	200009ec 	.word	0x200009ec
 800e8c8:	20000a08 	.word	0x20000a08
 800e8cc:	20000a1c 	.word	0x20000a1c
 800e8d0:	20000a34 	.word	0x20000a34
 800e8d4:	20000a00 	.word	0x20000a00
 800e8d8:	20000a04 	.word	0x20000a04

0800e8dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e8e2:	e019      	b.n	800e918 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e8e4:	f000 fbf6 	bl	800f0d4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e8e8:	4b10      	ldr	r3, [pc, #64]	; (800e92c <prvCheckTasksWaitingTermination+0x50>)
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fe fd0d 	bl	800d314 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e8fa:	4b0d      	ldr	r3, [pc, #52]	; (800e930 <prvCheckTasksWaitingTermination+0x54>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	3b01      	subs	r3, #1
 800e900:	4a0b      	ldr	r2, [pc, #44]	; (800e930 <prvCheckTasksWaitingTermination+0x54>)
 800e902:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e904:	4b0b      	ldr	r3, [pc, #44]	; (800e934 <prvCheckTasksWaitingTermination+0x58>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	3b01      	subs	r3, #1
 800e90a:	4a0a      	ldr	r2, [pc, #40]	; (800e934 <prvCheckTasksWaitingTermination+0x58>)
 800e90c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e90e:	f000 fc11 	bl	800f134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 f810 	bl	800e938 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e918:	4b06      	ldr	r3, [pc, #24]	; (800e934 <prvCheckTasksWaitingTermination+0x58>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1e1      	bne.n	800e8e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e920:	bf00      	nop
 800e922:	bf00      	nop
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	20000a1c 	.word	0x20000a1c
 800e930:	20000a48 	.word	0x20000a48
 800e934:	20000a30 	.word	0x20000a30

0800e938 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	334c      	adds	r3, #76	; 0x4c
 800e944:	4618      	mov	r0, r3
 800e946:	f001 fc09 	bl	801015c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e950:	2b00      	cmp	r3, #0
 800e952:	d108      	bne.n	800e966 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e958:	4618      	mov	r0, r3
 800e95a:	f000 fd61 	bl	800f420 <vPortFree>
				vPortFree( pxTCB );
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 fd5e 	bl	800f420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e964:	e018      	b.n	800e998 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d103      	bne.n	800e978 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 fd55 	bl	800f420 <vPortFree>
	}
 800e976:	e00f      	b.n	800e998 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e97e:	2b02      	cmp	r3, #2
 800e980:	d00a      	beq.n	800e998 <prvDeleteTCB+0x60>
	__asm volatile
 800e982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e986:	f383 8811 	msr	BASEPRI, r3
 800e98a:	f3bf 8f6f 	isb	sy
 800e98e:	f3bf 8f4f 	dsb	sy
 800e992:	60fb      	str	r3, [r7, #12]
}
 800e994:	bf00      	nop
 800e996:	e7fe      	b.n	800e996 <prvDeleteTCB+0x5e>
	}
 800e998:	bf00      	nop
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9a6:	4b0f      	ldr	r3, [pc, #60]	; (800e9e4 <prvResetNextTaskUnblockTime+0x44>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d101      	bne.n	800e9b4 <prvResetNextTaskUnblockTime+0x14>
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	e000      	b.n	800e9b6 <prvResetNextTaskUnblockTime+0x16>
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d004      	beq.n	800e9c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e9ba:	4b0b      	ldr	r3, [pc, #44]	; (800e9e8 <prvResetNextTaskUnblockTime+0x48>)
 800e9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e9c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e9c2:	e008      	b.n	800e9d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e9c4:	4b07      	ldr	r3, [pc, #28]	; (800e9e4 <prvResetNextTaskUnblockTime+0x44>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	4a05      	ldr	r2, [pc, #20]	; (800e9e8 <prvResetNextTaskUnblockTime+0x48>)
 800e9d4:	6013      	str	r3, [r2, #0]
}
 800e9d6:	bf00      	nop
 800e9d8:	370c      	adds	r7, #12
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr
 800e9e2:	bf00      	nop
 800e9e4:	20000a00 	.word	0x20000a00
 800e9e8:	20000a68 	.word	0x20000a68

0800e9ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e9f2:	4b0b      	ldr	r3, [pc, #44]	; (800ea20 <xTaskGetSchedulerState+0x34>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d102      	bne.n	800ea00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	607b      	str	r3, [r7, #4]
 800e9fe:	e008      	b.n	800ea12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea00:	4b08      	ldr	r3, [pc, #32]	; (800ea24 <xTaskGetSchedulerState+0x38>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d102      	bne.n	800ea0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea08:	2302      	movs	r3, #2
 800ea0a:	607b      	str	r3, [r7, #4]
 800ea0c:	e001      	b.n	800ea12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea12:	687b      	ldr	r3, [r7, #4]
	}
 800ea14:	4618      	mov	r0, r3
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr
 800ea20:	20000a54 	.word	0x20000a54
 800ea24:	20000a70 	.word	0x20000a70

0800ea28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b084      	sub	sp, #16
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ea34:	2300      	movs	r3, #0
 800ea36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d06e      	beq.n	800eb1c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea42:	4b39      	ldr	r3, [pc, #228]	; (800eb28 <xTaskPriorityInherit+0x100>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d25e      	bcs.n	800eb0a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	699b      	ldr	r3, [r3, #24]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	db06      	blt.n	800ea62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea54:	4b34      	ldr	r3, [pc, #208]	; (800eb28 <xTaskPriorityInherit+0x100>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea5a:	f1c3 0207 	rsb	r2, r3, #7
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	6959      	ldr	r1, [r3, #20]
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	4413      	add	r3, r2
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	4a2e      	ldr	r2, [pc, #184]	; (800eb2c <xTaskPriorityInherit+0x104>)
 800ea74:	4413      	add	r3, r2
 800ea76:	4299      	cmp	r1, r3
 800ea78:	d101      	bne.n	800ea7e <xTaskPriorityInherit+0x56>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e000      	b.n	800ea80 <xTaskPriorityInherit+0x58>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d03a      	beq.n	800eafa <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	3304      	adds	r3, #4
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7fe fc43 	bl	800d314 <uxListRemove>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d115      	bne.n	800eac0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea98:	4924      	ldr	r1, [pc, #144]	; (800eb2c <xTaskPriorityInherit+0x104>)
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4413      	add	r3, r2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	440b      	add	r3, r1
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d10a      	bne.n	800eac0 <xTaskPriorityInherit+0x98>
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaae:	2201      	movs	r2, #1
 800eab0:	fa02 f303 	lsl.w	r3, r2, r3
 800eab4:	43da      	mvns	r2, r3
 800eab6:	4b1e      	ldr	r3, [pc, #120]	; (800eb30 <xTaskPriorityInherit+0x108>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	4013      	ands	r3, r2
 800eabc:	4a1c      	ldr	r2, [pc, #112]	; (800eb30 <xTaskPriorityInherit+0x108>)
 800eabe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eac0:	4b19      	ldr	r3, [pc, #100]	; (800eb28 <xTaskPriorityInherit+0x100>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eace:	2201      	movs	r2, #1
 800ead0:	409a      	lsls	r2, r3
 800ead2:	4b17      	ldr	r3, [pc, #92]	; (800eb30 <xTaskPriorityInherit+0x108>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	4313      	orrs	r3, r2
 800ead8:	4a15      	ldr	r2, [pc, #84]	; (800eb30 <xTaskPriorityInherit+0x108>)
 800eada:	6013      	str	r3, [r2, #0]
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eae0:	4613      	mov	r3, r2
 800eae2:	009b      	lsls	r3, r3, #2
 800eae4:	4413      	add	r3, r2
 800eae6:	009b      	lsls	r3, r3, #2
 800eae8:	4a10      	ldr	r2, [pc, #64]	; (800eb2c <xTaskPriorityInherit+0x104>)
 800eaea:	441a      	add	r2, r3
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	3304      	adds	r3, #4
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	4610      	mov	r0, r2
 800eaf4:	f7fe fbb1 	bl	800d25a <vListInsertEnd>
 800eaf8:	e004      	b.n	800eb04 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eafa:	4b0b      	ldr	r3, [pc, #44]	; (800eb28 <xTaskPriorityInherit+0x100>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eb04:	2301      	movs	r3, #1
 800eb06:	60fb      	str	r3, [r7, #12]
 800eb08:	e008      	b.n	800eb1c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb0e:	4b06      	ldr	r3, [pc, #24]	; (800eb28 <xTaskPriorityInherit+0x100>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d201      	bcs.n	800eb1c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
	}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	20000948 	.word	0x20000948
 800eb2c:	2000094c 	.word	0x2000094c
 800eb30:	20000a50 	.word	0x20000a50

0800eb34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b086      	sub	sp, #24
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb40:	2300      	movs	r3, #0
 800eb42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d06e      	beq.n	800ec28 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb4a:	4b3a      	ldr	r3, [pc, #232]	; (800ec34 <xTaskPriorityDisinherit+0x100>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d00a      	beq.n	800eb6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb58:	f383 8811 	msr	BASEPRI, r3
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f3bf 8f4f 	dsb	sy
 800eb64:	60fb      	str	r3, [r7, #12]
}
 800eb66:	bf00      	nop
 800eb68:	e7fe      	b.n	800eb68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d10a      	bne.n	800eb88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800eb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb76:	f383 8811 	msr	BASEPRI, r3
 800eb7a:	f3bf 8f6f 	isb	sy
 800eb7e:	f3bf 8f4f 	dsb	sy
 800eb82:	60bb      	str	r3, [r7, #8]
}
 800eb84:	bf00      	nop
 800eb86:	e7fe      	b.n	800eb86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb8c:	1e5a      	subs	r2, r3, #1
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d044      	beq.n	800ec28 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d140      	bne.n	800ec28 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	3304      	adds	r3, #4
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7fe fbb2 	bl	800d314 <uxListRemove>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d115      	bne.n	800ebe2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebba:	491f      	ldr	r1, [pc, #124]	; (800ec38 <xTaskPriorityDisinherit+0x104>)
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	4413      	add	r3, r2
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	440b      	add	r3, r1
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d10a      	bne.n	800ebe2 <xTaskPriorityDisinherit+0xae>
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	fa02 f303 	lsl.w	r3, r2, r3
 800ebd6:	43da      	mvns	r2, r3
 800ebd8:	4b18      	ldr	r3, [pc, #96]	; (800ec3c <xTaskPriorityDisinherit+0x108>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4013      	ands	r3, r2
 800ebde:	4a17      	ldr	r2, [pc, #92]	; (800ec3c <xTaskPriorityDisinherit+0x108>)
 800ebe0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebee:	f1c3 0207 	rsb	r2, r3, #7
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	409a      	lsls	r2, r3
 800ebfe:	4b0f      	ldr	r3, [pc, #60]	; (800ec3c <xTaskPriorityDisinherit+0x108>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4313      	orrs	r3, r2
 800ec04:	4a0d      	ldr	r2, [pc, #52]	; (800ec3c <xTaskPriorityDisinherit+0x108>)
 800ec06:	6013      	str	r3, [r2, #0]
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec0c:	4613      	mov	r3, r2
 800ec0e:	009b      	lsls	r3, r3, #2
 800ec10:	4413      	add	r3, r2
 800ec12:	009b      	lsls	r3, r3, #2
 800ec14:	4a08      	ldr	r2, [pc, #32]	; (800ec38 <xTaskPriorityDisinherit+0x104>)
 800ec16:	441a      	add	r2, r3
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	3304      	adds	r3, #4
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	4610      	mov	r0, r2
 800ec20:	f7fe fb1b 	bl	800d25a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec24:	2301      	movs	r3, #1
 800ec26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec28:	697b      	ldr	r3, [r7, #20]
	}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3718      	adds	r7, #24
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	20000948 	.word	0x20000948
 800ec38:	2000094c 	.word	0x2000094c
 800ec3c:	20000a50 	.word	0x20000a50

0800ec40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b088      	sub	sp, #32
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ec4e:	2301      	movs	r3, #1
 800ec50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	f000 8088 	beq.w	800ed6a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d10a      	bne.n	800ec78 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ec62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec66:	f383 8811 	msr	BASEPRI, r3
 800ec6a:	f3bf 8f6f 	isb	sy
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	60fb      	str	r3, [r7, #12]
}
 800ec74:	bf00      	nop
 800ec76:	e7fe      	b.n	800ec76 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec7c:	683a      	ldr	r2, [r7, #0]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d902      	bls.n	800ec88 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	61fb      	str	r3, [r7, #28]
 800ec86:	e002      	b.n	800ec8e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec8c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec92:	69fa      	ldr	r2, [r7, #28]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d068      	beq.n	800ed6a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ec98:	69bb      	ldr	r3, [r7, #24]
 800ec9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d163      	bne.n	800ed6a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eca2:	4b34      	ldr	r3, [pc, #208]	; (800ed74 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	69ba      	ldr	r2, [r7, #24]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d10a      	bne.n	800ecc2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800ecac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb0:	f383 8811 	msr	BASEPRI, r3
 800ecb4:	f3bf 8f6f 	isb	sy
 800ecb8:	f3bf 8f4f 	dsb	sy
 800ecbc:	60bb      	str	r3, [r7, #8]
}
 800ecbe:	bf00      	nop
 800ecc0:	e7fe      	b.n	800ecc0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	69fa      	ldr	r2, [r7, #28]
 800eccc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	699b      	ldr	r3, [r3, #24]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	db04      	blt.n	800ece0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecd6:	69fb      	ldr	r3, [r7, #28]
 800ecd8:	f1c3 0207 	rsb	r2, r3, #7
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	6959      	ldr	r1, [r3, #20]
 800ece4:	693a      	ldr	r2, [r7, #16]
 800ece6:	4613      	mov	r3, r2
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	4413      	add	r3, r2
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	4a22      	ldr	r2, [pc, #136]	; (800ed78 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ecf0:	4413      	add	r3, r2
 800ecf2:	4299      	cmp	r1, r3
 800ecf4:	d101      	bne.n	800ecfa <vTaskPriorityDisinheritAfterTimeout+0xba>
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e000      	b.n	800ecfc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d034      	beq.n	800ed6a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	3304      	adds	r3, #4
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fe fb05 	bl	800d314 <uxListRemove>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d115      	bne.n	800ed3c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed14:	4918      	ldr	r1, [pc, #96]	; (800ed78 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ed16:	4613      	mov	r3, r2
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	4413      	add	r3, r2
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	440b      	add	r3, r1
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d10a      	bne.n	800ed3c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ed30:	43da      	mvns	r2, r3
 800ed32:	4b12      	ldr	r3, [pc, #72]	; (800ed7c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4013      	ands	r3, r2
 800ed38:	4a10      	ldr	r2, [pc, #64]	; (800ed7c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ed3a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed40:	2201      	movs	r2, #1
 800ed42:	409a      	lsls	r2, r3
 800ed44:	4b0d      	ldr	r3, [pc, #52]	; (800ed7c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	4a0c      	ldr	r2, [pc, #48]	; (800ed7c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ed4c:	6013      	str	r3, [r2, #0]
 800ed4e:	69bb      	ldr	r3, [r7, #24]
 800ed50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed52:	4613      	mov	r3, r2
 800ed54:	009b      	lsls	r3, r3, #2
 800ed56:	4413      	add	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	4a07      	ldr	r2, [pc, #28]	; (800ed78 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ed5c:	441a      	add	r2, r3
 800ed5e:	69bb      	ldr	r3, [r7, #24]
 800ed60:	3304      	adds	r3, #4
 800ed62:	4619      	mov	r1, r3
 800ed64:	4610      	mov	r0, r2
 800ed66:	f7fe fa78 	bl	800d25a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed6a:	bf00      	nop
 800ed6c:	3720      	adds	r7, #32
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	20000948 	.word	0x20000948
 800ed78:	2000094c 	.word	0x2000094c
 800ed7c:	20000a50 	.word	0x20000a50

0800ed80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800ed80:	b480      	push	{r7}
 800ed82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ed84:	4b07      	ldr	r3, [pc, #28]	; (800eda4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d004      	beq.n	800ed96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ed8c:	4b05      	ldr	r3, [pc, #20]	; (800eda4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed92:	3201      	adds	r2, #1
 800ed94:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ed96:	4b03      	ldr	r3, [pc, #12]	; (800eda4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed98:	681b      	ldr	r3, [r3, #0]
	}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr
 800eda4:	20000948 	.word	0x20000948

0800eda8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800edb2:	4b29      	ldr	r3, [pc, #164]	; (800ee58 <prvAddCurrentTaskToDelayedList+0xb0>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edb8:	4b28      	ldr	r3, [pc, #160]	; (800ee5c <prvAddCurrentTaskToDelayedList+0xb4>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	3304      	adds	r3, #4
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fe faa8 	bl	800d314 <uxListRemove>
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d10b      	bne.n	800ede2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800edca:	4b24      	ldr	r3, [pc, #144]	; (800ee5c <prvAddCurrentTaskToDelayedList+0xb4>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edd0:	2201      	movs	r2, #1
 800edd2:	fa02 f303 	lsl.w	r3, r2, r3
 800edd6:	43da      	mvns	r2, r3
 800edd8:	4b21      	ldr	r3, [pc, #132]	; (800ee60 <prvAddCurrentTaskToDelayedList+0xb8>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	4013      	ands	r3, r2
 800edde:	4a20      	ldr	r2, [pc, #128]	; (800ee60 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ede0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede8:	d10a      	bne.n	800ee00 <prvAddCurrentTaskToDelayedList+0x58>
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d007      	beq.n	800ee00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edf0:	4b1a      	ldr	r3, [pc, #104]	; (800ee5c <prvAddCurrentTaskToDelayedList+0xb4>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	3304      	adds	r3, #4
 800edf6:	4619      	mov	r1, r3
 800edf8:	481a      	ldr	r0, [pc, #104]	; (800ee64 <prvAddCurrentTaskToDelayedList+0xbc>)
 800edfa:	f7fe fa2e 	bl	800d25a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800edfe:	e026      	b.n	800ee4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	4413      	add	r3, r2
 800ee06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee08:	4b14      	ldr	r3, [pc, #80]	; (800ee5c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	68ba      	ldr	r2, [r7, #8]
 800ee0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee10:	68ba      	ldr	r2, [r7, #8]
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d209      	bcs.n	800ee2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee18:	4b13      	ldr	r3, [pc, #76]	; (800ee68 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ee1a:	681a      	ldr	r2, [r3, #0]
 800ee1c:	4b0f      	ldr	r3, [pc, #60]	; (800ee5c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	3304      	adds	r3, #4
 800ee22:	4619      	mov	r1, r3
 800ee24:	4610      	mov	r0, r2
 800ee26:	f7fe fa3c 	bl	800d2a2 <vListInsert>
}
 800ee2a:	e010      	b.n	800ee4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee2c:	4b0f      	ldr	r3, [pc, #60]	; (800ee6c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	4b0a      	ldr	r3, [pc, #40]	; (800ee5c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	3304      	adds	r3, #4
 800ee36:	4619      	mov	r1, r3
 800ee38:	4610      	mov	r0, r2
 800ee3a:	f7fe fa32 	bl	800d2a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee3e:	4b0c      	ldr	r3, [pc, #48]	; (800ee70 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	68ba      	ldr	r2, [r7, #8]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d202      	bcs.n	800ee4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ee48:	4a09      	ldr	r2, [pc, #36]	; (800ee70 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	6013      	str	r3, [r2, #0]
}
 800ee4e:	bf00      	nop
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	20000a4c 	.word	0x20000a4c
 800ee5c:	20000948 	.word	0x20000948
 800ee60:	20000a50 	.word	0x20000a50
 800ee64:	20000a34 	.word	0x20000a34
 800ee68:	20000a04 	.word	0x20000a04
 800ee6c:	20000a00 	.word	0x20000a00
 800ee70:	20000a68 	.word	0x20000a68

0800ee74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	60b9      	str	r1, [r7, #8]
 800ee7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	3b04      	subs	r3, #4
 800ee84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ee8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	3b04      	subs	r3, #4
 800ee92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	f023 0201 	bic.w	r2, r3, #1
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	3b04      	subs	r3, #4
 800eea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eea4:	4a0c      	ldr	r2, [pc, #48]	; (800eed8 <pxPortInitialiseStack+0x64>)
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	3b14      	subs	r3, #20
 800eeae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	3b04      	subs	r3, #4
 800eeba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f06f 0202 	mvn.w	r2, #2
 800eec2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	3b20      	subs	r3, #32
 800eec8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eeca:	68fb      	ldr	r3, [r7, #12]
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3714      	adds	r7, #20
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr
 800eed8:	0800eedd 	.word	0x0800eedd

0800eedc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eee2:	2300      	movs	r3, #0
 800eee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eee6:	4b12      	ldr	r3, [pc, #72]	; (800ef30 <prvTaskExitError+0x54>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeee:	d00a      	beq.n	800ef06 <prvTaskExitError+0x2a>
	__asm volatile
 800eef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef4:	f383 8811 	msr	BASEPRI, r3
 800eef8:	f3bf 8f6f 	isb	sy
 800eefc:	f3bf 8f4f 	dsb	sy
 800ef00:	60fb      	str	r3, [r7, #12]
}
 800ef02:	bf00      	nop
 800ef04:	e7fe      	b.n	800ef04 <prvTaskExitError+0x28>
	__asm volatile
 800ef06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0a:	f383 8811 	msr	BASEPRI, r3
 800ef0e:	f3bf 8f6f 	isb	sy
 800ef12:	f3bf 8f4f 	dsb	sy
 800ef16:	60bb      	str	r3, [r7, #8]
}
 800ef18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ef1a:	bf00      	nop
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d0fc      	beq.n	800ef1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ef22:	bf00      	nop
 800ef24:	bf00      	nop
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr
 800ef30:	20000010 	.word	0x20000010
	...

0800ef40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ef40:	4b07      	ldr	r3, [pc, #28]	; (800ef60 <pxCurrentTCBConst2>)
 800ef42:	6819      	ldr	r1, [r3, #0]
 800ef44:	6808      	ldr	r0, [r1, #0]
 800ef46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4a:	f380 8809 	msr	PSP, r0
 800ef4e:	f3bf 8f6f 	isb	sy
 800ef52:	f04f 0000 	mov.w	r0, #0
 800ef56:	f380 8811 	msr	BASEPRI, r0
 800ef5a:	4770      	bx	lr
 800ef5c:	f3af 8000 	nop.w

0800ef60 <pxCurrentTCBConst2>:
 800ef60:	20000948 	.word	0x20000948
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ef64:	bf00      	nop
 800ef66:	bf00      	nop

0800ef68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ef68:	4808      	ldr	r0, [pc, #32]	; (800ef8c <prvPortStartFirstTask+0x24>)
 800ef6a:	6800      	ldr	r0, [r0, #0]
 800ef6c:	6800      	ldr	r0, [r0, #0]
 800ef6e:	f380 8808 	msr	MSP, r0
 800ef72:	f04f 0000 	mov.w	r0, #0
 800ef76:	f380 8814 	msr	CONTROL, r0
 800ef7a:	b662      	cpsie	i
 800ef7c:	b661      	cpsie	f
 800ef7e:	f3bf 8f4f 	dsb	sy
 800ef82:	f3bf 8f6f 	isb	sy
 800ef86:	df00      	svc	0
 800ef88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ef8a:	bf00      	nop
 800ef8c:	e000ed08 	.word	0xe000ed08

0800ef90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ef96:	4b46      	ldr	r3, [pc, #280]	; (800f0b0 <xPortStartScheduler+0x120>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4a46      	ldr	r2, [pc, #280]	; (800f0b4 <xPortStartScheduler+0x124>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d10a      	bne.n	800efb6 <xPortStartScheduler+0x26>
	__asm volatile
 800efa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa4:	f383 8811 	msr	BASEPRI, r3
 800efa8:	f3bf 8f6f 	isb	sy
 800efac:	f3bf 8f4f 	dsb	sy
 800efb0:	613b      	str	r3, [r7, #16]
}
 800efb2:	bf00      	nop
 800efb4:	e7fe      	b.n	800efb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800efb6:	4b3e      	ldr	r3, [pc, #248]	; (800f0b0 <xPortStartScheduler+0x120>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4a3f      	ldr	r2, [pc, #252]	; (800f0b8 <xPortStartScheduler+0x128>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d10a      	bne.n	800efd6 <xPortStartScheduler+0x46>
	__asm volatile
 800efc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc4:	f383 8811 	msr	BASEPRI, r3
 800efc8:	f3bf 8f6f 	isb	sy
 800efcc:	f3bf 8f4f 	dsb	sy
 800efd0:	60fb      	str	r3, [r7, #12]
}
 800efd2:	bf00      	nop
 800efd4:	e7fe      	b.n	800efd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800efd6:	4b39      	ldr	r3, [pc, #228]	; (800f0bc <xPortStartScheduler+0x12c>)
 800efd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	22ff      	movs	r2, #255	; 0xff
 800efe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	b2db      	uxtb	r3, r3
 800efee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eff0:	78fb      	ldrb	r3, [r7, #3]
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eff8:	b2da      	uxtb	r2, r3
 800effa:	4b31      	ldr	r3, [pc, #196]	; (800f0c0 <xPortStartScheduler+0x130>)
 800effc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800effe:	4b31      	ldr	r3, [pc, #196]	; (800f0c4 <xPortStartScheduler+0x134>)
 800f000:	2207      	movs	r2, #7
 800f002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f004:	e009      	b.n	800f01a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f006:	4b2f      	ldr	r3, [pc, #188]	; (800f0c4 <xPortStartScheduler+0x134>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	3b01      	subs	r3, #1
 800f00c:	4a2d      	ldr	r2, [pc, #180]	; (800f0c4 <xPortStartScheduler+0x134>)
 800f00e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f010:	78fb      	ldrb	r3, [r7, #3]
 800f012:	b2db      	uxtb	r3, r3
 800f014:	005b      	lsls	r3, r3, #1
 800f016:	b2db      	uxtb	r3, r3
 800f018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f01a:	78fb      	ldrb	r3, [r7, #3]
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f022:	2b80      	cmp	r3, #128	; 0x80
 800f024:	d0ef      	beq.n	800f006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f026:	4b27      	ldr	r3, [pc, #156]	; (800f0c4 <xPortStartScheduler+0x134>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f1c3 0307 	rsb	r3, r3, #7
 800f02e:	2b04      	cmp	r3, #4
 800f030:	d00a      	beq.n	800f048 <xPortStartScheduler+0xb8>
	__asm volatile
 800f032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f036:	f383 8811 	msr	BASEPRI, r3
 800f03a:	f3bf 8f6f 	isb	sy
 800f03e:	f3bf 8f4f 	dsb	sy
 800f042:	60bb      	str	r3, [r7, #8]
}
 800f044:	bf00      	nop
 800f046:	e7fe      	b.n	800f046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f048:	4b1e      	ldr	r3, [pc, #120]	; (800f0c4 <xPortStartScheduler+0x134>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	021b      	lsls	r3, r3, #8
 800f04e:	4a1d      	ldr	r2, [pc, #116]	; (800f0c4 <xPortStartScheduler+0x134>)
 800f050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f052:	4b1c      	ldr	r3, [pc, #112]	; (800f0c4 <xPortStartScheduler+0x134>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f05a:	4a1a      	ldr	r2, [pc, #104]	; (800f0c4 <xPortStartScheduler+0x134>)
 800f05c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	b2da      	uxtb	r2, r3
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f066:	4b18      	ldr	r3, [pc, #96]	; (800f0c8 <xPortStartScheduler+0x138>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4a17      	ldr	r2, [pc, #92]	; (800f0c8 <xPortStartScheduler+0x138>)
 800f06c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f072:	4b15      	ldr	r3, [pc, #84]	; (800f0c8 <xPortStartScheduler+0x138>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4a14      	ldr	r2, [pc, #80]	; (800f0c8 <xPortStartScheduler+0x138>)
 800f078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f07c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f07e:	f000 f8dd 	bl	800f23c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f082:	4b12      	ldr	r3, [pc, #72]	; (800f0cc <xPortStartScheduler+0x13c>)
 800f084:	2200      	movs	r2, #0
 800f086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f088:	f000 f8fc 	bl	800f284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f08c:	4b10      	ldr	r3, [pc, #64]	; (800f0d0 <xPortStartScheduler+0x140>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a0f      	ldr	r2, [pc, #60]	; (800f0d0 <xPortStartScheduler+0x140>)
 800f092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f098:	f7ff ff66 	bl	800ef68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f09c:	f7ff fa5a 	bl	800e554 <vTaskSwitchContext>
	prvTaskExitError();
 800f0a0:	f7ff ff1c 	bl	800eedc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f0a4:	2300      	movs	r3, #0
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3718      	adds	r7, #24
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	e000ed00 	.word	0xe000ed00
 800f0b4:	410fc271 	.word	0x410fc271
 800f0b8:	410fc270 	.word	0x410fc270
 800f0bc:	e000e400 	.word	0xe000e400
 800f0c0:	20000a74 	.word	0x20000a74
 800f0c4:	20000a78 	.word	0x20000a78
 800f0c8:	e000ed20 	.word	0xe000ed20
 800f0cc:	20000010 	.word	0x20000010
 800f0d0:	e000ef34 	.word	0xe000ef34

0800f0d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
	__asm volatile
 800f0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0de:	f383 8811 	msr	BASEPRI, r3
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	f3bf 8f4f 	dsb	sy
 800f0ea:	607b      	str	r3, [r7, #4]
}
 800f0ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f0ee:	4b0f      	ldr	r3, [pc, #60]	; (800f12c <vPortEnterCritical+0x58>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	4a0d      	ldr	r2, [pc, #52]	; (800f12c <vPortEnterCritical+0x58>)
 800f0f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f0f8:	4b0c      	ldr	r3, [pc, #48]	; (800f12c <vPortEnterCritical+0x58>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d10f      	bne.n	800f120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f100:	4b0b      	ldr	r3, [pc, #44]	; (800f130 <vPortEnterCritical+0x5c>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	b2db      	uxtb	r3, r3
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00a      	beq.n	800f120 <vPortEnterCritical+0x4c>
	__asm volatile
 800f10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10e:	f383 8811 	msr	BASEPRI, r3
 800f112:	f3bf 8f6f 	isb	sy
 800f116:	f3bf 8f4f 	dsb	sy
 800f11a:	603b      	str	r3, [r7, #0]
}
 800f11c:	bf00      	nop
 800f11e:	e7fe      	b.n	800f11e <vPortEnterCritical+0x4a>
	}
}
 800f120:	bf00      	nop
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr
 800f12c:	20000010 	.word	0x20000010
 800f130:	e000ed04 	.word	0xe000ed04

0800f134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f134:	b480      	push	{r7}
 800f136:	b083      	sub	sp, #12
 800f138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f13a:	4b12      	ldr	r3, [pc, #72]	; (800f184 <vPortExitCritical+0x50>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d10a      	bne.n	800f158 <vPortExitCritical+0x24>
	__asm volatile
 800f142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f146:	f383 8811 	msr	BASEPRI, r3
 800f14a:	f3bf 8f6f 	isb	sy
 800f14e:	f3bf 8f4f 	dsb	sy
 800f152:	607b      	str	r3, [r7, #4]
}
 800f154:	bf00      	nop
 800f156:	e7fe      	b.n	800f156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f158:	4b0a      	ldr	r3, [pc, #40]	; (800f184 <vPortExitCritical+0x50>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	3b01      	subs	r3, #1
 800f15e:	4a09      	ldr	r2, [pc, #36]	; (800f184 <vPortExitCritical+0x50>)
 800f160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f162:	4b08      	ldr	r3, [pc, #32]	; (800f184 <vPortExitCritical+0x50>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d105      	bne.n	800f176 <vPortExitCritical+0x42>
 800f16a:	2300      	movs	r3, #0
 800f16c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f176:	bf00      	nop
 800f178:	370c      	adds	r7, #12
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop
 800f184:	20000010 	.word	0x20000010
	...

0800f190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f190:	f3ef 8009 	mrs	r0, PSP
 800f194:	f3bf 8f6f 	isb	sy
 800f198:	4b15      	ldr	r3, [pc, #84]	; (800f1f0 <pxCurrentTCBConst>)
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	f01e 0f10 	tst.w	lr, #16
 800f1a0:	bf08      	it	eq
 800f1a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f1a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1aa:	6010      	str	r0, [r2, #0]
 800f1ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f1b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f1b4:	f380 8811 	msr	BASEPRI, r0
 800f1b8:	f3bf 8f4f 	dsb	sy
 800f1bc:	f3bf 8f6f 	isb	sy
 800f1c0:	f7ff f9c8 	bl	800e554 <vTaskSwitchContext>
 800f1c4:	f04f 0000 	mov.w	r0, #0
 800f1c8:	f380 8811 	msr	BASEPRI, r0
 800f1cc:	bc09      	pop	{r0, r3}
 800f1ce:	6819      	ldr	r1, [r3, #0]
 800f1d0:	6808      	ldr	r0, [r1, #0]
 800f1d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d6:	f01e 0f10 	tst.w	lr, #16
 800f1da:	bf08      	it	eq
 800f1dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f1e0:	f380 8809 	msr	PSP, r0
 800f1e4:	f3bf 8f6f 	isb	sy
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	f3af 8000 	nop.w

0800f1f0 <pxCurrentTCBConst>:
 800f1f0:	20000948 	.word	0x20000948
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f1f4:	bf00      	nop
 800f1f6:	bf00      	nop

0800f1f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f202:	f383 8811 	msr	BASEPRI, r3
 800f206:	f3bf 8f6f 	isb	sy
 800f20a:	f3bf 8f4f 	dsb	sy
 800f20e:	607b      	str	r3, [r7, #4]
}
 800f210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f212:	f7ff f8e1 	bl	800e3d8 <xTaskIncrementTick>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d003      	beq.n	800f224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f21c:	4b06      	ldr	r3, [pc, #24]	; (800f238 <SysTick_Handler+0x40>)
 800f21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f222:	601a      	str	r2, [r3, #0]
 800f224:	2300      	movs	r3, #0
 800f226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	f383 8811 	msr	BASEPRI, r3
}
 800f22e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f230:	bf00      	nop
 800f232:	3708      	adds	r7, #8
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	e000ed04 	.word	0xe000ed04

0800f23c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f23c:	b480      	push	{r7}
 800f23e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f240:	4b0b      	ldr	r3, [pc, #44]	; (800f270 <vPortSetupTimerInterrupt+0x34>)
 800f242:	2200      	movs	r2, #0
 800f244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f246:	4b0b      	ldr	r3, [pc, #44]	; (800f274 <vPortSetupTimerInterrupt+0x38>)
 800f248:	2200      	movs	r2, #0
 800f24a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f24c:	4b0a      	ldr	r3, [pc, #40]	; (800f278 <vPortSetupTimerInterrupt+0x3c>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4a0a      	ldr	r2, [pc, #40]	; (800f27c <vPortSetupTimerInterrupt+0x40>)
 800f252:	fba2 2303 	umull	r2, r3, r2, r3
 800f256:	099b      	lsrs	r3, r3, #6
 800f258:	4a09      	ldr	r2, [pc, #36]	; (800f280 <vPortSetupTimerInterrupt+0x44>)
 800f25a:	3b01      	subs	r3, #1
 800f25c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f25e:	4b04      	ldr	r3, [pc, #16]	; (800f270 <vPortSetupTimerInterrupt+0x34>)
 800f260:	2207      	movs	r2, #7
 800f262:	601a      	str	r2, [r3, #0]
}
 800f264:	bf00      	nop
 800f266:	46bd      	mov	sp, r7
 800f268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop
 800f270:	e000e010 	.word	0xe000e010
 800f274:	e000e018 	.word	0xe000e018
 800f278:	20000004 	.word	0x20000004
 800f27c:	10624dd3 	.word	0x10624dd3
 800f280:	e000e014 	.word	0xe000e014

0800f284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f294 <vPortEnableVFP+0x10>
 800f288:	6801      	ldr	r1, [r0, #0]
 800f28a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f28e:	6001      	str	r1, [r0, #0]
 800f290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f292:	bf00      	nop
 800f294:	e000ed88 	.word	0xe000ed88

0800f298 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b08a      	sub	sp, #40	; 0x28
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f2a4:	f7fe ffee 	bl	800e284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f2a8:	4b58      	ldr	r3, [pc, #352]	; (800f40c <pvPortMalloc+0x174>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d101      	bne.n	800f2b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f2b0:	f000 f910 	bl	800f4d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f2b4:	4b56      	ldr	r3, [pc, #344]	; (800f410 <pvPortMalloc+0x178>)
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	4013      	ands	r3, r2
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f040 808e 	bne.w	800f3de <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d01d      	beq.n	800f304 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f2c8:	2208      	movs	r2, #8
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	4413      	add	r3, r2
 800f2ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f003 0307 	and.w	r3, r3, #7
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d014      	beq.n	800f304 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f023 0307 	bic.w	r3, r3, #7
 800f2e0:	3308      	adds	r3, #8
 800f2e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f003 0307 	and.w	r3, r3, #7
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d00a      	beq.n	800f304 <pvPortMalloc+0x6c>
	__asm volatile
 800f2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f2:	f383 8811 	msr	BASEPRI, r3
 800f2f6:	f3bf 8f6f 	isb	sy
 800f2fa:	f3bf 8f4f 	dsb	sy
 800f2fe:	617b      	str	r3, [r7, #20]
}
 800f300:	bf00      	nop
 800f302:	e7fe      	b.n	800f302 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d069      	beq.n	800f3de <pvPortMalloc+0x146>
 800f30a:	4b42      	ldr	r3, [pc, #264]	; (800f414 <pvPortMalloc+0x17c>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	687a      	ldr	r2, [r7, #4]
 800f310:	429a      	cmp	r2, r3
 800f312:	d864      	bhi.n	800f3de <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f314:	4b40      	ldr	r3, [pc, #256]	; (800f418 <pvPortMalloc+0x180>)
 800f316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f318:	4b3f      	ldr	r3, [pc, #252]	; (800f418 <pvPortMalloc+0x180>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f31e:	e004      	b.n	800f32a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	429a      	cmp	r2, r3
 800f332:	d903      	bls.n	800f33c <pvPortMalloc+0xa4>
 800f334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d1f1      	bne.n	800f320 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f33c:	4b33      	ldr	r3, [pc, #204]	; (800f40c <pvPortMalloc+0x174>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f342:	429a      	cmp	r2, r3
 800f344:	d04b      	beq.n	800f3de <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f346:	6a3b      	ldr	r3, [r7, #32]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2208      	movs	r2, #8
 800f34c:	4413      	add	r3, r2
 800f34e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	6a3b      	ldr	r3, [r7, #32]
 800f356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35a:	685a      	ldr	r2, [r3, #4]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	1ad2      	subs	r2, r2, r3
 800f360:	2308      	movs	r3, #8
 800f362:	005b      	lsls	r3, r3, #1
 800f364:	429a      	cmp	r2, r3
 800f366:	d91f      	bls.n	800f3a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4413      	add	r3, r2
 800f36e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	f003 0307 	and.w	r3, r3, #7
 800f376:	2b00      	cmp	r3, #0
 800f378:	d00a      	beq.n	800f390 <pvPortMalloc+0xf8>
	__asm volatile
 800f37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37e:	f383 8811 	msr	BASEPRI, r3
 800f382:	f3bf 8f6f 	isb	sy
 800f386:	f3bf 8f4f 	dsb	sy
 800f38a:	613b      	str	r3, [r7, #16]
}
 800f38c:	bf00      	nop
 800f38e:	e7fe      	b.n	800f38e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f392:	685a      	ldr	r2, [r3, #4]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	1ad2      	subs	r2, r2, r3
 800f398:	69bb      	ldr	r3, [r7, #24]
 800f39a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39e:	687a      	ldr	r2, [r7, #4]
 800f3a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f3a2:	69b8      	ldr	r0, [r7, #24]
 800f3a4:	f000 f8f8 	bl	800f598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f3a8:	4b1a      	ldr	r3, [pc, #104]	; (800f414 <pvPortMalloc+0x17c>)
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	1ad3      	subs	r3, r2, r3
 800f3b2:	4a18      	ldr	r2, [pc, #96]	; (800f414 <pvPortMalloc+0x17c>)
 800f3b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f3b6:	4b17      	ldr	r3, [pc, #92]	; (800f414 <pvPortMalloc+0x17c>)
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	4b18      	ldr	r3, [pc, #96]	; (800f41c <pvPortMalloc+0x184>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d203      	bcs.n	800f3ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f3c2:	4b14      	ldr	r3, [pc, #80]	; (800f414 <pvPortMalloc+0x17c>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	4a15      	ldr	r2, [pc, #84]	; (800f41c <pvPortMalloc+0x184>)
 800f3c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3cc:	685a      	ldr	r2, [r3, #4]
 800f3ce:	4b10      	ldr	r3, [pc, #64]	; (800f410 <pvPortMalloc+0x178>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	431a      	orrs	r2, r3
 800f3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3da:	2200      	movs	r2, #0
 800f3dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f3de:	f7fe ff5f 	bl	800e2a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	f003 0307 	and.w	r3, r3, #7
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d00a      	beq.n	800f402 <pvPortMalloc+0x16a>
	__asm volatile
 800f3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f0:	f383 8811 	msr	BASEPRI, r3
 800f3f4:	f3bf 8f6f 	isb	sy
 800f3f8:	f3bf 8f4f 	dsb	sy
 800f3fc:	60fb      	str	r3, [r7, #12]
}
 800f3fe:	bf00      	nop
 800f400:	e7fe      	b.n	800f400 <pvPortMalloc+0x168>
	return pvReturn;
 800f402:	69fb      	ldr	r3, [r7, #28]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3728      	adds	r7, #40	; 0x28
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	200058a4 	.word	0x200058a4
 800f410:	200058b0 	.word	0x200058b0
 800f414:	200058a8 	.word	0x200058a8
 800f418:	2000589c 	.word	0x2000589c
 800f41c:	200058ac 	.word	0x200058ac

0800f420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b086      	sub	sp, #24
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d048      	beq.n	800f4c4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f432:	2308      	movs	r3, #8
 800f434:	425b      	negs	r3, r3
 800f436:	697a      	ldr	r2, [r7, #20]
 800f438:	4413      	add	r3, r2
 800f43a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	685a      	ldr	r2, [r3, #4]
 800f444:	4b21      	ldr	r3, [pc, #132]	; (800f4cc <vPortFree+0xac>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4013      	ands	r3, r2
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d10a      	bne.n	800f464 <vPortFree+0x44>
	__asm volatile
 800f44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f452:	f383 8811 	msr	BASEPRI, r3
 800f456:	f3bf 8f6f 	isb	sy
 800f45a:	f3bf 8f4f 	dsb	sy
 800f45e:	60fb      	str	r3, [r7, #12]
}
 800f460:	bf00      	nop
 800f462:	e7fe      	b.n	800f462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d00a      	beq.n	800f482 <vPortFree+0x62>
	__asm volatile
 800f46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f470:	f383 8811 	msr	BASEPRI, r3
 800f474:	f3bf 8f6f 	isb	sy
 800f478:	f3bf 8f4f 	dsb	sy
 800f47c:	60bb      	str	r3, [r7, #8]
}
 800f47e:	bf00      	nop
 800f480:	e7fe      	b.n	800f480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	685a      	ldr	r2, [r3, #4]
 800f486:	4b11      	ldr	r3, [pc, #68]	; (800f4cc <vPortFree+0xac>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4013      	ands	r3, r2
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d019      	beq.n	800f4c4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d115      	bne.n	800f4c4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	685a      	ldr	r2, [r3, #4]
 800f49c:	4b0b      	ldr	r3, [pc, #44]	; (800f4cc <vPortFree+0xac>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	43db      	mvns	r3, r3
 800f4a2:	401a      	ands	r2, r3
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f4a8:	f7fe feec 	bl	800e284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	685a      	ldr	r2, [r3, #4]
 800f4b0:	4b07      	ldr	r3, [pc, #28]	; (800f4d0 <vPortFree+0xb0>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	4a06      	ldr	r2, [pc, #24]	; (800f4d0 <vPortFree+0xb0>)
 800f4b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f4ba:	6938      	ldr	r0, [r7, #16]
 800f4bc:	f000 f86c 	bl	800f598 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f4c0:	f7fe feee 	bl	800e2a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f4c4:	bf00      	nop
 800f4c6:	3718      	adds	r7, #24
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	200058b0 	.word	0x200058b0
 800f4d0:	200058a8 	.word	0x200058a8

0800f4d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b085      	sub	sp, #20
 800f4d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f4da:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f4de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f4e0:	4b27      	ldr	r3, [pc, #156]	; (800f580 <prvHeapInit+0xac>)
 800f4e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f003 0307 	and.w	r3, r3, #7
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00c      	beq.n	800f508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	3307      	adds	r3, #7
 800f4f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f023 0307 	bic.w	r3, r3, #7
 800f4fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	1ad3      	subs	r3, r2, r3
 800f502:	4a1f      	ldr	r2, [pc, #124]	; (800f580 <prvHeapInit+0xac>)
 800f504:	4413      	add	r3, r2
 800f506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f50c:	4a1d      	ldr	r2, [pc, #116]	; (800f584 <prvHeapInit+0xb0>)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f512:	4b1c      	ldr	r3, [pc, #112]	; (800f584 <prvHeapInit+0xb0>)
 800f514:	2200      	movs	r2, #0
 800f516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	68ba      	ldr	r2, [r7, #8]
 800f51c:	4413      	add	r3, r2
 800f51e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f520:	2208      	movs	r2, #8
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	1a9b      	subs	r3, r3, r2
 800f526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f023 0307 	bic.w	r3, r3, #7
 800f52e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	4a15      	ldr	r2, [pc, #84]	; (800f588 <prvHeapInit+0xb4>)
 800f534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f536:	4b14      	ldr	r3, [pc, #80]	; (800f588 <prvHeapInit+0xb4>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	2200      	movs	r2, #0
 800f53c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f53e:	4b12      	ldr	r3, [pc, #72]	; (800f588 <prvHeapInit+0xb4>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2200      	movs	r2, #0
 800f544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	1ad2      	subs	r2, r2, r3
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f554:	4b0c      	ldr	r3, [pc, #48]	; (800f588 <prvHeapInit+0xb4>)
 800f556:	681a      	ldr	r2, [r3, #0]
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	4a0a      	ldr	r2, [pc, #40]	; (800f58c <prvHeapInit+0xb8>)
 800f562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	4a09      	ldr	r2, [pc, #36]	; (800f590 <prvHeapInit+0xbc>)
 800f56a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f56c:	4b09      	ldr	r3, [pc, #36]	; (800f594 <prvHeapInit+0xc0>)
 800f56e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f572:	601a      	str	r2, [r3, #0]
}
 800f574:	bf00      	nop
 800f576:	3714      	adds	r7, #20
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	20000a7c 	.word	0x20000a7c
 800f584:	2000589c 	.word	0x2000589c
 800f588:	200058a4 	.word	0x200058a4
 800f58c:	200058ac 	.word	0x200058ac
 800f590:	200058a8 	.word	0x200058a8
 800f594:	200058b0 	.word	0x200058b0

0800f598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f5a0:	4b28      	ldr	r3, [pc, #160]	; (800f644 <prvInsertBlockIntoFreeList+0xac>)
 800f5a2:	60fb      	str	r3, [r7, #12]
 800f5a4:	e002      	b.n	800f5ac <prvInsertBlockIntoFreeList+0x14>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	60fb      	str	r3, [r7, #12]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d8f7      	bhi.n	800f5a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	68ba      	ldr	r2, [r7, #8]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d108      	bne.n	800f5da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	685a      	ldr	r2, [r3, #4]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	441a      	add	r2, r3
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	68ba      	ldr	r2, [r7, #8]
 800f5e4:	441a      	add	r2, r3
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d118      	bne.n	800f620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	4b15      	ldr	r3, [pc, #84]	; (800f648 <prvInsertBlockIntoFreeList+0xb0>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d00d      	beq.n	800f616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	685a      	ldr	r2, [r3, #4]
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	441a      	add	r2, r3
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	681a      	ldr	r2, [r3, #0]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	601a      	str	r2, [r3, #0]
 800f614:	e008      	b.n	800f628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f616:	4b0c      	ldr	r3, [pc, #48]	; (800f648 <prvInsertBlockIntoFreeList+0xb0>)
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	601a      	str	r2, [r3, #0]
 800f61e:	e003      	b.n	800f628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d002      	beq.n	800f636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f636:	bf00      	nop
 800f638:	3714      	adds	r7, #20
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr
 800f642:	bf00      	nop
 800f644:	2000589c 	.word	0x2000589c
 800f648:	200058a4 	.word	0x200058a4

0800f64c <__cvt>:
 800f64c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f650:	ec55 4b10 	vmov	r4, r5, d0
 800f654:	2d00      	cmp	r5, #0
 800f656:	460e      	mov	r6, r1
 800f658:	4619      	mov	r1, r3
 800f65a:	462b      	mov	r3, r5
 800f65c:	bfbb      	ittet	lt
 800f65e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f662:	461d      	movlt	r5, r3
 800f664:	2300      	movge	r3, #0
 800f666:	232d      	movlt	r3, #45	; 0x2d
 800f668:	700b      	strb	r3, [r1, #0]
 800f66a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f66c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f670:	4691      	mov	r9, r2
 800f672:	f023 0820 	bic.w	r8, r3, #32
 800f676:	bfbc      	itt	lt
 800f678:	4622      	movlt	r2, r4
 800f67a:	4614      	movlt	r4, r2
 800f67c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f680:	d005      	beq.n	800f68e <__cvt+0x42>
 800f682:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f686:	d100      	bne.n	800f68a <__cvt+0x3e>
 800f688:	3601      	adds	r6, #1
 800f68a:	2102      	movs	r1, #2
 800f68c:	e000      	b.n	800f690 <__cvt+0x44>
 800f68e:	2103      	movs	r1, #3
 800f690:	ab03      	add	r3, sp, #12
 800f692:	9301      	str	r3, [sp, #4]
 800f694:	ab02      	add	r3, sp, #8
 800f696:	9300      	str	r3, [sp, #0]
 800f698:	ec45 4b10 	vmov	d0, r4, r5
 800f69c:	4653      	mov	r3, sl
 800f69e:	4632      	mov	r2, r6
 800f6a0:	f000 feae 	bl	8010400 <_dtoa_r>
 800f6a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f6a8:	4607      	mov	r7, r0
 800f6aa:	d102      	bne.n	800f6b2 <__cvt+0x66>
 800f6ac:	f019 0f01 	tst.w	r9, #1
 800f6b0:	d022      	beq.n	800f6f8 <__cvt+0xac>
 800f6b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f6b6:	eb07 0906 	add.w	r9, r7, r6
 800f6ba:	d110      	bne.n	800f6de <__cvt+0x92>
 800f6bc:	783b      	ldrb	r3, [r7, #0]
 800f6be:	2b30      	cmp	r3, #48	; 0x30
 800f6c0:	d10a      	bne.n	800f6d8 <__cvt+0x8c>
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	4629      	mov	r1, r5
 800f6ca:	f7f1 fa05 	bl	8000ad8 <__aeabi_dcmpeq>
 800f6ce:	b918      	cbnz	r0, 800f6d8 <__cvt+0x8c>
 800f6d0:	f1c6 0601 	rsb	r6, r6, #1
 800f6d4:	f8ca 6000 	str.w	r6, [sl]
 800f6d8:	f8da 3000 	ldr.w	r3, [sl]
 800f6dc:	4499      	add	r9, r3
 800f6de:	2200      	movs	r2, #0
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	4629      	mov	r1, r5
 800f6e6:	f7f1 f9f7 	bl	8000ad8 <__aeabi_dcmpeq>
 800f6ea:	b108      	cbz	r0, 800f6f0 <__cvt+0xa4>
 800f6ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800f6f0:	2230      	movs	r2, #48	; 0x30
 800f6f2:	9b03      	ldr	r3, [sp, #12]
 800f6f4:	454b      	cmp	r3, r9
 800f6f6:	d307      	bcc.n	800f708 <__cvt+0xbc>
 800f6f8:	9b03      	ldr	r3, [sp, #12]
 800f6fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6fc:	1bdb      	subs	r3, r3, r7
 800f6fe:	4638      	mov	r0, r7
 800f700:	6013      	str	r3, [r2, #0]
 800f702:	b004      	add	sp, #16
 800f704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f708:	1c59      	adds	r1, r3, #1
 800f70a:	9103      	str	r1, [sp, #12]
 800f70c:	701a      	strb	r2, [r3, #0]
 800f70e:	e7f0      	b.n	800f6f2 <__cvt+0xa6>

0800f710 <__exponent>:
 800f710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f712:	4603      	mov	r3, r0
 800f714:	2900      	cmp	r1, #0
 800f716:	bfb8      	it	lt
 800f718:	4249      	neglt	r1, r1
 800f71a:	f803 2b02 	strb.w	r2, [r3], #2
 800f71e:	bfb4      	ite	lt
 800f720:	222d      	movlt	r2, #45	; 0x2d
 800f722:	222b      	movge	r2, #43	; 0x2b
 800f724:	2909      	cmp	r1, #9
 800f726:	7042      	strb	r2, [r0, #1]
 800f728:	dd2a      	ble.n	800f780 <__exponent+0x70>
 800f72a:	f10d 0207 	add.w	r2, sp, #7
 800f72e:	4617      	mov	r7, r2
 800f730:	260a      	movs	r6, #10
 800f732:	4694      	mov	ip, r2
 800f734:	fb91 f5f6 	sdiv	r5, r1, r6
 800f738:	fb06 1415 	mls	r4, r6, r5, r1
 800f73c:	3430      	adds	r4, #48	; 0x30
 800f73e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f742:	460c      	mov	r4, r1
 800f744:	2c63      	cmp	r4, #99	; 0x63
 800f746:	f102 32ff 	add.w	r2, r2, #4294967295
 800f74a:	4629      	mov	r1, r5
 800f74c:	dcf1      	bgt.n	800f732 <__exponent+0x22>
 800f74e:	3130      	adds	r1, #48	; 0x30
 800f750:	f1ac 0402 	sub.w	r4, ip, #2
 800f754:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f758:	1c41      	adds	r1, r0, #1
 800f75a:	4622      	mov	r2, r4
 800f75c:	42ba      	cmp	r2, r7
 800f75e:	d30a      	bcc.n	800f776 <__exponent+0x66>
 800f760:	f10d 0209 	add.w	r2, sp, #9
 800f764:	eba2 020c 	sub.w	r2, r2, ip
 800f768:	42bc      	cmp	r4, r7
 800f76a:	bf88      	it	hi
 800f76c:	2200      	movhi	r2, #0
 800f76e:	4413      	add	r3, r2
 800f770:	1a18      	subs	r0, r3, r0
 800f772:	b003      	add	sp, #12
 800f774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f776:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f77a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f77e:	e7ed      	b.n	800f75c <__exponent+0x4c>
 800f780:	2330      	movs	r3, #48	; 0x30
 800f782:	3130      	adds	r1, #48	; 0x30
 800f784:	7083      	strb	r3, [r0, #2]
 800f786:	70c1      	strb	r1, [r0, #3]
 800f788:	1d03      	adds	r3, r0, #4
 800f78a:	e7f1      	b.n	800f770 <__exponent+0x60>

0800f78c <_printf_float>:
 800f78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f790:	ed2d 8b02 	vpush	{d8}
 800f794:	b08d      	sub	sp, #52	; 0x34
 800f796:	460c      	mov	r4, r1
 800f798:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f79c:	4616      	mov	r6, r2
 800f79e:	461f      	mov	r7, r3
 800f7a0:	4605      	mov	r5, r0
 800f7a2:	f000 fcc7 	bl	8010134 <_localeconv_r>
 800f7a6:	f8d0 a000 	ldr.w	sl, [r0]
 800f7aa:	4650      	mov	r0, sl
 800f7ac:	f7f0 fd68 	bl	8000280 <strlen>
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	930a      	str	r3, [sp, #40]	; 0x28
 800f7b4:	6823      	ldr	r3, [r4, #0]
 800f7b6:	9305      	str	r3, [sp, #20]
 800f7b8:	f8d8 3000 	ldr.w	r3, [r8]
 800f7bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f7c0:	3307      	adds	r3, #7
 800f7c2:	f023 0307 	bic.w	r3, r3, #7
 800f7c6:	f103 0208 	add.w	r2, r3, #8
 800f7ca:	f8c8 2000 	str.w	r2, [r8]
 800f7ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f7d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f7d6:	9307      	str	r3, [sp, #28]
 800f7d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800f7dc:	ee08 0a10 	vmov	s16, r0
 800f7e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f7e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7e8:	4b9e      	ldr	r3, [pc, #632]	; (800fa64 <_printf_float+0x2d8>)
 800f7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ee:	f7f1 f9a5 	bl	8000b3c <__aeabi_dcmpun>
 800f7f2:	bb88      	cbnz	r0, 800f858 <_printf_float+0xcc>
 800f7f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7f8:	4b9a      	ldr	r3, [pc, #616]	; (800fa64 <_printf_float+0x2d8>)
 800f7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f7fe:	f7f1 f97f 	bl	8000b00 <__aeabi_dcmple>
 800f802:	bb48      	cbnz	r0, 800f858 <_printf_float+0xcc>
 800f804:	2200      	movs	r2, #0
 800f806:	2300      	movs	r3, #0
 800f808:	4640      	mov	r0, r8
 800f80a:	4649      	mov	r1, r9
 800f80c:	f7f1 f96e 	bl	8000aec <__aeabi_dcmplt>
 800f810:	b110      	cbz	r0, 800f818 <_printf_float+0x8c>
 800f812:	232d      	movs	r3, #45	; 0x2d
 800f814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f818:	4a93      	ldr	r2, [pc, #588]	; (800fa68 <_printf_float+0x2dc>)
 800f81a:	4b94      	ldr	r3, [pc, #592]	; (800fa6c <_printf_float+0x2e0>)
 800f81c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f820:	bf94      	ite	ls
 800f822:	4690      	movls	r8, r2
 800f824:	4698      	movhi	r8, r3
 800f826:	2303      	movs	r3, #3
 800f828:	6123      	str	r3, [r4, #16]
 800f82a:	9b05      	ldr	r3, [sp, #20]
 800f82c:	f023 0304 	bic.w	r3, r3, #4
 800f830:	6023      	str	r3, [r4, #0]
 800f832:	f04f 0900 	mov.w	r9, #0
 800f836:	9700      	str	r7, [sp, #0]
 800f838:	4633      	mov	r3, r6
 800f83a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f83c:	4621      	mov	r1, r4
 800f83e:	4628      	mov	r0, r5
 800f840:	f000 f9da 	bl	800fbf8 <_printf_common>
 800f844:	3001      	adds	r0, #1
 800f846:	f040 8090 	bne.w	800f96a <_printf_float+0x1de>
 800f84a:	f04f 30ff 	mov.w	r0, #4294967295
 800f84e:	b00d      	add	sp, #52	; 0x34
 800f850:	ecbd 8b02 	vpop	{d8}
 800f854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f858:	4642      	mov	r2, r8
 800f85a:	464b      	mov	r3, r9
 800f85c:	4640      	mov	r0, r8
 800f85e:	4649      	mov	r1, r9
 800f860:	f7f1 f96c 	bl	8000b3c <__aeabi_dcmpun>
 800f864:	b140      	cbz	r0, 800f878 <_printf_float+0xec>
 800f866:	464b      	mov	r3, r9
 800f868:	2b00      	cmp	r3, #0
 800f86a:	bfbc      	itt	lt
 800f86c:	232d      	movlt	r3, #45	; 0x2d
 800f86e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f872:	4a7f      	ldr	r2, [pc, #508]	; (800fa70 <_printf_float+0x2e4>)
 800f874:	4b7f      	ldr	r3, [pc, #508]	; (800fa74 <_printf_float+0x2e8>)
 800f876:	e7d1      	b.n	800f81c <_printf_float+0x90>
 800f878:	6863      	ldr	r3, [r4, #4]
 800f87a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f87e:	9206      	str	r2, [sp, #24]
 800f880:	1c5a      	adds	r2, r3, #1
 800f882:	d13f      	bne.n	800f904 <_printf_float+0x178>
 800f884:	2306      	movs	r3, #6
 800f886:	6063      	str	r3, [r4, #4]
 800f888:	9b05      	ldr	r3, [sp, #20]
 800f88a:	6861      	ldr	r1, [r4, #4]
 800f88c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f890:	2300      	movs	r3, #0
 800f892:	9303      	str	r3, [sp, #12]
 800f894:	ab0a      	add	r3, sp, #40	; 0x28
 800f896:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f89a:	ab09      	add	r3, sp, #36	; 0x24
 800f89c:	ec49 8b10 	vmov	d0, r8, r9
 800f8a0:	9300      	str	r3, [sp, #0]
 800f8a2:	6022      	str	r2, [r4, #0]
 800f8a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	f7ff fecf 	bl	800f64c <__cvt>
 800f8ae:	9b06      	ldr	r3, [sp, #24]
 800f8b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8b2:	2b47      	cmp	r3, #71	; 0x47
 800f8b4:	4680      	mov	r8, r0
 800f8b6:	d108      	bne.n	800f8ca <_printf_float+0x13e>
 800f8b8:	1cc8      	adds	r0, r1, #3
 800f8ba:	db02      	blt.n	800f8c2 <_printf_float+0x136>
 800f8bc:	6863      	ldr	r3, [r4, #4]
 800f8be:	4299      	cmp	r1, r3
 800f8c0:	dd41      	ble.n	800f946 <_printf_float+0x1ba>
 800f8c2:	f1ab 0302 	sub.w	r3, fp, #2
 800f8c6:	fa5f fb83 	uxtb.w	fp, r3
 800f8ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f8ce:	d820      	bhi.n	800f912 <_printf_float+0x186>
 800f8d0:	3901      	subs	r1, #1
 800f8d2:	465a      	mov	r2, fp
 800f8d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f8d8:	9109      	str	r1, [sp, #36]	; 0x24
 800f8da:	f7ff ff19 	bl	800f710 <__exponent>
 800f8de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8e0:	1813      	adds	r3, r2, r0
 800f8e2:	2a01      	cmp	r2, #1
 800f8e4:	4681      	mov	r9, r0
 800f8e6:	6123      	str	r3, [r4, #16]
 800f8e8:	dc02      	bgt.n	800f8f0 <_printf_float+0x164>
 800f8ea:	6822      	ldr	r2, [r4, #0]
 800f8ec:	07d2      	lsls	r2, r2, #31
 800f8ee:	d501      	bpl.n	800f8f4 <_printf_float+0x168>
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	6123      	str	r3, [r4, #16]
 800f8f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d09c      	beq.n	800f836 <_printf_float+0xaa>
 800f8fc:	232d      	movs	r3, #45	; 0x2d
 800f8fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f902:	e798      	b.n	800f836 <_printf_float+0xaa>
 800f904:	9a06      	ldr	r2, [sp, #24]
 800f906:	2a47      	cmp	r2, #71	; 0x47
 800f908:	d1be      	bne.n	800f888 <_printf_float+0xfc>
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d1bc      	bne.n	800f888 <_printf_float+0xfc>
 800f90e:	2301      	movs	r3, #1
 800f910:	e7b9      	b.n	800f886 <_printf_float+0xfa>
 800f912:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f916:	d118      	bne.n	800f94a <_printf_float+0x1be>
 800f918:	2900      	cmp	r1, #0
 800f91a:	6863      	ldr	r3, [r4, #4]
 800f91c:	dd0b      	ble.n	800f936 <_printf_float+0x1aa>
 800f91e:	6121      	str	r1, [r4, #16]
 800f920:	b913      	cbnz	r3, 800f928 <_printf_float+0x19c>
 800f922:	6822      	ldr	r2, [r4, #0]
 800f924:	07d0      	lsls	r0, r2, #31
 800f926:	d502      	bpl.n	800f92e <_printf_float+0x1a2>
 800f928:	3301      	adds	r3, #1
 800f92a:	440b      	add	r3, r1
 800f92c:	6123      	str	r3, [r4, #16]
 800f92e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f930:	f04f 0900 	mov.w	r9, #0
 800f934:	e7de      	b.n	800f8f4 <_printf_float+0x168>
 800f936:	b913      	cbnz	r3, 800f93e <_printf_float+0x1b2>
 800f938:	6822      	ldr	r2, [r4, #0]
 800f93a:	07d2      	lsls	r2, r2, #31
 800f93c:	d501      	bpl.n	800f942 <_printf_float+0x1b6>
 800f93e:	3302      	adds	r3, #2
 800f940:	e7f4      	b.n	800f92c <_printf_float+0x1a0>
 800f942:	2301      	movs	r3, #1
 800f944:	e7f2      	b.n	800f92c <_printf_float+0x1a0>
 800f946:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f94c:	4299      	cmp	r1, r3
 800f94e:	db05      	blt.n	800f95c <_printf_float+0x1d0>
 800f950:	6823      	ldr	r3, [r4, #0]
 800f952:	6121      	str	r1, [r4, #16]
 800f954:	07d8      	lsls	r0, r3, #31
 800f956:	d5ea      	bpl.n	800f92e <_printf_float+0x1a2>
 800f958:	1c4b      	adds	r3, r1, #1
 800f95a:	e7e7      	b.n	800f92c <_printf_float+0x1a0>
 800f95c:	2900      	cmp	r1, #0
 800f95e:	bfd4      	ite	le
 800f960:	f1c1 0202 	rsble	r2, r1, #2
 800f964:	2201      	movgt	r2, #1
 800f966:	4413      	add	r3, r2
 800f968:	e7e0      	b.n	800f92c <_printf_float+0x1a0>
 800f96a:	6823      	ldr	r3, [r4, #0]
 800f96c:	055a      	lsls	r2, r3, #21
 800f96e:	d407      	bmi.n	800f980 <_printf_float+0x1f4>
 800f970:	6923      	ldr	r3, [r4, #16]
 800f972:	4642      	mov	r2, r8
 800f974:	4631      	mov	r1, r6
 800f976:	4628      	mov	r0, r5
 800f978:	47b8      	blx	r7
 800f97a:	3001      	adds	r0, #1
 800f97c:	d12c      	bne.n	800f9d8 <_printf_float+0x24c>
 800f97e:	e764      	b.n	800f84a <_printf_float+0xbe>
 800f980:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f984:	f240 80e0 	bls.w	800fb48 <_printf_float+0x3bc>
 800f988:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f98c:	2200      	movs	r2, #0
 800f98e:	2300      	movs	r3, #0
 800f990:	f7f1 f8a2 	bl	8000ad8 <__aeabi_dcmpeq>
 800f994:	2800      	cmp	r0, #0
 800f996:	d034      	beq.n	800fa02 <_printf_float+0x276>
 800f998:	4a37      	ldr	r2, [pc, #220]	; (800fa78 <_printf_float+0x2ec>)
 800f99a:	2301      	movs	r3, #1
 800f99c:	4631      	mov	r1, r6
 800f99e:	4628      	mov	r0, r5
 800f9a0:	47b8      	blx	r7
 800f9a2:	3001      	adds	r0, #1
 800f9a4:	f43f af51 	beq.w	800f84a <_printf_float+0xbe>
 800f9a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	db02      	blt.n	800f9b6 <_printf_float+0x22a>
 800f9b0:	6823      	ldr	r3, [r4, #0]
 800f9b2:	07d8      	lsls	r0, r3, #31
 800f9b4:	d510      	bpl.n	800f9d8 <_printf_float+0x24c>
 800f9b6:	ee18 3a10 	vmov	r3, s16
 800f9ba:	4652      	mov	r2, sl
 800f9bc:	4631      	mov	r1, r6
 800f9be:	4628      	mov	r0, r5
 800f9c0:	47b8      	blx	r7
 800f9c2:	3001      	adds	r0, #1
 800f9c4:	f43f af41 	beq.w	800f84a <_printf_float+0xbe>
 800f9c8:	f04f 0800 	mov.w	r8, #0
 800f9cc:	f104 091a 	add.w	r9, r4, #26
 800f9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9d2:	3b01      	subs	r3, #1
 800f9d4:	4543      	cmp	r3, r8
 800f9d6:	dc09      	bgt.n	800f9ec <_printf_float+0x260>
 800f9d8:	6823      	ldr	r3, [r4, #0]
 800f9da:	079b      	lsls	r3, r3, #30
 800f9dc:	f100 8107 	bmi.w	800fbee <_printf_float+0x462>
 800f9e0:	68e0      	ldr	r0, [r4, #12]
 800f9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9e4:	4298      	cmp	r0, r3
 800f9e6:	bfb8      	it	lt
 800f9e8:	4618      	movlt	r0, r3
 800f9ea:	e730      	b.n	800f84e <_printf_float+0xc2>
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	464a      	mov	r2, r9
 800f9f0:	4631      	mov	r1, r6
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	47b8      	blx	r7
 800f9f6:	3001      	adds	r0, #1
 800f9f8:	f43f af27 	beq.w	800f84a <_printf_float+0xbe>
 800f9fc:	f108 0801 	add.w	r8, r8, #1
 800fa00:	e7e6      	b.n	800f9d0 <_printf_float+0x244>
 800fa02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	dc39      	bgt.n	800fa7c <_printf_float+0x2f0>
 800fa08:	4a1b      	ldr	r2, [pc, #108]	; (800fa78 <_printf_float+0x2ec>)
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	4631      	mov	r1, r6
 800fa0e:	4628      	mov	r0, r5
 800fa10:	47b8      	blx	r7
 800fa12:	3001      	adds	r0, #1
 800fa14:	f43f af19 	beq.w	800f84a <_printf_float+0xbe>
 800fa18:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	d102      	bne.n	800fa26 <_printf_float+0x29a>
 800fa20:	6823      	ldr	r3, [r4, #0]
 800fa22:	07d9      	lsls	r1, r3, #31
 800fa24:	d5d8      	bpl.n	800f9d8 <_printf_float+0x24c>
 800fa26:	ee18 3a10 	vmov	r3, s16
 800fa2a:	4652      	mov	r2, sl
 800fa2c:	4631      	mov	r1, r6
 800fa2e:	4628      	mov	r0, r5
 800fa30:	47b8      	blx	r7
 800fa32:	3001      	adds	r0, #1
 800fa34:	f43f af09 	beq.w	800f84a <_printf_float+0xbe>
 800fa38:	f04f 0900 	mov.w	r9, #0
 800fa3c:	f104 0a1a 	add.w	sl, r4, #26
 800fa40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa42:	425b      	negs	r3, r3
 800fa44:	454b      	cmp	r3, r9
 800fa46:	dc01      	bgt.n	800fa4c <_printf_float+0x2c0>
 800fa48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa4a:	e792      	b.n	800f972 <_printf_float+0x1e6>
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	4652      	mov	r2, sl
 800fa50:	4631      	mov	r1, r6
 800fa52:	4628      	mov	r0, r5
 800fa54:	47b8      	blx	r7
 800fa56:	3001      	adds	r0, #1
 800fa58:	f43f aef7 	beq.w	800f84a <_printf_float+0xbe>
 800fa5c:	f109 0901 	add.w	r9, r9, #1
 800fa60:	e7ee      	b.n	800fa40 <_printf_float+0x2b4>
 800fa62:	bf00      	nop
 800fa64:	7fefffff 	.word	0x7fefffff
 800fa68:	08012208 	.word	0x08012208
 800fa6c:	0801220c 	.word	0x0801220c
 800fa70:	08012210 	.word	0x08012210
 800fa74:	08012214 	.word	0x08012214
 800fa78:	08012218 	.word	0x08012218
 800fa7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa80:	429a      	cmp	r2, r3
 800fa82:	bfa8      	it	ge
 800fa84:	461a      	movge	r2, r3
 800fa86:	2a00      	cmp	r2, #0
 800fa88:	4691      	mov	r9, r2
 800fa8a:	dc37      	bgt.n	800fafc <_printf_float+0x370>
 800fa8c:	f04f 0b00 	mov.w	fp, #0
 800fa90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fa94:	f104 021a 	add.w	r2, r4, #26
 800fa98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa9a:	9305      	str	r3, [sp, #20]
 800fa9c:	eba3 0309 	sub.w	r3, r3, r9
 800faa0:	455b      	cmp	r3, fp
 800faa2:	dc33      	bgt.n	800fb0c <_printf_float+0x380>
 800faa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800faa8:	429a      	cmp	r2, r3
 800faaa:	db3b      	blt.n	800fb24 <_printf_float+0x398>
 800faac:	6823      	ldr	r3, [r4, #0]
 800faae:	07da      	lsls	r2, r3, #31
 800fab0:	d438      	bmi.n	800fb24 <_printf_float+0x398>
 800fab2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fab6:	eba2 0903 	sub.w	r9, r2, r3
 800faba:	9b05      	ldr	r3, [sp, #20]
 800fabc:	1ad2      	subs	r2, r2, r3
 800fabe:	4591      	cmp	r9, r2
 800fac0:	bfa8      	it	ge
 800fac2:	4691      	movge	r9, r2
 800fac4:	f1b9 0f00 	cmp.w	r9, #0
 800fac8:	dc35      	bgt.n	800fb36 <_printf_float+0x3aa>
 800faca:	f04f 0800 	mov.w	r8, #0
 800face:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fad2:	f104 0a1a 	add.w	sl, r4, #26
 800fad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fada:	1a9b      	subs	r3, r3, r2
 800fadc:	eba3 0309 	sub.w	r3, r3, r9
 800fae0:	4543      	cmp	r3, r8
 800fae2:	f77f af79 	ble.w	800f9d8 <_printf_float+0x24c>
 800fae6:	2301      	movs	r3, #1
 800fae8:	4652      	mov	r2, sl
 800faea:	4631      	mov	r1, r6
 800faec:	4628      	mov	r0, r5
 800faee:	47b8      	blx	r7
 800faf0:	3001      	adds	r0, #1
 800faf2:	f43f aeaa 	beq.w	800f84a <_printf_float+0xbe>
 800faf6:	f108 0801 	add.w	r8, r8, #1
 800fafa:	e7ec      	b.n	800fad6 <_printf_float+0x34a>
 800fafc:	4613      	mov	r3, r2
 800fafe:	4631      	mov	r1, r6
 800fb00:	4642      	mov	r2, r8
 800fb02:	4628      	mov	r0, r5
 800fb04:	47b8      	blx	r7
 800fb06:	3001      	adds	r0, #1
 800fb08:	d1c0      	bne.n	800fa8c <_printf_float+0x300>
 800fb0a:	e69e      	b.n	800f84a <_printf_float+0xbe>
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	4631      	mov	r1, r6
 800fb10:	4628      	mov	r0, r5
 800fb12:	9205      	str	r2, [sp, #20]
 800fb14:	47b8      	blx	r7
 800fb16:	3001      	adds	r0, #1
 800fb18:	f43f ae97 	beq.w	800f84a <_printf_float+0xbe>
 800fb1c:	9a05      	ldr	r2, [sp, #20]
 800fb1e:	f10b 0b01 	add.w	fp, fp, #1
 800fb22:	e7b9      	b.n	800fa98 <_printf_float+0x30c>
 800fb24:	ee18 3a10 	vmov	r3, s16
 800fb28:	4652      	mov	r2, sl
 800fb2a:	4631      	mov	r1, r6
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	47b8      	blx	r7
 800fb30:	3001      	adds	r0, #1
 800fb32:	d1be      	bne.n	800fab2 <_printf_float+0x326>
 800fb34:	e689      	b.n	800f84a <_printf_float+0xbe>
 800fb36:	9a05      	ldr	r2, [sp, #20]
 800fb38:	464b      	mov	r3, r9
 800fb3a:	4442      	add	r2, r8
 800fb3c:	4631      	mov	r1, r6
 800fb3e:	4628      	mov	r0, r5
 800fb40:	47b8      	blx	r7
 800fb42:	3001      	adds	r0, #1
 800fb44:	d1c1      	bne.n	800faca <_printf_float+0x33e>
 800fb46:	e680      	b.n	800f84a <_printf_float+0xbe>
 800fb48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb4a:	2a01      	cmp	r2, #1
 800fb4c:	dc01      	bgt.n	800fb52 <_printf_float+0x3c6>
 800fb4e:	07db      	lsls	r3, r3, #31
 800fb50:	d53a      	bpl.n	800fbc8 <_printf_float+0x43c>
 800fb52:	2301      	movs	r3, #1
 800fb54:	4642      	mov	r2, r8
 800fb56:	4631      	mov	r1, r6
 800fb58:	4628      	mov	r0, r5
 800fb5a:	47b8      	blx	r7
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	f43f ae74 	beq.w	800f84a <_printf_float+0xbe>
 800fb62:	ee18 3a10 	vmov	r3, s16
 800fb66:	4652      	mov	r2, sl
 800fb68:	4631      	mov	r1, r6
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	47b8      	blx	r7
 800fb6e:	3001      	adds	r0, #1
 800fb70:	f43f ae6b 	beq.w	800f84a <_printf_float+0xbe>
 800fb74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fb78:	2200      	movs	r2, #0
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800fb80:	f7f0 ffaa 	bl	8000ad8 <__aeabi_dcmpeq>
 800fb84:	b9d8      	cbnz	r0, 800fbbe <_printf_float+0x432>
 800fb86:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fb8a:	f108 0201 	add.w	r2, r8, #1
 800fb8e:	4631      	mov	r1, r6
 800fb90:	4628      	mov	r0, r5
 800fb92:	47b8      	blx	r7
 800fb94:	3001      	adds	r0, #1
 800fb96:	d10e      	bne.n	800fbb6 <_printf_float+0x42a>
 800fb98:	e657      	b.n	800f84a <_printf_float+0xbe>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	4652      	mov	r2, sl
 800fb9e:	4631      	mov	r1, r6
 800fba0:	4628      	mov	r0, r5
 800fba2:	47b8      	blx	r7
 800fba4:	3001      	adds	r0, #1
 800fba6:	f43f ae50 	beq.w	800f84a <_printf_float+0xbe>
 800fbaa:	f108 0801 	add.w	r8, r8, #1
 800fbae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbb0:	3b01      	subs	r3, #1
 800fbb2:	4543      	cmp	r3, r8
 800fbb4:	dcf1      	bgt.n	800fb9a <_printf_float+0x40e>
 800fbb6:	464b      	mov	r3, r9
 800fbb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fbbc:	e6da      	b.n	800f974 <_printf_float+0x1e8>
 800fbbe:	f04f 0800 	mov.w	r8, #0
 800fbc2:	f104 0a1a 	add.w	sl, r4, #26
 800fbc6:	e7f2      	b.n	800fbae <_printf_float+0x422>
 800fbc8:	2301      	movs	r3, #1
 800fbca:	4642      	mov	r2, r8
 800fbcc:	e7df      	b.n	800fb8e <_printf_float+0x402>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	464a      	mov	r2, r9
 800fbd2:	4631      	mov	r1, r6
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	47b8      	blx	r7
 800fbd8:	3001      	adds	r0, #1
 800fbda:	f43f ae36 	beq.w	800f84a <_printf_float+0xbe>
 800fbde:	f108 0801 	add.w	r8, r8, #1
 800fbe2:	68e3      	ldr	r3, [r4, #12]
 800fbe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbe6:	1a5b      	subs	r3, r3, r1
 800fbe8:	4543      	cmp	r3, r8
 800fbea:	dcf0      	bgt.n	800fbce <_printf_float+0x442>
 800fbec:	e6f8      	b.n	800f9e0 <_printf_float+0x254>
 800fbee:	f04f 0800 	mov.w	r8, #0
 800fbf2:	f104 0919 	add.w	r9, r4, #25
 800fbf6:	e7f4      	b.n	800fbe2 <_printf_float+0x456>

0800fbf8 <_printf_common>:
 800fbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbfc:	4616      	mov	r6, r2
 800fbfe:	4699      	mov	r9, r3
 800fc00:	688a      	ldr	r2, [r1, #8]
 800fc02:	690b      	ldr	r3, [r1, #16]
 800fc04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	bfb8      	it	lt
 800fc0c:	4613      	movlt	r3, r2
 800fc0e:	6033      	str	r3, [r6, #0]
 800fc10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc14:	4607      	mov	r7, r0
 800fc16:	460c      	mov	r4, r1
 800fc18:	b10a      	cbz	r2, 800fc1e <_printf_common+0x26>
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	6033      	str	r3, [r6, #0]
 800fc1e:	6823      	ldr	r3, [r4, #0]
 800fc20:	0699      	lsls	r1, r3, #26
 800fc22:	bf42      	ittt	mi
 800fc24:	6833      	ldrmi	r3, [r6, #0]
 800fc26:	3302      	addmi	r3, #2
 800fc28:	6033      	strmi	r3, [r6, #0]
 800fc2a:	6825      	ldr	r5, [r4, #0]
 800fc2c:	f015 0506 	ands.w	r5, r5, #6
 800fc30:	d106      	bne.n	800fc40 <_printf_common+0x48>
 800fc32:	f104 0a19 	add.w	sl, r4, #25
 800fc36:	68e3      	ldr	r3, [r4, #12]
 800fc38:	6832      	ldr	r2, [r6, #0]
 800fc3a:	1a9b      	subs	r3, r3, r2
 800fc3c:	42ab      	cmp	r3, r5
 800fc3e:	dc26      	bgt.n	800fc8e <_printf_common+0x96>
 800fc40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc44:	1e13      	subs	r3, r2, #0
 800fc46:	6822      	ldr	r2, [r4, #0]
 800fc48:	bf18      	it	ne
 800fc4a:	2301      	movne	r3, #1
 800fc4c:	0692      	lsls	r2, r2, #26
 800fc4e:	d42b      	bmi.n	800fca8 <_printf_common+0xb0>
 800fc50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc54:	4649      	mov	r1, r9
 800fc56:	4638      	mov	r0, r7
 800fc58:	47c0      	blx	r8
 800fc5a:	3001      	adds	r0, #1
 800fc5c:	d01e      	beq.n	800fc9c <_printf_common+0xa4>
 800fc5e:	6823      	ldr	r3, [r4, #0]
 800fc60:	6922      	ldr	r2, [r4, #16]
 800fc62:	f003 0306 	and.w	r3, r3, #6
 800fc66:	2b04      	cmp	r3, #4
 800fc68:	bf02      	ittt	eq
 800fc6a:	68e5      	ldreq	r5, [r4, #12]
 800fc6c:	6833      	ldreq	r3, [r6, #0]
 800fc6e:	1aed      	subeq	r5, r5, r3
 800fc70:	68a3      	ldr	r3, [r4, #8]
 800fc72:	bf0c      	ite	eq
 800fc74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc78:	2500      	movne	r5, #0
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	bfc4      	itt	gt
 800fc7e:	1a9b      	subgt	r3, r3, r2
 800fc80:	18ed      	addgt	r5, r5, r3
 800fc82:	2600      	movs	r6, #0
 800fc84:	341a      	adds	r4, #26
 800fc86:	42b5      	cmp	r5, r6
 800fc88:	d11a      	bne.n	800fcc0 <_printf_common+0xc8>
 800fc8a:	2000      	movs	r0, #0
 800fc8c:	e008      	b.n	800fca0 <_printf_common+0xa8>
 800fc8e:	2301      	movs	r3, #1
 800fc90:	4652      	mov	r2, sl
 800fc92:	4649      	mov	r1, r9
 800fc94:	4638      	mov	r0, r7
 800fc96:	47c0      	blx	r8
 800fc98:	3001      	adds	r0, #1
 800fc9a:	d103      	bne.n	800fca4 <_printf_common+0xac>
 800fc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fca4:	3501      	adds	r5, #1
 800fca6:	e7c6      	b.n	800fc36 <_printf_common+0x3e>
 800fca8:	18e1      	adds	r1, r4, r3
 800fcaa:	1c5a      	adds	r2, r3, #1
 800fcac:	2030      	movs	r0, #48	; 0x30
 800fcae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fcb2:	4422      	add	r2, r4
 800fcb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fcb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fcbc:	3302      	adds	r3, #2
 800fcbe:	e7c7      	b.n	800fc50 <_printf_common+0x58>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	4622      	mov	r2, r4
 800fcc4:	4649      	mov	r1, r9
 800fcc6:	4638      	mov	r0, r7
 800fcc8:	47c0      	blx	r8
 800fcca:	3001      	adds	r0, #1
 800fccc:	d0e6      	beq.n	800fc9c <_printf_common+0xa4>
 800fcce:	3601      	adds	r6, #1
 800fcd0:	e7d9      	b.n	800fc86 <_printf_common+0x8e>
	...

0800fcd4 <_printf_i>:
 800fcd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd8:	7e0f      	ldrb	r7, [r1, #24]
 800fcda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fcdc:	2f78      	cmp	r7, #120	; 0x78
 800fcde:	4691      	mov	r9, r2
 800fce0:	4680      	mov	r8, r0
 800fce2:	460c      	mov	r4, r1
 800fce4:	469a      	mov	sl, r3
 800fce6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fcea:	d807      	bhi.n	800fcfc <_printf_i+0x28>
 800fcec:	2f62      	cmp	r7, #98	; 0x62
 800fcee:	d80a      	bhi.n	800fd06 <_printf_i+0x32>
 800fcf0:	2f00      	cmp	r7, #0
 800fcf2:	f000 80d4 	beq.w	800fe9e <_printf_i+0x1ca>
 800fcf6:	2f58      	cmp	r7, #88	; 0x58
 800fcf8:	f000 80c0 	beq.w	800fe7c <_printf_i+0x1a8>
 800fcfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd04:	e03a      	b.n	800fd7c <_printf_i+0xa8>
 800fd06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd0a:	2b15      	cmp	r3, #21
 800fd0c:	d8f6      	bhi.n	800fcfc <_printf_i+0x28>
 800fd0e:	a101      	add	r1, pc, #4	; (adr r1, 800fd14 <_printf_i+0x40>)
 800fd10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd14:	0800fd6d 	.word	0x0800fd6d
 800fd18:	0800fd81 	.word	0x0800fd81
 800fd1c:	0800fcfd 	.word	0x0800fcfd
 800fd20:	0800fcfd 	.word	0x0800fcfd
 800fd24:	0800fcfd 	.word	0x0800fcfd
 800fd28:	0800fcfd 	.word	0x0800fcfd
 800fd2c:	0800fd81 	.word	0x0800fd81
 800fd30:	0800fcfd 	.word	0x0800fcfd
 800fd34:	0800fcfd 	.word	0x0800fcfd
 800fd38:	0800fcfd 	.word	0x0800fcfd
 800fd3c:	0800fcfd 	.word	0x0800fcfd
 800fd40:	0800fe85 	.word	0x0800fe85
 800fd44:	0800fdad 	.word	0x0800fdad
 800fd48:	0800fe3f 	.word	0x0800fe3f
 800fd4c:	0800fcfd 	.word	0x0800fcfd
 800fd50:	0800fcfd 	.word	0x0800fcfd
 800fd54:	0800fea7 	.word	0x0800fea7
 800fd58:	0800fcfd 	.word	0x0800fcfd
 800fd5c:	0800fdad 	.word	0x0800fdad
 800fd60:	0800fcfd 	.word	0x0800fcfd
 800fd64:	0800fcfd 	.word	0x0800fcfd
 800fd68:	0800fe47 	.word	0x0800fe47
 800fd6c:	682b      	ldr	r3, [r5, #0]
 800fd6e:	1d1a      	adds	r2, r3, #4
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	602a      	str	r2, [r5, #0]
 800fd74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	e09f      	b.n	800fec0 <_printf_i+0x1ec>
 800fd80:	6820      	ldr	r0, [r4, #0]
 800fd82:	682b      	ldr	r3, [r5, #0]
 800fd84:	0607      	lsls	r7, r0, #24
 800fd86:	f103 0104 	add.w	r1, r3, #4
 800fd8a:	6029      	str	r1, [r5, #0]
 800fd8c:	d501      	bpl.n	800fd92 <_printf_i+0xbe>
 800fd8e:	681e      	ldr	r6, [r3, #0]
 800fd90:	e003      	b.n	800fd9a <_printf_i+0xc6>
 800fd92:	0646      	lsls	r6, r0, #25
 800fd94:	d5fb      	bpl.n	800fd8e <_printf_i+0xba>
 800fd96:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fd9a:	2e00      	cmp	r6, #0
 800fd9c:	da03      	bge.n	800fda6 <_printf_i+0xd2>
 800fd9e:	232d      	movs	r3, #45	; 0x2d
 800fda0:	4276      	negs	r6, r6
 800fda2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fda6:	485a      	ldr	r0, [pc, #360]	; (800ff10 <_printf_i+0x23c>)
 800fda8:	230a      	movs	r3, #10
 800fdaa:	e012      	b.n	800fdd2 <_printf_i+0xfe>
 800fdac:	682b      	ldr	r3, [r5, #0]
 800fdae:	6820      	ldr	r0, [r4, #0]
 800fdb0:	1d19      	adds	r1, r3, #4
 800fdb2:	6029      	str	r1, [r5, #0]
 800fdb4:	0605      	lsls	r5, r0, #24
 800fdb6:	d501      	bpl.n	800fdbc <_printf_i+0xe8>
 800fdb8:	681e      	ldr	r6, [r3, #0]
 800fdba:	e002      	b.n	800fdc2 <_printf_i+0xee>
 800fdbc:	0641      	lsls	r1, r0, #25
 800fdbe:	d5fb      	bpl.n	800fdb8 <_printf_i+0xe4>
 800fdc0:	881e      	ldrh	r6, [r3, #0]
 800fdc2:	4853      	ldr	r0, [pc, #332]	; (800ff10 <_printf_i+0x23c>)
 800fdc4:	2f6f      	cmp	r7, #111	; 0x6f
 800fdc6:	bf0c      	ite	eq
 800fdc8:	2308      	moveq	r3, #8
 800fdca:	230a      	movne	r3, #10
 800fdcc:	2100      	movs	r1, #0
 800fdce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fdd2:	6865      	ldr	r5, [r4, #4]
 800fdd4:	60a5      	str	r5, [r4, #8]
 800fdd6:	2d00      	cmp	r5, #0
 800fdd8:	bfa2      	ittt	ge
 800fdda:	6821      	ldrge	r1, [r4, #0]
 800fddc:	f021 0104 	bicge.w	r1, r1, #4
 800fde0:	6021      	strge	r1, [r4, #0]
 800fde2:	b90e      	cbnz	r6, 800fde8 <_printf_i+0x114>
 800fde4:	2d00      	cmp	r5, #0
 800fde6:	d04b      	beq.n	800fe80 <_printf_i+0x1ac>
 800fde8:	4615      	mov	r5, r2
 800fdea:	fbb6 f1f3 	udiv	r1, r6, r3
 800fdee:	fb03 6711 	mls	r7, r3, r1, r6
 800fdf2:	5dc7      	ldrb	r7, [r0, r7]
 800fdf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fdf8:	4637      	mov	r7, r6
 800fdfa:	42bb      	cmp	r3, r7
 800fdfc:	460e      	mov	r6, r1
 800fdfe:	d9f4      	bls.n	800fdea <_printf_i+0x116>
 800fe00:	2b08      	cmp	r3, #8
 800fe02:	d10b      	bne.n	800fe1c <_printf_i+0x148>
 800fe04:	6823      	ldr	r3, [r4, #0]
 800fe06:	07de      	lsls	r6, r3, #31
 800fe08:	d508      	bpl.n	800fe1c <_printf_i+0x148>
 800fe0a:	6923      	ldr	r3, [r4, #16]
 800fe0c:	6861      	ldr	r1, [r4, #4]
 800fe0e:	4299      	cmp	r1, r3
 800fe10:	bfde      	ittt	le
 800fe12:	2330      	movle	r3, #48	; 0x30
 800fe14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe18:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fe1c:	1b52      	subs	r2, r2, r5
 800fe1e:	6122      	str	r2, [r4, #16]
 800fe20:	f8cd a000 	str.w	sl, [sp]
 800fe24:	464b      	mov	r3, r9
 800fe26:	aa03      	add	r2, sp, #12
 800fe28:	4621      	mov	r1, r4
 800fe2a:	4640      	mov	r0, r8
 800fe2c:	f7ff fee4 	bl	800fbf8 <_printf_common>
 800fe30:	3001      	adds	r0, #1
 800fe32:	d14a      	bne.n	800feca <_printf_i+0x1f6>
 800fe34:	f04f 30ff 	mov.w	r0, #4294967295
 800fe38:	b004      	add	sp, #16
 800fe3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe3e:	6823      	ldr	r3, [r4, #0]
 800fe40:	f043 0320 	orr.w	r3, r3, #32
 800fe44:	6023      	str	r3, [r4, #0]
 800fe46:	4833      	ldr	r0, [pc, #204]	; (800ff14 <_printf_i+0x240>)
 800fe48:	2778      	movs	r7, #120	; 0x78
 800fe4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fe4e:	6823      	ldr	r3, [r4, #0]
 800fe50:	6829      	ldr	r1, [r5, #0]
 800fe52:	061f      	lsls	r7, r3, #24
 800fe54:	f851 6b04 	ldr.w	r6, [r1], #4
 800fe58:	d402      	bmi.n	800fe60 <_printf_i+0x18c>
 800fe5a:	065f      	lsls	r7, r3, #25
 800fe5c:	bf48      	it	mi
 800fe5e:	b2b6      	uxthmi	r6, r6
 800fe60:	07df      	lsls	r7, r3, #31
 800fe62:	bf48      	it	mi
 800fe64:	f043 0320 	orrmi.w	r3, r3, #32
 800fe68:	6029      	str	r1, [r5, #0]
 800fe6a:	bf48      	it	mi
 800fe6c:	6023      	strmi	r3, [r4, #0]
 800fe6e:	b91e      	cbnz	r6, 800fe78 <_printf_i+0x1a4>
 800fe70:	6823      	ldr	r3, [r4, #0]
 800fe72:	f023 0320 	bic.w	r3, r3, #32
 800fe76:	6023      	str	r3, [r4, #0]
 800fe78:	2310      	movs	r3, #16
 800fe7a:	e7a7      	b.n	800fdcc <_printf_i+0xf8>
 800fe7c:	4824      	ldr	r0, [pc, #144]	; (800ff10 <_printf_i+0x23c>)
 800fe7e:	e7e4      	b.n	800fe4a <_printf_i+0x176>
 800fe80:	4615      	mov	r5, r2
 800fe82:	e7bd      	b.n	800fe00 <_printf_i+0x12c>
 800fe84:	682b      	ldr	r3, [r5, #0]
 800fe86:	6826      	ldr	r6, [r4, #0]
 800fe88:	6961      	ldr	r1, [r4, #20]
 800fe8a:	1d18      	adds	r0, r3, #4
 800fe8c:	6028      	str	r0, [r5, #0]
 800fe8e:	0635      	lsls	r5, r6, #24
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	d501      	bpl.n	800fe98 <_printf_i+0x1c4>
 800fe94:	6019      	str	r1, [r3, #0]
 800fe96:	e002      	b.n	800fe9e <_printf_i+0x1ca>
 800fe98:	0670      	lsls	r0, r6, #25
 800fe9a:	d5fb      	bpl.n	800fe94 <_printf_i+0x1c0>
 800fe9c:	8019      	strh	r1, [r3, #0]
 800fe9e:	2300      	movs	r3, #0
 800fea0:	6123      	str	r3, [r4, #16]
 800fea2:	4615      	mov	r5, r2
 800fea4:	e7bc      	b.n	800fe20 <_printf_i+0x14c>
 800fea6:	682b      	ldr	r3, [r5, #0]
 800fea8:	1d1a      	adds	r2, r3, #4
 800feaa:	602a      	str	r2, [r5, #0]
 800feac:	681d      	ldr	r5, [r3, #0]
 800feae:	6862      	ldr	r2, [r4, #4]
 800feb0:	2100      	movs	r1, #0
 800feb2:	4628      	mov	r0, r5
 800feb4:	f7f0 f994 	bl	80001e0 <memchr>
 800feb8:	b108      	cbz	r0, 800febe <_printf_i+0x1ea>
 800feba:	1b40      	subs	r0, r0, r5
 800febc:	6060      	str	r0, [r4, #4]
 800febe:	6863      	ldr	r3, [r4, #4]
 800fec0:	6123      	str	r3, [r4, #16]
 800fec2:	2300      	movs	r3, #0
 800fec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fec8:	e7aa      	b.n	800fe20 <_printf_i+0x14c>
 800feca:	6923      	ldr	r3, [r4, #16]
 800fecc:	462a      	mov	r2, r5
 800fece:	4649      	mov	r1, r9
 800fed0:	4640      	mov	r0, r8
 800fed2:	47d0      	blx	sl
 800fed4:	3001      	adds	r0, #1
 800fed6:	d0ad      	beq.n	800fe34 <_printf_i+0x160>
 800fed8:	6823      	ldr	r3, [r4, #0]
 800feda:	079b      	lsls	r3, r3, #30
 800fedc:	d413      	bmi.n	800ff06 <_printf_i+0x232>
 800fede:	68e0      	ldr	r0, [r4, #12]
 800fee0:	9b03      	ldr	r3, [sp, #12]
 800fee2:	4298      	cmp	r0, r3
 800fee4:	bfb8      	it	lt
 800fee6:	4618      	movlt	r0, r3
 800fee8:	e7a6      	b.n	800fe38 <_printf_i+0x164>
 800feea:	2301      	movs	r3, #1
 800feec:	4632      	mov	r2, r6
 800feee:	4649      	mov	r1, r9
 800fef0:	4640      	mov	r0, r8
 800fef2:	47d0      	blx	sl
 800fef4:	3001      	adds	r0, #1
 800fef6:	d09d      	beq.n	800fe34 <_printf_i+0x160>
 800fef8:	3501      	adds	r5, #1
 800fefa:	68e3      	ldr	r3, [r4, #12]
 800fefc:	9903      	ldr	r1, [sp, #12]
 800fefe:	1a5b      	subs	r3, r3, r1
 800ff00:	42ab      	cmp	r3, r5
 800ff02:	dcf2      	bgt.n	800feea <_printf_i+0x216>
 800ff04:	e7eb      	b.n	800fede <_printf_i+0x20a>
 800ff06:	2500      	movs	r5, #0
 800ff08:	f104 0619 	add.w	r6, r4, #25
 800ff0c:	e7f5      	b.n	800fefa <_printf_i+0x226>
 800ff0e:	bf00      	nop
 800ff10:	0801221a 	.word	0x0801221a
 800ff14:	0801222b 	.word	0x0801222b

0800ff18 <std>:
 800ff18:	2300      	movs	r3, #0
 800ff1a:	b510      	push	{r4, lr}
 800ff1c:	4604      	mov	r4, r0
 800ff1e:	e9c0 3300 	strd	r3, r3, [r0]
 800ff22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff26:	6083      	str	r3, [r0, #8]
 800ff28:	8181      	strh	r1, [r0, #12]
 800ff2a:	6643      	str	r3, [r0, #100]	; 0x64
 800ff2c:	81c2      	strh	r2, [r0, #14]
 800ff2e:	6183      	str	r3, [r0, #24]
 800ff30:	4619      	mov	r1, r3
 800ff32:	2208      	movs	r2, #8
 800ff34:	305c      	adds	r0, #92	; 0x5c
 800ff36:	f000 f8f4 	bl	8010122 <memset>
 800ff3a:	4b0d      	ldr	r3, [pc, #52]	; (800ff70 <std+0x58>)
 800ff3c:	6263      	str	r3, [r4, #36]	; 0x24
 800ff3e:	4b0d      	ldr	r3, [pc, #52]	; (800ff74 <std+0x5c>)
 800ff40:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff42:	4b0d      	ldr	r3, [pc, #52]	; (800ff78 <std+0x60>)
 800ff44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff46:	4b0d      	ldr	r3, [pc, #52]	; (800ff7c <std+0x64>)
 800ff48:	6323      	str	r3, [r4, #48]	; 0x30
 800ff4a:	4b0d      	ldr	r3, [pc, #52]	; (800ff80 <std+0x68>)
 800ff4c:	6224      	str	r4, [r4, #32]
 800ff4e:	429c      	cmp	r4, r3
 800ff50:	d006      	beq.n	800ff60 <std+0x48>
 800ff52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ff56:	4294      	cmp	r4, r2
 800ff58:	d002      	beq.n	800ff60 <std+0x48>
 800ff5a:	33d0      	adds	r3, #208	; 0xd0
 800ff5c:	429c      	cmp	r4, r3
 800ff5e:	d105      	bne.n	800ff6c <std+0x54>
 800ff60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff68:	f000 b9ae 	b.w	80102c8 <__retarget_lock_init_recursive>
 800ff6c:	bd10      	pop	{r4, pc}
 800ff6e:	bf00      	nop
 800ff70:	0801009d 	.word	0x0801009d
 800ff74:	080100bf 	.word	0x080100bf
 800ff78:	080100f7 	.word	0x080100f7
 800ff7c:	0801011b 	.word	0x0801011b
 800ff80:	200058b4 	.word	0x200058b4

0800ff84 <stdio_exit_handler>:
 800ff84:	4a02      	ldr	r2, [pc, #8]	; (800ff90 <stdio_exit_handler+0xc>)
 800ff86:	4903      	ldr	r1, [pc, #12]	; (800ff94 <stdio_exit_handler+0x10>)
 800ff88:	4803      	ldr	r0, [pc, #12]	; (800ff98 <stdio_exit_handler+0x14>)
 800ff8a:	f000 b869 	b.w	8010060 <_fwalk_sglue>
 800ff8e:	bf00      	nop
 800ff90:	20000014 	.word	0x20000014
 800ff94:	080119e9 	.word	0x080119e9
 800ff98:	20000020 	.word	0x20000020

0800ff9c <cleanup_stdio>:
 800ff9c:	6841      	ldr	r1, [r0, #4]
 800ff9e:	4b0c      	ldr	r3, [pc, #48]	; (800ffd0 <cleanup_stdio+0x34>)
 800ffa0:	4299      	cmp	r1, r3
 800ffa2:	b510      	push	{r4, lr}
 800ffa4:	4604      	mov	r4, r0
 800ffa6:	d001      	beq.n	800ffac <cleanup_stdio+0x10>
 800ffa8:	f001 fd1e 	bl	80119e8 <_fflush_r>
 800ffac:	68a1      	ldr	r1, [r4, #8]
 800ffae:	4b09      	ldr	r3, [pc, #36]	; (800ffd4 <cleanup_stdio+0x38>)
 800ffb0:	4299      	cmp	r1, r3
 800ffb2:	d002      	beq.n	800ffba <cleanup_stdio+0x1e>
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	f001 fd17 	bl	80119e8 <_fflush_r>
 800ffba:	68e1      	ldr	r1, [r4, #12]
 800ffbc:	4b06      	ldr	r3, [pc, #24]	; (800ffd8 <cleanup_stdio+0x3c>)
 800ffbe:	4299      	cmp	r1, r3
 800ffc0:	d004      	beq.n	800ffcc <cleanup_stdio+0x30>
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffc8:	f001 bd0e 	b.w	80119e8 <_fflush_r>
 800ffcc:	bd10      	pop	{r4, pc}
 800ffce:	bf00      	nop
 800ffd0:	200058b4 	.word	0x200058b4
 800ffd4:	2000591c 	.word	0x2000591c
 800ffd8:	20005984 	.word	0x20005984

0800ffdc <global_stdio_init.part.0>:
 800ffdc:	b510      	push	{r4, lr}
 800ffde:	4b0b      	ldr	r3, [pc, #44]	; (801000c <global_stdio_init.part.0+0x30>)
 800ffe0:	4c0b      	ldr	r4, [pc, #44]	; (8010010 <global_stdio_init.part.0+0x34>)
 800ffe2:	4a0c      	ldr	r2, [pc, #48]	; (8010014 <global_stdio_init.part.0+0x38>)
 800ffe4:	601a      	str	r2, [r3, #0]
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	2200      	movs	r2, #0
 800ffea:	2104      	movs	r1, #4
 800ffec:	f7ff ff94 	bl	800ff18 <std>
 800fff0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fff4:	2201      	movs	r2, #1
 800fff6:	2109      	movs	r1, #9
 800fff8:	f7ff ff8e 	bl	800ff18 <std>
 800fffc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010000:	2202      	movs	r2, #2
 8010002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010006:	2112      	movs	r1, #18
 8010008:	f7ff bf86 	b.w	800ff18 <std>
 801000c:	200059ec 	.word	0x200059ec
 8010010:	200058b4 	.word	0x200058b4
 8010014:	0800ff85 	.word	0x0800ff85

08010018 <__sfp_lock_acquire>:
 8010018:	4801      	ldr	r0, [pc, #4]	; (8010020 <__sfp_lock_acquire+0x8>)
 801001a:	f000 b956 	b.w	80102ca <__retarget_lock_acquire_recursive>
 801001e:	bf00      	nop
 8010020:	200059f5 	.word	0x200059f5

08010024 <__sfp_lock_release>:
 8010024:	4801      	ldr	r0, [pc, #4]	; (801002c <__sfp_lock_release+0x8>)
 8010026:	f000 b951 	b.w	80102cc <__retarget_lock_release_recursive>
 801002a:	bf00      	nop
 801002c:	200059f5 	.word	0x200059f5

08010030 <__sinit>:
 8010030:	b510      	push	{r4, lr}
 8010032:	4604      	mov	r4, r0
 8010034:	f7ff fff0 	bl	8010018 <__sfp_lock_acquire>
 8010038:	6a23      	ldr	r3, [r4, #32]
 801003a:	b11b      	cbz	r3, 8010044 <__sinit+0x14>
 801003c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010040:	f7ff bff0 	b.w	8010024 <__sfp_lock_release>
 8010044:	4b04      	ldr	r3, [pc, #16]	; (8010058 <__sinit+0x28>)
 8010046:	6223      	str	r3, [r4, #32]
 8010048:	4b04      	ldr	r3, [pc, #16]	; (801005c <__sinit+0x2c>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1f5      	bne.n	801003c <__sinit+0xc>
 8010050:	f7ff ffc4 	bl	800ffdc <global_stdio_init.part.0>
 8010054:	e7f2      	b.n	801003c <__sinit+0xc>
 8010056:	bf00      	nop
 8010058:	0800ff9d 	.word	0x0800ff9d
 801005c:	200059ec 	.word	0x200059ec

08010060 <_fwalk_sglue>:
 8010060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010064:	4607      	mov	r7, r0
 8010066:	4688      	mov	r8, r1
 8010068:	4614      	mov	r4, r2
 801006a:	2600      	movs	r6, #0
 801006c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010070:	f1b9 0901 	subs.w	r9, r9, #1
 8010074:	d505      	bpl.n	8010082 <_fwalk_sglue+0x22>
 8010076:	6824      	ldr	r4, [r4, #0]
 8010078:	2c00      	cmp	r4, #0
 801007a:	d1f7      	bne.n	801006c <_fwalk_sglue+0xc>
 801007c:	4630      	mov	r0, r6
 801007e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010082:	89ab      	ldrh	r3, [r5, #12]
 8010084:	2b01      	cmp	r3, #1
 8010086:	d907      	bls.n	8010098 <_fwalk_sglue+0x38>
 8010088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801008c:	3301      	adds	r3, #1
 801008e:	d003      	beq.n	8010098 <_fwalk_sglue+0x38>
 8010090:	4629      	mov	r1, r5
 8010092:	4638      	mov	r0, r7
 8010094:	47c0      	blx	r8
 8010096:	4306      	orrs	r6, r0
 8010098:	3568      	adds	r5, #104	; 0x68
 801009a:	e7e9      	b.n	8010070 <_fwalk_sglue+0x10>

0801009c <__sread>:
 801009c:	b510      	push	{r4, lr}
 801009e:	460c      	mov	r4, r1
 80100a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100a4:	f000 f8c2 	bl	801022c <_read_r>
 80100a8:	2800      	cmp	r0, #0
 80100aa:	bfab      	itete	ge
 80100ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80100ae:	89a3      	ldrhlt	r3, [r4, #12]
 80100b0:	181b      	addge	r3, r3, r0
 80100b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80100b6:	bfac      	ite	ge
 80100b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80100ba:	81a3      	strhlt	r3, [r4, #12]
 80100bc:	bd10      	pop	{r4, pc}

080100be <__swrite>:
 80100be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c2:	461f      	mov	r7, r3
 80100c4:	898b      	ldrh	r3, [r1, #12]
 80100c6:	05db      	lsls	r3, r3, #23
 80100c8:	4605      	mov	r5, r0
 80100ca:	460c      	mov	r4, r1
 80100cc:	4616      	mov	r6, r2
 80100ce:	d505      	bpl.n	80100dc <__swrite+0x1e>
 80100d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100d4:	2302      	movs	r3, #2
 80100d6:	2200      	movs	r2, #0
 80100d8:	f000 f896 	bl	8010208 <_lseek_r>
 80100dc:	89a3      	ldrh	r3, [r4, #12]
 80100de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100e6:	81a3      	strh	r3, [r4, #12]
 80100e8:	4632      	mov	r2, r6
 80100ea:	463b      	mov	r3, r7
 80100ec:	4628      	mov	r0, r5
 80100ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100f2:	f000 b8ad 	b.w	8010250 <_write_r>

080100f6 <__sseek>:
 80100f6:	b510      	push	{r4, lr}
 80100f8:	460c      	mov	r4, r1
 80100fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100fe:	f000 f883 	bl	8010208 <_lseek_r>
 8010102:	1c43      	adds	r3, r0, #1
 8010104:	89a3      	ldrh	r3, [r4, #12]
 8010106:	bf15      	itete	ne
 8010108:	6560      	strne	r0, [r4, #84]	; 0x54
 801010a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801010e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010112:	81a3      	strheq	r3, [r4, #12]
 8010114:	bf18      	it	ne
 8010116:	81a3      	strhne	r3, [r4, #12]
 8010118:	bd10      	pop	{r4, pc}

0801011a <__sclose>:
 801011a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801011e:	f000 b80d 	b.w	801013c <_close_r>

08010122 <memset>:
 8010122:	4402      	add	r2, r0
 8010124:	4603      	mov	r3, r0
 8010126:	4293      	cmp	r3, r2
 8010128:	d100      	bne.n	801012c <memset+0xa>
 801012a:	4770      	bx	lr
 801012c:	f803 1b01 	strb.w	r1, [r3], #1
 8010130:	e7f9      	b.n	8010126 <memset+0x4>
	...

08010134 <_localeconv_r>:
 8010134:	4800      	ldr	r0, [pc, #0]	; (8010138 <_localeconv_r+0x4>)
 8010136:	4770      	bx	lr
 8010138:	20000160 	.word	0x20000160

0801013c <_close_r>:
 801013c:	b538      	push	{r3, r4, r5, lr}
 801013e:	4d06      	ldr	r5, [pc, #24]	; (8010158 <_close_r+0x1c>)
 8010140:	2300      	movs	r3, #0
 8010142:	4604      	mov	r4, r0
 8010144:	4608      	mov	r0, r1
 8010146:	602b      	str	r3, [r5, #0]
 8010148:	f7f3 fecf 	bl	8003eea <_close>
 801014c:	1c43      	adds	r3, r0, #1
 801014e:	d102      	bne.n	8010156 <_close_r+0x1a>
 8010150:	682b      	ldr	r3, [r5, #0]
 8010152:	b103      	cbz	r3, 8010156 <_close_r+0x1a>
 8010154:	6023      	str	r3, [r4, #0]
 8010156:	bd38      	pop	{r3, r4, r5, pc}
 8010158:	200059f0 	.word	0x200059f0

0801015c <_reclaim_reent>:
 801015c:	4b29      	ldr	r3, [pc, #164]	; (8010204 <_reclaim_reent+0xa8>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4283      	cmp	r3, r0
 8010162:	b570      	push	{r4, r5, r6, lr}
 8010164:	4604      	mov	r4, r0
 8010166:	d04b      	beq.n	8010200 <_reclaim_reent+0xa4>
 8010168:	69c3      	ldr	r3, [r0, #28]
 801016a:	b143      	cbz	r3, 801017e <_reclaim_reent+0x22>
 801016c:	68db      	ldr	r3, [r3, #12]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d144      	bne.n	80101fc <_reclaim_reent+0xa0>
 8010172:	69e3      	ldr	r3, [r4, #28]
 8010174:	6819      	ldr	r1, [r3, #0]
 8010176:	b111      	cbz	r1, 801017e <_reclaim_reent+0x22>
 8010178:	4620      	mov	r0, r4
 801017a:	f000 ff33 	bl	8010fe4 <_free_r>
 801017e:	6961      	ldr	r1, [r4, #20]
 8010180:	b111      	cbz	r1, 8010188 <_reclaim_reent+0x2c>
 8010182:	4620      	mov	r0, r4
 8010184:	f000 ff2e 	bl	8010fe4 <_free_r>
 8010188:	69e1      	ldr	r1, [r4, #28]
 801018a:	b111      	cbz	r1, 8010192 <_reclaim_reent+0x36>
 801018c:	4620      	mov	r0, r4
 801018e:	f000 ff29 	bl	8010fe4 <_free_r>
 8010192:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010194:	b111      	cbz	r1, 801019c <_reclaim_reent+0x40>
 8010196:	4620      	mov	r0, r4
 8010198:	f000 ff24 	bl	8010fe4 <_free_r>
 801019c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801019e:	b111      	cbz	r1, 80101a6 <_reclaim_reent+0x4a>
 80101a0:	4620      	mov	r0, r4
 80101a2:	f000 ff1f 	bl	8010fe4 <_free_r>
 80101a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80101a8:	b111      	cbz	r1, 80101b0 <_reclaim_reent+0x54>
 80101aa:	4620      	mov	r0, r4
 80101ac:	f000 ff1a 	bl	8010fe4 <_free_r>
 80101b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80101b2:	b111      	cbz	r1, 80101ba <_reclaim_reent+0x5e>
 80101b4:	4620      	mov	r0, r4
 80101b6:	f000 ff15 	bl	8010fe4 <_free_r>
 80101ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80101bc:	b111      	cbz	r1, 80101c4 <_reclaim_reent+0x68>
 80101be:	4620      	mov	r0, r4
 80101c0:	f000 ff10 	bl	8010fe4 <_free_r>
 80101c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80101c6:	b111      	cbz	r1, 80101ce <_reclaim_reent+0x72>
 80101c8:	4620      	mov	r0, r4
 80101ca:	f000 ff0b 	bl	8010fe4 <_free_r>
 80101ce:	6a23      	ldr	r3, [r4, #32]
 80101d0:	b1b3      	cbz	r3, 8010200 <_reclaim_reent+0xa4>
 80101d2:	4620      	mov	r0, r4
 80101d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101d8:	4718      	bx	r3
 80101da:	5949      	ldr	r1, [r1, r5]
 80101dc:	b941      	cbnz	r1, 80101f0 <_reclaim_reent+0x94>
 80101de:	3504      	adds	r5, #4
 80101e0:	69e3      	ldr	r3, [r4, #28]
 80101e2:	2d80      	cmp	r5, #128	; 0x80
 80101e4:	68d9      	ldr	r1, [r3, #12]
 80101e6:	d1f8      	bne.n	80101da <_reclaim_reent+0x7e>
 80101e8:	4620      	mov	r0, r4
 80101ea:	f000 fefb 	bl	8010fe4 <_free_r>
 80101ee:	e7c0      	b.n	8010172 <_reclaim_reent+0x16>
 80101f0:	680e      	ldr	r6, [r1, #0]
 80101f2:	4620      	mov	r0, r4
 80101f4:	f000 fef6 	bl	8010fe4 <_free_r>
 80101f8:	4631      	mov	r1, r6
 80101fa:	e7ef      	b.n	80101dc <_reclaim_reent+0x80>
 80101fc:	2500      	movs	r5, #0
 80101fe:	e7ef      	b.n	80101e0 <_reclaim_reent+0x84>
 8010200:	bd70      	pop	{r4, r5, r6, pc}
 8010202:	bf00      	nop
 8010204:	2000006c 	.word	0x2000006c

08010208 <_lseek_r>:
 8010208:	b538      	push	{r3, r4, r5, lr}
 801020a:	4d07      	ldr	r5, [pc, #28]	; (8010228 <_lseek_r+0x20>)
 801020c:	4604      	mov	r4, r0
 801020e:	4608      	mov	r0, r1
 8010210:	4611      	mov	r1, r2
 8010212:	2200      	movs	r2, #0
 8010214:	602a      	str	r2, [r5, #0]
 8010216:	461a      	mov	r2, r3
 8010218:	f7f3 fe8e 	bl	8003f38 <_lseek>
 801021c:	1c43      	adds	r3, r0, #1
 801021e:	d102      	bne.n	8010226 <_lseek_r+0x1e>
 8010220:	682b      	ldr	r3, [r5, #0]
 8010222:	b103      	cbz	r3, 8010226 <_lseek_r+0x1e>
 8010224:	6023      	str	r3, [r4, #0]
 8010226:	bd38      	pop	{r3, r4, r5, pc}
 8010228:	200059f0 	.word	0x200059f0

0801022c <_read_r>:
 801022c:	b538      	push	{r3, r4, r5, lr}
 801022e:	4d07      	ldr	r5, [pc, #28]	; (801024c <_read_r+0x20>)
 8010230:	4604      	mov	r4, r0
 8010232:	4608      	mov	r0, r1
 8010234:	4611      	mov	r1, r2
 8010236:	2200      	movs	r2, #0
 8010238:	602a      	str	r2, [r5, #0]
 801023a:	461a      	mov	r2, r3
 801023c:	f7f3 fe1c 	bl	8003e78 <_read>
 8010240:	1c43      	adds	r3, r0, #1
 8010242:	d102      	bne.n	801024a <_read_r+0x1e>
 8010244:	682b      	ldr	r3, [r5, #0]
 8010246:	b103      	cbz	r3, 801024a <_read_r+0x1e>
 8010248:	6023      	str	r3, [r4, #0]
 801024a:	bd38      	pop	{r3, r4, r5, pc}
 801024c:	200059f0 	.word	0x200059f0

08010250 <_write_r>:
 8010250:	b538      	push	{r3, r4, r5, lr}
 8010252:	4d07      	ldr	r5, [pc, #28]	; (8010270 <_write_r+0x20>)
 8010254:	4604      	mov	r4, r0
 8010256:	4608      	mov	r0, r1
 8010258:	4611      	mov	r1, r2
 801025a:	2200      	movs	r2, #0
 801025c:	602a      	str	r2, [r5, #0]
 801025e:	461a      	mov	r2, r3
 8010260:	f7f3 fe27 	bl	8003eb2 <_write>
 8010264:	1c43      	adds	r3, r0, #1
 8010266:	d102      	bne.n	801026e <_write_r+0x1e>
 8010268:	682b      	ldr	r3, [r5, #0]
 801026a:	b103      	cbz	r3, 801026e <_write_r+0x1e>
 801026c:	6023      	str	r3, [r4, #0]
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	200059f0 	.word	0x200059f0

08010274 <__errno>:
 8010274:	4b01      	ldr	r3, [pc, #4]	; (801027c <__errno+0x8>)
 8010276:	6818      	ldr	r0, [r3, #0]
 8010278:	4770      	bx	lr
 801027a:	bf00      	nop
 801027c:	2000006c 	.word	0x2000006c

08010280 <__libc_init_array>:
 8010280:	b570      	push	{r4, r5, r6, lr}
 8010282:	4d0d      	ldr	r5, [pc, #52]	; (80102b8 <__libc_init_array+0x38>)
 8010284:	4c0d      	ldr	r4, [pc, #52]	; (80102bc <__libc_init_array+0x3c>)
 8010286:	1b64      	subs	r4, r4, r5
 8010288:	10a4      	asrs	r4, r4, #2
 801028a:	2600      	movs	r6, #0
 801028c:	42a6      	cmp	r6, r4
 801028e:	d109      	bne.n	80102a4 <__libc_init_array+0x24>
 8010290:	4d0b      	ldr	r5, [pc, #44]	; (80102c0 <__libc_init_array+0x40>)
 8010292:	4c0c      	ldr	r4, [pc, #48]	; (80102c4 <__libc_init_array+0x44>)
 8010294:	f001 feee 	bl	8012074 <_init>
 8010298:	1b64      	subs	r4, r4, r5
 801029a:	10a4      	asrs	r4, r4, #2
 801029c:	2600      	movs	r6, #0
 801029e:	42a6      	cmp	r6, r4
 80102a0:	d105      	bne.n	80102ae <__libc_init_array+0x2e>
 80102a2:	bd70      	pop	{r4, r5, r6, pc}
 80102a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80102a8:	4798      	blx	r3
 80102aa:	3601      	adds	r6, #1
 80102ac:	e7ee      	b.n	801028c <__libc_init_array+0xc>
 80102ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80102b2:	4798      	blx	r3
 80102b4:	3601      	adds	r6, #1
 80102b6:	e7f2      	b.n	801029e <__libc_init_array+0x1e>
 80102b8:	0801257c 	.word	0x0801257c
 80102bc:	0801257c 	.word	0x0801257c
 80102c0:	0801257c 	.word	0x0801257c
 80102c4:	08012580 	.word	0x08012580

080102c8 <__retarget_lock_init_recursive>:
 80102c8:	4770      	bx	lr

080102ca <__retarget_lock_acquire_recursive>:
 80102ca:	4770      	bx	lr

080102cc <__retarget_lock_release_recursive>:
 80102cc:	4770      	bx	lr

080102ce <memcpy>:
 80102ce:	440a      	add	r2, r1
 80102d0:	4291      	cmp	r1, r2
 80102d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80102d6:	d100      	bne.n	80102da <memcpy+0xc>
 80102d8:	4770      	bx	lr
 80102da:	b510      	push	{r4, lr}
 80102dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102e4:	4291      	cmp	r1, r2
 80102e6:	d1f9      	bne.n	80102dc <memcpy+0xe>
 80102e8:	bd10      	pop	{r4, pc}

080102ea <quorem>:
 80102ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ee:	6903      	ldr	r3, [r0, #16]
 80102f0:	690c      	ldr	r4, [r1, #16]
 80102f2:	42a3      	cmp	r3, r4
 80102f4:	4607      	mov	r7, r0
 80102f6:	db7e      	blt.n	80103f6 <quorem+0x10c>
 80102f8:	3c01      	subs	r4, #1
 80102fa:	f101 0814 	add.w	r8, r1, #20
 80102fe:	f100 0514 	add.w	r5, r0, #20
 8010302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010306:	9301      	str	r3, [sp, #4]
 8010308:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801030c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010310:	3301      	adds	r3, #1
 8010312:	429a      	cmp	r2, r3
 8010314:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010318:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801031c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010320:	d331      	bcc.n	8010386 <quorem+0x9c>
 8010322:	f04f 0e00 	mov.w	lr, #0
 8010326:	4640      	mov	r0, r8
 8010328:	46ac      	mov	ip, r5
 801032a:	46f2      	mov	sl, lr
 801032c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010330:	b293      	uxth	r3, r2
 8010332:	fb06 e303 	mla	r3, r6, r3, lr
 8010336:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801033a:	0c1a      	lsrs	r2, r3, #16
 801033c:	b29b      	uxth	r3, r3
 801033e:	ebaa 0303 	sub.w	r3, sl, r3
 8010342:	f8dc a000 	ldr.w	sl, [ip]
 8010346:	fa13 f38a 	uxtah	r3, r3, sl
 801034a:	fb06 220e 	mla	r2, r6, lr, r2
 801034e:	9300      	str	r3, [sp, #0]
 8010350:	9b00      	ldr	r3, [sp, #0]
 8010352:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010356:	b292      	uxth	r2, r2
 8010358:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801035c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010360:	f8bd 3000 	ldrh.w	r3, [sp]
 8010364:	4581      	cmp	r9, r0
 8010366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801036a:	f84c 3b04 	str.w	r3, [ip], #4
 801036e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010372:	d2db      	bcs.n	801032c <quorem+0x42>
 8010374:	f855 300b 	ldr.w	r3, [r5, fp]
 8010378:	b92b      	cbnz	r3, 8010386 <quorem+0x9c>
 801037a:	9b01      	ldr	r3, [sp, #4]
 801037c:	3b04      	subs	r3, #4
 801037e:	429d      	cmp	r5, r3
 8010380:	461a      	mov	r2, r3
 8010382:	d32c      	bcc.n	80103de <quorem+0xf4>
 8010384:	613c      	str	r4, [r7, #16]
 8010386:	4638      	mov	r0, r7
 8010388:	f001 f9a8 	bl	80116dc <__mcmp>
 801038c:	2800      	cmp	r0, #0
 801038e:	db22      	blt.n	80103d6 <quorem+0xec>
 8010390:	3601      	adds	r6, #1
 8010392:	4629      	mov	r1, r5
 8010394:	2000      	movs	r0, #0
 8010396:	f858 2b04 	ldr.w	r2, [r8], #4
 801039a:	f8d1 c000 	ldr.w	ip, [r1]
 801039e:	b293      	uxth	r3, r2
 80103a0:	1ac3      	subs	r3, r0, r3
 80103a2:	0c12      	lsrs	r2, r2, #16
 80103a4:	fa13 f38c 	uxtah	r3, r3, ip
 80103a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80103ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80103b6:	45c1      	cmp	r9, r8
 80103b8:	f841 3b04 	str.w	r3, [r1], #4
 80103bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80103c0:	d2e9      	bcs.n	8010396 <quorem+0xac>
 80103c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80103c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80103ca:	b922      	cbnz	r2, 80103d6 <quorem+0xec>
 80103cc:	3b04      	subs	r3, #4
 80103ce:	429d      	cmp	r5, r3
 80103d0:	461a      	mov	r2, r3
 80103d2:	d30a      	bcc.n	80103ea <quorem+0x100>
 80103d4:	613c      	str	r4, [r7, #16]
 80103d6:	4630      	mov	r0, r6
 80103d8:	b003      	add	sp, #12
 80103da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103de:	6812      	ldr	r2, [r2, #0]
 80103e0:	3b04      	subs	r3, #4
 80103e2:	2a00      	cmp	r2, #0
 80103e4:	d1ce      	bne.n	8010384 <quorem+0x9a>
 80103e6:	3c01      	subs	r4, #1
 80103e8:	e7c9      	b.n	801037e <quorem+0x94>
 80103ea:	6812      	ldr	r2, [r2, #0]
 80103ec:	3b04      	subs	r3, #4
 80103ee:	2a00      	cmp	r2, #0
 80103f0:	d1f0      	bne.n	80103d4 <quorem+0xea>
 80103f2:	3c01      	subs	r4, #1
 80103f4:	e7eb      	b.n	80103ce <quorem+0xe4>
 80103f6:	2000      	movs	r0, #0
 80103f8:	e7ee      	b.n	80103d8 <quorem+0xee>
 80103fa:	0000      	movs	r0, r0
 80103fc:	0000      	movs	r0, r0
	...

08010400 <_dtoa_r>:
 8010400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010404:	ed2d 8b04 	vpush	{d8-d9}
 8010408:	69c5      	ldr	r5, [r0, #28]
 801040a:	b093      	sub	sp, #76	; 0x4c
 801040c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010410:	ec57 6b10 	vmov	r6, r7, d0
 8010414:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010418:	9107      	str	r1, [sp, #28]
 801041a:	4604      	mov	r4, r0
 801041c:	920a      	str	r2, [sp, #40]	; 0x28
 801041e:	930d      	str	r3, [sp, #52]	; 0x34
 8010420:	b975      	cbnz	r5, 8010440 <_dtoa_r+0x40>
 8010422:	2010      	movs	r0, #16
 8010424:	f000 fe2a 	bl	801107c <malloc>
 8010428:	4602      	mov	r2, r0
 801042a:	61e0      	str	r0, [r4, #28]
 801042c:	b920      	cbnz	r0, 8010438 <_dtoa_r+0x38>
 801042e:	4bae      	ldr	r3, [pc, #696]	; (80106e8 <_dtoa_r+0x2e8>)
 8010430:	21ef      	movs	r1, #239	; 0xef
 8010432:	48ae      	ldr	r0, [pc, #696]	; (80106ec <_dtoa_r+0x2ec>)
 8010434:	f001 fb10 	bl	8011a58 <__assert_func>
 8010438:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801043c:	6005      	str	r5, [r0, #0]
 801043e:	60c5      	str	r5, [r0, #12]
 8010440:	69e3      	ldr	r3, [r4, #28]
 8010442:	6819      	ldr	r1, [r3, #0]
 8010444:	b151      	cbz	r1, 801045c <_dtoa_r+0x5c>
 8010446:	685a      	ldr	r2, [r3, #4]
 8010448:	604a      	str	r2, [r1, #4]
 801044a:	2301      	movs	r3, #1
 801044c:	4093      	lsls	r3, r2
 801044e:	608b      	str	r3, [r1, #8]
 8010450:	4620      	mov	r0, r4
 8010452:	f000 ff07 	bl	8011264 <_Bfree>
 8010456:	69e3      	ldr	r3, [r4, #28]
 8010458:	2200      	movs	r2, #0
 801045a:	601a      	str	r2, [r3, #0]
 801045c:	1e3b      	subs	r3, r7, #0
 801045e:	bfbb      	ittet	lt
 8010460:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010464:	9303      	strlt	r3, [sp, #12]
 8010466:	2300      	movge	r3, #0
 8010468:	2201      	movlt	r2, #1
 801046a:	bfac      	ite	ge
 801046c:	f8c8 3000 	strge.w	r3, [r8]
 8010470:	f8c8 2000 	strlt.w	r2, [r8]
 8010474:	4b9e      	ldr	r3, [pc, #632]	; (80106f0 <_dtoa_r+0x2f0>)
 8010476:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801047a:	ea33 0308 	bics.w	r3, r3, r8
 801047e:	d11b      	bne.n	80104b8 <_dtoa_r+0xb8>
 8010480:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010482:	f242 730f 	movw	r3, #9999	; 0x270f
 8010486:	6013      	str	r3, [r2, #0]
 8010488:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801048c:	4333      	orrs	r3, r6
 801048e:	f000 8593 	beq.w	8010fb8 <_dtoa_r+0xbb8>
 8010492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010494:	b963      	cbnz	r3, 80104b0 <_dtoa_r+0xb0>
 8010496:	4b97      	ldr	r3, [pc, #604]	; (80106f4 <_dtoa_r+0x2f4>)
 8010498:	e027      	b.n	80104ea <_dtoa_r+0xea>
 801049a:	4b97      	ldr	r3, [pc, #604]	; (80106f8 <_dtoa_r+0x2f8>)
 801049c:	9300      	str	r3, [sp, #0]
 801049e:	3308      	adds	r3, #8
 80104a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80104a2:	6013      	str	r3, [r2, #0]
 80104a4:	9800      	ldr	r0, [sp, #0]
 80104a6:	b013      	add	sp, #76	; 0x4c
 80104a8:	ecbd 8b04 	vpop	{d8-d9}
 80104ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104b0:	4b90      	ldr	r3, [pc, #576]	; (80106f4 <_dtoa_r+0x2f4>)
 80104b2:	9300      	str	r3, [sp, #0]
 80104b4:	3303      	adds	r3, #3
 80104b6:	e7f3      	b.n	80104a0 <_dtoa_r+0xa0>
 80104b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80104bc:	2200      	movs	r2, #0
 80104be:	ec51 0b17 	vmov	r0, r1, d7
 80104c2:	eeb0 8a47 	vmov.f32	s16, s14
 80104c6:	eef0 8a67 	vmov.f32	s17, s15
 80104ca:	2300      	movs	r3, #0
 80104cc:	f7f0 fb04 	bl	8000ad8 <__aeabi_dcmpeq>
 80104d0:	4681      	mov	r9, r0
 80104d2:	b160      	cbz	r0, 80104ee <_dtoa_r+0xee>
 80104d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80104d6:	2301      	movs	r3, #1
 80104d8:	6013      	str	r3, [r2, #0]
 80104da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f000 8568 	beq.w	8010fb2 <_dtoa_r+0xbb2>
 80104e2:	4b86      	ldr	r3, [pc, #536]	; (80106fc <_dtoa_r+0x2fc>)
 80104e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80104e6:	6013      	str	r3, [r2, #0]
 80104e8:	3b01      	subs	r3, #1
 80104ea:	9300      	str	r3, [sp, #0]
 80104ec:	e7da      	b.n	80104a4 <_dtoa_r+0xa4>
 80104ee:	aa10      	add	r2, sp, #64	; 0x40
 80104f0:	a911      	add	r1, sp, #68	; 0x44
 80104f2:	4620      	mov	r0, r4
 80104f4:	eeb0 0a48 	vmov.f32	s0, s16
 80104f8:	eef0 0a68 	vmov.f32	s1, s17
 80104fc:	f001 f994 	bl	8011828 <__d2b>
 8010500:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010504:	4682      	mov	sl, r0
 8010506:	2d00      	cmp	r5, #0
 8010508:	d07f      	beq.n	801060a <_dtoa_r+0x20a>
 801050a:	ee18 3a90 	vmov	r3, s17
 801050e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010512:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010516:	ec51 0b18 	vmov	r0, r1, d8
 801051a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801051e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010522:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010526:	4619      	mov	r1, r3
 8010528:	2200      	movs	r2, #0
 801052a:	4b75      	ldr	r3, [pc, #468]	; (8010700 <_dtoa_r+0x300>)
 801052c:	f7ef feb4 	bl	8000298 <__aeabi_dsub>
 8010530:	a367      	add	r3, pc, #412	; (adr r3, 80106d0 <_dtoa_r+0x2d0>)
 8010532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010536:	f7f0 f867 	bl	8000608 <__aeabi_dmul>
 801053a:	a367      	add	r3, pc, #412	; (adr r3, 80106d8 <_dtoa_r+0x2d8>)
 801053c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010540:	f7ef feac 	bl	800029c <__adddf3>
 8010544:	4606      	mov	r6, r0
 8010546:	4628      	mov	r0, r5
 8010548:	460f      	mov	r7, r1
 801054a:	f7ef fff3 	bl	8000534 <__aeabi_i2d>
 801054e:	a364      	add	r3, pc, #400	; (adr r3, 80106e0 <_dtoa_r+0x2e0>)
 8010550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010554:	f7f0 f858 	bl	8000608 <__aeabi_dmul>
 8010558:	4602      	mov	r2, r0
 801055a:	460b      	mov	r3, r1
 801055c:	4630      	mov	r0, r6
 801055e:	4639      	mov	r1, r7
 8010560:	f7ef fe9c 	bl	800029c <__adddf3>
 8010564:	4606      	mov	r6, r0
 8010566:	460f      	mov	r7, r1
 8010568:	f7f0 fafe 	bl	8000b68 <__aeabi_d2iz>
 801056c:	2200      	movs	r2, #0
 801056e:	4683      	mov	fp, r0
 8010570:	2300      	movs	r3, #0
 8010572:	4630      	mov	r0, r6
 8010574:	4639      	mov	r1, r7
 8010576:	f7f0 fab9 	bl	8000aec <__aeabi_dcmplt>
 801057a:	b148      	cbz	r0, 8010590 <_dtoa_r+0x190>
 801057c:	4658      	mov	r0, fp
 801057e:	f7ef ffd9 	bl	8000534 <__aeabi_i2d>
 8010582:	4632      	mov	r2, r6
 8010584:	463b      	mov	r3, r7
 8010586:	f7f0 faa7 	bl	8000ad8 <__aeabi_dcmpeq>
 801058a:	b908      	cbnz	r0, 8010590 <_dtoa_r+0x190>
 801058c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010590:	f1bb 0f16 	cmp.w	fp, #22
 8010594:	d857      	bhi.n	8010646 <_dtoa_r+0x246>
 8010596:	4b5b      	ldr	r3, [pc, #364]	; (8010704 <_dtoa_r+0x304>)
 8010598:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801059c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a0:	ec51 0b18 	vmov	r0, r1, d8
 80105a4:	f7f0 faa2 	bl	8000aec <__aeabi_dcmplt>
 80105a8:	2800      	cmp	r0, #0
 80105aa:	d04e      	beq.n	801064a <_dtoa_r+0x24a>
 80105ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80105b0:	2300      	movs	r3, #0
 80105b2:	930c      	str	r3, [sp, #48]	; 0x30
 80105b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105b6:	1b5b      	subs	r3, r3, r5
 80105b8:	1e5a      	subs	r2, r3, #1
 80105ba:	bf45      	ittet	mi
 80105bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80105c0:	9305      	strmi	r3, [sp, #20]
 80105c2:	2300      	movpl	r3, #0
 80105c4:	2300      	movmi	r3, #0
 80105c6:	9206      	str	r2, [sp, #24]
 80105c8:	bf54      	ite	pl
 80105ca:	9305      	strpl	r3, [sp, #20]
 80105cc:	9306      	strmi	r3, [sp, #24]
 80105ce:	f1bb 0f00 	cmp.w	fp, #0
 80105d2:	db3c      	blt.n	801064e <_dtoa_r+0x24e>
 80105d4:	9b06      	ldr	r3, [sp, #24]
 80105d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80105da:	445b      	add	r3, fp
 80105dc:	9306      	str	r3, [sp, #24]
 80105de:	2300      	movs	r3, #0
 80105e0:	9308      	str	r3, [sp, #32]
 80105e2:	9b07      	ldr	r3, [sp, #28]
 80105e4:	2b09      	cmp	r3, #9
 80105e6:	d868      	bhi.n	80106ba <_dtoa_r+0x2ba>
 80105e8:	2b05      	cmp	r3, #5
 80105ea:	bfc4      	itt	gt
 80105ec:	3b04      	subgt	r3, #4
 80105ee:	9307      	strgt	r3, [sp, #28]
 80105f0:	9b07      	ldr	r3, [sp, #28]
 80105f2:	f1a3 0302 	sub.w	r3, r3, #2
 80105f6:	bfcc      	ite	gt
 80105f8:	2500      	movgt	r5, #0
 80105fa:	2501      	movle	r5, #1
 80105fc:	2b03      	cmp	r3, #3
 80105fe:	f200 8085 	bhi.w	801070c <_dtoa_r+0x30c>
 8010602:	e8df f003 	tbb	[pc, r3]
 8010606:	3b2e      	.short	0x3b2e
 8010608:	5839      	.short	0x5839
 801060a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801060e:	441d      	add	r5, r3
 8010610:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010614:	2b20      	cmp	r3, #32
 8010616:	bfc1      	itttt	gt
 8010618:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801061c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010620:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010624:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010628:	bfd6      	itet	le
 801062a:	f1c3 0320 	rsble	r3, r3, #32
 801062e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010632:	fa06 f003 	lslle.w	r0, r6, r3
 8010636:	f7ef ff6d 	bl	8000514 <__aeabi_ui2d>
 801063a:	2201      	movs	r2, #1
 801063c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010640:	3d01      	subs	r5, #1
 8010642:	920e      	str	r2, [sp, #56]	; 0x38
 8010644:	e76f      	b.n	8010526 <_dtoa_r+0x126>
 8010646:	2301      	movs	r3, #1
 8010648:	e7b3      	b.n	80105b2 <_dtoa_r+0x1b2>
 801064a:	900c      	str	r0, [sp, #48]	; 0x30
 801064c:	e7b2      	b.n	80105b4 <_dtoa_r+0x1b4>
 801064e:	9b05      	ldr	r3, [sp, #20]
 8010650:	eba3 030b 	sub.w	r3, r3, fp
 8010654:	9305      	str	r3, [sp, #20]
 8010656:	f1cb 0300 	rsb	r3, fp, #0
 801065a:	9308      	str	r3, [sp, #32]
 801065c:	2300      	movs	r3, #0
 801065e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010660:	e7bf      	b.n	80105e2 <_dtoa_r+0x1e2>
 8010662:	2300      	movs	r3, #0
 8010664:	9309      	str	r3, [sp, #36]	; 0x24
 8010666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010668:	2b00      	cmp	r3, #0
 801066a:	dc52      	bgt.n	8010712 <_dtoa_r+0x312>
 801066c:	2301      	movs	r3, #1
 801066e:	9301      	str	r3, [sp, #4]
 8010670:	9304      	str	r3, [sp, #16]
 8010672:	461a      	mov	r2, r3
 8010674:	920a      	str	r2, [sp, #40]	; 0x28
 8010676:	e00b      	b.n	8010690 <_dtoa_r+0x290>
 8010678:	2301      	movs	r3, #1
 801067a:	e7f3      	b.n	8010664 <_dtoa_r+0x264>
 801067c:	2300      	movs	r3, #0
 801067e:	9309      	str	r3, [sp, #36]	; 0x24
 8010680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010682:	445b      	add	r3, fp
 8010684:	9301      	str	r3, [sp, #4]
 8010686:	3301      	adds	r3, #1
 8010688:	2b01      	cmp	r3, #1
 801068a:	9304      	str	r3, [sp, #16]
 801068c:	bfb8      	it	lt
 801068e:	2301      	movlt	r3, #1
 8010690:	69e0      	ldr	r0, [r4, #28]
 8010692:	2100      	movs	r1, #0
 8010694:	2204      	movs	r2, #4
 8010696:	f102 0614 	add.w	r6, r2, #20
 801069a:	429e      	cmp	r6, r3
 801069c:	d93d      	bls.n	801071a <_dtoa_r+0x31a>
 801069e:	6041      	str	r1, [r0, #4]
 80106a0:	4620      	mov	r0, r4
 80106a2:	f000 fd9f 	bl	80111e4 <_Balloc>
 80106a6:	9000      	str	r0, [sp, #0]
 80106a8:	2800      	cmp	r0, #0
 80106aa:	d139      	bne.n	8010720 <_dtoa_r+0x320>
 80106ac:	4b16      	ldr	r3, [pc, #88]	; (8010708 <_dtoa_r+0x308>)
 80106ae:	4602      	mov	r2, r0
 80106b0:	f240 11af 	movw	r1, #431	; 0x1af
 80106b4:	e6bd      	b.n	8010432 <_dtoa_r+0x32>
 80106b6:	2301      	movs	r3, #1
 80106b8:	e7e1      	b.n	801067e <_dtoa_r+0x27e>
 80106ba:	2501      	movs	r5, #1
 80106bc:	2300      	movs	r3, #0
 80106be:	9307      	str	r3, [sp, #28]
 80106c0:	9509      	str	r5, [sp, #36]	; 0x24
 80106c2:	f04f 33ff 	mov.w	r3, #4294967295
 80106c6:	9301      	str	r3, [sp, #4]
 80106c8:	9304      	str	r3, [sp, #16]
 80106ca:	2200      	movs	r2, #0
 80106cc:	2312      	movs	r3, #18
 80106ce:	e7d1      	b.n	8010674 <_dtoa_r+0x274>
 80106d0:	636f4361 	.word	0x636f4361
 80106d4:	3fd287a7 	.word	0x3fd287a7
 80106d8:	8b60c8b3 	.word	0x8b60c8b3
 80106dc:	3fc68a28 	.word	0x3fc68a28
 80106e0:	509f79fb 	.word	0x509f79fb
 80106e4:	3fd34413 	.word	0x3fd34413
 80106e8:	08012249 	.word	0x08012249
 80106ec:	08012260 	.word	0x08012260
 80106f0:	7ff00000 	.word	0x7ff00000
 80106f4:	08012245 	.word	0x08012245
 80106f8:	0801223c 	.word	0x0801223c
 80106fc:	08012219 	.word	0x08012219
 8010700:	3ff80000 	.word	0x3ff80000
 8010704:	08012350 	.word	0x08012350
 8010708:	080122b8 	.word	0x080122b8
 801070c:	2301      	movs	r3, #1
 801070e:	9309      	str	r3, [sp, #36]	; 0x24
 8010710:	e7d7      	b.n	80106c2 <_dtoa_r+0x2c2>
 8010712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010714:	9301      	str	r3, [sp, #4]
 8010716:	9304      	str	r3, [sp, #16]
 8010718:	e7ba      	b.n	8010690 <_dtoa_r+0x290>
 801071a:	3101      	adds	r1, #1
 801071c:	0052      	lsls	r2, r2, #1
 801071e:	e7ba      	b.n	8010696 <_dtoa_r+0x296>
 8010720:	69e3      	ldr	r3, [r4, #28]
 8010722:	9a00      	ldr	r2, [sp, #0]
 8010724:	601a      	str	r2, [r3, #0]
 8010726:	9b04      	ldr	r3, [sp, #16]
 8010728:	2b0e      	cmp	r3, #14
 801072a:	f200 80a8 	bhi.w	801087e <_dtoa_r+0x47e>
 801072e:	2d00      	cmp	r5, #0
 8010730:	f000 80a5 	beq.w	801087e <_dtoa_r+0x47e>
 8010734:	f1bb 0f00 	cmp.w	fp, #0
 8010738:	dd38      	ble.n	80107ac <_dtoa_r+0x3ac>
 801073a:	4bc0      	ldr	r3, [pc, #768]	; (8010a3c <_dtoa_r+0x63c>)
 801073c:	f00b 020f 	and.w	r2, fp, #15
 8010740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010744:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010748:	e9d3 6700 	ldrd	r6, r7, [r3]
 801074c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010750:	d019      	beq.n	8010786 <_dtoa_r+0x386>
 8010752:	4bbb      	ldr	r3, [pc, #748]	; (8010a40 <_dtoa_r+0x640>)
 8010754:	ec51 0b18 	vmov	r0, r1, d8
 8010758:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801075c:	f7f0 f87e 	bl	800085c <__aeabi_ddiv>
 8010760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010764:	f008 080f 	and.w	r8, r8, #15
 8010768:	2503      	movs	r5, #3
 801076a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010a40 <_dtoa_r+0x640>
 801076e:	f1b8 0f00 	cmp.w	r8, #0
 8010772:	d10a      	bne.n	801078a <_dtoa_r+0x38a>
 8010774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010778:	4632      	mov	r2, r6
 801077a:	463b      	mov	r3, r7
 801077c:	f7f0 f86e 	bl	800085c <__aeabi_ddiv>
 8010780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010784:	e02b      	b.n	80107de <_dtoa_r+0x3de>
 8010786:	2502      	movs	r5, #2
 8010788:	e7ef      	b.n	801076a <_dtoa_r+0x36a>
 801078a:	f018 0f01 	tst.w	r8, #1
 801078e:	d008      	beq.n	80107a2 <_dtoa_r+0x3a2>
 8010790:	4630      	mov	r0, r6
 8010792:	4639      	mov	r1, r7
 8010794:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010798:	f7ef ff36 	bl	8000608 <__aeabi_dmul>
 801079c:	3501      	adds	r5, #1
 801079e:	4606      	mov	r6, r0
 80107a0:	460f      	mov	r7, r1
 80107a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80107a6:	f109 0908 	add.w	r9, r9, #8
 80107aa:	e7e0      	b.n	801076e <_dtoa_r+0x36e>
 80107ac:	f000 809f 	beq.w	80108ee <_dtoa_r+0x4ee>
 80107b0:	f1cb 0600 	rsb	r6, fp, #0
 80107b4:	4ba1      	ldr	r3, [pc, #644]	; (8010a3c <_dtoa_r+0x63c>)
 80107b6:	4fa2      	ldr	r7, [pc, #648]	; (8010a40 <_dtoa_r+0x640>)
 80107b8:	f006 020f 	and.w	r2, r6, #15
 80107bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c4:	ec51 0b18 	vmov	r0, r1, d8
 80107c8:	f7ef ff1e 	bl	8000608 <__aeabi_dmul>
 80107cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107d0:	1136      	asrs	r6, r6, #4
 80107d2:	2300      	movs	r3, #0
 80107d4:	2502      	movs	r5, #2
 80107d6:	2e00      	cmp	r6, #0
 80107d8:	d17e      	bne.n	80108d8 <_dtoa_r+0x4d8>
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d1d0      	bne.n	8010780 <_dtoa_r+0x380>
 80107de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80107e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	f000 8084 	beq.w	80108f2 <_dtoa_r+0x4f2>
 80107ea:	4b96      	ldr	r3, [pc, #600]	; (8010a44 <_dtoa_r+0x644>)
 80107ec:	2200      	movs	r2, #0
 80107ee:	4640      	mov	r0, r8
 80107f0:	4649      	mov	r1, r9
 80107f2:	f7f0 f97b 	bl	8000aec <__aeabi_dcmplt>
 80107f6:	2800      	cmp	r0, #0
 80107f8:	d07b      	beq.n	80108f2 <_dtoa_r+0x4f2>
 80107fa:	9b04      	ldr	r3, [sp, #16]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d078      	beq.n	80108f2 <_dtoa_r+0x4f2>
 8010800:	9b01      	ldr	r3, [sp, #4]
 8010802:	2b00      	cmp	r3, #0
 8010804:	dd39      	ble.n	801087a <_dtoa_r+0x47a>
 8010806:	4b90      	ldr	r3, [pc, #576]	; (8010a48 <_dtoa_r+0x648>)
 8010808:	2200      	movs	r2, #0
 801080a:	4640      	mov	r0, r8
 801080c:	4649      	mov	r1, r9
 801080e:	f7ef fefb 	bl	8000608 <__aeabi_dmul>
 8010812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010816:	9e01      	ldr	r6, [sp, #4]
 8010818:	f10b 37ff 	add.w	r7, fp, #4294967295
 801081c:	3501      	adds	r5, #1
 801081e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010822:	4628      	mov	r0, r5
 8010824:	f7ef fe86 	bl	8000534 <__aeabi_i2d>
 8010828:	4642      	mov	r2, r8
 801082a:	464b      	mov	r3, r9
 801082c:	f7ef feec 	bl	8000608 <__aeabi_dmul>
 8010830:	4b86      	ldr	r3, [pc, #536]	; (8010a4c <_dtoa_r+0x64c>)
 8010832:	2200      	movs	r2, #0
 8010834:	f7ef fd32 	bl	800029c <__adddf3>
 8010838:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801083c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010840:	9303      	str	r3, [sp, #12]
 8010842:	2e00      	cmp	r6, #0
 8010844:	d158      	bne.n	80108f8 <_dtoa_r+0x4f8>
 8010846:	4b82      	ldr	r3, [pc, #520]	; (8010a50 <_dtoa_r+0x650>)
 8010848:	2200      	movs	r2, #0
 801084a:	4640      	mov	r0, r8
 801084c:	4649      	mov	r1, r9
 801084e:	f7ef fd23 	bl	8000298 <__aeabi_dsub>
 8010852:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010856:	4680      	mov	r8, r0
 8010858:	4689      	mov	r9, r1
 801085a:	f7f0 f965 	bl	8000b28 <__aeabi_dcmpgt>
 801085e:	2800      	cmp	r0, #0
 8010860:	f040 8296 	bne.w	8010d90 <_dtoa_r+0x990>
 8010864:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010868:	4640      	mov	r0, r8
 801086a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801086e:	4649      	mov	r1, r9
 8010870:	f7f0 f93c 	bl	8000aec <__aeabi_dcmplt>
 8010874:	2800      	cmp	r0, #0
 8010876:	f040 8289 	bne.w	8010d8c <_dtoa_r+0x98c>
 801087a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801087e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010880:	2b00      	cmp	r3, #0
 8010882:	f2c0 814e 	blt.w	8010b22 <_dtoa_r+0x722>
 8010886:	f1bb 0f0e 	cmp.w	fp, #14
 801088a:	f300 814a 	bgt.w	8010b22 <_dtoa_r+0x722>
 801088e:	4b6b      	ldr	r3, [pc, #428]	; (8010a3c <_dtoa_r+0x63c>)
 8010890:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010894:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801089a:	2b00      	cmp	r3, #0
 801089c:	f280 80dc 	bge.w	8010a58 <_dtoa_r+0x658>
 80108a0:	9b04      	ldr	r3, [sp, #16]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f300 80d8 	bgt.w	8010a58 <_dtoa_r+0x658>
 80108a8:	f040 826f 	bne.w	8010d8a <_dtoa_r+0x98a>
 80108ac:	4b68      	ldr	r3, [pc, #416]	; (8010a50 <_dtoa_r+0x650>)
 80108ae:	2200      	movs	r2, #0
 80108b0:	4640      	mov	r0, r8
 80108b2:	4649      	mov	r1, r9
 80108b4:	f7ef fea8 	bl	8000608 <__aeabi_dmul>
 80108b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80108bc:	f7f0 f92a 	bl	8000b14 <__aeabi_dcmpge>
 80108c0:	9e04      	ldr	r6, [sp, #16]
 80108c2:	4637      	mov	r7, r6
 80108c4:	2800      	cmp	r0, #0
 80108c6:	f040 8245 	bne.w	8010d54 <_dtoa_r+0x954>
 80108ca:	9d00      	ldr	r5, [sp, #0]
 80108cc:	2331      	movs	r3, #49	; 0x31
 80108ce:	f805 3b01 	strb.w	r3, [r5], #1
 80108d2:	f10b 0b01 	add.w	fp, fp, #1
 80108d6:	e241      	b.n	8010d5c <_dtoa_r+0x95c>
 80108d8:	07f2      	lsls	r2, r6, #31
 80108da:	d505      	bpl.n	80108e8 <_dtoa_r+0x4e8>
 80108dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108e0:	f7ef fe92 	bl	8000608 <__aeabi_dmul>
 80108e4:	3501      	adds	r5, #1
 80108e6:	2301      	movs	r3, #1
 80108e8:	1076      	asrs	r6, r6, #1
 80108ea:	3708      	adds	r7, #8
 80108ec:	e773      	b.n	80107d6 <_dtoa_r+0x3d6>
 80108ee:	2502      	movs	r5, #2
 80108f0:	e775      	b.n	80107de <_dtoa_r+0x3de>
 80108f2:	9e04      	ldr	r6, [sp, #16]
 80108f4:	465f      	mov	r7, fp
 80108f6:	e792      	b.n	801081e <_dtoa_r+0x41e>
 80108f8:	9900      	ldr	r1, [sp, #0]
 80108fa:	4b50      	ldr	r3, [pc, #320]	; (8010a3c <_dtoa_r+0x63c>)
 80108fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010900:	4431      	add	r1, r6
 8010902:	9102      	str	r1, [sp, #8]
 8010904:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010906:	eeb0 9a47 	vmov.f32	s18, s14
 801090a:	eef0 9a67 	vmov.f32	s19, s15
 801090e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010912:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010916:	2900      	cmp	r1, #0
 8010918:	d044      	beq.n	80109a4 <_dtoa_r+0x5a4>
 801091a:	494e      	ldr	r1, [pc, #312]	; (8010a54 <_dtoa_r+0x654>)
 801091c:	2000      	movs	r0, #0
 801091e:	f7ef ff9d 	bl	800085c <__aeabi_ddiv>
 8010922:	ec53 2b19 	vmov	r2, r3, d9
 8010926:	f7ef fcb7 	bl	8000298 <__aeabi_dsub>
 801092a:	9d00      	ldr	r5, [sp, #0]
 801092c:	ec41 0b19 	vmov	d9, r0, r1
 8010930:	4649      	mov	r1, r9
 8010932:	4640      	mov	r0, r8
 8010934:	f7f0 f918 	bl	8000b68 <__aeabi_d2iz>
 8010938:	4606      	mov	r6, r0
 801093a:	f7ef fdfb 	bl	8000534 <__aeabi_i2d>
 801093e:	4602      	mov	r2, r0
 8010940:	460b      	mov	r3, r1
 8010942:	4640      	mov	r0, r8
 8010944:	4649      	mov	r1, r9
 8010946:	f7ef fca7 	bl	8000298 <__aeabi_dsub>
 801094a:	3630      	adds	r6, #48	; 0x30
 801094c:	f805 6b01 	strb.w	r6, [r5], #1
 8010950:	ec53 2b19 	vmov	r2, r3, d9
 8010954:	4680      	mov	r8, r0
 8010956:	4689      	mov	r9, r1
 8010958:	f7f0 f8c8 	bl	8000aec <__aeabi_dcmplt>
 801095c:	2800      	cmp	r0, #0
 801095e:	d164      	bne.n	8010a2a <_dtoa_r+0x62a>
 8010960:	4642      	mov	r2, r8
 8010962:	464b      	mov	r3, r9
 8010964:	4937      	ldr	r1, [pc, #220]	; (8010a44 <_dtoa_r+0x644>)
 8010966:	2000      	movs	r0, #0
 8010968:	f7ef fc96 	bl	8000298 <__aeabi_dsub>
 801096c:	ec53 2b19 	vmov	r2, r3, d9
 8010970:	f7f0 f8bc 	bl	8000aec <__aeabi_dcmplt>
 8010974:	2800      	cmp	r0, #0
 8010976:	f040 80b6 	bne.w	8010ae6 <_dtoa_r+0x6e6>
 801097a:	9b02      	ldr	r3, [sp, #8]
 801097c:	429d      	cmp	r5, r3
 801097e:	f43f af7c 	beq.w	801087a <_dtoa_r+0x47a>
 8010982:	4b31      	ldr	r3, [pc, #196]	; (8010a48 <_dtoa_r+0x648>)
 8010984:	ec51 0b19 	vmov	r0, r1, d9
 8010988:	2200      	movs	r2, #0
 801098a:	f7ef fe3d 	bl	8000608 <__aeabi_dmul>
 801098e:	4b2e      	ldr	r3, [pc, #184]	; (8010a48 <_dtoa_r+0x648>)
 8010990:	ec41 0b19 	vmov	d9, r0, r1
 8010994:	2200      	movs	r2, #0
 8010996:	4640      	mov	r0, r8
 8010998:	4649      	mov	r1, r9
 801099a:	f7ef fe35 	bl	8000608 <__aeabi_dmul>
 801099e:	4680      	mov	r8, r0
 80109a0:	4689      	mov	r9, r1
 80109a2:	e7c5      	b.n	8010930 <_dtoa_r+0x530>
 80109a4:	ec51 0b17 	vmov	r0, r1, d7
 80109a8:	f7ef fe2e 	bl	8000608 <__aeabi_dmul>
 80109ac:	9b02      	ldr	r3, [sp, #8]
 80109ae:	9d00      	ldr	r5, [sp, #0]
 80109b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80109b2:	ec41 0b19 	vmov	d9, r0, r1
 80109b6:	4649      	mov	r1, r9
 80109b8:	4640      	mov	r0, r8
 80109ba:	f7f0 f8d5 	bl	8000b68 <__aeabi_d2iz>
 80109be:	4606      	mov	r6, r0
 80109c0:	f7ef fdb8 	bl	8000534 <__aeabi_i2d>
 80109c4:	3630      	adds	r6, #48	; 0x30
 80109c6:	4602      	mov	r2, r0
 80109c8:	460b      	mov	r3, r1
 80109ca:	4640      	mov	r0, r8
 80109cc:	4649      	mov	r1, r9
 80109ce:	f7ef fc63 	bl	8000298 <__aeabi_dsub>
 80109d2:	f805 6b01 	strb.w	r6, [r5], #1
 80109d6:	9b02      	ldr	r3, [sp, #8]
 80109d8:	429d      	cmp	r5, r3
 80109da:	4680      	mov	r8, r0
 80109dc:	4689      	mov	r9, r1
 80109de:	f04f 0200 	mov.w	r2, #0
 80109e2:	d124      	bne.n	8010a2e <_dtoa_r+0x62e>
 80109e4:	4b1b      	ldr	r3, [pc, #108]	; (8010a54 <_dtoa_r+0x654>)
 80109e6:	ec51 0b19 	vmov	r0, r1, d9
 80109ea:	f7ef fc57 	bl	800029c <__adddf3>
 80109ee:	4602      	mov	r2, r0
 80109f0:	460b      	mov	r3, r1
 80109f2:	4640      	mov	r0, r8
 80109f4:	4649      	mov	r1, r9
 80109f6:	f7f0 f897 	bl	8000b28 <__aeabi_dcmpgt>
 80109fa:	2800      	cmp	r0, #0
 80109fc:	d173      	bne.n	8010ae6 <_dtoa_r+0x6e6>
 80109fe:	ec53 2b19 	vmov	r2, r3, d9
 8010a02:	4914      	ldr	r1, [pc, #80]	; (8010a54 <_dtoa_r+0x654>)
 8010a04:	2000      	movs	r0, #0
 8010a06:	f7ef fc47 	bl	8000298 <__aeabi_dsub>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	4640      	mov	r0, r8
 8010a10:	4649      	mov	r1, r9
 8010a12:	f7f0 f86b 	bl	8000aec <__aeabi_dcmplt>
 8010a16:	2800      	cmp	r0, #0
 8010a18:	f43f af2f 	beq.w	801087a <_dtoa_r+0x47a>
 8010a1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010a1e:	1e6b      	subs	r3, r5, #1
 8010a20:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010a26:	2b30      	cmp	r3, #48	; 0x30
 8010a28:	d0f8      	beq.n	8010a1c <_dtoa_r+0x61c>
 8010a2a:	46bb      	mov	fp, r7
 8010a2c:	e04a      	b.n	8010ac4 <_dtoa_r+0x6c4>
 8010a2e:	4b06      	ldr	r3, [pc, #24]	; (8010a48 <_dtoa_r+0x648>)
 8010a30:	f7ef fdea 	bl	8000608 <__aeabi_dmul>
 8010a34:	4680      	mov	r8, r0
 8010a36:	4689      	mov	r9, r1
 8010a38:	e7bd      	b.n	80109b6 <_dtoa_r+0x5b6>
 8010a3a:	bf00      	nop
 8010a3c:	08012350 	.word	0x08012350
 8010a40:	08012328 	.word	0x08012328
 8010a44:	3ff00000 	.word	0x3ff00000
 8010a48:	40240000 	.word	0x40240000
 8010a4c:	401c0000 	.word	0x401c0000
 8010a50:	40140000 	.word	0x40140000
 8010a54:	3fe00000 	.word	0x3fe00000
 8010a58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010a5c:	9d00      	ldr	r5, [sp, #0]
 8010a5e:	4642      	mov	r2, r8
 8010a60:	464b      	mov	r3, r9
 8010a62:	4630      	mov	r0, r6
 8010a64:	4639      	mov	r1, r7
 8010a66:	f7ef fef9 	bl	800085c <__aeabi_ddiv>
 8010a6a:	f7f0 f87d 	bl	8000b68 <__aeabi_d2iz>
 8010a6e:	9001      	str	r0, [sp, #4]
 8010a70:	f7ef fd60 	bl	8000534 <__aeabi_i2d>
 8010a74:	4642      	mov	r2, r8
 8010a76:	464b      	mov	r3, r9
 8010a78:	f7ef fdc6 	bl	8000608 <__aeabi_dmul>
 8010a7c:	4602      	mov	r2, r0
 8010a7e:	460b      	mov	r3, r1
 8010a80:	4630      	mov	r0, r6
 8010a82:	4639      	mov	r1, r7
 8010a84:	f7ef fc08 	bl	8000298 <__aeabi_dsub>
 8010a88:	9e01      	ldr	r6, [sp, #4]
 8010a8a:	9f04      	ldr	r7, [sp, #16]
 8010a8c:	3630      	adds	r6, #48	; 0x30
 8010a8e:	f805 6b01 	strb.w	r6, [r5], #1
 8010a92:	9e00      	ldr	r6, [sp, #0]
 8010a94:	1bae      	subs	r6, r5, r6
 8010a96:	42b7      	cmp	r7, r6
 8010a98:	4602      	mov	r2, r0
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	d134      	bne.n	8010b08 <_dtoa_r+0x708>
 8010a9e:	f7ef fbfd 	bl	800029c <__adddf3>
 8010aa2:	4642      	mov	r2, r8
 8010aa4:	464b      	mov	r3, r9
 8010aa6:	4606      	mov	r6, r0
 8010aa8:	460f      	mov	r7, r1
 8010aaa:	f7f0 f83d 	bl	8000b28 <__aeabi_dcmpgt>
 8010aae:	b9c8      	cbnz	r0, 8010ae4 <_dtoa_r+0x6e4>
 8010ab0:	4642      	mov	r2, r8
 8010ab2:	464b      	mov	r3, r9
 8010ab4:	4630      	mov	r0, r6
 8010ab6:	4639      	mov	r1, r7
 8010ab8:	f7f0 f80e 	bl	8000ad8 <__aeabi_dcmpeq>
 8010abc:	b110      	cbz	r0, 8010ac4 <_dtoa_r+0x6c4>
 8010abe:	9b01      	ldr	r3, [sp, #4]
 8010ac0:	07db      	lsls	r3, r3, #31
 8010ac2:	d40f      	bmi.n	8010ae4 <_dtoa_r+0x6e4>
 8010ac4:	4651      	mov	r1, sl
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	f000 fbcc 	bl	8011264 <_Bfree>
 8010acc:	2300      	movs	r3, #0
 8010ace:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ad0:	702b      	strb	r3, [r5, #0]
 8010ad2:	f10b 0301 	add.w	r3, fp, #1
 8010ad6:	6013      	str	r3, [r2, #0]
 8010ad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	f43f ace2 	beq.w	80104a4 <_dtoa_r+0xa4>
 8010ae0:	601d      	str	r5, [r3, #0]
 8010ae2:	e4df      	b.n	80104a4 <_dtoa_r+0xa4>
 8010ae4:	465f      	mov	r7, fp
 8010ae6:	462b      	mov	r3, r5
 8010ae8:	461d      	mov	r5, r3
 8010aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010aee:	2a39      	cmp	r2, #57	; 0x39
 8010af0:	d106      	bne.n	8010b00 <_dtoa_r+0x700>
 8010af2:	9a00      	ldr	r2, [sp, #0]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d1f7      	bne.n	8010ae8 <_dtoa_r+0x6e8>
 8010af8:	9900      	ldr	r1, [sp, #0]
 8010afa:	2230      	movs	r2, #48	; 0x30
 8010afc:	3701      	adds	r7, #1
 8010afe:	700a      	strb	r2, [r1, #0]
 8010b00:	781a      	ldrb	r2, [r3, #0]
 8010b02:	3201      	adds	r2, #1
 8010b04:	701a      	strb	r2, [r3, #0]
 8010b06:	e790      	b.n	8010a2a <_dtoa_r+0x62a>
 8010b08:	4ba3      	ldr	r3, [pc, #652]	; (8010d98 <_dtoa_r+0x998>)
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	f7ef fd7c 	bl	8000608 <__aeabi_dmul>
 8010b10:	2200      	movs	r2, #0
 8010b12:	2300      	movs	r3, #0
 8010b14:	4606      	mov	r6, r0
 8010b16:	460f      	mov	r7, r1
 8010b18:	f7ef ffde 	bl	8000ad8 <__aeabi_dcmpeq>
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	d09e      	beq.n	8010a5e <_dtoa_r+0x65e>
 8010b20:	e7d0      	b.n	8010ac4 <_dtoa_r+0x6c4>
 8010b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b24:	2a00      	cmp	r2, #0
 8010b26:	f000 80ca 	beq.w	8010cbe <_dtoa_r+0x8be>
 8010b2a:	9a07      	ldr	r2, [sp, #28]
 8010b2c:	2a01      	cmp	r2, #1
 8010b2e:	f300 80ad 	bgt.w	8010c8c <_dtoa_r+0x88c>
 8010b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b34:	2a00      	cmp	r2, #0
 8010b36:	f000 80a5 	beq.w	8010c84 <_dtoa_r+0x884>
 8010b3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010b3e:	9e08      	ldr	r6, [sp, #32]
 8010b40:	9d05      	ldr	r5, [sp, #20]
 8010b42:	9a05      	ldr	r2, [sp, #20]
 8010b44:	441a      	add	r2, r3
 8010b46:	9205      	str	r2, [sp, #20]
 8010b48:	9a06      	ldr	r2, [sp, #24]
 8010b4a:	2101      	movs	r1, #1
 8010b4c:	441a      	add	r2, r3
 8010b4e:	4620      	mov	r0, r4
 8010b50:	9206      	str	r2, [sp, #24]
 8010b52:	f000 fc3d 	bl	80113d0 <__i2b>
 8010b56:	4607      	mov	r7, r0
 8010b58:	b165      	cbz	r5, 8010b74 <_dtoa_r+0x774>
 8010b5a:	9b06      	ldr	r3, [sp, #24]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	dd09      	ble.n	8010b74 <_dtoa_r+0x774>
 8010b60:	42ab      	cmp	r3, r5
 8010b62:	9a05      	ldr	r2, [sp, #20]
 8010b64:	bfa8      	it	ge
 8010b66:	462b      	movge	r3, r5
 8010b68:	1ad2      	subs	r2, r2, r3
 8010b6a:	9205      	str	r2, [sp, #20]
 8010b6c:	9a06      	ldr	r2, [sp, #24]
 8010b6e:	1aed      	subs	r5, r5, r3
 8010b70:	1ad3      	subs	r3, r2, r3
 8010b72:	9306      	str	r3, [sp, #24]
 8010b74:	9b08      	ldr	r3, [sp, #32]
 8010b76:	b1f3      	cbz	r3, 8010bb6 <_dtoa_r+0x7b6>
 8010b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	f000 80a3 	beq.w	8010cc6 <_dtoa_r+0x8c6>
 8010b80:	2e00      	cmp	r6, #0
 8010b82:	dd10      	ble.n	8010ba6 <_dtoa_r+0x7a6>
 8010b84:	4639      	mov	r1, r7
 8010b86:	4632      	mov	r2, r6
 8010b88:	4620      	mov	r0, r4
 8010b8a:	f000 fce1 	bl	8011550 <__pow5mult>
 8010b8e:	4652      	mov	r2, sl
 8010b90:	4601      	mov	r1, r0
 8010b92:	4607      	mov	r7, r0
 8010b94:	4620      	mov	r0, r4
 8010b96:	f000 fc31 	bl	80113fc <__multiply>
 8010b9a:	4651      	mov	r1, sl
 8010b9c:	4680      	mov	r8, r0
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	f000 fb60 	bl	8011264 <_Bfree>
 8010ba4:	46c2      	mov	sl, r8
 8010ba6:	9b08      	ldr	r3, [sp, #32]
 8010ba8:	1b9a      	subs	r2, r3, r6
 8010baa:	d004      	beq.n	8010bb6 <_dtoa_r+0x7b6>
 8010bac:	4651      	mov	r1, sl
 8010bae:	4620      	mov	r0, r4
 8010bb0:	f000 fcce 	bl	8011550 <__pow5mult>
 8010bb4:	4682      	mov	sl, r0
 8010bb6:	2101      	movs	r1, #1
 8010bb8:	4620      	mov	r0, r4
 8010bba:	f000 fc09 	bl	80113d0 <__i2b>
 8010bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	4606      	mov	r6, r0
 8010bc4:	f340 8081 	ble.w	8010cca <_dtoa_r+0x8ca>
 8010bc8:	461a      	mov	r2, r3
 8010bca:	4601      	mov	r1, r0
 8010bcc:	4620      	mov	r0, r4
 8010bce:	f000 fcbf 	bl	8011550 <__pow5mult>
 8010bd2:	9b07      	ldr	r3, [sp, #28]
 8010bd4:	2b01      	cmp	r3, #1
 8010bd6:	4606      	mov	r6, r0
 8010bd8:	dd7a      	ble.n	8010cd0 <_dtoa_r+0x8d0>
 8010bda:	f04f 0800 	mov.w	r8, #0
 8010bde:	6933      	ldr	r3, [r6, #16]
 8010be0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010be4:	6918      	ldr	r0, [r3, #16]
 8010be6:	f000 fba5 	bl	8011334 <__hi0bits>
 8010bea:	f1c0 0020 	rsb	r0, r0, #32
 8010bee:	9b06      	ldr	r3, [sp, #24]
 8010bf0:	4418      	add	r0, r3
 8010bf2:	f010 001f 	ands.w	r0, r0, #31
 8010bf6:	f000 8094 	beq.w	8010d22 <_dtoa_r+0x922>
 8010bfa:	f1c0 0320 	rsb	r3, r0, #32
 8010bfe:	2b04      	cmp	r3, #4
 8010c00:	f340 8085 	ble.w	8010d0e <_dtoa_r+0x90e>
 8010c04:	9b05      	ldr	r3, [sp, #20]
 8010c06:	f1c0 001c 	rsb	r0, r0, #28
 8010c0a:	4403      	add	r3, r0
 8010c0c:	9305      	str	r3, [sp, #20]
 8010c0e:	9b06      	ldr	r3, [sp, #24]
 8010c10:	4403      	add	r3, r0
 8010c12:	4405      	add	r5, r0
 8010c14:	9306      	str	r3, [sp, #24]
 8010c16:	9b05      	ldr	r3, [sp, #20]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	dd05      	ble.n	8010c28 <_dtoa_r+0x828>
 8010c1c:	4651      	mov	r1, sl
 8010c1e:	461a      	mov	r2, r3
 8010c20:	4620      	mov	r0, r4
 8010c22:	f000 fcef 	bl	8011604 <__lshift>
 8010c26:	4682      	mov	sl, r0
 8010c28:	9b06      	ldr	r3, [sp, #24]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	dd05      	ble.n	8010c3a <_dtoa_r+0x83a>
 8010c2e:	4631      	mov	r1, r6
 8010c30:	461a      	mov	r2, r3
 8010c32:	4620      	mov	r0, r4
 8010c34:	f000 fce6 	bl	8011604 <__lshift>
 8010c38:	4606      	mov	r6, r0
 8010c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d072      	beq.n	8010d26 <_dtoa_r+0x926>
 8010c40:	4631      	mov	r1, r6
 8010c42:	4650      	mov	r0, sl
 8010c44:	f000 fd4a 	bl	80116dc <__mcmp>
 8010c48:	2800      	cmp	r0, #0
 8010c4a:	da6c      	bge.n	8010d26 <_dtoa_r+0x926>
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	4651      	mov	r1, sl
 8010c50:	220a      	movs	r2, #10
 8010c52:	4620      	mov	r0, r4
 8010c54:	f000 fb28 	bl	80112a8 <__multadd>
 8010c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010c5e:	4682      	mov	sl, r0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	f000 81b0 	beq.w	8010fc6 <_dtoa_r+0xbc6>
 8010c66:	2300      	movs	r3, #0
 8010c68:	4639      	mov	r1, r7
 8010c6a:	220a      	movs	r2, #10
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	f000 fb1b 	bl	80112a8 <__multadd>
 8010c72:	9b01      	ldr	r3, [sp, #4]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	4607      	mov	r7, r0
 8010c78:	f300 8096 	bgt.w	8010da8 <_dtoa_r+0x9a8>
 8010c7c:	9b07      	ldr	r3, [sp, #28]
 8010c7e:	2b02      	cmp	r3, #2
 8010c80:	dc59      	bgt.n	8010d36 <_dtoa_r+0x936>
 8010c82:	e091      	b.n	8010da8 <_dtoa_r+0x9a8>
 8010c84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010c8a:	e758      	b.n	8010b3e <_dtoa_r+0x73e>
 8010c8c:	9b04      	ldr	r3, [sp, #16]
 8010c8e:	1e5e      	subs	r6, r3, #1
 8010c90:	9b08      	ldr	r3, [sp, #32]
 8010c92:	42b3      	cmp	r3, r6
 8010c94:	bfbf      	itttt	lt
 8010c96:	9b08      	ldrlt	r3, [sp, #32]
 8010c98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010c9a:	9608      	strlt	r6, [sp, #32]
 8010c9c:	1af3      	sublt	r3, r6, r3
 8010c9e:	bfb4      	ite	lt
 8010ca0:	18d2      	addlt	r2, r2, r3
 8010ca2:	1b9e      	subge	r6, r3, r6
 8010ca4:	9b04      	ldr	r3, [sp, #16]
 8010ca6:	bfbc      	itt	lt
 8010ca8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010caa:	2600      	movlt	r6, #0
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	bfb7      	itett	lt
 8010cb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010cb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010cb8:	1a9d      	sublt	r5, r3, r2
 8010cba:	2300      	movlt	r3, #0
 8010cbc:	e741      	b.n	8010b42 <_dtoa_r+0x742>
 8010cbe:	9e08      	ldr	r6, [sp, #32]
 8010cc0:	9d05      	ldr	r5, [sp, #20]
 8010cc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010cc4:	e748      	b.n	8010b58 <_dtoa_r+0x758>
 8010cc6:	9a08      	ldr	r2, [sp, #32]
 8010cc8:	e770      	b.n	8010bac <_dtoa_r+0x7ac>
 8010cca:	9b07      	ldr	r3, [sp, #28]
 8010ccc:	2b01      	cmp	r3, #1
 8010cce:	dc19      	bgt.n	8010d04 <_dtoa_r+0x904>
 8010cd0:	9b02      	ldr	r3, [sp, #8]
 8010cd2:	b9bb      	cbnz	r3, 8010d04 <_dtoa_r+0x904>
 8010cd4:	9b03      	ldr	r3, [sp, #12]
 8010cd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010cda:	b99b      	cbnz	r3, 8010d04 <_dtoa_r+0x904>
 8010cdc:	9b03      	ldr	r3, [sp, #12]
 8010cde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010ce2:	0d1b      	lsrs	r3, r3, #20
 8010ce4:	051b      	lsls	r3, r3, #20
 8010ce6:	b183      	cbz	r3, 8010d0a <_dtoa_r+0x90a>
 8010ce8:	9b05      	ldr	r3, [sp, #20]
 8010cea:	3301      	adds	r3, #1
 8010cec:	9305      	str	r3, [sp, #20]
 8010cee:	9b06      	ldr	r3, [sp, #24]
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	9306      	str	r3, [sp, #24]
 8010cf4:	f04f 0801 	mov.w	r8, #1
 8010cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	f47f af6f 	bne.w	8010bde <_dtoa_r+0x7de>
 8010d00:	2001      	movs	r0, #1
 8010d02:	e774      	b.n	8010bee <_dtoa_r+0x7ee>
 8010d04:	f04f 0800 	mov.w	r8, #0
 8010d08:	e7f6      	b.n	8010cf8 <_dtoa_r+0x8f8>
 8010d0a:	4698      	mov	r8, r3
 8010d0c:	e7f4      	b.n	8010cf8 <_dtoa_r+0x8f8>
 8010d0e:	d082      	beq.n	8010c16 <_dtoa_r+0x816>
 8010d10:	9a05      	ldr	r2, [sp, #20]
 8010d12:	331c      	adds	r3, #28
 8010d14:	441a      	add	r2, r3
 8010d16:	9205      	str	r2, [sp, #20]
 8010d18:	9a06      	ldr	r2, [sp, #24]
 8010d1a:	441a      	add	r2, r3
 8010d1c:	441d      	add	r5, r3
 8010d1e:	9206      	str	r2, [sp, #24]
 8010d20:	e779      	b.n	8010c16 <_dtoa_r+0x816>
 8010d22:	4603      	mov	r3, r0
 8010d24:	e7f4      	b.n	8010d10 <_dtoa_r+0x910>
 8010d26:	9b04      	ldr	r3, [sp, #16]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	dc37      	bgt.n	8010d9c <_dtoa_r+0x99c>
 8010d2c:	9b07      	ldr	r3, [sp, #28]
 8010d2e:	2b02      	cmp	r3, #2
 8010d30:	dd34      	ble.n	8010d9c <_dtoa_r+0x99c>
 8010d32:	9b04      	ldr	r3, [sp, #16]
 8010d34:	9301      	str	r3, [sp, #4]
 8010d36:	9b01      	ldr	r3, [sp, #4]
 8010d38:	b963      	cbnz	r3, 8010d54 <_dtoa_r+0x954>
 8010d3a:	4631      	mov	r1, r6
 8010d3c:	2205      	movs	r2, #5
 8010d3e:	4620      	mov	r0, r4
 8010d40:	f000 fab2 	bl	80112a8 <__multadd>
 8010d44:	4601      	mov	r1, r0
 8010d46:	4606      	mov	r6, r0
 8010d48:	4650      	mov	r0, sl
 8010d4a:	f000 fcc7 	bl	80116dc <__mcmp>
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	f73f adbb 	bgt.w	80108ca <_dtoa_r+0x4ca>
 8010d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d56:	9d00      	ldr	r5, [sp, #0]
 8010d58:	ea6f 0b03 	mvn.w	fp, r3
 8010d5c:	f04f 0800 	mov.w	r8, #0
 8010d60:	4631      	mov	r1, r6
 8010d62:	4620      	mov	r0, r4
 8010d64:	f000 fa7e 	bl	8011264 <_Bfree>
 8010d68:	2f00      	cmp	r7, #0
 8010d6a:	f43f aeab 	beq.w	8010ac4 <_dtoa_r+0x6c4>
 8010d6e:	f1b8 0f00 	cmp.w	r8, #0
 8010d72:	d005      	beq.n	8010d80 <_dtoa_r+0x980>
 8010d74:	45b8      	cmp	r8, r7
 8010d76:	d003      	beq.n	8010d80 <_dtoa_r+0x980>
 8010d78:	4641      	mov	r1, r8
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	f000 fa72 	bl	8011264 <_Bfree>
 8010d80:	4639      	mov	r1, r7
 8010d82:	4620      	mov	r0, r4
 8010d84:	f000 fa6e 	bl	8011264 <_Bfree>
 8010d88:	e69c      	b.n	8010ac4 <_dtoa_r+0x6c4>
 8010d8a:	2600      	movs	r6, #0
 8010d8c:	4637      	mov	r7, r6
 8010d8e:	e7e1      	b.n	8010d54 <_dtoa_r+0x954>
 8010d90:	46bb      	mov	fp, r7
 8010d92:	4637      	mov	r7, r6
 8010d94:	e599      	b.n	80108ca <_dtoa_r+0x4ca>
 8010d96:	bf00      	nop
 8010d98:	40240000 	.word	0x40240000
 8010d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f000 80c8 	beq.w	8010f34 <_dtoa_r+0xb34>
 8010da4:	9b04      	ldr	r3, [sp, #16]
 8010da6:	9301      	str	r3, [sp, #4]
 8010da8:	2d00      	cmp	r5, #0
 8010daa:	dd05      	ble.n	8010db8 <_dtoa_r+0x9b8>
 8010dac:	4639      	mov	r1, r7
 8010dae:	462a      	mov	r2, r5
 8010db0:	4620      	mov	r0, r4
 8010db2:	f000 fc27 	bl	8011604 <__lshift>
 8010db6:	4607      	mov	r7, r0
 8010db8:	f1b8 0f00 	cmp.w	r8, #0
 8010dbc:	d05b      	beq.n	8010e76 <_dtoa_r+0xa76>
 8010dbe:	6879      	ldr	r1, [r7, #4]
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	f000 fa0f 	bl	80111e4 <_Balloc>
 8010dc6:	4605      	mov	r5, r0
 8010dc8:	b928      	cbnz	r0, 8010dd6 <_dtoa_r+0x9d6>
 8010dca:	4b83      	ldr	r3, [pc, #524]	; (8010fd8 <_dtoa_r+0xbd8>)
 8010dcc:	4602      	mov	r2, r0
 8010dce:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010dd2:	f7ff bb2e 	b.w	8010432 <_dtoa_r+0x32>
 8010dd6:	693a      	ldr	r2, [r7, #16]
 8010dd8:	3202      	adds	r2, #2
 8010dda:	0092      	lsls	r2, r2, #2
 8010ddc:	f107 010c 	add.w	r1, r7, #12
 8010de0:	300c      	adds	r0, #12
 8010de2:	f7ff fa74 	bl	80102ce <memcpy>
 8010de6:	2201      	movs	r2, #1
 8010de8:	4629      	mov	r1, r5
 8010dea:	4620      	mov	r0, r4
 8010dec:	f000 fc0a 	bl	8011604 <__lshift>
 8010df0:	9b00      	ldr	r3, [sp, #0]
 8010df2:	3301      	adds	r3, #1
 8010df4:	9304      	str	r3, [sp, #16]
 8010df6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010dfa:	4413      	add	r3, r2
 8010dfc:	9308      	str	r3, [sp, #32]
 8010dfe:	9b02      	ldr	r3, [sp, #8]
 8010e00:	f003 0301 	and.w	r3, r3, #1
 8010e04:	46b8      	mov	r8, r7
 8010e06:	9306      	str	r3, [sp, #24]
 8010e08:	4607      	mov	r7, r0
 8010e0a:	9b04      	ldr	r3, [sp, #16]
 8010e0c:	4631      	mov	r1, r6
 8010e0e:	3b01      	subs	r3, #1
 8010e10:	4650      	mov	r0, sl
 8010e12:	9301      	str	r3, [sp, #4]
 8010e14:	f7ff fa69 	bl	80102ea <quorem>
 8010e18:	4641      	mov	r1, r8
 8010e1a:	9002      	str	r0, [sp, #8]
 8010e1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010e20:	4650      	mov	r0, sl
 8010e22:	f000 fc5b 	bl	80116dc <__mcmp>
 8010e26:	463a      	mov	r2, r7
 8010e28:	9005      	str	r0, [sp, #20]
 8010e2a:	4631      	mov	r1, r6
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f000 fc71 	bl	8011714 <__mdiff>
 8010e32:	68c2      	ldr	r2, [r0, #12]
 8010e34:	4605      	mov	r5, r0
 8010e36:	bb02      	cbnz	r2, 8010e7a <_dtoa_r+0xa7a>
 8010e38:	4601      	mov	r1, r0
 8010e3a:	4650      	mov	r0, sl
 8010e3c:	f000 fc4e 	bl	80116dc <__mcmp>
 8010e40:	4602      	mov	r2, r0
 8010e42:	4629      	mov	r1, r5
 8010e44:	4620      	mov	r0, r4
 8010e46:	9209      	str	r2, [sp, #36]	; 0x24
 8010e48:	f000 fa0c 	bl	8011264 <_Bfree>
 8010e4c:	9b07      	ldr	r3, [sp, #28]
 8010e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e50:	9d04      	ldr	r5, [sp, #16]
 8010e52:	ea43 0102 	orr.w	r1, r3, r2
 8010e56:	9b06      	ldr	r3, [sp, #24]
 8010e58:	4319      	orrs	r1, r3
 8010e5a:	d110      	bne.n	8010e7e <_dtoa_r+0xa7e>
 8010e5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010e60:	d029      	beq.n	8010eb6 <_dtoa_r+0xab6>
 8010e62:	9b05      	ldr	r3, [sp, #20]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	dd02      	ble.n	8010e6e <_dtoa_r+0xa6e>
 8010e68:	9b02      	ldr	r3, [sp, #8]
 8010e6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010e6e:	9b01      	ldr	r3, [sp, #4]
 8010e70:	f883 9000 	strb.w	r9, [r3]
 8010e74:	e774      	b.n	8010d60 <_dtoa_r+0x960>
 8010e76:	4638      	mov	r0, r7
 8010e78:	e7ba      	b.n	8010df0 <_dtoa_r+0x9f0>
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	e7e1      	b.n	8010e42 <_dtoa_r+0xa42>
 8010e7e:	9b05      	ldr	r3, [sp, #20]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	db04      	blt.n	8010e8e <_dtoa_r+0xa8e>
 8010e84:	9907      	ldr	r1, [sp, #28]
 8010e86:	430b      	orrs	r3, r1
 8010e88:	9906      	ldr	r1, [sp, #24]
 8010e8a:	430b      	orrs	r3, r1
 8010e8c:	d120      	bne.n	8010ed0 <_dtoa_r+0xad0>
 8010e8e:	2a00      	cmp	r2, #0
 8010e90:	dded      	ble.n	8010e6e <_dtoa_r+0xa6e>
 8010e92:	4651      	mov	r1, sl
 8010e94:	2201      	movs	r2, #1
 8010e96:	4620      	mov	r0, r4
 8010e98:	f000 fbb4 	bl	8011604 <__lshift>
 8010e9c:	4631      	mov	r1, r6
 8010e9e:	4682      	mov	sl, r0
 8010ea0:	f000 fc1c 	bl	80116dc <__mcmp>
 8010ea4:	2800      	cmp	r0, #0
 8010ea6:	dc03      	bgt.n	8010eb0 <_dtoa_r+0xab0>
 8010ea8:	d1e1      	bne.n	8010e6e <_dtoa_r+0xa6e>
 8010eaa:	f019 0f01 	tst.w	r9, #1
 8010eae:	d0de      	beq.n	8010e6e <_dtoa_r+0xa6e>
 8010eb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010eb4:	d1d8      	bne.n	8010e68 <_dtoa_r+0xa68>
 8010eb6:	9a01      	ldr	r2, [sp, #4]
 8010eb8:	2339      	movs	r3, #57	; 0x39
 8010eba:	7013      	strb	r3, [r2, #0]
 8010ebc:	462b      	mov	r3, r5
 8010ebe:	461d      	mov	r5, r3
 8010ec0:	3b01      	subs	r3, #1
 8010ec2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010ec6:	2a39      	cmp	r2, #57	; 0x39
 8010ec8:	d06c      	beq.n	8010fa4 <_dtoa_r+0xba4>
 8010eca:	3201      	adds	r2, #1
 8010ecc:	701a      	strb	r2, [r3, #0]
 8010ece:	e747      	b.n	8010d60 <_dtoa_r+0x960>
 8010ed0:	2a00      	cmp	r2, #0
 8010ed2:	dd07      	ble.n	8010ee4 <_dtoa_r+0xae4>
 8010ed4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010ed8:	d0ed      	beq.n	8010eb6 <_dtoa_r+0xab6>
 8010eda:	9a01      	ldr	r2, [sp, #4]
 8010edc:	f109 0301 	add.w	r3, r9, #1
 8010ee0:	7013      	strb	r3, [r2, #0]
 8010ee2:	e73d      	b.n	8010d60 <_dtoa_r+0x960>
 8010ee4:	9b04      	ldr	r3, [sp, #16]
 8010ee6:	9a08      	ldr	r2, [sp, #32]
 8010ee8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010eec:	4293      	cmp	r3, r2
 8010eee:	d043      	beq.n	8010f78 <_dtoa_r+0xb78>
 8010ef0:	4651      	mov	r1, sl
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	220a      	movs	r2, #10
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f000 f9d6 	bl	80112a8 <__multadd>
 8010efc:	45b8      	cmp	r8, r7
 8010efe:	4682      	mov	sl, r0
 8010f00:	f04f 0300 	mov.w	r3, #0
 8010f04:	f04f 020a 	mov.w	r2, #10
 8010f08:	4641      	mov	r1, r8
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	d107      	bne.n	8010f1e <_dtoa_r+0xb1e>
 8010f0e:	f000 f9cb 	bl	80112a8 <__multadd>
 8010f12:	4680      	mov	r8, r0
 8010f14:	4607      	mov	r7, r0
 8010f16:	9b04      	ldr	r3, [sp, #16]
 8010f18:	3301      	adds	r3, #1
 8010f1a:	9304      	str	r3, [sp, #16]
 8010f1c:	e775      	b.n	8010e0a <_dtoa_r+0xa0a>
 8010f1e:	f000 f9c3 	bl	80112a8 <__multadd>
 8010f22:	4639      	mov	r1, r7
 8010f24:	4680      	mov	r8, r0
 8010f26:	2300      	movs	r3, #0
 8010f28:	220a      	movs	r2, #10
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	f000 f9bc 	bl	80112a8 <__multadd>
 8010f30:	4607      	mov	r7, r0
 8010f32:	e7f0      	b.n	8010f16 <_dtoa_r+0xb16>
 8010f34:	9b04      	ldr	r3, [sp, #16]
 8010f36:	9301      	str	r3, [sp, #4]
 8010f38:	9d00      	ldr	r5, [sp, #0]
 8010f3a:	4631      	mov	r1, r6
 8010f3c:	4650      	mov	r0, sl
 8010f3e:	f7ff f9d4 	bl	80102ea <quorem>
 8010f42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010f46:	9b00      	ldr	r3, [sp, #0]
 8010f48:	f805 9b01 	strb.w	r9, [r5], #1
 8010f4c:	1aea      	subs	r2, r5, r3
 8010f4e:	9b01      	ldr	r3, [sp, #4]
 8010f50:	4293      	cmp	r3, r2
 8010f52:	dd07      	ble.n	8010f64 <_dtoa_r+0xb64>
 8010f54:	4651      	mov	r1, sl
 8010f56:	2300      	movs	r3, #0
 8010f58:	220a      	movs	r2, #10
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	f000 f9a4 	bl	80112a8 <__multadd>
 8010f60:	4682      	mov	sl, r0
 8010f62:	e7ea      	b.n	8010f3a <_dtoa_r+0xb3a>
 8010f64:	9b01      	ldr	r3, [sp, #4]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	bfc8      	it	gt
 8010f6a:	461d      	movgt	r5, r3
 8010f6c:	9b00      	ldr	r3, [sp, #0]
 8010f6e:	bfd8      	it	le
 8010f70:	2501      	movle	r5, #1
 8010f72:	441d      	add	r5, r3
 8010f74:	f04f 0800 	mov.w	r8, #0
 8010f78:	4651      	mov	r1, sl
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f000 fb41 	bl	8011604 <__lshift>
 8010f82:	4631      	mov	r1, r6
 8010f84:	4682      	mov	sl, r0
 8010f86:	f000 fba9 	bl	80116dc <__mcmp>
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	dc96      	bgt.n	8010ebc <_dtoa_r+0xabc>
 8010f8e:	d102      	bne.n	8010f96 <_dtoa_r+0xb96>
 8010f90:	f019 0f01 	tst.w	r9, #1
 8010f94:	d192      	bne.n	8010ebc <_dtoa_r+0xabc>
 8010f96:	462b      	mov	r3, r5
 8010f98:	461d      	mov	r5, r3
 8010f9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f9e:	2a30      	cmp	r2, #48	; 0x30
 8010fa0:	d0fa      	beq.n	8010f98 <_dtoa_r+0xb98>
 8010fa2:	e6dd      	b.n	8010d60 <_dtoa_r+0x960>
 8010fa4:	9a00      	ldr	r2, [sp, #0]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d189      	bne.n	8010ebe <_dtoa_r+0xabe>
 8010faa:	f10b 0b01 	add.w	fp, fp, #1
 8010fae:	2331      	movs	r3, #49	; 0x31
 8010fb0:	e796      	b.n	8010ee0 <_dtoa_r+0xae0>
 8010fb2:	4b0a      	ldr	r3, [pc, #40]	; (8010fdc <_dtoa_r+0xbdc>)
 8010fb4:	f7ff ba99 	b.w	80104ea <_dtoa_r+0xea>
 8010fb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	f47f aa6d 	bne.w	801049a <_dtoa_r+0x9a>
 8010fc0:	4b07      	ldr	r3, [pc, #28]	; (8010fe0 <_dtoa_r+0xbe0>)
 8010fc2:	f7ff ba92 	b.w	80104ea <_dtoa_r+0xea>
 8010fc6:	9b01      	ldr	r3, [sp, #4]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	dcb5      	bgt.n	8010f38 <_dtoa_r+0xb38>
 8010fcc:	9b07      	ldr	r3, [sp, #28]
 8010fce:	2b02      	cmp	r3, #2
 8010fd0:	f73f aeb1 	bgt.w	8010d36 <_dtoa_r+0x936>
 8010fd4:	e7b0      	b.n	8010f38 <_dtoa_r+0xb38>
 8010fd6:	bf00      	nop
 8010fd8:	080122b8 	.word	0x080122b8
 8010fdc:	08012218 	.word	0x08012218
 8010fe0:	0801223c 	.word	0x0801223c

08010fe4 <_free_r>:
 8010fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010fe6:	2900      	cmp	r1, #0
 8010fe8:	d044      	beq.n	8011074 <_free_r+0x90>
 8010fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010fee:	9001      	str	r0, [sp, #4]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8010ff6:	bfb8      	it	lt
 8010ff8:	18e4      	addlt	r4, r4, r3
 8010ffa:	f000 f8e7 	bl	80111cc <__malloc_lock>
 8010ffe:	4a1e      	ldr	r2, [pc, #120]	; (8011078 <_free_r+0x94>)
 8011000:	9801      	ldr	r0, [sp, #4]
 8011002:	6813      	ldr	r3, [r2, #0]
 8011004:	b933      	cbnz	r3, 8011014 <_free_r+0x30>
 8011006:	6063      	str	r3, [r4, #4]
 8011008:	6014      	str	r4, [r2, #0]
 801100a:	b003      	add	sp, #12
 801100c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011010:	f000 b8e2 	b.w	80111d8 <__malloc_unlock>
 8011014:	42a3      	cmp	r3, r4
 8011016:	d908      	bls.n	801102a <_free_r+0x46>
 8011018:	6825      	ldr	r5, [r4, #0]
 801101a:	1961      	adds	r1, r4, r5
 801101c:	428b      	cmp	r3, r1
 801101e:	bf01      	itttt	eq
 8011020:	6819      	ldreq	r1, [r3, #0]
 8011022:	685b      	ldreq	r3, [r3, #4]
 8011024:	1949      	addeq	r1, r1, r5
 8011026:	6021      	streq	r1, [r4, #0]
 8011028:	e7ed      	b.n	8011006 <_free_r+0x22>
 801102a:	461a      	mov	r2, r3
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	b10b      	cbz	r3, 8011034 <_free_r+0x50>
 8011030:	42a3      	cmp	r3, r4
 8011032:	d9fa      	bls.n	801102a <_free_r+0x46>
 8011034:	6811      	ldr	r1, [r2, #0]
 8011036:	1855      	adds	r5, r2, r1
 8011038:	42a5      	cmp	r5, r4
 801103a:	d10b      	bne.n	8011054 <_free_r+0x70>
 801103c:	6824      	ldr	r4, [r4, #0]
 801103e:	4421      	add	r1, r4
 8011040:	1854      	adds	r4, r2, r1
 8011042:	42a3      	cmp	r3, r4
 8011044:	6011      	str	r1, [r2, #0]
 8011046:	d1e0      	bne.n	801100a <_free_r+0x26>
 8011048:	681c      	ldr	r4, [r3, #0]
 801104a:	685b      	ldr	r3, [r3, #4]
 801104c:	6053      	str	r3, [r2, #4]
 801104e:	440c      	add	r4, r1
 8011050:	6014      	str	r4, [r2, #0]
 8011052:	e7da      	b.n	801100a <_free_r+0x26>
 8011054:	d902      	bls.n	801105c <_free_r+0x78>
 8011056:	230c      	movs	r3, #12
 8011058:	6003      	str	r3, [r0, #0]
 801105a:	e7d6      	b.n	801100a <_free_r+0x26>
 801105c:	6825      	ldr	r5, [r4, #0]
 801105e:	1961      	adds	r1, r4, r5
 8011060:	428b      	cmp	r3, r1
 8011062:	bf04      	itt	eq
 8011064:	6819      	ldreq	r1, [r3, #0]
 8011066:	685b      	ldreq	r3, [r3, #4]
 8011068:	6063      	str	r3, [r4, #4]
 801106a:	bf04      	itt	eq
 801106c:	1949      	addeq	r1, r1, r5
 801106e:	6021      	streq	r1, [r4, #0]
 8011070:	6054      	str	r4, [r2, #4]
 8011072:	e7ca      	b.n	801100a <_free_r+0x26>
 8011074:	b003      	add	sp, #12
 8011076:	bd30      	pop	{r4, r5, pc}
 8011078:	200059f8 	.word	0x200059f8

0801107c <malloc>:
 801107c:	4b02      	ldr	r3, [pc, #8]	; (8011088 <malloc+0xc>)
 801107e:	4601      	mov	r1, r0
 8011080:	6818      	ldr	r0, [r3, #0]
 8011082:	f000 b823 	b.w	80110cc <_malloc_r>
 8011086:	bf00      	nop
 8011088:	2000006c 	.word	0x2000006c

0801108c <sbrk_aligned>:
 801108c:	b570      	push	{r4, r5, r6, lr}
 801108e:	4e0e      	ldr	r6, [pc, #56]	; (80110c8 <sbrk_aligned+0x3c>)
 8011090:	460c      	mov	r4, r1
 8011092:	6831      	ldr	r1, [r6, #0]
 8011094:	4605      	mov	r5, r0
 8011096:	b911      	cbnz	r1, 801109e <sbrk_aligned+0x12>
 8011098:	f000 fcce 	bl	8011a38 <_sbrk_r>
 801109c:	6030      	str	r0, [r6, #0]
 801109e:	4621      	mov	r1, r4
 80110a0:	4628      	mov	r0, r5
 80110a2:	f000 fcc9 	bl	8011a38 <_sbrk_r>
 80110a6:	1c43      	adds	r3, r0, #1
 80110a8:	d00a      	beq.n	80110c0 <sbrk_aligned+0x34>
 80110aa:	1cc4      	adds	r4, r0, #3
 80110ac:	f024 0403 	bic.w	r4, r4, #3
 80110b0:	42a0      	cmp	r0, r4
 80110b2:	d007      	beq.n	80110c4 <sbrk_aligned+0x38>
 80110b4:	1a21      	subs	r1, r4, r0
 80110b6:	4628      	mov	r0, r5
 80110b8:	f000 fcbe 	bl	8011a38 <_sbrk_r>
 80110bc:	3001      	adds	r0, #1
 80110be:	d101      	bne.n	80110c4 <sbrk_aligned+0x38>
 80110c0:	f04f 34ff 	mov.w	r4, #4294967295
 80110c4:	4620      	mov	r0, r4
 80110c6:	bd70      	pop	{r4, r5, r6, pc}
 80110c8:	200059fc 	.word	0x200059fc

080110cc <_malloc_r>:
 80110cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110d0:	1ccd      	adds	r5, r1, #3
 80110d2:	f025 0503 	bic.w	r5, r5, #3
 80110d6:	3508      	adds	r5, #8
 80110d8:	2d0c      	cmp	r5, #12
 80110da:	bf38      	it	cc
 80110dc:	250c      	movcc	r5, #12
 80110de:	2d00      	cmp	r5, #0
 80110e0:	4607      	mov	r7, r0
 80110e2:	db01      	blt.n	80110e8 <_malloc_r+0x1c>
 80110e4:	42a9      	cmp	r1, r5
 80110e6:	d905      	bls.n	80110f4 <_malloc_r+0x28>
 80110e8:	230c      	movs	r3, #12
 80110ea:	603b      	str	r3, [r7, #0]
 80110ec:	2600      	movs	r6, #0
 80110ee:	4630      	mov	r0, r6
 80110f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80111c8 <_malloc_r+0xfc>
 80110f8:	f000 f868 	bl	80111cc <__malloc_lock>
 80110fc:	f8d8 3000 	ldr.w	r3, [r8]
 8011100:	461c      	mov	r4, r3
 8011102:	bb5c      	cbnz	r4, 801115c <_malloc_r+0x90>
 8011104:	4629      	mov	r1, r5
 8011106:	4638      	mov	r0, r7
 8011108:	f7ff ffc0 	bl	801108c <sbrk_aligned>
 801110c:	1c43      	adds	r3, r0, #1
 801110e:	4604      	mov	r4, r0
 8011110:	d155      	bne.n	80111be <_malloc_r+0xf2>
 8011112:	f8d8 4000 	ldr.w	r4, [r8]
 8011116:	4626      	mov	r6, r4
 8011118:	2e00      	cmp	r6, #0
 801111a:	d145      	bne.n	80111a8 <_malloc_r+0xdc>
 801111c:	2c00      	cmp	r4, #0
 801111e:	d048      	beq.n	80111b2 <_malloc_r+0xe6>
 8011120:	6823      	ldr	r3, [r4, #0]
 8011122:	4631      	mov	r1, r6
 8011124:	4638      	mov	r0, r7
 8011126:	eb04 0903 	add.w	r9, r4, r3
 801112a:	f000 fc85 	bl	8011a38 <_sbrk_r>
 801112e:	4581      	cmp	r9, r0
 8011130:	d13f      	bne.n	80111b2 <_malloc_r+0xe6>
 8011132:	6821      	ldr	r1, [r4, #0]
 8011134:	1a6d      	subs	r5, r5, r1
 8011136:	4629      	mov	r1, r5
 8011138:	4638      	mov	r0, r7
 801113a:	f7ff ffa7 	bl	801108c <sbrk_aligned>
 801113e:	3001      	adds	r0, #1
 8011140:	d037      	beq.n	80111b2 <_malloc_r+0xe6>
 8011142:	6823      	ldr	r3, [r4, #0]
 8011144:	442b      	add	r3, r5
 8011146:	6023      	str	r3, [r4, #0]
 8011148:	f8d8 3000 	ldr.w	r3, [r8]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d038      	beq.n	80111c2 <_malloc_r+0xf6>
 8011150:	685a      	ldr	r2, [r3, #4]
 8011152:	42a2      	cmp	r2, r4
 8011154:	d12b      	bne.n	80111ae <_malloc_r+0xe2>
 8011156:	2200      	movs	r2, #0
 8011158:	605a      	str	r2, [r3, #4]
 801115a:	e00f      	b.n	801117c <_malloc_r+0xb0>
 801115c:	6822      	ldr	r2, [r4, #0]
 801115e:	1b52      	subs	r2, r2, r5
 8011160:	d41f      	bmi.n	80111a2 <_malloc_r+0xd6>
 8011162:	2a0b      	cmp	r2, #11
 8011164:	d917      	bls.n	8011196 <_malloc_r+0xca>
 8011166:	1961      	adds	r1, r4, r5
 8011168:	42a3      	cmp	r3, r4
 801116a:	6025      	str	r5, [r4, #0]
 801116c:	bf18      	it	ne
 801116e:	6059      	strne	r1, [r3, #4]
 8011170:	6863      	ldr	r3, [r4, #4]
 8011172:	bf08      	it	eq
 8011174:	f8c8 1000 	streq.w	r1, [r8]
 8011178:	5162      	str	r2, [r4, r5]
 801117a:	604b      	str	r3, [r1, #4]
 801117c:	4638      	mov	r0, r7
 801117e:	f104 060b 	add.w	r6, r4, #11
 8011182:	f000 f829 	bl	80111d8 <__malloc_unlock>
 8011186:	f026 0607 	bic.w	r6, r6, #7
 801118a:	1d23      	adds	r3, r4, #4
 801118c:	1af2      	subs	r2, r6, r3
 801118e:	d0ae      	beq.n	80110ee <_malloc_r+0x22>
 8011190:	1b9b      	subs	r3, r3, r6
 8011192:	50a3      	str	r3, [r4, r2]
 8011194:	e7ab      	b.n	80110ee <_malloc_r+0x22>
 8011196:	42a3      	cmp	r3, r4
 8011198:	6862      	ldr	r2, [r4, #4]
 801119a:	d1dd      	bne.n	8011158 <_malloc_r+0x8c>
 801119c:	f8c8 2000 	str.w	r2, [r8]
 80111a0:	e7ec      	b.n	801117c <_malloc_r+0xb0>
 80111a2:	4623      	mov	r3, r4
 80111a4:	6864      	ldr	r4, [r4, #4]
 80111a6:	e7ac      	b.n	8011102 <_malloc_r+0x36>
 80111a8:	4634      	mov	r4, r6
 80111aa:	6876      	ldr	r6, [r6, #4]
 80111ac:	e7b4      	b.n	8011118 <_malloc_r+0x4c>
 80111ae:	4613      	mov	r3, r2
 80111b0:	e7cc      	b.n	801114c <_malloc_r+0x80>
 80111b2:	230c      	movs	r3, #12
 80111b4:	603b      	str	r3, [r7, #0]
 80111b6:	4638      	mov	r0, r7
 80111b8:	f000 f80e 	bl	80111d8 <__malloc_unlock>
 80111bc:	e797      	b.n	80110ee <_malloc_r+0x22>
 80111be:	6025      	str	r5, [r4, #0]
 80111c0:	e7dc      	b.n	801117c <_malloc_r+0xb0>
 80111c2:	605b      	str	r3, [r3, #4]
 80111c4:	deff      	udf	#255	; 0xff
 80111c6:	bf00      	nop
 80111c8:	200059f8 	.word	0x200059f8

080111cc <__malloc_lock>:
 80111cc:	4801      	ldr	r0, [pc, #4]	; (80111d4 <__malloc_lock+0x8>)
 80111ce:	f7ff b87c 	b.w	80102ca <__retarget_lock_acquire_recursive>
 80111d2:	bf00      	nop
 80111d4:	200059f4 	.word	0x200059f4

080111d8 <__malloc_unlock>:
 80111d8:	4801      	ldr	r0, [pc, #4]	; (80111e0 <__malloc_unlock+0x8>)
 80111da:	f7ff b877 	b.w	80102cc <__retarget_lock_release_recursive>
 80111de:	bf00      	nop
 80111e0:	200059f4 	.word	0x200059f4

080111e4 <_Balloc>:
 80111e4:	b570      	push	{r4, r5, r6, lr}
 80111e6:	69c6      	ldr	r6, [r0, #28]
 80111e8:	4604      	mov	r4, r0
 80111ea:	460d      	mov	r5, r1
 80111ec:	b976      	cbnz	r6, 801120c <_Balloc+0x28>
 80111ee:	2010      	movs	r0, #16
 80111f0:	f7ff ff44 	bl	801107c <malloc>
 80111f4:	4602      	mov	r2, r0
 80111f6:	61e0      	str	r0, [r4, #28]
 80111f8:	b920      	cbnz	r0, 8011204 <_Balloc+0x20>
 80111fa:	4b18      	ldr	r3, [pc, #96]	; (801125c <_Balloc+0x78>)
 80111fc:	4818      	ldr	r0, [pc, #96]	; (8011260 <_Balloc+0x7c>)
 80111fe:	216b      	movs	r1, #107	; 0x6b
 8011200:	f000 fc2a 	bl	8011a58 <__assert_func>
 8011204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011208:	6006      	str	r6, [r0, #0]
 801120a:	60c6      	str	r6, [r0, #12]
 801120c:	69e6      	ldr	r6, [r4, #28]
 801120e:	68f3      	ldr	r3, [r6, #12]
 8011210:	b183      	cbz	r3, 8011234 <_Balloc+0x50>
 8011212:	69e3      	ldr	r3, [r4, #28]
 8011214:	68db      	ldr	r3, [r3, #12]
 8011216:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801121a:	b9b8      	cbnz	r0, 801124c <_Balloc+0x68>
 801121c:	2101      	movs	r1, #1
 801121e:	fa01 f605 	lsl.w	r6, r1, r5
 8011222:	1d72      	adds	r2, r6, #5
 8011224:	0092      	lsls	r2, r2, #2
 8011226:	4620      	mov	r0, r4
 8011228:	f000 fc34 	bl	8011a94 <_calloc_r>
 801122c:	b160      	cbz	r0, 8011248 <_Balloc+0x64>
 801122e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011232:	e00e      	b.n	8011252 <_Balloc+0x6e>
 8011234:	2221      	movs	r2, #33	; 0x21
 8011236:	2104      	movs	r1, #4
 8011238:	4620      	mov	r0, r4
 801123a:	f000 fc2b 	bl	8011a94 <_calloc_r>
 801123e:	69e3      	ldr	r3, [r4, #28]
 8011240:	60f0      	str	r0, [r6, #12]
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d1e4      	bne.n	8011212 <_Balloc+0x2e>
 8011248:	2000      	movs	r0, #0
 801124a:	bd70      	pop	{r4, r5, r6, pc}
 801124c:	6802      	ldr	r2, [r0, #0]
 801124e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011252:	2300      	movs	r3, #0
 8011254:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011258:	e7f7      	b.n	801124a <_Balloc+0x66>
 801125a:	bf00      	nop
 801125c:	08012249 	.word	0x08012249
 8011260:	080122c9 	.word	0x080122c9

08011264 <_Bfree>:
 8011264:	b570      	push	{r4, r5, r6, lr}
 8011266:	69c6      	ldr	r6, [r0, #28]
 8011268:	4605      	mov	r5, r0
 801126a:	460c      	mov	r4, r1
 801126c:	b976      	cbnz	r6, 801128c <_Bfree+0x28>
 801126e:	2010      	movs	r0, #16
 8011270:	f7ff ff04 	bl	801107c <malloc>
 8011274:	4602      	mov	r2, r0
 8011276:	61e8      	str	r0, [r5, #28]
 8011278:	b920      	cbnz	r0, 8011284 <_Bfree+0x20>
 801127a:	4b09      	ldr	r3, [pc, #36]	; (80112a0 <_Bfree+0x3c>)
 801127c:	4809      	ldr	r0, [pc, #36]	; (80112a4 <_Bfree+0x40>)
 801127e:	218f      	movs	r1, #143	; 0x8f
 8011280:	f000 fbea 	bl	8011a58 <__assert_func>
 8011284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011288:	6006      	str	r6, [r0, #0]
 801128a:	60c6      	str	r6, [r0, #12]
 801128c:	b13c      	cbz	r4, 801129e <_Bfree+0x3a>
 801128e:	69eb      	ldr	r3, [r5, #28]
 8011290:	6862      	ldr	r2, [r4, #4]
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011298:	6021      	str	r1, [r4, #0]
 801129a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801129e:	bd70      	pop	{r4, r5, r6, pc}
 80112a0:	08012249 	.word	0x08012249
 80112a4:	080122c9 	.word	0x080122c9

080112a8 <__multadd>:
 80112a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ac:	690d      	ldr	r5, [r1, #16]
 80112ae:	4607      	mov	r7, r0
 80112b0:	460c      	mov	r4, r1
 80112b2:	461e      	mov	r6, r3
 80112b4:	f101 0c14 	add.w	ip, r1, #20
 80112b8:	2000      	movs	r0, #0
 80112ba:	f8dc 3000 	ldr.w	r3, [ip]
 80112be:	b299      	uxth	r1, r3
 80112c0:	fb02 6101 	mla	r1, r2, r1, r6
 80112c4:	0c1e      	lsrs	r6, r3, #16
 80112c6:	0c0b      	lsrs	r3, r1, #16
 80112c8:	fb02 3306 	mla	r3, r2, r6, r3
 80112cc:	b289      	uxth	r1, r1
 80112ce:	3001      	adds	r0, #1
 80112d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80112d4:	4285      	cmp	r5, r0
 80112d6:	f84c 1b04 	str.w	r1, [ip], #4
 80112da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80112de:	dcec      	bgt.n	80112ba <__multadd+0x12>
 80112e0:	b30e      	cbz	r6, 8011326 <__multadd+0x7e>
 80112e2:	68a3      	ldr	r3, [r4, #8]
 80112e4:	42ab      	cmp	r3, r5
 80112e6:	dc19      	bgt.n	801131c <__multadd+0x74>
 80112e8:	6861      	ldr	r1, [r4, #4]
 80112ea:	4638      	mov	r0, r7
 80112ec:	3101      	adds	r1, #1
 80112ee:	f7ff ff79 	bl	80111e4 <_Balloc>
 80112f2:	4680      	mov	r8, r0
 80112f4:	b928      	cbnz	r0, 8011302 <__multadd+0x5a>
 80112f6:	4602      	mov	r2, r0
 80112f8:	4b0c      	ldr	r3, [pc, #48]	; (801132c <__multadd+0x84>)
 80112fa:	480d      	ldr	r0, [pc, #52]	; (8011330 <__multadd+0x88>)
 80112fc:	21ba      	movs	r1, #186	; 0xba
 80112fe:	f000 fbab 	bl	8011a58 <__assert_func>
 8011302:	6922      	ldr	r2, [r4, #16]
 8011304:	3202      	adds	r2, #2
 8011306:	f104 010c 	add.w	r1, r4, #12
 801130a:	0092      	lsls	r2, r2, #2
 801130c:	300c      	adds	r0, #12
 801130e:	f7fe ffde 	bl	80102ce <memcpy>
 8011312:	4621      	mov	r1, r4
 8011314:	4638      	mov	r0, r7
 8011316:	f7ff ffa5 	bl	8011264 <_Bfree>
 801131a:	4644      	mov	r4, r8
 801131c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011320:	3501      	adds	r5, #1
 8011322:	615e      	str	r6, [r3, #20]
 8011324:	6125      	str	r5, [r4, #16]
 8011326:	4620      	mov	r0, r4
 8011328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801132c:	080122b8 	.word	0x080122b8
 8011330:	080122c9 	.word	0x080122c9

08011334 <__hi0bits>:
 8011334:	0c03      	lsrs	r3, r0, #16
 8011336:	041b      	lsls	r3, r3, #16
 8011338:	b9d3      	cbnz	r3, 8011370 <__hi0bits+0x3c>
 801133a:	0400      	lsls	r0, r0, #16
 801133c:	2310      	movs	r3, #16
 801133e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011342:	bf04      	itt	eq
 8011344:	0200      	lsleq	r0, r0, #8
 8011346:	3308      	addeq	r3, #8
 8011348:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801134c:	bf04      	itt	eq
 801134e:	0100      	lsleq	r0, r0, #4
 8011350:	3304      	addeq	r3, #4
 8011352:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011356:	bf04      	itt	eq
 8011358:	0080      	lsleq	r0, r0, #2
 801135a:	3302      	addeq	r3, #2
 801135c:	2800      	cmp	r0, #0
 801135e:	db05      	blt.n	801136c <__hi0bits+0x38>
 8011360:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011364:	f103 0301 	add.w	r3, r3, #1
 8011368:	bf08      	it	eq
 801136a:	2320      	moveq	r3, #32
 801136c:	4618      	mov	r0, r3
 801136e:	4770      	bx	lr
 8011370:	2300      	movs	r3, #0
 8011372:	e7e4      	b.n	801133e <__hi0bits+0xa>

08011374 <__lo0bits>:
 8011374:	6803      	ldr	r3, [r0, #0]
 8011376:	f013 0207 	ands.w	r2, r3, #7
 801137a:	d00c      	beq.n	8011396 <__lo0bits+0x22>
 801137c:	07d9      	lsls	r1, r3, #31
 801137e:	d422      	bmi.n	80113c6 <__lo0bits+0x52>
 8011380:	079a      	lsls	r2, r3, #30
 8011382:	bf49      	itett	mi
 8011384:	085b      	lsrmi	r3, r3, #1
 8011386:	089b      	lsrpl	r3, r3, #2
 8011388:	6003      	strmi	r3, [r0, #0]
 801138a:	2201      	movmi	r2, #1
 801138c:	bf5c      	itt	pl
 801138e:	6003      	strpl	r3, [r0, #0]
 8011390:	2202      	movpl	r2, #2
 8011392:	4610      	mov	r0, r2
 8011394:	4770      	bx	lr
 8011396:	b299      	uxth	r1, r3
 8011398:	b909      	cbnz	r1, 801139e <__lo0bits+0x2a>
 801139a:	0c1b      	lsrs	r3, r3, #16
 801139c:	2210      	movs	r2, #16
 801139e:	b2d9      	uxtb	r1, r3
 80113a0:	b909      	cbnz	r1, 80113a6 <__lo0bits+0x32>
 80113a2:	3208      	adds	r2, #8
 80113a4:	0a1b      	lsrs	r3, r3, #8
 80113a6:	0719      	lsls	r1, r3, #28
 80113a8:	bf04      	itt	eq
 80113aa:	091b      	lsreq	r3, r3, #4
 80113ac:	3204      	addeq	r2, #4
 80113ae:	0799      	lsls	r1, r3, #30
 80113b0:	bf04      	itt	eq
 80113b2:	089b      	lsreq	r3, r3, #2
 80113b4:	3202      	addeq	r2, #2
 80113b6:	07d9      	lsls	r1, r3, #31
 80113b8:	d403      	bmi.n	80113c2 <__lo0bits+0x4e>
 80113ba:	085b      	lsrs	r3, r3, #1
 80113bc:	f102 0201 	add.w	r2, r2, #1
 80113c0:	d003      	beq.n	80113ca <__lo0bits+0x56>
 80113c2:	6003      	str	r3, [r0, #0]
 80113c4:	e7e5      	b.n	8011392 <__lo0bits+0x1e>
 80113c6:	2200      	movs	r2, #0
 80113c8:	e7e3      	b.n	8011392 <__lo0bits+0x1e>
 80113ca:	2220      	movs	r2, #32
 80113cc:	e7e1      	b.n	8011392 <__lo0bits+0x1e>
	...

080113d0 <__i2b>:
 80113d0:	b510      	push	{r4, lr}
 80113d2:	460c      	mov	r4, r1
 80113d4:	2101      	movs	r1, #1
 80113d6:	f7ff ff05 	bl	80111e4 <_Balloc>
 80113da:	4602      	mov	r2, r0
 80113dc:	b928      	cbnz	r0, 80113ea <__i2b+0x1a>
 80113de:	4b05      	ldr	r3, [pc, #20]	; (80113f4 <__i2b+0x24>)
 80113e0:	4805      	ldr	r0, [pc, #20]	; (80113f8 <__i2b+0x28>)
 80113e2:	f240 1145 	movw	r1, #325	; 0x145
 80113e6:	f000 fb37 	bl	8011a58 <__assert_func>
 80113ea:	2301      	movs	r3, #1
 80113ec:	6144      	str	r4, [r0, #20]
 80113ee:	6103      	str	r3, [r0, #16]
 80113f0:	bd10      	pop	{r4, pc}
 80113f2:	bf00      	nop
 80113f4:	080122b8 	.word	0x080122b8
 80113f8:	080122c9 	.word	0x080122c9

080113fc <__multiply>:
 80113fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011400:	4691      	mov	r9, r2
 8011402:	690a      	ldr	r2, [r1, #16]
 8011404:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011408:	429a      	cmp	r2, r3
 801140a:	bfb8      	it	lt
 801140c:	460b      	movlt	r3, r1
 801140e:	460c      	mov	r4, r1
 8011410:	bfbc      	itt	lt
 8011412:	464c      	movlt	r4, r9
 8011414:	4699      	movlt	r9, r3
 8011416:	6927      	ldr	r7, [r4, #16]
 8011418:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801141c:	68a3      	ldr	r3, [r4, #8]
 801141e:	6861      	ldr	r1, [r4, #4]
 8011420:	eb07 060a 	add.w	r6, r7, sl
 8011424:	42b3      	cmp	r3, r6
 8011426:	b085      	sub	sp, #20
 8011428:	bfb8      	it	lt
 801142a:	3101      	addlt	r1, #1
 801142c:	f7ff feda 	bl	80111e4 <_Balloc>
 8011430:	b930      	cbnz	r0, 8011440 <__multiply+0x44>
 8011432:	4602      	mov	r2, r0
 8011434:	4b44      	ldr	r3, [pc, #272]	; (8011548 <__multiply+0x14c>)
 8011436:	4845      	ldr	r0, [pc, #276]	; (801154c <__multiply+0x150>)
 8011438:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801143c:	f000 fb0c 	bl	8011a58 <__assert_func>
 8011440:	f100 0514 	add.w	r5, r0, #20
 8011444:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011448:	462b      	mov	r3, r5
 801144a:	2200      	movs	r2, #0
 801144c:	4543      	cmp	r3, r8
 801144e:	d321      	bcc.n	8011494 <__multiply+0x98>
 8011450:	f104 0314 	add.w	r3, r4, #20
 8011454:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011458:	f109 0314 	add.w	r3, r9, #20
 801145c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011460:	9202      	str	r2, [sp, #8]
 8011462:	1b3a      	subs	r2, r7, r4
 8011464:	3a15      	subs	r2, #21
 8011466:	f022 0203 	bic.w	r2, r2, #3
 801146a:	3204      	adds	r2, #4
 801146c:	f104 0115 	add.w	r1, r4, #21
 8011470:	428f      	cmp	r7, r1
 8011472:	bf38      	it	cc
 8011474:	2204      	movcc	r2, #4
 8011476:	9201      	str	r2, [sp, #4]
 8011478:	9a02      	ldr	r2, [sp, #8]
 801147a:	9303      	str	r3, [sp, #12]
 801147c:	429a      	cmp	r2, r3
 801147e:	d80c      	bhi.n	801149a <__multiply+0x9e>
 8011480:	2e00      	cmp	r6, #0
 8011482:	dd03      	ble.n	801148c <__multiply+0x90>
 8011484:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011488:	2b00      	cmp	r3, #0
 801148a:	d05b      	beq.n	8011544 <__multiply+0x148>
 801148c:	6106      	str	r6, [r0, #16]
 801148e:	b005      	add	sp, #20
 8011490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011494:	f843 2b04 	str.w	r2, [r3], #4
 8011498:	e7d8      	b.n	801144c <__multiply+0x50>
 801149a:	f8b3 a000 	ldrh.w	sl, [r3]
 801149e:	f1ba 0f00 	cmp.w	sl, #0
 80114a2:	d024      	beq.n	80114ee <__multiply+0xf2>
 80114a4:	f104 0e14 	add.w	lr, r4, #20
 80114a8:	46a9      	mov	r9, r5
 80114aa:	f04f 0c00 	mov.w	ip, #0
 80114ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80114b2:	f8d9 1000 	ldr.w	r1, [r9]
 80114b6:	fa1f fb82 	uxth.w	fp, r2
 80114ba:	b289      	uxth	r1, r1
 80114bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80114c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80114c4:	f8d9 2000 	ldr.w	r2, [r9]
 80114c8:	4461      	add	r1, ip
 80114ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80114d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80114d6:	b289      	uxth	r1, r1
 80114d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80114dc:	4577      	cmp	r7, lr
 80114de:	f849 1b04 	str.w	r1, [r9], #4
 80114e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114e6:	d8e2      	bhi.n	80114ae <__multiply+0xb2>
 80114e8:	9a01      	ldr	r2, [sp, #4]
 80114ea:	f845 c002 	str.w	ip, [r5, r2]
 80114ee:	9a03      	ldr	r2, [sp, #12]
 80114f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80114f4:	3304      	adds	r3, #4
 80114f6:	f1b9 0f00 	cmp.w	r9, #0
 80114fa:	d021      	beq.n	8011540 <__multiply+0x144>
 80114fc:	6829      	ldr	r1, [r5, #0]
 80114fe:	f104 0c14 	add.w	ip, r4, #20
 8011502:	46ae      	mov	lr, r5
 8011504:	f04f 0a00 	mov.w	sl, #0
 8011508:	f8bc b000 	ldrh.w	fp, [ip]
 801150c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011510:	fb09 220b 	mla	r2, r9, fp, r2
 8011514:	4452      	add	r2, sl
 8011516:	b289      	uxth	r1, r1
 8011518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801151c:	f84e 1b04 	str.w	r1, [lr], #4
 8011520:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011524:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011528:	f8be 1000 	ldrh.w	r1, [lr]
 801152c:	fb09 110a 	mla	r1, r9, sl, r1
 8011530:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011534:	4567      	cmp	r7, ip
 8011536:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801153a:	d8e5      	bhi.n	8011508 <__multiply+0x10c>
 801153c:	9a01      	ldr	r2, [sp, #4]
 801153e:	50a9      	str	r1, [r5, r2]
 8011540:	3504      	adds	r5, #4
 8011542:	e799      	b.n	8011478 <__multiply+0x7c>
 8011544:	3e01      	subs	r6, #1
 8011546:	e79b      	b.n	8011480 <__multiply+0x84>
 8011548:	080122b8 	.word	0x080122b8
 801154c:	080122c9 	.word	0x080122c9

08011550 <__pow5mult>:
 8011550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011554:	4615      	mov	r5, r2
 8011556:	f012 0203 	ands.w	r2, r2, #3
 801155a:	4606      	mov	r6, r0
 801155c:	460f      	mov	r7, r1
 801155e:	d007      	beq.n	8011570 <__pow5mult+0x20>
 8011560:	4c25      	ldr	r4, [pc, #148]	; (80115f8 <__pow5mult+0xa8>)
 8011562:	3a01      	subs	r2, #1
 8011564:	2300      	movs	r3, #0
 8011566:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801156a:	f7ff fe9d 	bl	80112a8 <__multadd>
 801156e:	4607      	mov	r7, r0
 8011570:	10ad      	asrs	r5, r5, #2
 8011572:	d03d      	beq.n	80115f0 <__pow5mult+0xa0>
 8011574:	69f4      	ldr	r4, [r6, #28]
 8011576:	b97c      	cbnz	r4, 8011598 <__pow5mult+0x48>
 8011578:	2010      	movs	r0, #16
 801157a:	f7ff fd7f 	bl	801107c <malloc>
 801157e:	4602      	mov	r2, r0
 8011580:	61f0      	str	r0, [r6, #28]
 8011582:	b928      	cbnz	r0, 8011590 <__pow5mult+0x40>
 8011584:	4b1d      	ldr	r3, [pc, #116]	; (80115fc <__pow5mult+0xac>)
 8011586:	481e      	ldr	r0, [pc, #120]	; (8011600 <__pow5mult+0xb0>)
 8011588:	f240 11b3 	movw	r1, #435	; 0x1b3
 801158c:	f000 fa64 	bl	8011a58 <__assert_func>
 8011590:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011594:	6004      	str	r4, [r0, #0]
 8011596:	60c4      	str	r4, [r0, #12]
 8011598:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801159c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115a0:	b94c      	cbnz	r4, 80115b6 <__pow5mult+0x66>
 80115a2:	f240 2171 	movw	r1, #625	; 0x271
 80115a6:	4630      	mov	r0, r6
 80115a8:	f7ff ff12 	bl	80113d0 <__i2b>
 80115ac:	2300      	movs	r3, #0
 80115ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80115b2:	4604      	mov	r4, r0
 80115b4:	6003      	str	r3, [r0, #0]
 80115b6:	f04f 0900 	mov.w	r9, #0
 80115ba:	07eb      	lsls	r3, r5, #31
 80115bc:	d50a      	bpl.n	80115d4 <__pow5mult+0x84>
 80115be:	4639      	mov	r1, r7
 80115c0:	4622      	mov	r2, r4
 80115c2:	4630      	mov	r0, r6
 80115c4:	f7ff ff1a 	bl	80113fc <__multiply>
 80115c8:	4639      	mov	r1, r7
 80115ca:	4680      	mov	r8, r0
 80115cc:	4630      	mov	r0, r6
 80115ce:	f7ff fe49 	bl	8011264 <_Bfree>
 80115d2:	4647      	mov	r7, r8
 80115d4:	106d      	asrs	r5, r5, #1
 80115d6:	d00b      	beq.n	80115f0 <__pow5mult+0xa0>
 80115d8:	6820      	ldr	r0, [r4, #0]
 80115da:	b938      	cbnz	r0, 80115ec <__pow5mult+0x9c>
 80115dc:	4622      	mov	r2, r4
 80115de:	4621      	mov	r1, r4
 80115e0:	4630      	mov	r0, r6
 80115e2:	f7ff ff0b 	bl	80113fc <__multiply>
 80115e6:	6020      	str	r0, [r4, #0]
 80115e8:	f8c0 9000 	str.w	r9, [r0]
 80115ec:	4604      	mov	r4, r0
 80115ee:	e7e4      	b.n	80115ba <__pow5mult+0x6a>
 80115f0:	4638      	mov	r0, r7
 80115f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115f6:	bf00      	nop
 80115f8:	08012418 	.word	0x08012418
 80115fc:	08012249 	.word	0x08012249
 8011600:	080122c9 	.word	0x080122c9

08011604 <__lshift>:
 8011604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011608:	460c      	mov	r4, r1
 801160a:	6849      	ldr	r1, [r1, #4]
 801160c:	6923      	ldr	r3, [r4, #16]
 801160e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011612:	68a3      	ldr	r3, [r4, #8]
 8011614:	4607      	mov	r7, r0
 8011616:	4691      	mov	r9, r2
 8011618:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801161c:	f108 0601 	add.w	r6, r8, #1
 8011620:	42b3      	cmp	r3, r6
 8011622:	db0b      	blt.n	801163c <__lshift+0x38>
 8011624:	4638      	mov	r0, r7
 8011626:	f7ff fddd 	bl	80111e4 <_Balloc>
 801162a:	4605      	mov	r5, r0
 801162c:	b948      	cbnz	r0, 8011642 <__lshift+0x3e>
 801162e:	4602      	mov	r2, r0
 8011630:	4b28      	ldr	r3, [pc, #160]	; (80116d4 <__lshift+0xd0>)
 8011632:	4829      	ldr	r0, [pc, #164]	; (80116d8 <__lshift+0xd4>)
 8011634:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011638:	f000 fa0e 	bl	8011a58 <__assert_func>
 801163c:	3101      	adds	r1, #1
 801163e:	005b      	lsls	r3, r3, #1
 8011640:	e7ee      	b.n	8011620 <__lshift+0x1c>
 8011642:	2300      	movs	r3, #0
 8011644:	f100 0114 	add.w	r1, r0, #20
 8011648:	f100 0210 	add.w	r2, r0, #16
 801164c:	4618      	mov	r0, r3
 801164e:	4553      	cmp	r3, sl
 8011650:	db33      	blt.n	80116ba <__lshift+0xb6>
 8011652:	6920      	ldr	r0, [r4, #16]
 8011654:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011658:	f104 0314 	add.w	r3, r4, #20
 801165c:	f019 091f 	ands.w	r9, r9, #31
 8011660:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011664:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011668:	d02b      	beq.n	80116c2 <__lshift+0xbe>
 801166a:	f1c9 0e20 	rsb	lr, r9, #32
 801166e:	468a      	mov	sl, r1
 8011670:	2200      	movs	r2, #0
 8011672:	6818      	ldr	r0, [r3, #0]
 8011674:	fa00 f009 	lsl.w	r0, r0, r9
 8011678:	4310      	orrs	r0, r2
 801167a:	f84a 0b04 	str.w	r0, [sl], #4
 801167e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011682:	459c      	cmp	ip, r3
 8011684:	fa22 f20e 	lsr.w	r2, r2, lr
 8011688:	d8f3      	bhi.n	8011672 <__lshift+0x6e>
 801168a:	ebac 0304 	sub.w	r3, ip, r4
 801168e:	3b15      	subs	r3, #21
 8011690:	f023 0303 	bic.w	r3, r3, #3
 8011694:	3304      	adds	r3, #4
 8011696:	f104 0015 	add.w	r0, r4, #21
 801169a:	4584      	cmp	ip, r0
 801169c:	bf38      	it	cc
 801169e:	2304      	movcc	r3, #4
 80116a0:	50ca      	str	r2, [r1, r3]
 80116a2:	b10a      	cbz	r2, 80116a8 <__lshift+0xa4>
 80116a4:	f108 0602 	add.w	r6, r8, #2
 80116a8:	3e01      	subs	r6, #1
 80116aa:	4638      	mov	r0, r7
 80116ac:	612e      	str	r6, [r5, #16]
 80116ae:	4621      	mov	r1, r4
 80116b0:	f7ff fdd8 	bl	8011264 <_Bfree>
 80116b4:	4628      	mov	r0, r5
 80116b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80116be:	3301      	adds	r3, #1
 80116c0:	e7c5      	b.n	801164e <__lshift+0x4a>
 80116c2:	3904      	subs	r1, #4
 80116c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80116c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80116cc:	459c      	cmp	ip, r3
 80116ce:	d8f9      	bhi.n	80116c4 <__lshift+0xc0>
 80116d0:	e7ea      	b.n	80116a8 <__lshift+0xa4>
 80116d2:	bf00      	nop
 80116d4:	080122b8 	.word	0x080122b8
 80116d8:	080122c9 	.word	0x080122c9

080116dc <__mcmp>:
 80116dc:	b530      	push	{r4, r5, lr}
 80116de:	6902      	ldr	r2, [r0, #16]
 80116e0:	690c      	ldr	r4, [r1, #16]
 80116e2:	1b12      	subs	r2, r2, r4
 80116e4:	d10e      	bne.n	8011704 <__mcmp+0x28>
 80116e6:	f100 0314 	add.w	r3, r0, #20
 80116ea:	3114      	adds	r1, #20
 80116ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80116f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80116f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80116f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80116fc:	42a5      	cmp	r5, r4
 80116fe:	d003      	beq.n	8011708 <__mcmp+0x2c>
 8011700:	d305      	bcc.n	801170e <__mcmp+0x32>
 8011702:	2201      	movs	r2, #1
 8011704:	4610      	mov	r0, r2
 8011706:	bd30      	pop	{r4, r5, pc}
 8011708:	4283      	cmp	r3, r0
 801170a:	d3f3      	bcc.n	80116f4 <__mcmp+0x18>
 801170c:	e7fa      	b.n	8011704 <__mcmp+0x28>
 801170e:	f04f 32ff 	mov.w	r2, #4294967295
 8011712:	e7f7      	b.n	8011704 <__mcmp+0x28>

08011714 <__mdiff>:
 8011714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011718:	460c      	mov	r4, r1
 801171a:	4606      	mov	r6, r0
 801171c:	4611      	mov	r1, r2
 801171e:	4620      	mov	r0, r4
 8011720:	4690      	mov	r8, r2
 8011722:	f7ff ffdb 	bl	80116dc <__mcmp>
 8011726:	1e05      	subs	r5, r0, #0
 8011728:	d110      	bne.n	801174c <__mdiff+0x38>
 801172a:	4629      	mov	r1, r5
 801172c:	4630      	mov	r0, r6
 801172e:	f7ff fd59 	bl	80111e4 <_Balloc>
 8011732:	b930      	cbnz	r0, 8011742 <__mdiff+0x2e>
 8011734:	4b3a      	ldr	r3, [pc, #232]	; (8011820 <__mdiff+0x10c>)
 8011736:	4602      	mov	r2, r0
 8011738:	f240 2137 	movw	r1, #567	; 0x237
 801173c:	4839      	ldr	r0, [pc, #228]	; (8011824 <__mdiff+0x110>)
 801173e:	f000 f98b 	bl	8011a58 <__assert_func>
 8011742:	2301      	movs	r3, #1
 8011744:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801174c:	bfa4      	itt	ge
 801174e:	4643      	movge	r3, r8
 8011750:	46a0      	movge	r8, r4
 8011752:	4630      	mov	r0, r6
 8011754:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011758:	bfa6      	itte	ge
 801175a:	461c      	movge	r4, r3
 801175c:	2500      	movge	r5, #0
 801175e:	2501      	movlt	r5, #1
 8011760:	f7ff fd40 	bl	80111e4 <_Balloc>
 8011764:	b920      	cbnz	r0, 8011770 <__mdiff+0x5c>
 8011766:	4b2e      	ldr	r3, [pc, #184]	; (8011820 <__mdiff+0x10c>)
 8011768:	4602      	mov	r2, r0
 801176a:	f240 2145 	movw	r1, #581	; 0x245
 801176e:	e7e5      	b.n	801173c <__mdiff+0x28>
 8011770:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011774:	6926      	ldr	r6, [r4, #16]
 8011776:	60c5      	str	r5, [r0, #12]
 8011778:	f104 0914 	add.w	r9, r4, #20
 801177c:	f108 0514 	add.w	r5, r8, #20
 8011780:	f100 0e14 	add.w	lr, r0, #20
 8011784:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011788:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801178c:	f108 0210 	add.w	r2, r8, #16
 8011790:	46f2      	mov	sl, lr
 8011792:	2100      	movs	r1, #0
 8011794:	f859 3b04 	ldr.w	r3, [r9], #4
 8011798:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801179c:	fa11 f88b 	uxtah	r8, r1, fp
 80117a0:	b299      	uxth	r1, r3
 80117a2:	0c1b      	lsrs	r3, r3, #16
 80117a4:	eba8 0801 	sub.w	r8, r8, r1
 80117a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80117ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80117b0:	fa1f f888 	uxth.w	r8, r8
 80117b4:	1419      	asrs	r1, r3, #16
 80117b6:	454e      	cmp	r6, r9
 80117b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80117bc:	f84a 3b04 	str.w	r3, [sl], #4
 80117c0:	d8e8      	bhi.n	8011794 <__mdiff+0x80>
 80117c2:	1b33      	subs	r3, r6, r4
 80117c4:	3b15      	subs	r3, #21
 80117c6:	f023 0303 	bic.w	r3, r3, #3
 80117ca:	3304      	adds	r3, #4
 80117cc:	3415      	adds	r4, #21
 80117ce:	42a6      	cmp	r6, r4
 80117d0:	bf38      	it	cc
 80117d2:	2304      	movcc	r3, #4
 80117d4:	441d      	add	r5, r3
 80117d6:	4473      	add	r3, lr
 80117d8:	469e      	mov	lr, r3
 80117da:	462e      	mov	r6, r5
 80117dc:	4566      	cmp	r6, ip
 80117de:	d30e      	bcc.n	80117fe <__mdiff+0xea>
 80117e0:	f10c 0203 	add.w	r2, ip, #3
 80117e4:	1b52      	subs	r2, r2, r5
 80117e6:	f022 0203 	bic.w	r2, r2, #3
 80117ea:	3d03      	subs	r5, #3
 80117ec:	45ac      	cmp	ip, r5
 80117ee:	bf38      	it	cc
 80117f0:	2200      	movcc	r2, #0
 80117f2:	4413      	add	r3, r2
 80117f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80117f8:	b17a      	cbz	r2, 801181a <__mdiff+0x106>
 80117fa:	6107      	str	r7, [r0, #16]
 80117fc:	e7a4      	b.n	8011748 <__mdiff+0x34>
 80117fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8011802:	fa11 f288 	uxtah	r2, r1, r8
 8011806:	1414      	asrs	r4, r2, #16
 8011808:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801180c:	b292      	uxth	r2, r2
 801180e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011812:	f84e 2b04 	str.w	r2, [lr], #4
 8011816:	1421      	asrs	r1, r4, #16
 8011818:	e7e0      	b.n	80117dc <__mdiff+0xc8>
 801181a:	3f01      	subs	r7, #1
 801181c:	e7ea      	b.n	80117f4 <__mdiff+0xe0>
 801181e:	bf00      	nop
 8011820:	080122b8 	.word	0x080122b8
 8011824:	080122c9 	.word	0x080122c9

08011828 <__d2b>:
 8011828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801182c:	460f      	mov	r7, r1
 801182e:	2101      	movs	r1, #1
 8011830:	ec59 8b10 	vmov	r8, r9, d0
 8011834:	4616      	mov	r6, r2
 8011836:	f7ff fcd5 	bl	80111e4 <_Balloc>
 801183a:	4604      	mov	r4, r0
 801183c:	b930      	cbnz	r0, 801184c <__d2b+0x24>
 801183e:	4602      	mov	r2, r0
 8011840:	4b24      	ldr	r3, [pc, #144]	; (80118d4 <__d2b+0xac>)
 8011842:	4825      	ldr	r0, [pc, #148]	; (80118d8 <__d2b+0xb0>)
 8011844:	f240 310f 	movw	r1, #783	; 0x30f
 8011848:	f000 f906 	bl	8011a58 <__assert_func>
 801184c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011854:	bb2d      	cbnz	r5, 80118a2 <__d2b+0x7a>
 8011856:	9301      	str	r3, [sp, #4]
 8011858:	f1b8 0300 	subs.w	r3, r8, #0
 801185c:	d026      	beq.n	80118ac <__d2b+0x84>
 801185e:	4668      	mov	r0, sp
 8011860:	9300      	str	r3, [sp, #0]
 8011862:	f7ff fd87 	bl	8011374 <__lo0bits>
 8011866:	e9dd 1200 	ldrd	r1, r2, [sp]
 801186a:	b1e8      	cbz	r0, 80118a8 <__d2b+0x80>
 801186c:	f1c0 0320 	rsb	r3, r0, #32
 8011870:	fa02 f303 	lsl.w	r3, r2, r3
 8011874:	430b      	orrs	r3, r1
 8011876:	40c2      	lsrs	r2, r0
 8011878:	6163      	str	r3, [r4, #20]
 801187a:	9201      	str	r2, [sp, #4]
 801187c:	9b01      	ldr	r3, [sp, #4]
 801187e:	61a3      	str	r3, [r4, #24]
 8011880:	2b00      	cmp	r3, #0
 8011882:	bf14      	ite	ne
 8011884:	2202      	movne	r2, #2
 8011886:	2201      	moveq	r2, #1
 8011888:	6122      	str	r2, [r4, #16]
 801188a:	b1bd      	cbz	r5, 80118bc <__d2b+0x94>
 801188c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011890:	4405      	add	r5, r0
 8011892:	603d      	str	r5, [r7, #0]
 8011894:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011898:	6030      	str	r0, [r6, #0]
 801189a:	4620      	mov	r0, r4
 801189c:	b003      	add	sp, #12
 801189e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80118a6:	e7d6      	b.n	8011856 <__d2b+0x2e>
 80118a8:	6161      	str	r1, [r4, #20]
 80118aa:	e7e7      	b.n	801187c <__d2b+0x54>
 80118ac:	a801      	add	r0, sp, #4
 80118ae:	f7ff fd61 	bl	8011374 <__lo0bits>
 80118b2:	9b01      	ldr	r3, [sp, #4]
 80118b4:	6163      	str	r3, [r4, #20]
 80118b6:	3020      	adds	r0, #32
 80118b8:	2201      	movs	r2, #1
 80118ba:	e7e5      	b.n	8011888 <__d2b+0x60>
 80118bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80118c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80118c4:	6038      	str	r0, [r7, #0]
 80118c6:	6918      	ldr	r0, [r3, #16]
 80118c8:	f7ff fd34 	bl	8011334 <__hi0bits>
 80118cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80118d0:	e7e2      	b.n	8011898 <__d2b+0x70>
 80118d2:	bf00      	nop
 80118d4:	080122b8 	.word	0x080122b8
 80118d8:	080122c9 	.word	0x080122c9

080118dc <__sflush_r>:
 80118dc:	898a      	ldrh	r2, [r1, #12]
 80118de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118e2:	4605      	mov	r5, r0
 80118e4:	0710      	lsls	r0, r2, #28
 80118e6:	460c      	mov	r4, r1
 80118e8:	d458      	bmi.n	801199c <__sflush_r+0xc0>
 80118ea:	684b      	ldr	r3, [r1, #4]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	dc05      	bgt.n	80118fc <__sflush_r+0x20>
 80118f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	dc02      	bgt.n	80118fc <__sflush_r+0x20>
 80118f6:	2000      	movs	r0, #0
 80118f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80118fe:	2e00      	cmp	r6, #0
 8011900:	d0f9      	beq.n	80118f6 <__sflush_r+0x1a>
 8011902:	2300      	movs	r3, #0
 8011904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011908:	682f      	ldr	r7, [r5, #0]
 801190a:	6a21      	ldr	r1, [r4, #32]
 801190c:	602b      	str	r3, [r5, #0]
 801190e:	d032      	beq.n	8011976 <__sflush_r+0x9a>
 8011910:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011912:	89a3      	ldrh	r3, [r4, #12]
 8011914:	075a      	lsls	r2, r3, #29
 8011916:	d505      	bpl.n	8011924 <__sflush_r+0x48>
 8011918:	6863      	ldr	r3, [r4, #4]
 801191a:	1ac0      	subs	r0, r0, r3
 801191c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801191e:	b10b      	cbz	r3, 8011924 <__sflush_r+0x48>
 8011920:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011922:	1ac0      	subs	r0, r0, r3
 8011924:	2300      	movs	r3, #0
 8011926:	4602      	mov	r2, r0
 8011928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801192a:	6a21      	ldr	r1, [r4, #32]
 801192c:	4628      	mov	r0, r5
 801192e:	47b0      	blx	r6
 8011930:	1c43      	adds	r3, r0, #1
 8011932:	89a3      	ldrh	r3, [r4, #12]
 8011934:	d106      	bne.n	8011944 <__sflush_r+0x68>
 8011936:	6829      	ldr	r1, [r5, #0]
 8011938:	291d      	cmp	r1, #29
 801193a:	d82b      	bhi.n	8011994 <__sflush_r+0xb8>
 801193c:	4a29      	ldr	r2, [pc, #164]	; (80119e4 <__sflush_r+0x108>)
 801193e:	410a      	asrs	r2, r1
 8011940:	07d6      	lsls	r6, r2, #31
 8011942:	d427      	bmi.n	8011994 <__sflush_r+0xb8>
 8011944:	2200      	movs	r2, #0
 8011946:	6062      	str	r2, [r4, #4]
 8011948:	04d9      	lsls	r1, r3, #19
 801194a:	6922      	ldr	r2, [r4, #16]
 801194c:	6022      	str	r2, [r4, #0]
 801194e:	d504      	bpl.n	801195a <__sflush_r+0x7e>
 8011950:	1c42      	adds	r2, r0, #1
 8011952:	d101      	bne.n	8011958 <__sflush_r+0x7c>
 8011954:	682b      	ldr	r3, [r5, #0]
 8011956:	b903      	cbnz	r3, 801195a <__sflush_r+0x7e>
 8011958:	6560      	str	r0, [r4, #84]	; 0x54
 801195a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801195c:	602f      	str	r7, [r5, #0]
 801195e:	2900      	cmp	r1, #0
 8011960:	d0c9      	beq.n	80118f6 <__sflush_r+0x1a>
 8011962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011966:	4299      	cmp	r1, r3
 8011968:	d002      	beq.n	8011970 <__sflush_r+0x94>
 801196a:	4628      	mov	r0, r5
 801196c:	f7ff fb3a 	bl	8010fe4 <_free_r>
 8011970:	2000      	movs	r0, #0
 8011972:	6360      	str	r0, [r4, #52]	; 0x34
 8011974:	e7c0      	b.n	80118f8 <__sflush_r+0x1c>
 8011976:	2301      	movs	r3, #1
 8011978:	4628      	mov	r0, r5
 801197a:	47b0      	blx	r6
 801197c:	1c41      	adds	r1, r0, #1
 801197e:	d1c8      	bne.n	8011912 <__sflush_r+0x36>
 8011980:	682b      	ldr	r3, [r5, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d0c5      	beq.n	8011912 <__sflush_r+0x36>
 8011986:	2b1d      	cmp	r3, #29
 8011988:	d001      	beq.n	801198e <__sflush_r+0xb2>
 801198a:	2b16      	cmp	r3, #22
 801198c:	d101      	bne.n	8011992 <__sflush_r+0xb6>
 801198e:	602f      	str	r7, [r5, #0]
 8011990:	e7b1      	b.n	80118f6 <__sflush_r+0x1a>
 8011992:	89a3      	ldrh	r3, [r4, #12]
 8011994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011998:	81a3      	strh	r3, [r4, #12]
 801199a:	e7ad      	b.n	80118f8 <__sflush_r+0x1c>
 801199c:	690f      	ldr	r7, [r1, #16]
 801199e:	2f00      	cmp	r7, #0
 80119a0:	d0a9      	beq.n	80118f6 <__sflush_r+0x1a>
 80119a2:	0793      	lsls	r3, r2, #30
 80119a4:	680e      	ldr	r6, [r1, #0]
 80119a6:	bf08      	it	eq
 80119a8:	694b      	ldreq	r3, [r1, #20]
 80119aa:	600f      	str	r7, [r1, #0]
 80119ac:	bf18      	it	ne
 80119ae:	2300      	movne	r3, #0
 80119b0:	eba6 0807 	sub.w	r8, r6, r7
 80119b4:	608b      	str	r3, [r1, #8]
 80119b6:	f1b8 0f00 	cmp.w	r8, #0
 80119ba:	dd9c      	ble.n	80118f6 <__sflush_r+0x1a>
 80119bc:	6a21      	ldr	r1, [r4, #32]
 80119be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80119c0:	4643      	mov	r3, r8
 80119c2:	463a      	mov	r2, r7
 80119c4:	4628      	mov	r0, r5
 80119c6:	47b0      	blx	r6
 80119c8:	2800      	cmp	r0, #0
 80119ca:	dc06      	bgt.n	80119da <__sflush_r+0xfe>
 80119cc:	89a3      	ldrh	r3, [r4, #12]
 80119ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119d2:	81a3      	strh	r3, [r4, #12]
 80119d4:	f04f 30ff 	mov.w	r0, #4294967295
 80119d8:	e78e      	b.n	80118f8 <__sflush_r+0x1c>
 80119da:	4407      	add	r7, r0
 80119dc:	eba8 0800 	sub.w	r8, r8, r0
 80119e0:	e7e9      	b.n	80119b6 <__sflush_r+0xda>
 80119e2:	bf00      	nop
 80119e4:	dfbffffe 	.word	0xdfbffffe

080119e8 <_fflush_r>:
 80119e8:	b538      	push	{r3, r4, r5, lr}
 80119ea:	690b      	ldr	r3, [r1, #16]
 80119ec:	4605      	mov	r5, r0
 80119ee:	460c      	mov	r4, r1
 80119f0:	b913      	cbnz	r3, 80119f8 <_fflush_r+0x10>
 80119f2:	2500      	movs	r5, #0
 80119f4:	4628      	mov	r0, r5
 80119f6:	bd38      	pop	{r3, r4, r5, pc}
 80119f8:	b118      	cbz	r0, 8011a02 <_fflush_r+0x1a>
 80119fa:	6a03      	ldr	r3, [r0, #32]
 80119fc:	b90b      	cbnz	r3, 8011a02 <_fflush_r+0x1a>
 80119fe:	f7fe fb17 	bl	8010030 <__sinit>
 8011a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d0f3      	beq.n	80119f2 <_fflush_r+0xa>
 8011a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011a0c:	07d0      	lsls	r0, r2, #31
 8011a0e:	d404      	bmi.n	8011a1a <_fflush_r+0x32>
 8011a10:	0599      	lsls	r1, r3, #22
 8011a12:	d402      	bmi.n	8011a1a <_fflush_r+0x32>
 8011a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a16:	f7fe fc58 	bl	80102ca <__retarget_lock_acquire_recursive>
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	4621      	mov	r1, r4
 8011a1e:	f7ff ff5d 	bl	80118dc <__sflush_r>
 8011a22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a24:	07da      	lsls	r2, r3, #31
 8011a26:	4605      	mov	r5, r0
 8011a28:	d4e4      	bmi.n	80119f4 <_fflush_r+0xc>
 8011a2a:	89a3      	ldrh	r3, [r4, #12]
 8011a2c:	059b      	lsls	r3, r3, #22
 8011a2e:	d4e1      	bmi.n	80119f4 <_fflush_r+0xc>
 8011a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a32:	f7fe fc4b 	bl	80102cc <__retarget_lock_release_recursive>
 8011a36:	e7dd      	b.n	80119f4 <_fflush_r+0xc>

08011a38 <_sbrk_r>:
 8011a38:	b538      	push	{r3, r4, r5, lr}
 8011a3a:	4d06      	ldr	r5, [pc, #24]	; (8011a54 <_sbrk_r+0x1c>)
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	4604      	mov	r4, r0
 8011a40:	4608      	mov	r0, r1
 8011a42:	602b      	str	r3, [r5, #0]
 8011a44:	f7f2 fa86 	bl	8003f54 <_sbrk>
 8011a48:	1c43      	adds	r3, r0, #1
 8011a4a:	d102      	bne.n	8011a52 <_sbrk_r+0x1a>
 8011a4c:	682b      	ldr	r3, [r5, #0]
 8011a4e:	b103      	cbz	r3, 8011a52 <_sbrk_r+0x1a>
 8011a50:	6023      	str	r3, [r4, #0]
 8011a52:	bd38      	pop	{r3, r4, r5, pc}
 8011a54:	200059f0 	.word	0x200059f0

08011a58 <__assert_func>:
 8011a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a5a:	4614      	mov	r4, r2
 8011a5c:	461a      	mov	r2, r3
 8011a5e:	4b09      	ldr	r3, [pc, #36]	; (8011a84 <__assert_func+0x2c>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	4605      	mov	r5, r0
 8011a64:	68d8      	ldr	r0, [r3, #12]
 8011a66:	b14c      	cbz	r4, 8011a7c <__assert_func+0x24>
 8011a68:	4b07      	ldr	r3, [pc, #28]	; (8011a88 <__assert_func+0x30>)
 8011a6a:	9100      	str	r1, [sp, #0]
 8011a6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a70:	4906      	ldr	r1, [pc, #24]	; (8011a8c <__assert_func+0x34>)
 8011a72:	462b      	mov	r3, r5
 8011a74:	f000 f844 	bl	8011b00 <fiprintf>
 8011a78:	f000 f854 	bl	8011b24 <abort>
 8011a7c:	4b04      	ldr	r3, [pc, #16]	; (8011a90 <__assert_func+0x38>)
 8011a7e:	461c      	mov	r4, r3
 8011a80:	e7f3      	b.n	8011a6a <__assert_func+0x12>
 8011a82:	bf00      	nop
 8011a84:	2000006c 	.word	0x2000006c
 8011a88:	0801242e 	.word	0x0801242e
 8011a8c:	0801243b 	.word	0x0801243b
 8011a90:	08012469 	.word	0x08012469

08011a94 <_calloc_r>:
 8011a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a96:	fba1 2402 	umull	r2, r4, r1, r2
 8011a9a:	b94c      	cbnz	r4, 8011ab0 <_calloc_r+0x1c>
 8011a9c:	4611      	mov	r1, r2
 8011a9e:	9201      	str	r2, [sp, #4]
 8011aa0:	f7ff fb14 	bl	80110cc <_malloc_r>
 8011aa4:	9a01      	ldr	r2, [sp, #4]
 8011aa6:	4605      	mov	r5, r0
 8011aa8:	b930      	cbnz	r0, 8011ab8 <_calloc_r+0x24>
 8011aaa:	4628      	mov	r0, r5
 8011aac:	b003      	add	sp, #12
 8011aae:	bd30      	pop	{r4, r5, pc}
 8011ab0:	220c      	movs	r2, #12
 8011ab2:	6002      	str	r2, [r0, #0]
 8011ab4:	2500      	movs	r5, #0
 8011ab6:	e7f8      	b.n	8011aaa <_calloc_r+0x16>
 8011ab8:	4621      	mov	r1, r4
 8011aba:	f7fe fb32 	bl	8010122 <memset>
 8011abe:	e7f4      	b.n	8011aaa <_calloc_r+0x16>

08011ac0 <__ascii_mbtowc>:
 8011ac0:	b082      	sub	sp, #8
 8011ac2:	b901      	cbnz	r1, 8011ac6 <__ascii_mbtowc+0x6>
 8011ac4:	a901      	add	r1, sp, #4
 8011ac6:	b142      	cbz	r2, 8011ada <__ascii_mbtowc+0x1a>
 8011ac8:	b14b      	cbz	r3, 8011ade <__ascii_mbtowc+0x1e>
 8011aca:	7813      	ldrb	r3, [r2, #0]
 8011acc:	600b      	str	r3, [r1, #0]
 8011ace:	7812      	ldrb	r2, [r2, #0]
 8011ad0:	1e10      	subs	r0, r2, #0
 8011ad2:	bf18      	it	ne
 8011ad4:	2001      	movne	r0, #1
 8011ad6:	b002      	add	sp, #8
 8011ad8:	4770      	bx	lr
 8011ada:	4610      	mov	r0, r2
 8011adc:	e7fb      	b.n	8011ad6 <__ascii_mbtowc+0x16>
 8011ade:	f06f 0001 	mvn.w	r0, #1
 8011ae2:	e7f8      	b.n	8011ad6 <__ascii_mbtowc+0x16>

08011ae4 <__ascii_wctomb>:
 8011ae4:	b149      	cbz	r1, 8011afa <__ascii_wctomb+0x16>
 8011ae6:	2aff      	cmp	r2, #255	; 0xff
 8011ae8:	bf85      	ittet	hi
 8011aea:	238a      	movhi	r3, #138	; 0x8a
 8011aec:	6003      	strhi	r3, [r0, #0]
 8011aee:	700a      	strbls	r2, [r1, #0]
 8011af0:	f04f 30ff 	movhi.w	r0, #4294967295
 8011af4:	bf98      	it	ls
 8011af6:	2001      	movls	r0, #1
 8011af8:	4770      	bx	lr
 8011afa:	4608      	mov	r0, r1
 8011afc:	4770      	bx	lr
	...

08011b00 <fiprintf>:
 8011b00:	b40e      	push	{r1, r2, r3}
 8011b02:	b503      	push	{r0, r1, lr}
 8011b04:	4601      	mov	r1, r0
 8011b06:	ab03      	add	r3, sp, #12
 8011b08:	4805      	ldr	r0, [pc, #20]	; (8011b20 <fiprintf+0x20>)
 8011b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b0e:	6800      	ldr	r0, [r0, #0]
 8011b10:	9301      	str	r3, [sp, #4]
 8011b12:	f000 f837 	bl	8011b84 <_vfiprintf_r>
 8011b16:	b002      	add	sp, #8
 8011b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b1c:	b003      	add	sp, #12
 8011b1e:	4770      	bx	lr
 8011b20:	2000006c 	.word	0x2000006c

08011b24 <abort>:
 8011b24:	b508      	push	{r3, lr}
 8011b26:	2006      	movs	r0, #6
 8011b28:	f000 fa04 	bl	8011f34 <raise>
 8011b2c:	2001      	movs	r0, #1
 8011b2e:	f7f2 f999 	bl	8003e64 <_exit>

08011b32 <__sfputc_r>:
 8011b32:	6893      	ldr	r3, [r2, #8]
 8011b34:	3b01      	subs	r3, #1
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	b410      	push	{r4}
 8011b3a:	6093      	str	r3, [r2, #8]
 8011b3c:	da08      	bge.n	8011b50 <__sfputc_r+0x1e>
 8011b3e:	6994      	ldr	r4, [r2, #24]
 8011b40:	42a3      	cmp	r3, r4
 8011b42:	db01      	blt.n	8011b48 <__sfputc_r+0x16>
 8011b44:	290a      	cmp	r1, #10
 8011b46:	d103      	bne.n	8011b50 <__sfputc_r+0x1e>
 8011b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b4c:	f000 b934 	b.w	8011db8 <__swbuf_r>
 8011b50:	6813      	ldr	r3, [r2, #0]
 8011b52:	1c58      	adds	r0, r3, #1
 8011b54:	6010      	str	r0, [r2, #0]
 8011b56:	7019      	strb	r1, [r3, #0]
 8011b58:	4608      	mov	r0, r1
 8011b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b5e:	4770      	bx	lr

08011b60 <__sfputs_r>:
 8011b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b62:	4606      	mov	r6, r0
 8011b64:	460f      	mov	r7, r1
 8011b66:	4614      	mov	r4, r2
 8011b68:	18d5      	adds	r5, r2, r3
 8011b6a:	42ac      	cmp	r4, r5
 8011b6c:	d101      	bne.n	8011b72 <__sfputs_r+0x12>
 8011b6e:	2000      	movs	r0, #0
 8011b70:	e007      	b.n	8011b82 <__sfputs_r+0x22>
 8011b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b76:	463a      	mov	r2, r7
 8011b78:	4630      	mov	r0, r6
 8011b7a:	f7ff ffda 	bl	8011b32 <__sfputc_r>
 8011b7e:	1c43      	adds	r3, r0, #1
 8011b80:	d1f3      	bne.n	8011b6a <__sfputs_r+0xa>
 8011b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011b84 <_vfiprintf_r>:
 8011b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b88:	460d      	mov	r5, r1
 8011b8a:	b09d      	sub	sp, #116	; 0x74
 8011b8c:	4614      	mov	r4, r2
 8011b8e:	4698      	mov	r8, r3
 8011b90:	4606      	mov	r6, r0
 8011b92:	b118      	cbz	r0, 8011b9c <_vfiprintf_r+0x18>
 8011b94:	6a03      	ldr	r3, [r0, #32]
 8011b96:	b90b      	cbnz	r3, 8011b9c <_vfiprintf_r+0x18>
 8011b98:	f7fe fa4a 	bl	8010030 <__sinit>
 8011b9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b9e:	07d9      	lsls	r1, r3, #31
 8011ba0:	d405      	bmi.n	8011bae <_vfiprintf_r+0x2a>
 8011ba2:	89ab      	ldrh	r3, [r5, #12]
 8011ba4:	059a      	lsls	r2, r3, #22
 8011ba6:	d402      	bmi.n	8011bae <_vfiprintf_r+0x2a>
 8011ba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011baa:	f7fe fb8e 	bl	80102ca <__retarget_lock_acquire_recursive>
 8011bae:	89ab      	ldrh	r3, [r5, #12]
 8011bb0:	071b      	lsls	r3, r3, #28
 8011bb2:	d501      	bpl.n	8011bb8 <_vfiprintf_r+0x34>
 8011bb4:	692b      	ldr	r3, [r5, #16]
 8011bb6:	b99b      	cbnz	r3, 8011be0 <_vfiprintf_r+0x5c>
 8011bb8:	4629      	mov	r1, r5
 8011bba:	4630      	mov	r0, r6
 8011bbc:	f000 f93a 	bl	8011e34 <__swsetup_r>
 8011bc0:	b170      	cbz	r0, 8011be0 <_vfiprintf_r+0x5c>
 8011bc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bc4:	07dc      	lsls	r4, r3, #31
 8011bc6:	d504      	bpl.n	8011bd2 <_vfiprintf_r+0x4e>
 8011bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8011bcc:	b01d      	add	sp, #116	; 0x74
 8011bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bd2:	89ab      	ldrh	r3, [r5, #12]
 8011bd4:	0598      	lsls	r0, r3, #22
 8011bd6:	d4f7      	bmi.n	8011bc8 <_vfiprintf_r+0x44>
 8011bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bda:	f7fe fb77 	bl	80102cc <__retarget_lock_release_recursive>
 8011bde:	e7f3      	b.n	8011bc8 <_vfiprintf_r+0x44>
 8011be0:	2300      	movs	r3, #0
 8011be2:	9309      	str	r3, [sp, #36]	; 0x24
 8011be4:	2320      	movs	r3, #32
 8011be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011bea:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bee:	2330      	movs	r3, #48	; 0x30
 8011bf0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011da4 <_vfiprintf_r+0x220>
 8011bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bf8:	f04f 0901 	mov.w	r9, #1
 8011bfc:	4623      	mov	r3, r4
 8011bfe:	469a      	mov	sl, r3
 8011c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c04:	b10a      	cbz	r2, 8011c0a <_vfiprintf_r+0x86>
 8011c06:	2a25      	cmp	r2, #37	; 0x25
 8011c08:	d1f9      	bne.n	8011bfe <_vfiprintf_r+0x7a>
 8011c0a:	ebba 0b04 	subs.w	fp, sl, r4
 8011c0e:	d00b      	beq.n	8011c28 <_vfiprintf_r+0xa4>
 8011c10:	465b      	mov	r3, fp
 8011c12:	4622      	mov	r2, r4
 8011c14:	4629      	mov	r1, r5
 8011c16:	4630      	mov	r0, r6
 8011c18:	f7ff ffa2 	bl	8011b60 <__sfputs_r>
 8011c1c:	3001      	adds	r0, #1
 8011c1e:	f000 80a9 	beq.w	8011d74 <_vfiprintf_r+0x1f0>
 8011c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c24:	445a      	add	r2, fp
 8011c26:	9209      	str	r2, [sp, #36]	; 0x24
 8011c28:	f89a 3000 	ldrb.w	r3, [sl]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	f000 80a1 	beq.w	8011d74 <_vfiprintf_r+0x1f0>
 8011c32:	2300      	movs	r3, #0
 8011c34:	f04f 32ff 	mov.w	r2, #4294967295
 8011c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c3c:	f10a 0a01 	add.w	sl, sl, #1
 8011c40:	9304      	str	r3, [sp, #16]
 8011c42:	9307      	str	r3, [sp, #28]
 8011c44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c48:	931a      	str	r3, [sp, #104]	; 0x68
 8011c4a:	4654      	mov	r4, sl
 8011c4c:	2205      	movs	r2, #5
 8011c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c52:	4854      	ldr	r0, [pc, #336]	; (8011da4 <_vfiprintf_r+0x220>)
 8011c54:	f7ee fac4 	bl	80001e0 <memchr>
 8011c58:	9a04      	ldr	r2, [sp, #16]
 8011c5a:	b9d8      	cbnz	r0, 8011c94 <_vfiprintf_r+0x110>
 8011c5c:	06d1      	lsls	r1, r2, #27
 8011c5e:	bf44      	itt	mi
 8011c60:	2320      	movmi	r3, #32
 8011c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c66:	0713      	lsls	r3, r2, #28
 8011c68:	bf44      	itt	mi
 8011c6a:	232b      	movmi	r3, #43	; 0x2b
 8011c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c70:	f89a 3000 	ldrb.w	r3, [sl]
 8011c74:	2b2a      	cmp	r3, #42	; 0x2a
 8011c76:	d015      	beq.n	8011ca4 <_vfiprintf_r+0x120>
 8011c78:	9a07      	ldr	r2, [sp, #28]
 8011c7a:	4654      	mov	r4, sl
 8011c7c:	2000      	movs	r0, #0
 8011c7e:	f04f 0c0a 	mov.w	ip, #10
 8011c82:	4621      	mov	r1, r4
 8011c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c88:	3b30      	subs	r3, #48	; 0x30
 8011c8a:	2b09      	cmp	r3, #9
 8011c8c:	d94d      	bls.n	8011d2a <_vfiprintf_r+0x1a6>
 8011c8e:	b1b0      	cbz	r0, 8011cbe <_vfiprintf_r+0x13a>
 8011c90:	9207      	str	r2, [sp, #28]
 8011c92:	e014      	b.n	8011cbe <_vfiprintf_r+0x13a>
 8011c94:	eba0 0308 	sub.w	r3, r0, r8
 8011c98:	fa09 f303 	lsl.w	r3, r9, r3
 8011c9c:	4313      	orrs	r3, r2
 8011c9e:	9304      	str	r3, [sp, #16]
 8011ca0:	46a2      	mov	sl, r4
 8011ca2:	e7d2      	b.n	8011c4a <_vfiprintf_r+0xc6>
 8011ca4:	9b03      	ldr	r3, [sp, #12]
 8011ca6:	1d19      	adds	r1, r3, #4
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	9103      	str	r1, [sp, #12]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	bfbb      	ittet	lt
 8011cb0:	425b      	neglt	r3, r3
 8011cb2:	f042 0202 	orrlt.w	r2, r2, #2
 8011cb6:	9307      	strge	r3, [sp, #28]
 8011cb8:	9307      	strlt	r3, [sp, #28]
 8011cba:	bfb8      	it	lt
 8011cbc:	9204      	strlt	r2, [sp, #16]
 8011cbe:	7823      	ldrb	r3, [r4, #0]
 8011cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8011cc2:	d10c      	bne.n	8011cde <_vfiprintf_r+0x15a>
 8011cc4:	7863      	ldrb	r3, [r4, #1]
 8011cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8011cc8:	d134      	bne.n	8011d34 <_vfiprintf_r+0x1b0>
 8011cca:	9b03      	ldr	r3, [sp, #12]
 8011ccc:	1d1a      	adds	r2, r3, #4
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	9203      	str	r2, [sp, #12]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	bfb8      	it	lt
 8011cd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8011cda:	3402      	adds	r4, #2
 8011cdc:	9305      	str	r3, [sp, #20]
 8011cde:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011db4 <_vfiprintf_r+0x230>
 8011ce2:	7821      	ldrb	r1, [r4, #0]
 8011ce4:	2203      	movs	r2, #3
 8011ce6:	4650      	mov	r0, sl
 8011ce8:	f7ee fa7a 	bl	80001e0 <memchr>
 8011cec:	b138      	cbz	r0, 8011cfe <_vfiprintf_r+0x17a>
 8011cee:	9b04      	ldr	r3, [sp, #16]
 8011cf0:	eba0 000a 	sub.w	r0, r0, sl
 8011cf4:	2240      	movs	r2, #64	; 0x40
 8011cf6:	4082      	lsls	r2, r0
 8011cf8:	4313      	orrs	r3, r2
 8011cfa:	3401      	adds	r4, #1
 8011cfc:	9304      	str	r3, [sp, #16]
 8011cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d02:	4829      	ldr	r0, [pc, #164]	; (8011da8 <_vfiprintf_r+0x224>)
 8011d04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d08:	2206      	movs	r2, #6
 8011d0a:	f7ee fa69 	bl	80001e0 <memchr>
 8011d0e:	2800      	cmp	r0, #0
 8011d10:	d03f      	beq.n	8011d92 <_vfiprintf_r+0x20e>
 8011d12:	4b26      	ldr	r3, [pc, #152]	; (8011dac <_vfiprintf_r+0x228>)
 8011d14:	bb1b      	cbnz	r3, 8011d5e <_vfiprintf_r+0x1da>
 8011d16:	9b03      	ldr	r3, [sp, #12]
 8011d18:	3307      	adds	r3, #7
 8011d1a:	f023 0307 	bic.w	r3, r3, #7
 8011d1e:	3308      	adds	r3, #8
 8011d20:	9303      	str	r3, [sp, #12]
 8011d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d24:	443b      	add	r3, r7
 8011d26:	9309      	str	r3, [sp, #36]	; 0x24
 8011d28:	e768      	b.n	8011bfc <_vfiprintf_r+0x78>
 8011d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d2e:	460c      	mov	r4, r1
 8011d30:	2001      	movs	r0, #1
 8011d32:	e7a6      	b.n	8011c82 <_vfiprintf_r+0xfe>
 8011d34:	2300      	movs	r3, #0
 8011d36:	3401      	adds	r4, #1
 8011d38:	9305      	str	r3, [sp, #20]
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	f04f 0c0a 	mov.w	ip, #10
 8011d40:	4620      	mov	r0, r4
 8011d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d46:	3a30      	subs	r2, #48	; 0x30
 8011d48:	2a09      	cmp	r2, #9
 8011d4a:	d903      	bls.n	8011d54 <_vfiprintf_r+0x1d0>
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d0c6      	beq.n	8011cde <_vfiprintf_r+0x15a>
 8011d50:	9105      	str	r1, [sp, #20]
 8011d52:	e7c4      	b.n	8011cde <_vfiprintf_r+0x15a>
 8011d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d58:	4604      	mov	r4, r0
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e7f0      	b.n	8011d40 <_vfiprintf_r+0x1bc>
 8011d5e:	ab03      	add	r3, sp, #12
 8011d60:	9300      	str	r3, [sp, #0]
 8011d62:	462a      	mov	r2, r5
 8011d64:	4b12      	ldr	r3, [pc, #72]	; (8011db0 <_vfiprintf_r+0x22c>)
 8011d66:	a904      	add	r1, sp, #16
 8011d68:	4630      	mov	r0, r6
 8011d6a:	f7fd fd0f 	bl	800f78c <_printf_float>
 8011d6e:	4607      	mov	r7, r0
 8011d70:	1c78      	adds	r0, r7, #1
 8011d72:	d1d6      	bne.n	8011d22 <_vfiprintf_r+0x19e>
 8011d74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d76:	07d9      	lsls	r1, r3, #31
 8011d78:	d405      	bmi.n	8011d86 <_vfiprintf_r+0x202>
 8011d7a:	89ab      	ldrh	r3, [r5, #12]
 8011d7c:	059a      	lsls	r2, r3, #22
 8011d7e:	d402      	bmi.n	8011d86 <_vfiprintf_r+0x202>
 8011d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d82:	f7fe faa3 	bl	80102cc <__retarget_lock_release_recursive>
 8011d86:	89ab      	ldrh	r3, [r5, #12]
 8011d88:	065b      	lsls	r3, r3, #25
 8011d8a:	f53f af1d 	bmi.w	8011bc8 <_vfiprintf_r+0x44>
 8011d8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d90:	e71c      	b.n	8011bcc <_vfiprintf_r+0x48>
 8011d92:	ab03      	add	r3, sp, #12
 8011d94:	9300      	str	r3, [sp, #0]
 8011d96:	462a      	mov	r2, r5
 8011d98:	4b05      	ldr	r3, [pc, #20]	; (8011db0 <_vfiprintf_r+0x22c>)
 8011d9a:	a904      	add	r1, sp, #16
 8011d9c:	4630      	mov	r0, r6
 8011d9e:	f7fd ff99 	bl	800fcd4 <_printf_i>
 8011da2:	e7e4      	b.n	8011d6e <_vfiprintf_r+0x1ea>
 8011da4:	0801256b 	.word	0x0801256b
 8011da8:	08012575 	.word	0x08012575
 8011dac:	0800f78d 	.word	0x0800f78d
 8011db0:	08011b61 	.word	0x08011b61
 8011db4:	08012571 	.word	0x08012571

08011db8 <__swbuf_r>:
 8011db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dba:	460e      	mov	r6, r1
 8011dbc:	4614      	mov	r4, r2
 8011dbe:	4605      	mov	r5, r0
 8011dc0:	b118      	cbz	r0, 8011dca <__swbuf_r+0x12>
 8011dc2:	6a03      	ldr	r3, [r0, #32]
 8011dc4:	b90b      	cbnz	r3, 8011dca <__swbuf_r+0x12>
 8011dc6:	f7fe f933 	bl	8010030 <__sinit>
 8011dca:	69a3      	ldr	r3, [r4, #24]
 8011dcc:	60a3      	str	r3, [r4, #8]
 8011dce:	89a3      	ldrh	r3, [r4, #12]
 8011dd0:	071a      	lsls	r2, r3, #28
 8011dd2:	d525      	bpl.n	8011e20 <__swbuf_r+0x68>
 8011dd4:	6923      	ldr	r3, [r4, #16]
 8011dd6:	b31b      	cbz	r3, 8011e20 <__swbuf_r+0x68>
 8011dd8:	6823      	ldr	r3, [r4, #0]
 8011dda:	6922      	ldr	r2, [r4, #16]
 8011ddc:	1a98      	subs	r0, r3, r2
 8011dde:	6963      	ldr	r3, [r4, #20]
 8011de0:	b2f6      	uxtb	r6, r6
 8011de2:	4283      	cmp	r3, r0
 8011de4:	4637      	mov	r7, r6
 8011de6:	dc04      	bgt.n	8011df2 <__swbuf_r+0x3a>
 8011de8:	4621      	mov	r1, r4
 8011dea:	4628      	mov	r0, r5
 8011dec:	f7ff fdfc 	bl	80119e8 <_fflush_r>
 8011df0:	b9e0      	cbnz	r0, 8011e2c <__swbuf_r+0x74>
 8011df2:	68a3      	ldr	r3, [r4, #8]
 8011df4:	3b01      	subs	r3, #1
 8011df6:	60a3      	str	r3, [r4, #8]
 8011df8:	6823      	ldr	r3, [r4, #0]
 8011dfa:	1c5a      	adds	r2, r3, #1
 8011dfc:	6022      	str	r2, [r4, #0]
 8011dfe:	701e      	strb	r6, [r3, #0]
 8011e00:	6962      	ldr	r2, [r4, #20]
 8011e02:	1c43      	adds	r3, r0, #1
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d004      	beq.n	8011e12 <__swbuf_r+0x5a>
 8011e08:	89a3      	ldrh	r3, [r4, #12]
 8011e0a:	07db      	lsls	r3, r3, #31
 8011e0c:	d506      	bpl.n	8011e1c <__swbuf_r+0x64>
 8011e0e:	2e0a      	cmp	r6, #10
 8011e10:	d104      	bne.n	8011e1c <__swbuf_r+0x64>
 8011e12:	4621      	mov	r1, r4
 8011e14:	4628      	mov	r0, r5
 8011e16:	f7ff fde7 	bl	80119e8 <_fflush_r>
 8011e1a:	b938      	cbnz	r0, 8011e2c <__swbuf_r+0x74>
 8011e1c:	4638      	mov	r0, r7
 8011e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e20:	4621      	mov	r1, r4
 8011e22:	4628      	mov	r0, r5
 8011e24:	f000 f806 	bl	8011e34 <__swsetup_r>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	d0d5      	beq.n	8011dd8 <__swbuf_r+0x20>
 8011e2c:	f04f 37ff 	mov.w	r7, #4294967295
 8011e30:	e7f4      	b.n	8011e1c <__swbuf_r+0x64>
	...

08011e34 <__swsetup_r>:
 8011e34:	b538      	push	{r3, r4, r5, lr}
 8011e36:	4b2a      	ldr	r3, [pc, #168]	; (8011ee0 <__swsetup_r+0xac>)
 8011e38:	4605      	mov	r5, r0
 8011e3a:	6818      	ldr	r0, [r3, #0]
 8011e3c:	460c      	mov	r4, r1
 8011e3e:	b118      	cbz	r0, 8011e48 <__swsetup_r+0x14>
 8011e40:	6a03      	ldr	r3, [r0, #32]
 8011e42:	b90b      	cbnz	r3, 8011e48 <__swsetup_r+0x14>
 8011e44:	f7fe f8f4 	bl	8010030 <__sinit>
 8011e48:	89a3      	ldrh	r3, [r4, #12]
 8011e4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e4e:	0718      	lsls	r0, r3, #28
 8011e50:	d422      	bmi.n	8011e98 <__swsetup_r+0x64>
 8011e52:	06d9      	lsls	r1, r3, #27
 8011e54:	d407      	bmi.n	8011e66 <__swsetup_r+0x32>
 8011e56:	2309      	movs	r3, #9
 8011e58:	602b      	str	r3, [r5, #0]
 8011e5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011e5e:	81a3      	strh	r3, [r4, #12]
 8011e60:	f04f 30ff 	mov.w	r0, #4294967295
 8011e64:	e034      	b.n	8011ed0 <__swsetup_r+0x9c>
 8011e66:	0758      	lsls	r0, r3, #29
 8011e68:	d512      	bpl.n	8011e90 <__swsetup_r+0x5c>
 8011e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e6c:	b141      	cbz	r1, 8011e80 <__swsetup_r+0x4c>
 8011e6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e72:	4299      	cmp	r1, r3
 8011e74:	d002      	beq.n	8011e7c <__swsetup_r+0x48>
 8011e76:	4628      	mov	r0, r5
 8011e78:	f7ff f8b4 	bl	8010fe4 <_free_r>
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	6363      	str	r3, [r4, #52]	; 0x34
 8011e80:	89a3      	ldrh	r3, [r4, #12]
 8011e82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011e86:	81a3      	strh	r3, [r4, #12]
 8011e88:	2300      	movs	r3, #0
 8011e8a:	6063      	str	r3, [r4, #4]
 8011e8c:	6923      	ldr	r3, [r4, #16]
 8011e8e:	6023      	str	r3, [r4, #0]
 8011e90:	89a3      	ldrh	r3, [r4, #12]
 8011e92:	f043 0308 	orr.w	r3, r3, #8
 8011e96:	81a3      	strh	r3, [r4, #12]
 8011e98:	6923      	ldr	r3, [r4, #16]
 8011e9a:	b94b      	cbnz	r3, 8011eb0 <__swsetup_r+0x7c>
 8011e9c:	89a3      	ldrh	r3, [r4, #12]
 8011e9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ea6:	d003      	beq.n	8011eb0 <__swsetup_r+0x7c>
 8011ea8:	4621      	mov	r1, r4
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f000 f884 	bl	8011fb8 <__smakebuf_r>
 8011eb0:	89a0      	ldrh	r0, [r4, #12]
 8011eb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011eb6:	f010 0301 	ands.w	r3, r0, #1
 8011eba:	d00a      	beq.n	8011ed2 <__swsetup_r+0x9e>
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	60a3      	str	r3, [r4, #8]
 8011ec0:	6963      	ldr	r3, [r4, #20]
 8011ec2:	425b      	negs	r3, r3
 8011ec4:	61a3      	str	r3, [r4, #24]
 8011ec6:	6923      	ldr	r3, [r4, #16]
 8011ec8:	b943      	cbnz	r3, 8011edc <__swsetup_r+0xa8>
 8011eca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011ece:	d1c4      	bne.n	8011e5a <__swsetup_r+0x26>
 8011ed0:	bd38      	pop	{r3, r4, r5, pc}
 8011ed2:	0781      	lsls	r1, r0, #30
 8011ed4:	bf58      	it	pl
 8011ed6:	6963      	ldrpl	r3, [r4, #20]
 8011ed8:	60a3      	str	r3, [r4, #8]
 8011eda:	e7f4      	b.n	8011ec6 <__swsetup_r+0x92>
 8011edc:	2000      	movs	r0, #0
 8011ede:	e7f7      	b.n	8011ed0 <__swsetup_r+0x9c>
 8011ee0:	2000006c 	.word	0x2000006c

08011ee4 <_raise_r>:
 8011ee4:	291f      	cmp	r1, #31
 8011ee6:	b538      	push	{r3, r4, r5, lr}
 8011ee8:	4604      	mov	r4, r0
 8011eea:	460d      	mov	r5, r1
 8011eec:	d904      	bls.n	8011ef8 <_raise_r+0x14>
 8011eee:	2316      	movs	r3, #22
 8011ef0:	6003      	str	r3, [r0, #0]
 8011ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ef6:	bd38      	pop	{r3, r4, r5, pc}
 8011ef8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011efa:	b112      	cbz	r2, 8011f02 <_raise_r+0x1e>
 8011efc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f00:	b94b      	cbnz	r3, 8011f16 <_raise_r+0x32>
 8011f02:	4620      	mov	r0, r4
 8011f04:	f000 f830 	bl	8011f68 <_getpid_r>
 8011f08:	462a      	mov	r2, r5
 8011f0a:	4601      	mov	r1, r0
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f12:	f000 b817 	b.w	8011f44 <_kill_r>
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	d00a      	beq.n	8011f30 <_raise_r+0x4c>
 8011f1a:	1c59      	adds	r1, r3, #1
 8011f1c:	d103      	bne.n	8011f26 <_raise_r+0x42>
 8011f1e:	2316      	movs	r3, #22
 8011f20:	6003      	str	r3, [r0, #0]
 8011f22:	2001      	movs	r0, #1
 8011f24:	e7e7      	b.n	8011ef6 <_raise_r+0x12>
 8011f26:	2400      	movs	r4, #0
 8011f28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	4798      	blx	r3
 8011f30:	2000      	movs	r0, #0
 8011f32:	e7e0      	b.n	8011ef6 <_raise_r+0x12>

08011f34 <raise>:
 8011f34:	4b02      	ldr	r3, [pc, #8]	; (8011f40 <raise+0xc>)
 8011f36:	4601      	mov	r1, r0
 8011f38:	6818      	ldr	r0, [r3, #0]
 8011f3a:	f7ff bfd3 	b.w	8011ee4 <_raise_r>
 8011f3e:	bf00      	nop
 8011f40:	2000006c 	.word	0x2000006c

08011f44 <_kill_r>:
 8011f44:	b538      	push	{r3, r4, r5, lr}
 8011f46:	4d07      	ldr	r5, [pc, #28]	; (8011f64 <_kill_r+0x20>)
 8011f48:	2300      	movs	r3, #0
 8011f4a:	4604      	mov	r4, r0
 8011f4c:	4608      	mov	r0, r1
 8011f4e:	4611      	mov	r1, r2
 8011f50:	602b      	str	r3, [r5, #0]
 8011f52:	f7f1 ff77 	bl	8003e44 <_kill>
 8011f56:	1c43      	adds	r3, r0, #1
 8011f58:	d102      	bne.n	8011f60 <_kill_r+0x1c>
 8011f5a:	682b      	ldr	r3, [r5, #0]
 8011f5c:	b103      	cbz	r3, 8011f60 <_kill_r+0x1c>
 8011f5e:	6023      	str	r3, [r4, #0]
 8011f60:	bd38      	pop	{r3, r4, r5, pc}
 8011f62:	bf00      	nop
 8011f64:	200059f0 	.word	0x200059f0

08011f68 <_getpid_r>:
 8011f68:	f7f1 bf64 	b.w	8003e34 <_getpid>

08011f6c <__swhatbuf_r>:
 8011f6c:	b570      	push	{r4, r5, r6, lr}
 8011f6e:	460c      	mov	r4, r1
 8011f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f74:	2900      	cmp	r1, #0
 8011f76:	b096      	sub	sp, #88	; 0x58
 8011f78:	4615      	mov	r5, r2
 8011f7a:	461e      	mov	r6, r3
 8011f7c:	da0d      	bge.n	8011f9a <__swhatbuf_r+0x2e>
 8011f7e:	89a3      	ldrh	r3, [r4, #12]
 8011f80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011f84:	f04f 0100 	mov.w	r1, #0
 8011f88:	bf0c      	ite	eq
 8011f8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011f8e:	2340      	movne	r3, #64	; 0x40
 8011f90:	2000      	movs	r0, #0
 8011f92:	6031      	str	r1, [r6, #0]
 8011f94:	602b      	str	r3, [r5, #0]
 8011f96:	b016      	add	sp, #88	; 0x58
 8011f98:	bd70      	pop	{r4, r5, r6, pc}
 8011f9a:	466a      	mov	r2, sp
 8011f9c:	f000 f848 	bl	8012030 <_fstat_r>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	dbec      	blt.n	8011f7e <__swhatbuf_r+0x12>
 8011fa4:	9901      	ldr	r1, [sp, #4]
 8011fa6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011faa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011fae:	4259      	negs	r1, r3
 8011fb0:	4159      	adcs	r1, r3
 8011fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fb6:	e7eb      	b.n	8011f90 <__swhatbuf_r+0x24>

08011fb8 <__smakebuf_r>:
 8011fb8:	898b      	ldrh	r3, [r1, #12]
 8011fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011fbc:	079d      	lsls	r5, r3, #30
 8011fbe:	4606      	mov	r6, r0
 8011fc0:	460c      	mov	r4, r1
 8011fc2:	d507      	bpl.n	8011fd4 <__smakebuf_r+0x1c>
 8011fc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011fc8:	6023      	str	r3, [r4, #0]
 8011fca:	6123      	str	r3, [r4, #16]
 8011fcc:	2301      	movs	r3, #1
 8011fce:	6163      	str	r3, [r4, #20]
 8011fd0:	b002      	add	sp, #8
 8011fd2:	bd70      	pop	{r4, r5, r6, pc}
 8011fd4:	ab01      	add	r3, sp, #4
 8011fd6:	466a      	mov	r2, sp
 8011fd8:	f7ff ffc8 	bl	8011f6c <__swhatbuf_r>
 8011fdc:	9900      	ldr	r1, [sp, #0]
 8011fde:	4605      	mov	r5, r0
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	f7ff f873 	bl	80110cc <_malloc_r>
 8011fe6:	b948      	cbnz	r0, 8011ffc <__smakebuf_r+0x44>
 8011fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fec:	059a      	lsls	r2, r3, #22
 8011fee:	d4ef      	bmi.n	8011fd0 <__smakebuf_r+0x18>
 8011ff0:	f023 0303 	bic.w	r3, r3, #3
 8011ff4:	f043 0302 	orr.w	r3, r3, #2
 8011ff8:	81a3      	strh	r3, [r4, #12]
 8011ffa:	e7e3      	b.n	8011fc4 <__smakebuf_r+0xc>
 8011ffc:	89a3      	ldrh	r3, [r4, #12]
 8011ffe:	6020      	str	r0, [r4, #0]
 8012000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012004:	81a3      	strh	r3, [r4, #12]
 8012006:	9b00      	ldr	r3, [sp, #0]
 8012008:	6163      	str	r3, [r4, #20]
 801200a:	9b01      	ldr	r3, [sp, #4]
 801200c:	6120      	str	r0, [r4, #16]
 801200e:	b15b      	cbz	r3, 8012028 <__smakebuf_r+0x70>
 8012010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012014:	4630      	mov	r0, r6
 8012016:	f000 f81d 	bl	8012054 <_isatty_r>
 801201a:	b128      	cbz	r0, 8012028 <__smakebuf_r+0x70>
 801201c:	89a3      	ldrh	r3, [r4, #12]
 801201e:	f023 0303 	bic.w	r3, r3, #3
 8012022:	f043 0301 	orr.w	r3, r3, #1
 8012026:	81a3      	strh	r3, [r4, #12]
 8012028:	89a3      	ldrh	r3, [r4, #12]
 801202a:	431d      	orrs	r5, r3
 801202c:	81a5      	strh	r5, [r4, #12]
 801202e:	e7cf      	b.n	8011fd0 <__smakebuf_r+0x18>

08012030 <_fstat_r>:
 8012030:	b538      	push	{r3, r4, r5, lr}
 8012032:	4d07      	ldr	r5, [pc, #28]	; (8012050 <_fstat_r+0x20>)
 8012034:	2300      	movs	r3, #0
 8012036:	4604      	mov	r4, r0
 8012038:	4608      	mov	r0, r1
 801203a:	4611      	mov	r1, r2
 801203c:	602b      	str	r3, [r5, #0]
 801203e:	f7f1 ff60 	bl	8003f02 <_fstat>
 8012042:	1c43      	adds	r3, r0, #1
 8012044:	d102      	bne.n	801204c <_fstat_r+0x1c>
 8012046:	682b      	ldr	r3, [r5, #0]
 8012048:	b103      	cbz	r3, 801204c <_fstat_r+0x1c>
 801204a:	6023      	str	r3, [r4, #0]
 801204c:	bd38      	pop	{r3, r4, r5, pc}
 801204e:	bf00      	nop
 8012050:	200059f0 	.word	0x200059f0

08012054 <_isatty_r>:
 8012054:	b538      	push	{r3, r4, r5, lr}
 8012056:	4d06      	ldr	r5, [pc, #24]	; (8012070 <_isatty_r+0x1c>)
 8012058:	2300      	movs	r3, #0
 801205a:	4604      	mov	r4, r0
 801205c:	4608      	mov	r0, r1
 801205e:	602b      	str	r3, [r5, #0]
 8012060:	f7f1 ff5f 	bl	8003f22 <_isatty>
 8012064:	1c43      	adds	r3, r0, #1
 8012066:	d102      	bne.n	801206e <_isatty_r+0x1a>
 8012068:	682b      	ldr	r3, [r5, #0]
 801206a:	b103      	cbz	r3, 801206e <_isatty_r+0x1a>
 801206c:	6023      	str	r3, [r4, #0]
 801206e:	bd38      	pop	{r3, r4, r5, pc}
 8012070:	200059f0 	.word	0x200059f0

08012074 <_init>:
 8012074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012076:	bf00      	nop
 8012078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801207a:	bc08      	pop	{r3}
 801207c:	469e      	mov	lr, r3
 801207e:	4770      	bx	lr

08012080 <_fini>:
 8012080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012082:	bf00      	nop
 8012084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012086:	bc08      	pop	{r3}
 8012088:	469e      	mov	lr, r3
 801208a:	4770      	bx	lr
