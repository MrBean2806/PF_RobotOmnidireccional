
FreeRTOS_tesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800c668  0800c668  0001c668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7ec  0800c7ec  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800c7ec  0800c7ec  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c7ec  0800c7ec  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7ec  0800c7ec  0001c7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7f0  0800c7f0  0001c7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800c7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00003018  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000307c  2000307c  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002053e  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004274  00000000  00000000  00040615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a50  00000000  00000000  00044890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014ab  00000000  00000000  000462e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024cd0  00000000  00000000  0004778b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022e9d  00000000  00000000  0006c45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e10ad  00000000  00000000  0008f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000736c  00000000  00000000  001703a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00177714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c650 	.word	0x0800c650

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	0800c650 	.word	0x0800c650

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <vApplicationGetIdleTaskMemory+0x30>)
 8000a82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000080 	.word	0x20000080
 8000a9c:	20000120 	.word	0x20000120

08000aa0 <HAL_UART_RxCpltCallback>:
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int RxFlag = RESET;
//int state = START_State;
int state = RUN_State;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	RxFlag = SET;
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <HAL_UART_RxCpltCallback+0x1c>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	601a      	str	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	2000068c 	.word	0x2000068c

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b5b0      	push	{r4, r5, r7, lr}
 8000ac2:	b0d0      	sub	sp, #320	; 0x140
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac6:	f001 feff 	bl	80028c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aca:	f000 f999 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ace:	f000 fd7f 	bl	80015d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ad2:	f000 fd5f 	bl	8001594 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000ad6:	f000 fd2d 	bl	8001534 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000ada:	f000 fa07 	bl	8000eec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ade:	f000 fb15 	bl	800110c <MX_TIM1_Init>
  MX_CRC_Init();
 8000ae2:	f000 fa73 	bl	8000fcc <MX_CRC_Init>
  MX_I2C1_Init();
 8000ae6:	f000 fa93 	bl	8001010 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000aea:	f000 fad1 	bl	8001090 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000aee:	f000 fbb9 	bl	8001264 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000af2:	f000 fc2d 	bl	8001350 <MX_TIM4_Init>
  MX_TIM17_Init();
 8000af6:	f000 fca3 	bl	8001440 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000afa:	f000 f9eb 	bl	8000ed4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  hcrc.Instance = CRC;
 8000afe:	4ba4      	ldr	r3, [pc, #656]	; (8000d90 <main+0x2d0>)
 8000b00:	4aa4      	ldr	r2, [pc, #656]	; (8000d94 <main+0x2d4>)
 8000b02:	601a      	str	r2, [r3, #0]

  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000b04:	4ba2      	ldr	r3, [pc, #648]	; (8000d90 <main+0x2d0>)
 8000b06:	2210      	movs	r2, #16
 8000b08:	60da      	str	r2, [r3, #12]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000b0a:	4ba1      	ldr	r3, [pc, #644]	; (8000d90 <main+0x2d0>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000b10:	4b9f      	ldr	r3, [pc, #636]	; (8000d90 <main+0x2d0>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 0x07;
 8000b16:	4b9e      	ldr	r3, [pc, #632]	; (8000d90 <main+0x2d0>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	609a      	str	r2, [r3, #8]
  hcrc.Init.InitValue = 0x00;
 8000b1c:	4b9c      	ldr	r3, [pc, #624]	; (8000d90 <main+0x2d0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b22:	4b9b      	ldr	r3, [pc, #620]	; (8000d90 <main+0x2d0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b28:	4b99      	ldr	r3, [pc, #612]	; (8000d90 <main+0x2d0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]

//  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b2e:	4b98      	ldr	r3, [pc, #608]	; (8000d90 <main+0x2d0>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b34:	4896      	ldr	r0, [pc, #600]	; (8000d90 <main+0x2d0>)
 8000b36:	f003 f991 	bl	8003e5c <HAL_CRC_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <main+0x84>
  {
	  Error_Handler();
 8000b40:	f001 fb2c 	bl	800219c <Error_Handler>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySemAccelTx */
  osSemaphoreDef(myBinarySemAccelTx);
 8000b44:	2300      	movs	r3, #0
 8000b46:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  myBinarySemAccelTxHandle = osSemaphoreCreate(osSemaphore(myBinarySemAccelTx), 1);
 8000b50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b54:	2101      	movs	r1, #1
 8000b56:	4618      	mov	r0, r3
 8000b58:	f009 fa13 	bl	8009f82 <osSemaphoreCreate>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4a8e      	ldr	r2, [pc, #568]	; (8000d98 <main+0x2d8>)
 8000b60:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemVelTx */
  osSemaphoreDef(myBinarySemVelTx);
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  myBinarySemVelTxHandle = osSemaphoreCreate(osSemaphore(myBinarySemVelTx), 1);
 8000b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b72:	2101      	movs	r1, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f009 fa04 	bl	8009f82 <osSemaphoreCreate>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a87      	ldr	r2, [pc, #540]	; (8000d9c <main+0x2dc>)
 8000b7e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemVelControl */
  osSemaphoreDef(myBinarySemVelControl);
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  myBinarySemVelControlHandle = osSemaphoreCreate(osSemaphore(myBinarySemVelControl), 1);
 8000b8c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b90:	2101      	movs	r1, #1
 8000b92:	4618      	mov	r0, r3
 8000b94:	f009 f9f5 	bl	8009f82 <osSemaphoreCreate>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4a81      	ldr	r2, [pc, #516]	; (8000da0 <main+0x2e0>)
 8000b9c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemRxConv */
  osSemaphoreDef(myBinarySemRxConv);
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  myBinarySemRxConvHandle = osSemaphoreCreate(osSemaphore(myBinarySemRxConv), 1);
 8000baa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f009 f9e6 	bl	8009f82 <osSemaphoreCreate>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a7a      	ldr	r2, [pc, #488]	; (8000da4 <main+0x2e4>)
 8000bba:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemConvControl */
  osSemaphoreDef(myBinarySemConvControl);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  myBinarySemConvControlHandle = osSemaphoreCreate(osSemaphore(myBinarySemConvControl), 1);
 8000bc8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f009 f9d7 	bl	8009f82 <osSemaphoreCreate>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a74      	ldr	r2, [pc, #464]	; (8000da8 <main+0x2e8>)
 8000bd8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  // Queue RxTask to ConvDirec
  osMessageQDef(myQueueRxConv, sizeof(s_Velocidad), s_Velocidad);
 8000bda:	4b74      	ldr	r3, [pc, #464]	; (8000dac <main+0x2ec>)
 8000bdc:	f507 7484 	add.w	r4, r7, #264	; 0x108
 8000be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000be2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueRxConvHandle = osMessageCreate(osMessageQ(myQueueRxConv), NULL);
 8000be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f009 f9fa 	bl	8009fe6 <osMessageCreate>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a6e      	ldr	r2, [pc, #440]	; (8000db0 <main+0x2f0>)
 8000bf6:	6013      	str	r3, [r2, #0]

  // Queue ConvDirec to ControlVel
  osMessageQDef(myQueueConvControl, sizeof(s_Velocidad_ruedas), s_Velocidad_ruedas);
 8000bf8:	4b6e      	ldr	r3, [pc, #440]	; (8000db4 <main+0x2f4>)
 8000bfa:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8000bfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueConvControlHandle = osMessageCreate(osMessageQ(myQueueConvControl), NULL);
 8000c04:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f009 f9eb 	bl	8009fe6 <osMessageCreate>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a69      	ldr	r2, [pc, #420]	; (8000db8 <main+0x2f8>)
 8000c14:	6013      	str	r3, [r2, #0]
  
  // Queue MeasureVel to ControlVel
  osMessageQDef(myQueueVelControl, sizeof(s_Velocidad_ruedas), s_Velocidad_ruedas);
 8000c16:	4b67      	ldr	r3, [pc, #412]	; (8000db4 <main+0x2f4>)
 8000c18:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8000c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueVelControlHandle = osMessageCreate(osMessageQ(myQueueVelControl), NULL);
 8000c22:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f009 f9dc 	bl	8009fe6 <osMessageCreate>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a62      	ldr	r2, [pc, #392]	; (8000dbc <main+0x2fc>)
 8000c32:	6013      	str	r3, [r2, #0]

  // Queue MeasureVel to TxTask
  osMessageQDef(myQueueVelTx, sizeof(s_Velocidad), s_Velocidad);
 8000c34:	4b5d      	ldr	r3, [pc, #372]	; (8000dac <main+0x2ec>)
 8000c36:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8000c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueVelTxHandle = osMessageCreate(osMessageQ(myQueueVelTx), NULL);
 8000c40:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f009 f9cd 	bl	8009fe6 <osMessageCreate>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4a5c      	ldr	r2, [pc, #368]	; (8000dc0 <main+0x300>)
 8000c50:	6013      	str	r3, [r2, #0]

  // Queue MeasureAccel to TxTask
  osMessageQDef(myQueueAccelTx, sizeof(s_Aceleracion), s_Aceleracion);
 8000c52:	4b56      	ldr	r3, [pc, #344]	; (8000dac <main+0x2ec>)
 8000c54:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000c58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueAccelTxHandle = osMessageCreate(osMessageQ(myQueueAccelTx), NULL);
 8000c5e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f009 f9be 	bl	8009fe6 <osMessageCreate>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a55      	ldr	r2, [pc, #340]	; (8000dc4 <main+0x304>)
 8000c6e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000c70:	4b55      	ldr	r3, [pc, #340]	; (8000dc8 <main+0x308>)
 8000c72:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000c76:	461d      	mov	r5, r3
 8000c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f009 f919 	bl	8009ec2 <osThreadCreate>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a4e      	ldr	r2, [pc, #312]	; (8000dcc <main+0x30c>)
 8000c94:	6013      	str	r3, [r2, #0]

  /* definition and creation of TxTask */
  osThreadDef(TxTask, StartTxTask, osPriorityLow, 0, 128);
 8000c96:	4b4e      	ldr	r3, [pc, #312]	; (8000dd0 <main+0x310>)
 8000c98:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000c9c:	461d      	mov	r5, r3
 8000c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ca6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TxTaskHandle = osThreadCreate(osThread(TxTask), NULL);
 8000caa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f009 f906 	bl	8009ec2 <osThreadCreate>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a46      	ldr	r2, [pc, #280]	; (8000dd4 <main+0x314>)
 8000cba:	6013      	str	r3, [r2, #0]

  /* definition and creation of RxTask */
  osThreadDef(RxTask, StartRxTask, osPriorityNormal, 0, 128);
 8000cbc:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <main+0x318>)
 8000cbe:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ccc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RxTaskHandle = osThreadCreate(osThread(RxTask), NULL);
 8000cd0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f009 f8f3 	bl	8009ec2 <osThreadCreate>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4a3f      	ldr	r2, [pc, #252]	; (8000ddc <main+0x31c>)
 8000ce0:	6013      	str	r3, [r2, #0]

  /* definition and creation of CinematicConv */
  osThreadDef(CinematicConv, StartCinematicConv, osPriorityBelowNormal, 0, 128);
 8000ce2:	4b3f      	ldr	r3, [pc, #252]	; (8000de0 <main+0x320>)
 8000ce4:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000ce8:	461d      	mov	r5, r3
 8000cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CinematicConvHandle = osThreadCreate(osThread(CinematicConv), NULL);
 8000cf6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f009 f8e0 	bl	8009ec2 <osThreadCreate>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a37      	ldr	r2, [pc, #220]	; (8000de4 <main+0x324>)
 8000d06:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControlVel */
  osThreadDef(ControlVel, StartControlVel, osPriorityHigh, 0, 128);
 8000d08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d10:	4a35      	ldr	r2, [pc, #212]	; (8000de8 <main+0x328>)
 8000d12:	461c      	mov	r4, r3
 8000d14:	4615      	mov	r5, r2
 8000d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlVelHandle = osThreadCreate(osThread(ControlVel), NULL);
 8000d22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f009 f8ca 	bl	8009ec2 <osThreadCreate>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a2e      	ldr	r2, [pc, #184]	; (8000dec <main+0x32c>)
 8000d32:	6013      	str	r3, [r2, #0]

  /* definition and creation of MeasureAccel */
  osThreadDef(MeasureAccel, StartMeasureAccel, osPriorityAboveNormal, 0, 128);
 8000d34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d38:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d3c:	4a2c      	ldr	r2, [pc, #176]	; (8000df0 <main+0x330>)
 8000d3e:	461c      	mov	r4, r3
 8000d40:	4615      	mov	r5, r2
 8000d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MeasureAccelHandle = osThreadCreate(osThread(MeasureAccel), NULL);
 8000d4e:	f107 0320 	add.w	r3, r7, #32
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f009 f8b4 	bl	8009ec2 <osThreadCreate>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a25      	ldr	r2, [pc, #148]	; (8000df4 <main+0x334>)
 8000d5e:	6013      	str	r3, [r2, #0]

  /* definition and creation of MeasureVel */
  osThreadDef(MeasureVel, StartMeasureVel, osPriorityRealtime, 0, 128);
 8000d60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d64:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000d68:	4a23      	ldr	r2, [pc, #140]	; (8000df8 <main+0x338>)
 8000d6a:	461c      	mov	r4, r3
 8000d6c:	4615      	mov	r5, r2
 8000d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MeasureVelHandle = osThreadCreate(osThread(MeasureVel), NULL);
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f009 f89f 	bl	8009ec2 <osThreadCreate>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <main+0x33c>)
 8000d88:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d8a:	f009 f893 	bl	8009eb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <main+0x2ce>
 8000d90:	20000370 	.word	0x20000370
 8000d94:	40023000 	.word	0x40023000
 8000d98:	20000664 	.word	0x20000664
 8000d9c:	20000668 	.word	0x20000668
 8000da0:	2000066c 	.word	0x2000066c
 8000da4:	20000670 	.word	0x20000670
 8000da8:	20000674 	.word	0x20000674
 8000dac:	0800c668 	.word	0x0800c668
 8000db0:	20000678 	.word	0x20000678
 8000db4:	0800c678 	.word	0x0800c678
 8000db8:	2000067c 	.word	0x2000067c
 8000dbc:	20000680 	.word	0x20000680
 8000dc0:	20000684 	.word	0x20000684
 8000dc4:	20000688 	.word	0x20000688
 8000dc8:	0800c694 	.word	0x0800c694
 8000dcc:	20000648 	.word	0x20000648
 8000dd0:	0800c6b8 	.word	0x0800c6b8
 8000dd4:	2000064c 	.word	0x2000064c
 8000dd8:	0800c6dc 	.word	0x0800c6dc
 8000ddc:	20000650 	.word	0x20000650
 8000de0:	0800c708 	.word	0x0800c708
 8000de4:	20000654 	.word	0x20000654
 8000de8:	0800c730 	.word	0x0800c730
 8000dec:	20000658 	.word	0x20000658
 8000df0:	0800c75c 	.word	0x0800c75c
 8000df4:	2000065c 	.word	0x2000065c
 8000df8:	0800c784 	.word	0x0800c784
 8000dfc:	20000660 	.word	0x20000660

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0a6      	sub	sp, #152	; 0x98
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e0a:	2228      	movs	r2, #40	; 0x28
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f00b fb34 	bl	800c47c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2258      	movs	r2, #88	; 0x58
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f00b fb26 	bl	800c47c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e30:	2302      	movs	r3, #2
 8000e32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e34:	2301      	movs	r3, #1
 8000e36:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e38:	2310      	movs	r3, #16
 8000e3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e4c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 fc48 	bl	80056f4 <HAL_RCC_OscConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e6a:	f001 f997 	bl	800219c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6e:	230f      	movs	r3, #15
 8000e70:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e72:	2302      	movs	r3, #2
 8000e74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f005 fc86 	bl	800679c <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e96:	f001 f981 	bl	800219c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <SystemClock_Config+0xd0>)
 8000e9c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM17
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f005 fed7 	bl	8006c6c <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ec4:	f001 f96a 	bl	800219c <Error_Handler>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3798      	adds	r7, #152	; 0x98
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	01301024 	.word	0x01301024

08000ed4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2105      	movs	r1, #5
 8000edc:	2027      	movs	r0, #39	; 0x27
 8000ede:	f002 ff93 	bl	8003e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ee2:	2027      	movs	r0, #39	; 0x27
 8000ee4:	f002 ffac 	bl	8003e40 <HAL_NVIC_EnableIRQ>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f16:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f6a:	4817      	ldr	r0, [pc, #92]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f6c:	f001 fce2 	bl	8002934 <HAL_ADC_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f76:	f001 f911 	bl	800219c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000f86:	f002 fc15 	bl	80037b4 <HAL_ADCEx_MultiModeConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000f90:	f001 f904 	bl	800219c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_ADC1_Init+0xdc>)
 8000fb2:	f002 f915 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000fbc:	f001 f8ee 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000320 	.word	0x20000320

08000fcc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <MX_CRC_Init+0x3c>)
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <MX_CRC_Init+0x40>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_CRC_Init+0x3c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <MX_CRC_Init+0x3c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_CRC_Init+0x3c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <MX_CRC_Init+0x3c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_CRC_Init+0x3c>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_CRC_Init+0x3c>)
 8000ff6:	f002 ff31 	bl	8003e5c <HAL_CRC_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001000:	f001 f8cc 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000370 	.word	0x20000370
 800100c:	40023000 	.word	0x40023000

08001010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_I2C1_Init+0x74>)
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <MX_I2C1_Init+0x78>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_I2C1_Init+0x74>)
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <MX_I2C1_Init+0x7c>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_I2C1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_I2C1_Init+0x74>)
 8001028:	2201      	movs	r2, #1
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_I2C1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_I2C1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_I2C1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_I2C1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <MX_I2C1_Init+0x74>)
 800104c:	f003 fc8d 	bl	800496a <HAL_I2C_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001056:	f001 f8a1 	bl	800219c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <MX_I2C1_Init+0x74>)
 800105e:	f004 fab2 	bl	80055c6 <HAL_I2CEx_ConfigAnalogFilter>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001068:	f001 f898 	bl	800219c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800106c:	2100      	movs	r1, #0
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_I2C1_Init+0x74>)
 8001070:	f004 faf4 	bl	800565c <HAL_I2CEx_ConfigDigitalFilter>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107a:	f001 f88f 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000394 	.word	0x20000394
 8001088:	40005400 	.word	0x40005400
 800108c:	2000090e 	.word	0x2000090e

08001090 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_SPI2_Init+0x74>)
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <MX_SPI2_Init+0x78>)
 8001098:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_SPI2_Init+0x74>)
 800109c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_SPI2_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_SPI2_Init+0x74>)
 80010aa:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80010ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_SPI2_Init+0x74>)
 80010b2:	2202      	movs	r2, #2
 80010b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_SPI2_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_SPI2_Init+0x74>)
 80010be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_SPI2_Init+0x74>)
 80010c6:	2220      	movs	r2, #32
 80010c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_SPI2_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_SPI2_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_SPI2_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_SPI2_Init+0x74>)
 80010de:	2207      	movs	r2, #7
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_SPI2_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_SPI2_Init+0x74>)
 80010ea:	2208      	movs	r2, #8
 80010ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_SPI2_Init+0x74>)
 80010f0:	f005 ffda 	bl	80070a8 <HAL_SPI_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010fa:	f001 f84f 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200003e8 	.word	0x200003e8
 8001108:	40003800 	.word	0x40003800

0800110c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b09a      	sub	sp, #104	; 0x68
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800112c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]
 800113e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	222c      	movs	r2, #44	; 0x2c
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00b f998 	bl	800c47c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800114c:	4b43      	ldr	r3, [pc, #268]	; (800125c <MX_TIM1_Init+0x150>)
 800114e:	4a44      	ldr	r2, [pc, #272]	; (8001260 <MX_TIM1_Init+0x154>)
 8001150:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001152:	4b42      	ldr	r3, [pc, #264]	; (800125c <MX_TIM1_Init+0x150>)
 8001154:	2247      	movs	r2, #71	; 0x47
 8001156:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001158:	4b40      	ldr	r3, [pc, #256]	; (800125c <MX_TIM1_Init+0x150>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800115e:	4b3f      	ldr	r3, [pc, #252]	; (800125c <MX_TIM1_Init+0x150>)
 8001160:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001164:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <MX_TIM1_Init+0x150>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800116c:	4b3b      	ldr	r3, [pc, #236]	; (800125c <MX_TIM1_Init+0x150>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001172:	4b3a      	ldr	r3, [pc, #232]	; (800125c <MX_TIM1_Init+0x150>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001178:	4838      	ldr	r0, [pc, #224]	; (800125c <MX_TIM1_Init+0x150>)
 800117a:	f006 f840 	bl	80071fe <HAL_TIM_Base_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001184:	f001 f80a 	bl	800219c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800118e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001192:	4619      	mov	r1, r3
 8001194:	4831      	ldr	r0, [pc, #196]	; (800125c <MX_TIM1_Init+0x150>)
 8001196:	f006 fc9b 	bl	8007ad0 <HAL_TIM_ConfigClockSource>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011a0:	f000 fffc 	bl	800219c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011a4:	482d      	ldr	r0, [pc, #180]	; (800125c <MX_TIM1_Init+0x150>)
 80011a6:	f006 f8f1 	bl	800738c <HAL_TIM_PWM_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011b0:	f000 fff4 	bl	800219c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011c4:	4619      	mov	r1, r3
 80011c6:	4825      	ldr	r0, [pc, #148]	; (800125c <MX_TIM1_Init+0x150>)
 80011c8:	f007 f9d8 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011d2:	f000 ffe3 	bl	800219c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d6:	2360      	movs	r3, #96	; 0x60
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011de:	2300      	movs	r3, #0
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011e2:	2300      	movs	r3, #0
 80011e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	4818      	ldr	r0, [pc, #96]	; (800125c <MX_TIM1_Init+0x150>)
 80011fc:	f006 fb54 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001206:	f000 ffc9 	bl	800219c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800122c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM1_Init+0x150>)
 8001240:	f007 fa28 	bl	8008694 <HAL_TIMEx_ConfigBreakDeadTime>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800124a:	f000 ffa7 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM1_Init+0x150>)
 8001250:	f001 f94a 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 8001254:	bf00      	nop
 8001256:	3768      	adds	r7, #104	; 0x68
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000044c 	.word	0x2000044c
 8001260:	40012c00 	.word	0x40012c00

08001264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08e      	sub	sp, #56	; 0x38
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
 8001292:	615a      	str	r2, [r3, #20]
 8001294:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_TIM2_Init+0xe8>)
 8001298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <MX_TIM2_Init+0xe8>)
 80012a0:	2247      	movs	r2, #71	; 0x47
 80012a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_TIM2_Init+0xe8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <MX_TIM2_Init+0xe8>)
 80012ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_TIM2_Init+0xe8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <MX_TIM2_Init+0xe8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012be:	4823      	ldr	r0, [pc, #140]	; (800134c <MX_TIM2_Init+0xe8>)
 80012c0:	f005 ff9d 	bl	80071fe <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012ca:	f000 ff67 	bl	800219c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d8:	4619      	mov	r1, r3
 80012da:	481c      	ldr	r0, [pc, #112]	; (800134c <MX_TIM2_Init+0xe8>)
 80012dc:	f006 fbf8 	bl	8007ad0 <HAL_TIM_ConfigClockSource>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012e6:	f000 ff59 	bl	800219c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012ea:	4818      	ldr	r0, [pc, #96]	; (800134c <MX_TIM2_Init+0xe8>)
 80012ec:	f006 f84e 	bl	800738c <HAL_TIM_PWM_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012f6:	f000 ff51 	bl	800219c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4810      	ldr	r0, [pc, #64]	; (800134c <MX_TIM2_Init+0xe8>)
 800130a:	f007 f937 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001314:	f000 ff42 	bl	800219c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001318:	2360      	movs	r3, #96	; 0x60
 800131a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_TIM2_Init+0xe8>)
 8001330:	f006 faba 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800133a:	f000 ff2f 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <MX_TIM2_Init+0xe8>)
 8001340:	f001 f8d2 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 8001344:	bf00      	nop
 8001346:	3738      	adds	r7, #56	; 0x38
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000498 	.word	0x20000498

08001350 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <MX_TIM4_Init+0xe8>)
 8001384:	4a2d      	ldr	r2, [pc, #180]	; (800143c <MX_TIM4_Init+0xec>)
 8001386:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001388:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <MX_TIM4_Init+0xe8>)
 800138a:	2247      	movs	r2, #71	; 0x47
 800138c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <MX_TIM4_Init+0xe8>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001394:	4b28      	ldr	r3, [pc, #160]	; (8001438 <MX_TIM4_Init+0xe8>)
 8001396:	f240 32e7 	movw	r2, #999	; 0x3e7
 800139a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <MX_TIM4_Init+0xe8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b25      	ldr	r3, [pc, #148]	; (8001438 <MX_TIM4_Init+0xe8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013a8:	4823      	ldr	r0, [pc, #140]	; (8001438 <MX_TIM4_Init+0xe8>)
 80013aa:	f005 ff28 	bl	80071fe <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80013b4:	f000 fef2 	bl	800219c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c2:	4619      	mov	r1, r3
 80013c4:	481c      	ldr	r0, [pc, #112]	; (8001438 <MX_TIM4_Init+0xe8>)
 80013c6:	f006 fb83 	bl	8007ad0 <HAL_TIM_ConfigClockSource>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80013d0:	f000 fee4 	bl	800219c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013d4:	4818      	ldr	r0, [pc, #96]	; (8001438 <MX_TIM4_Init+0xe8>)
 80013d6:	f005 ffd9 	bl	800738c <HAL_TIM_PWM_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80013e0:	f000 fedc 	bl	800219c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4811      	ldr	r0, [pc, #68]	; (8001438 <MX_TIM4_Init+0xe8>)
 80013f4:	f007 f8c2 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80013fe:	f000 fecd 	bl	800219c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001402:	2360      	movs	r3, #96	; 0x60
 8001404:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <MX_TIM4_Init+0xe8>)
 800141a:	f006 fa45 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001424:	f000 feba 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001428:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_TIM4_Init+0xe8>)
 800142a:	f001 f85d 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 800142e:	bf00      	nop
 8001430:	3738      	adds	r7, #56	; 0x38
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200004e4 	.word	0x200004e4
 800143c:	40000800 	.word	0x40000800

08001440 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b092      	sub	sp, #72	; 0x48
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800145a:	463b      	mov	r3, r7
 800145c:	222c      	movs	r2, #44	; 0x2c
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f00b f80b 	bl	800c47c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001466:	4b31      	ldr	r3, [pc, #196]	; (800152c <MX_TIM17_Init+0xec>)
 8001468:	4a31      	ldr	r2, [pc, #196]	; (8001530 <MX_TIM17_Init+0xf0>)
 800146a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 72-1;
 800146c:	4b2f      	ldr	r3, [pc, #188]	; (800152c <MX_TIM17_Init+0xec>)
 800146e:	2247      	movs	r2, #71	; 0x47
 8001470:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b2e      	ldr	r3, [pc, #184]	; (800152c <MX_TIM17_Init+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8001478:	4b2c      	ldr	r3, [pc, #176]	; (800152c <MX_TIM17_Init+0xec>)
 800147a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800147e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b2a      	ldr	r3, [pc, #168]	; (800152c <MX_TIM17_Init+0xec>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001486:	4b29      	ldr	r3, [pc, #164]	; (800152c <MX_TIM17_Init+0xec>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <MX_TIM17_Init+0xec>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001492:	4826      	ldr	r0, [pc, #152]	; (800152c <MX_TIM17_Init+0xec>)
 8001494:	f005 feb3 	bl	80071fe <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800149e:	f000 fe7d 	bl	800219c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80014a2:	4822      	ldr	r0, [pc, #136]	; (800152c <MX_TIM17_Init+0xec>)
 80014a4:	f005 ff72 	bl	800738c <HAL_TIM_PWM_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80014ae:	f000 fe75 	bl	800219c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b2:	2360      	movs	r3, #96	; 0x60
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014be:	2300      	movs	r3, #0
 80014c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d2:	2200      	movs	r2, #0
 80014d4:	4619      	mov	r1, r3
 80014d6:	4815      	ldr	r0, [pc, #84]	; (800152c <MX_TIM17_Init+0xec>)
 80014d8:	f006 f9e6 	bl	80078a8 <HAL_TIM_PWM_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80014e2:	f000 fe5b 	bl	800219c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	4619      	mov	r1, r3
 800150c:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_TIM17_Init+0xec>)
 800150e:	f007 f8c1 	bl	8008694 <HAL_TIMEx_ConfigBreakDeadTime>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001518:	f000 fe40 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800151c:	4803      	ldr	r0, [pc, #12]	; (800152c <MX_TIM17_Init+0xec>)
 800151e:	f000 ffe3 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 8001522:	bf00      	nop
 8001524:	3748      	adds	r7, #72	; 0x48
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000530 	.word	0x20000530
 8001530:	40014800 	.word	0x40014800

08001534 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_USART3_UART_Init+0x54>)
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <MX_USART3_UART_Init+0x58>)
 800153c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_USART3_UART_Init+0x54>)
 8001540:	4a13      	ldr	r2, [pc, #76]	; (8001590 <MX_USART3_UART_Init+0x5c>)
 8001542:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_USART3_UART_Init+0x54>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_USART3_UART_Init+0x54>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <MX_USART3_UART_Init+0x54>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART3_UART_Init+0x54>)
 8001558:	220c      	movs	r2, #12
 800155a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_USART3_UART_Init+0x54>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART3_UART_Init+0x54>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_USART3_UART_Init+0x54>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART3_UART_Init+0x54>)
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_USART3_UART_Init+0x54>)
 8001576:	f007 f931 	bl	80087dc <HAL_UART_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8001580:	f000 fe0c 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200005c0 	.word	0x200005c0
 800158c:	40004800 	.word	0x40004800
 8001590:	001e8480 	.word	0x001e8480

08001594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_DMA_Init+0x38>)
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <MX_DMA_Init+0x38>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6153      	str	r3, [r2, #20]
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_DMA_Init+0x38>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2105      	movs	r1, #5
 80015b6:	200c      	movs	r0, #12
 80015b8:	f002 fc26 	bl	8003e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015bc:	200c      	movs	r0, #12
 80015be:	f002 fc3f 	bl	8003e40 <HAL_NVIC_EnableIRQ>

}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	4b54      	ldr	r3, [pc, #336]	; (8001738 <MX_GPIO_Init+0x168>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a53      	ldr	r2, [pc, #332]	; (8001738 <MX_GPIO_Init+0x168>)
 80015ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015f0:	6153      	str	r3, [r2, #20]
 80015f2:	4b51      	ldr	r3, [pc, #324]	; (8001738 <MX_GPIO_Init+0x168>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015fe:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <MX_GPIO_Init+0x168>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <MX_GPIO_Init+0x168>)
 8001604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001608:	6153      	str	r3, [r2, #20]
 800160a:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <MX_GPIO_Init+0x168>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b48      	ldr	r3, [pc, #288]	; (8001738 <MX_GPIO_Init+0x168>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	4a47      	ldr	r2, [pc, #284]	; (8001738 <MX_GPIO_Init+0x168>)
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	6153      	str	r3, [r2, #20]
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <MX_GPIO_Init+0x168>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b42      	ldr	r3, [pc, #264]	; (8001738 <MX_GPIO_Init+0x168>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4a41      	ldr	r2, [pc, #260]	; (8001738 <MX_GPIO_Init+0x168>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001638:	6153      	str	r3, [r2, #20]
 800163a:	4b3f      	ldr	r3, [pc, #252]	; (8001738 <MX_GPIO_Init+0x168>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001646:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <MX_GPIO_Init+0x168>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	4a3b      	ldr	r2, [pc, #236]	; (8001738 <MX_GPIO_Init+0x168>)
 800164c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001650:	6153      	str	r3, [r2, #20]
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <MX_GPIO_Init+0x168>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor1Dir1_Pin|Motor4Dir2_Pin|Motor4Dir1_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f641 0102 	movw	r1, #6146	; 0x1802
 8001664:	4835      	ldr	r0, [pc, #212]	; (800173c <MX_GPIO_Init+0x16c>)
 8001666:	f003 f92b 	bl	80048c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2120      	movs	r1, #32
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f003 f925 	bl	80048c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SS_Pin|Motor3Dir1_Pin|Motor2Dir2_Pin|Motor2Dir1_Pin
 8001676:	2200      	movs	r2, #0
 8001678:	f241 0178 	movw	r1, #4216	; 0x1078
 800167c:	4830      	ldr	r0, [pc, #192]	; (8001740 <MX_GPIO_Init+0x170>)
 800167e:	f003 f91f 	bl	80048c0 <HAL_GPIO_WritePin>
                          |Motor1Dir2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor3Dir2_GPIO_Port, Motor3Dir2_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2104      	movs	r1, #4
 8001686:	482f      	ldr	r0, [pc, #188]	; (8001744 <MX_GPIO_Init+0x174>)
 8001688:	f003 f91a 	bl	80048c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Encoder4_Pin Encoder3_Pin Encoder2_Pin
                           Encoder1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Encoder4_Pin|Encoder3_Pin|Encoder2_Pin
 800168c:	f44f 530f 	mov.w	r3, #9152	; 0x23c0
 8001690:	617b      	str	r3, [r7, #20]
                          |Encoder1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001692:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4826      	ldr	r0, [pc, #152]	; (800173c <MX_GPIO_Init+0x16c>)
 80016a4:	f002 ff82 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1Dir1_Pin Motor4Dir2_Pin Motor4Dir1_Pin */
  GPIO_InitStruct.Pin = Motor1Dir1_Pin|Motor4Dir2_Pin|Motor4Dir1_Pin;
 80016a8:	f641 0302 	movw	r3, #6146	; 0x1802
 80016ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	481e      	ldr	r0, [pc, #120]	; (800173c <MX_GPIO_Init+0x16c>)
 80016c2:	f002 ff73 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016c6:	2320      	movs	r3, #32
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f002 ff64 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_SS_Pin Motor3Dir1_Pin Motor2Dir2_Pin Motor2Dir1_Pin
                           Motor1Dir2_Pin */
  GPIO_InitStruct.Pin = SPI2_SS_Pin|Motor3Dir1_Pin|Motor2Dir2_Pin|Motor2Dir1_Pin
 80016e4:	f241 0378 	movw	r3, #4216	; 0x1078
 80016e8:	617b      	str	r3, [r7, #20]
                          |Motor1Dir2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <MX_GPIO_Init+0x170>)
 80016fe:	f002 ff55 	bl	80045ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor3Dir2_Pin */
  GPIO_InitStruct.Pin = Motor3Dir2_Pin;
 8001702:	2304      	movs	r3, #4
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor3Dir2_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	480a      	ldr	r0, [pc, #40]	; (8001744 <MX_GPIO_Init+0x174>)
 800171a:	f002 ff47 	bl	80045ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2105      	movs	r1, #5
 8001722:	2028      	movs	r0, #40	; 0x28
 8001724:	f002 fb70 	bl	8003e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001728:	2028      	movs	r0, #40	; 0x28
 800172a:	f002 fb89 	bl	8003e40 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	48000800 	.word	0x48000800
 8001740:	48000400 	.word	0x48000400
 8001744:	48000c00 	.word	0x48000c00

08001748 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2120      	movs	r1, #32
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f003 f8b2 	bl	80048c0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  if ( state == RUN_State ){
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <StartDefaultTask+0x30>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d104      	bne.n	800176e <StartDefaultTask+0x26>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001764:	2120      	movs	r1, #32
 8001766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176a:	f003 f8c1 	bl	80048f0 <HAL_GPIO_TogglePin>
	  }
	  osDelay(1500);
 800176e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001772:	f008 fbf2 	bl	8009f5a <osDelay>
	  if ( state == RUN_State ){
 8001776:	e7f1      	b.n	800175c <StartDefaultTask+0x14>
 8001778:	20000000 	.word	0x20000000

0800177c <StartTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTxTask */
void StartTxTask(void const * argument)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b094      	sub	sp, #80	; 0x50
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTxTask */
//	char str[100]="En tarea TxTask\n\r";
	unsigned char str[1]="a";
 8001784:	2361      	movs	r3, #97	; 0x61
 8001786:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
//	u_Trama_rx trama_rx;
	s_Velocidad_ruedas velocidad_medida;
	s_Aceleracion aceleracion;
	u_Trama_tx trama_tx;
	trama_tx.trama_struct.w_m[0]   	= 0x4141;
 800178a:	f244 1341 	movw	r3, #16705	; 0x4141
 800178e:	81bb      	strh	r3, [r7, #12]
	trama_tx.trama_struct.w_m[1]   	= 0x4141;
 8001790:	f244 1341 	movw	r3, #16705	; 0x4141
 8001794:	81fb      	strh	r3, [r7, #14]
	trama_tx.trama_struct.w_m[2]   	= 0x4141;
 8001796:	f244 1341 	movw	r3, #16705	; 0x4141
 800179a:	823b      	strh	r3, [r7, #16]
	trama_tx.trama_struct.w_m[3]   	= 0x4141;
 800179c:	f244 1341 	movw	r3, #16705	; 0x4141
 80017a0:	827b      	strh	r3, [r7, #18]
	trama_tx.trama_struct.a_m[0]   	= 0x4242;
 80017a2:	f244 2342 	movw	r3, #16962	; 0x4242
 80017a6:	82bb      	strh	r3, [r7, #20]
	trama_tx.trama_struct.a_m[1]   	= 0x4242;
 80017a8:	f244 2342 	movw	r3, #16962	; 0x4242
 80017ac:	82fb      	strh	r3, [r7, #22]
	trama_tx.trama_struct.a_m[2]   	= 0x4242;
 80017ae:	f244 2342 	movw	r3, #16962	; 0x4242
 80017b2:	833b      	strh	r3, [r7, #24]
	trama_tx.trama_struct.phi_m[0] 	= 0x4343;
 80017b4:	f244 3343 	movw	r3, #17219	; 0x4343
 80017b8:	837b      	strh	r3, [r7, #26]
	trama_tx.trama_struct.phi_m[1] 	= 0x4343;
 80017ba:	f244 3343 	movw	r3, #17219	; 0x4343
 80017be:	83bb      	strh	r3, [r7, #28]
	trama_tx.trama_struct.phi_m[2] 	= 0x4343;
 80017c0:	f244 3343 	movw	r3, #17219	; 0x4343
 80017c4:	83fb      	strh	r3, [r7, #30]
	trama_tx.trama_struct.i_m[0]   	= 0x4444;
 80017c6:	f244 4344 	movw	r3, #17476	; 0x4444
 80017ca:	843b      	strh	r3, [r7, #32]
	trama_tx.trama_struct.i_m[1]   	= 0x4444;
 80017cc:	f244 4344 	movw	r3, #17476	; 0x4444
 80017d0:	847b      	strh	r3, [r7, #34]	; 0x22
	trama_tx.trama_struct.i_m[2]   	= 0x4444;
 80017d2:	f244 4344 	movw	r3, #17476	; 0x4444
 80017d6:	84bb      	strh	r3, [r7, #36]	; 0x24
	trama_tx.trama_struct.i_m[3]   	= 0x4444;
 80017d8:	f244 4344 	movw	r3, #17476	; 0x4444
 80017dc:	84fb      	strh	r3, [r7, #38]	; 0x26
	trama_tx.trama_struct.v_bat    	= 0x4545;
 80017de:	f244 5345 	movw	r3, #17733	; 0x4545
 80017e2:	853b      	strh	r3, [r7, #40]	; 0x28
	trama_tx.trama_struct.status   	= 0x4646;
 80017e4:	f244 6346 	movw	r3, #17990	; 0x4646
 80017e8:	857b      	strh	r3, [r7, #42]	; 0x2a
	trama_tx.trama_struct.crc      	= 0x47;
 80017ea:	2347      	movs	r3, #71	; 0x47
 80017ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	trama_tx.trama_struct.timestamp = 0x48484848;
 80017f0:	f04f 3348 	mov.w	r3, #1212696648	; 0x48484848
 80017f4:	60bb      	str	r3, [r7, #8]
//	trama_rx.trama_struct.vx = 45;
//	trama_rx.trama_struct.crc = 60;
  /* Infinite loop */
  for(;;)
  {
	  if ( state == RUN_State ){
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <StartTxTask+0xe0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d12a      	bne.n	8001854 <StartTxTask+0xd8>
			// Recibo velocidad medida
			if ( xQueueReceive(myQueueVelTxHandle, &velocidad_medida, 0) == pdPASS ){
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <StartTxTask+0xe4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001806:	2200      	movs	r2, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f008 ff03 	bl	800a614 <xQueueReceive>
 800180e:	4603      	mov	r3, r0
 8001810:	2b01      	cmp	r3, #1
 8001812:	d106      	bne.n	8001822 <StartTxTask+0xa6>
		//		sprintf(str, "TxTask: Velocidad medida:\nw_00=%d w_01=%d w_10=%d w_11=%d", velocidad_medida.w_00,
		//												 								    velocidad_medida.w_01,
		//												 								    velocidad_medida.w_10,
		//												 								    velocidad_medida.w_11);
		//		HAL_UART_Transmit(&huart3,str,sizeof(str),100);
				xSemaphoreGive( myBinarySemVelTxHandle );
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <StartTxTask+0xe8>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	2300      	movs	r3, #0
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	f008 fdfb 	bl	800a418 <xQueueGenericSend>
			}

			// Recibo aceleracion medida
			if ( xQueueReceive(myQueueAccelTxHandle, &aceleracion, 0) == pdPASS ){
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <StartTxTask+0xec>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800182a:	2200      	movs	r2, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f008 fef1 	bl	800a614 <xQueueReceive>
 8001832:	4603      	mov	r3, r0
 8001834:	2b01      	cmp	r3, #1
 8001836:	d106      	bne.n	8001846 <StartTxTask+0xca>
		//		trama_tx.trama_struct.i_m[3]   = 72;
		//		trama_tx.trama_struct.v_bat    = 72;
		//		trama_tx.trama_struct.status   = 72;
		//		trama_tx.trama_struct.timestamp = 72;
		//		trama_tx.trama_struct.crc      = 72;
				xSemaphoreGive( myBinarySemAccelTxHandle );
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <StartTxTask+0xf0>)
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	2300      	movs	r3, #0
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	f008 fde9 	bl	800a418 <xQueueGenericSend>
			}



			//Transmito la trama
		    HAL_UART_Transmit_IT(&huart3, trama_tx.trama_char,sizeof(trama_tx.trama_char));
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	2225      	movs	r2, #37	; 0x25
 800184c:	4619      	mov	r1, r3
 800184e:	4808      	ldr	r0, [pc, #32]	; (8001870 <StartTxTask+0xf4>)
 8001850:	f007 f812 	bl	8008878 <HAL_UART_Transmit_IT>
		//	HAL_UART_Transmit(&huart3, str, sizeof(str), 500);

		//	osDelay(5);

	  }
	  osDelay(5);
 8001854:	2005      	movs	r0, #5
 8001856:	f008 fb80 	bl	8009f5a <osDelay>
	  if ( state == RUN_State ){
 800185a:	e7cc      	b.n	80017f6 <StartTxTask+0x7a>
 800185c:	20000000 	.word	0x20000000
 8001860:	20000684 	.word	0x20000684
 8001864:	20000668 	.word	0x20000668
 8001868:	20000688 	.word	0x20000688
 800186c:	20000664 	.word	0x20000664
 8001870:	200005c0 	.word	0x200005c0

08001874 <StartRxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRxTask */
void StartRxTask(void const * argument)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b0b4      	sub	sp, #208	; 0xd0
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRxTask */
	  uint8_t crcVal=0;
 800187c:	2300      	movs	r3, #0
 800187e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	  uint8_t crcRx=0;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	  uint8_t crcArray[12] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8001888:	4a5e      	ldr	r2, [pc, #376]	; (8001a04 <StartRxTask+0x190>)
 800188a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800188e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001890:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//	trama_rx.trama_struct.wz = 15;
//	trama_rx.trama_struct.vy = 30;
//	trama_rx.trama_struct.vx = 45;
//	trama_rx.trama_struct.crc = 60;
	u_Trama_rx trama_rx;
	trama_rx.trama_struct.v_y = 0;
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	trama_rx.trama_struct.v_x = 0;
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	trama_rx.trama_struct.w_z = 0;
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	trama_rx.trama_struct.crc = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
    s_Velocidad velocidad;
    char str[150];
//    char str2[] = "Queue enviada desde Rx a Conv.\n\r";
    xSemaphoreGive( myBinarySemRxConvHandle );
 80018b2:	4b55      	ldr	r3, [pc, #340]	; (8001a08 <StartRxTask+0x194>)
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	2300      	movs	r3, #0
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	f008 fdac 	bl	800a418 <xQueueGenericSend>

//    hcrc->Init.InitValue = 0x00;
HAL_UART_Receive_IT(&huart3, trama_rx.trama_char, sizeof(trama_rx.trama_char));
 80018c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018c4:	220d      	movs	r2, #13
 80018c6:	4619      	mov	r1, r3
 80018c8:	4850      	ldr	r0, [pc, #320]	; (8001a0c <StartRxTask+0x198>)
 80018ca:	f007 f833 	bl	8008934 <HAL_UART_Receive_IT>
//	   ptrtostruct.trama_struct.wz = 15;
//	   ptrtostruct.trama_struct.vy = 30;
//	   ptrtostruct.trama_struct.vx = 45;
//	   ptrtostruct.trama_struct.crc = 60;
//	  if( HAL_UART_Receive(&huart3, trama_rx.trama_char, sizeof(trama_rx.trama_char), 5) == HAL_OK){
	  if (RxFlag){
 80018ce:	4b50      	ldr	r3, [pc, #320]	; (8001a10 <StartRxTask+0x19c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8091 	beq.w	80019fa <StartRxTask+0x186>
		  if ( state == RUN_State ){
 80018d8:	4b4e      	ldr	r3, [pc, #312]	; (8001a14 <StartRxTask+0x1a0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d167      	bne.n	80019b0 <StartRxTask+0x13c>
			  velocidad.v_x = trama_rx.trama_struct.v_x;
 80018e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  velocidad.v_y = trama_rx.trama_struct.v_y;
 80018e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			  velocidad.w_z = trama_rx.trama_struct.w_z;
 80018f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			  crcRx = (uint8_t)trama_rx.trama_char[12];
 80018f8:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80018fc:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce

	//		  hcrc.Init.InitValue = 0x00;
			  crcArray[0]  = (uint8_t)trama_rx.trama_char[0];
 8001900:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8001904:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
			  crcArray[1]  = (uint8_t)trama_rx.trama_char[1];
 8001908:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800190c:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
			  crcArray[2]  = (uint8_t)trama_rx.trama_char[2];
 8001910:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001914:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
			  crcArray[3]  = (uint8_t)trama_rx.trama_char[3];
 8001918:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800191c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
			  crcArray[4]  = (uint8_t)trama_rx.trama_char[4];
 8001920:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8001924:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
			  crcArray[5]  = (uint8_t)trama_rx.trama_char[5];
 8001928:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800192c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			  crcArray[6]  = (uint8_t)trama_rx.trama_char[6];
 8001930:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001934:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			  crcArray[7]  = (uint8_t)trama_rx.trama_char[7];
 8001938:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800193c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			  crcArray[8]  = (uint8_t)trama_rx.trama_char[8];
 8001940:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001944:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
			  crcArray[9]  = (uint8_t)trama_rx.trama_char[9];
 8001948:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800194c:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
			  crcArray[10] = (uint8_t)trama_rx.trama_char[10];
 8001950:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8001954:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
			  crcArray[11] = (uint8_t)trama_rx.trama_char[11];
 8001958:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800195c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
	//		  hcrc.Init.InitValue = 0x00;
	//		  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
	//		  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
	//		  crcVal = HAL_CRC_Calculate(&hcrc, crcArray, 3);

			  crcVal = HAL_CRC_Accumulate(&hcrc, crcArray, 12);
 8001960:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001964:	220c      	movs	r2, #12
 8001966:	4619      	mov	r1, r3
 8001968:	482b      	ldr	r0, [pc, #172]	; (8001a18 <StartRxTask+0x1a4>)
 800196a:	f002 fadb 	bl	8003f24 <HAL_CRC_Accumulate>
 800196e:	4603      	mov	r3, r0
 8001970:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	//			  				  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 velocidad.v_y,
	//			  																					 velocidad.v_x,
	//																								 crcRx);
	//
	//
				  if( xSemaphoreTake( myBinarySemRxConvHandle, ( TickType_t ) 0 ) == pdTRUE ){
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <StartRxTask+0x194>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f008 ff2a 	bl	800a7d4 <xQueueSemaphoreTake>
 8001980:	4603      	mov	r3, r0
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <StartRxTask+0x124>
					  if(xQueueSend(myQueueRxConvHandle, &velocidad, portMAX_DELAY) == pdPASS){
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <StartRxTask+0x1a8>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800198e:	2300      	movs	r3, #0
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	f008 fd40 	bl	800a418 <xQueueGenericSend>
	//		  else{
	//			  sprintf(str, "RxTask: crc recibido=%d\n\r crc_calculado=%d\n\r", crcRx, crcVal);
	//			  HAL_UART_Transmit(&huart3,str,sizeof(str),300);
	//		  }

			  hcrc.Instance->INIT = 0x00000000;
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <StartRxTask+0x1a4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
	//				  crcArray[5],
	//				  crcArray[6]);

	//		  HAL_UART_Transmit(&huart3,str,sizeof(str),300);

			  HAL_UART_Receive_IT(&huart3, trama_rx.trama_char, sizeof(trama_rx.trama_char));
 80019a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019a4:	220d      	movs	r2, #13
 80019a6:	4619      	mov	r1, r3
 80019a8:	4818      	ldr	r0, [pc, #96]	; (8001a0c <StartRxTask+0x198>)
 80019aa:	f006 ffc3 	bl	8008934 <HAL_UART_Receive_IT>
 80019ae:	e021      	b.n	80019f4 <StartRxTask+0x180>
		  }
		  else if ( state == START_State ){
 80019b0:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <StartRxTask+0x1a0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d11d      	bne.n	80019f4 <StartRxTask+0x180>
			  velocidad.v_x = trama_rx.trama_struct.v_x;
 80019b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  velocidad.v_y = trama_rx.trama_struct.v_y;
 80019c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			  velocidad.w_z = trama_rx.trama_struct.w_z;
 80019c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			  crcRx = (uint8_t)trama_rx.trama_char[6];
 80019d0:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80019d4:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			  if ( crcRx == 0xEF ){
 80019d8:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80019dc:	2bef      	cmp	r3, #239	; 0xef
 80019de:	d102      	bne.n	80019e6 <StartRxTask+0x172>
				  state = RUN_State;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <StartRxTask+0x1a0>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
			  }

			  HAL_UART_Receive_IT(&huart3, trama_rx.trama_char, sizeof(trama_rx.trama_char));
 80019e6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019ea:	220d      	movs	r2, #13
 80019ec:	4619      	mov	r1, r3
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <StartRxTask+0x198>)
 80019f0:	f006 ffa0 	bl	8008934 <HAL_UART_Receive_IT>
		  }
		  RxFlag = RESET;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <StartRxTask+0x19c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
	  }
	  osDelay(5);
 80019fa:	2005      	movs	r0, #5
 80019fc:	f008 faad 	bl	8009f5a <osDelay>
	  if (RxFlag){
 8001a00:	e765      	b.n	80018ce <StartRxTask+0x5a>
 8001a02:	bf00      	nop
 8001a04:	0800c7a0 	.word	0x0800c7a0
 8001a08:	20000670 	.word	0x20000670
 8001a0c:	200005c0 	.word	0x200005c0
 8001a10:	2000068c 	.word	0x2000068c
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000370 	.word	0x20000370
 8001a1c:	20000678 	.word	0x20000678

08001a20 <StartCinematicConv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCinematicConv */
void StartCinematicConv(void const * argument)
{
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b0a6      	sub	sp, #152	; 0x98
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCinematicConv */
	float l = 1;
 8001a28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float w = 2;
 8001a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	float r = 0.05;
 8001a38:	4b83      	ldr	r3, [pc, #524]	; (8001c48 <StartCinematicConv+0x228>)
 8001a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	s_Velocidad velocidad_recibida;
	s_Velocidad_ruedas velocidad_convertida;
	xSemaphoreGive( myBinarySemConvControlHandle );
 8001a3e:	4b83      	ldr	r3, [pc, #524]	; (8001c4c <StartCinematicConv+0x22c>)
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	2300      	movs	r3, #0
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	f008 fce6 	bl	800a418 <xQueueGenericSend>
	char str[100];

	/* Infinite loop */
	for(;;)
	{
		if ( state == RUN_State){
 8001a4c:	4b80      	ldr	r3, [pc, #512]	; (8001c50 <StartCinematicConv+0x230>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	f040 80f5 	bne.w	8001c40 <StartCinematicConv+0x220>
			// Recibo
			if ( xQueueReceive(myQueueRxConvHandle, &velocidad_recibida, 0) == pdPASS ){
 8001a56:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <StartCinematicConv+0x234>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f008 fdd7 	bl	800a614 <xQueueReceive>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	f040 80e9 	bne.w	8001c40 <StartCinematicConv+0x220>
	//																                              velocidad_recibida.v_y,
	//																                              velocidad_recibida.v_x);
	//			HAL_UART_Transmit(&huart3,str,sizeof(str),100);

				// Convierto velocidades
				velocidad_convertida.u_1 = ((1.0/(r*1.0))*((-l-w)*velocidad_recibida.w_z + velocidad_recibida.v_x - velocidad_recibida.v_y));
 8001a6e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001a72:	f7fe fd19 	bl	80004a8 <__aeabi_f2d>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	f04f 0000 	mov.w	r0, #0
 8001a7e:	4976      	ldr	r1, [pc, #472]	; (8001c58 <StartCinematicConv+0x238>)
 8001a80:	f7fe fe94 	bl	80007ac <__aeabi_ddiv>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4614      	mov	r4, r2
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001a90:	eeb1 7a67 	vneg.f32	s14, s15
 8001a94:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a9c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab4:	ee17 0a90 	vmov	r0, s15
 8001ab8:	f7fe fcf6 	bl	80004a8 <__aeabi_f2d>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7fe fd48 	bl	8000558 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7fe ff7c 	bl	80009cc <__aeabi_d2f>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	673b      	str	r3, [r7, #112]	; 0x70
				velocidad_convertida.u_2 = ((1.0/(r*1.0))*((l+w)*velocidad_recibida.w_z + velocidad_recibida.v_x + velocidad_recibida.v_y));
 8001ad8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001adc:	f7fe fce4 	bl	80004a8 <__aeabi_f2d>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	f04f 0000 	mov.w	r0, #0
 8001ae8:	495b      	ldr	r1, [pc, #364]	; (8001c58 <StartCinematicConv+0x238>)
 8001aea:	f7fe fe5f 	bl	80007ac <__aeabi_ddiv>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4614      	mov	r4, r2
 8001af4:	461d      	mov	r5, r3
 8001af6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001afa:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001afe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b02:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b12:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	ee17 0a90 	vmov	r0, s15
 8001b1e:	f7fe fcc3 	bl	80004a8 <__aeabi_f2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4620      	mov	r0, r4
 8001b28:	4629      	mov	r1, r5
 8001b2a:	f7fe fd15 	bl	8000558 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7fe ff49 	bl	80009cc <__aeabi_d2f>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	677b      	str	r3, [r7, #116]	; 0x74
				velocidad_convertida.u_3 = ((1.0/(r*1.0))*((l+w)*velocidad_recibida.w_z + velocidad_recibida.v_x - velocidad_recibida.v_y));
 8001b3e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001b42:	f7fe fcb1 	bl	80004a8 <__aeabi_f2d>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	f04f 0000 	mov.w	r0, #0
 8001b4e:	4942      	ldr	r1, [pc, #264]	; (8001c58 <StartCinematicConv+0x238>)
 8001b50:	f7fe fe2c 	bl	80007ac <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4614      	mov	r4, r2
 8001b5a:	461d      	mov	r5, r3
 8001b5c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001b60:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b68:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b70:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b78:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b80:	ee17 0a90 	vmov	r0, s15
 8001b84:	f7fe fc90 	bl	80004a8 <__aeabi_f2d>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	4629      	mov	r1, r5
 8001b90:	f7fe fce2 	bl	8000558 <__aeabi_dmul>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7fe ff16 	bl	80009cc <__aeabi_d2f>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	67bb      	str	r3, [r7, #120]	; 0x78
				velocidad_convertida.u_4 = ((1.0/(r*1.0))*((-l-w)*velocidad_recibida.w_z + velocidad_recibida.v_x + velocidad_recibida.v_y));
 8001ba4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001ba8:	f7fe fc7e 	bl	80004a8 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	f04f 0000 	mov.w	r0, #0
 8001bb4:	4928      	ldr	r1, [pc, #160]	; (8001c58 <StartCinematicConv+0x238>)
 8001bb6:	f7fe fdf9 	bl	80007ac <__aeabi_ddiv>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001bc6:	eeb1 7a67 	vneg.f32	s14, s15
 8001bca:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001bce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bd2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bda:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bea:	ee17 0a90 	vmov	r0, s15
 8001bee:	f7fe fc5b 	bl	80004a8 <__aeabi_f2d>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	f7fe fcad 	bl	8000558 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7fe fee1 	bl	80009cc <__aeabi_d2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	67fb      	str	r3, [r7, #124]	; 0x7c

				xSemaphoreGive( myBinarySemRxConvHandle );
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <StartCinematicConv+0x23c>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	f008 fbfe 	bl	800a418 <xQueueGenericSend>

				//Envio a la tarea del control de velocidades
				if( xSemaphoreTake( myBinarySemConvControlHandle, ( TickType_t ) 0 ) == pdTRUE ){
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <StartCinematicConv+0x22c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f008 fdd6 	bl	800a7d4 <xQueueSemaphoreTake>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d108      	bne.n	8001c40 <StartCinematicConv+0x220>
					if( xQueueSend(myQueueConvControlHandle, &velocidad_convertida, portMAX_DELAY) == pdPASS ){
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <StartCinematicConv+0x240>)
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001c36:	2300      	movs	r3, #0
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	f008 fbec 	bl	800a418 <xQueueGenericSend>
	//					HAL_UART_Transmit(&huart3,str,sizeof(str),100);
					}
				}
			}
		}
		osDelay(5);
 8001c40:	2005      	movs	r0, #5
 8001c42:	f008 f98a 	bl	8009f5a <osDelay>
		if ( state == RUN_State){
 8001c46:	e701      	b.n	8001a4c <StartCinematicConv+0x2c>
 8001c48:	3d4ccccd 	.word	0x3d4ccccd
 8001c4c:	20000674 	.word	0x20000674
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000678 	.word	0x20000678
 8001c58:	3ff00000 	.word	0x3ff00000
 8001c5c:	20000670 	.word	0x20000670
 8001c60:	2000067c 	.word	0x2000067c

08001c64 <StartControlVel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlVel */
void StartControlVel(void const * argument)
{
 8001c64:	b5b0      	push	{r4, r5, r7, lr}
 8001c66:	b092      	sub	sp, #72	; 0x48
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	int u_2_aux;
	int u_3_aux;
	int u_4_aux;
//	uint32_t vel[1];

	HAL_GPIO_WritePin(Motor1Dir1_GPIO_Port, Motor1Dir1_Pin, RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2102      	movs	r1, #2
 8001c70:	48ad      	ldr	r0, [pc, #692]	; (8001f28 <StartControlVel+0x2c4>)
 8001c72:	f002 fe25 	bl	80048c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1Dir2_GPIO_Port, Motor1Dir2_Pin, RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2140      	movs	r1, #64	; 0x40
 8001c7a:	48ac      	ldr	r0, [pc, #688]	; (8001f2c <StartControlVel+0x2c8>)
 8001c7c:	f002 fe20 	bl	80048c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2Dir1_GPIO_Port, Motor2Dir1_Pin, RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2120      	movs	r1, #32
 8001c84:	48a9      	ldr	r0, [pc, #676]	; (8001f2c <StartControlVel+0x2c8>)
 8001c86:	f002 fe1b 	bl	80048c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2Dir2_GPIO_Port, Motor2Dir2_Pin, RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2110      	movs	r1, #16
 8001c8e:	48a7      	ldr	r0, [pc, #668]	; (8001f2c <StartControlVel+0x2c8>)
 8001c90:	f002 fe16 	bl	80048c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3Dir1_GPIO_Port, Motor3Dir1_Pin, RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2108      	movs	r1, #8
 8001c98:	48a4      	ldr	r0, [pc, #656]	; (8001f2c <StartControlVel+0x2c8>)
 8001c9a:	f002 fe11 	bl	80048c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3Dir2_GPIO_Port, Motor3Dir2_Pin, RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	48a3      	ldr	r0, [pc, #652]	; (8001f30 <StartControlVel+0x2cc>)
 8001ca4:	f002 fe0c 	bl	80048c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4Dir1_GPIO_Port, Motor4Dir1_Pin, RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cae:	489e      	ldr	r0, [pc, #632]	; (8001f28 <StartControlVel+0x2c4>)
 8001cb0:	f002 fe06 	bl	80048c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4Dir2_GPIO_Port, Motor4Dir2_Pin, RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cba:	489b      	ldr	r0, [pc, #620]	; (8001f28 <StartControlVel+0x2c4>)
 8001cbc:	f002 fe00 	bl	80048c0 <HAL_GPIO_WritePin>

	TIM1->CCR1  = 0;
 8001cc0:	4b9c      	ldr	r3, [pc, #624]	; (8001f34 <StartControlVel+0x2d0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR1  = 0;
 8001cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cca:	2200      	movs	r2, #0
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR1  = 0;
 8001cce:	4b9a      	ldr	r3, [pc, #616]	; (8001f38 <StartControlVel+0x2d4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR1 = 0;
 8001cd4:	4b99      	ldr	r3, [pc, #612]	; (8001f3c <StartControlVel+0x2d8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4898      	ldr	r0, [pc, #608]	; (8001f40 <StartControlVel+0x2dc>)
 8001cde:	f005 fbb7 	bl	8007450 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4897      	ldr	r0, [pc, #604]	; (8001f44 <StartControlVel+0x2e0>)
 8001ce6:	f005 fbb3 	bl	8007450 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001cea:	2100      	movs	r1, #0
 8001cec:	4896      	ldr	r0, [pc, #600]	; (8001f48 <StartControlVel+0x2e4>)
 8001cee:	f005 fbaf 	bl	8007450 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4895      	ldr	r0, [pc, #596]	; (8001f4c <StartControlVel+0x2e8>)
 8001cf6:	f005 fbab 	bl	8007450 <HAL_TIM_PWM_Start>

	int maxDuty1  = htim1.Instance->ARR + 1;
 8001cfa:	4b91      	ldr	r3, [pc, #580]	; (8001f40 <StartControlVel+0x2dc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	3301      	adds	r3, #1
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
	int maxDuty2  = htim2.Instance->ARR + 1;
 8001d04:	4b8f      	ldr	r3, [pc, #572]	; (8001f44 <StartControlVel+0x2e0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	643b      	str	r3, [r7, #64]	; 0x40
	int maxDuty4  = htim4.Instance->ARR + 1;
 8001d0e:	4b8e      	ldr	r3, [pc, #568]	; (8001f48 <StartControlVel+0x2e4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	3301      	adds	r3, #1
 8001d16:	63fb      	str	r3, [r7, #60]	; 0x3c
	int maxDuty17 = htim17.Instance->ARR + 1;
 8001d18:	4b8c      	ldr	r3, [pc, #560]	; (8001f4c <StartControlVel+0x2e8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	3301      	adds	r3, #1
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Infinite loop */
  for(;;)
  {
	  if ( state == RUN_State){
 8001d22:	4b8b      	ldr	r3, [pc, #556]	; (8001f50 <StartControlVel+0x2ec>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	f040 814c 	bne.w	8001fc4 <StartControlVel+0x360>
		  // Recibo la velocidad medida
		  if ( xQueueReceive(myQueueVelControlHandle, &velocidad_medida, 0) == pdPASS ){
 8001d2c:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <StartControlVel+0x2f0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f107 0118 	add.w	r1, r7, #24
 8001d34:	2200      	movs	r2, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f008 fc6c 	bl	800a614 <xQueueReceive>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d106      	bne.n	8001d50 <StartControlVel+0xec>
	//		  sprintf(str, "ControlVel: Velocidad medida:\nw_00=%d w_01=%d w_10=%d w_11=%d", velocidad_medida.w_00,
	//		  			  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 velocidad_medida.w_01,
	//		  			  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 velocidad_medida.w_10,
	//		  			  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 velocidad_medida.w_11);
	//		  HAL_UART_Transmit(&huart3,str,sizeof(str),100);
			  xSemaphoreGive( myBinarySemVelControlHandle );
 8001d42:	4b85      	ldr	r3, [pc, #532]	; (8001f58 <StartControlVel+0x2f4>)
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	2300      	movs	r3, #0
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	f008 fb64 	bl	800a418 <xQueueGenericSend>
		  }


		  // Recibo la velocidad de referencia
		  if ( xQueueReceive(myQueueConvControlHandle, &velocidad_ref, 0) == pdPASS ){
 8001d50:	4b82      	ldr	r3, [pc, #520]	; (8001f5c <StartControlVel+0x2f8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f107 0108 	add.w	r1, r7, #8
 8001d58:	2200      	movs	r2, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f008 fc5a 	bl	800a614 <xQueueReceive>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	f040 812e 	bne.w	8001fc4 <StartControlVel+0x360>
	//		  sprintf(str, "ControlVel: Velocidad ref:\nw_00=%d w_01=%d w_10=%d w_11=%d", velocidad_ref.w_00,
	//																					  velocidad_ref.w_01,
	//																					  velocidad_ref.w_10,
	//																					  velocidad_ref.w_11);
	//		  HAL_UART_Transmit(&huart3,str,sizeof(str),100);
			  u_1_aux = (int)(((velocidad_ref.u_1)/20.0)*(htim1.Instance->ARR + 1));
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fb9c 	bl	80004a8 <__aeabi_f2d>
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <StartControlVel+0x2fc>)
 8001d76:	f7fe fd19 	bl	80007ac <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4614      	mov	r4, r2
 8001d80:	461d      	mov	r5, r3
 8001d82:	4b6f      	ldr	r3, [pc, #444]	; (8001f40 <StartControlVel+0x2dc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	3301      	adds	r3, #1
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fb6a 	bl	8000464 <__aeabi_ui2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4620      	mov	r0, r4
 8001d96:	4629      	mov	r1, r5
 8001d98:	f7fe fbde 	bl	8000558 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7fe fdea 	bl	800097c <__aeabi_d2iz>
 8001da8:	4603      	mov	r3, r0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
			  u_2_aux = (int)(((velocidad_ref.u_2)/20.0)*(htim2.Instance->ARR + 1));
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fb7a 	bl	80004a8 <__aeabi_f2d>
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b69      	ldr	r3, [pc, #420]	; (8001f60 <StartControlVel+0x2fc>)
 8001dba:	f7fe fcf7 	bl	80007ac <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4614      	mov	r4, r2
 8001dc4:	461d      	mov	r5, r3
 8001dc6:	4b5f      	ldr	r3, [pc, #380]	; (8001f44 <StartControlVel+0x2e0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	3301      	adds	r3, #1
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fb48 	bl	8000464 <__aeabi_ui2d>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4620      	mov	r0, r4
 8001dda:	4629      	mov	r1, r5
 8001ddc:	f7fe fbbc 	bl	8000558 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7fe fdc8 	bl	800097c <__aeabi_d2iz>
 8001dec:	4603      	mov	r3, r0
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
			  u_3_aux = (int)(((velocidad_ref.u_3)/20.0)*(htim4.Instance->ARR + 1));
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb58 	bl	80004a8 <__aeabi_f2d>
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	4b58      	ldr	r3, [pc, #352]	; (8001f60 <StartControlVel+0x2fc>)
 8001dfe:	f7fe fcd5 	bl	80007ac <__aeabi_ddiv>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4614      	mov	r4, r2
 8001e08:	461d      	mov	r5, r3
 8001e0a:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <StartControlVel+0x2e4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	3301      	adds	r3, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb26 	bl	8000464 <__aeabi_ui2d>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	4629      	mov	r1, r5
 8001e20:	f7fe fb9a 	bl	8000558 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe fda6 	bl	800097c <__aeabi_d2iz>
 8001e30:	4603      	mov	r3, r0
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
			  u_4_aux = (int)(((velocidad_ref.u_4)/20.0)*(htim17.Instance->ARR + 1));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb36 	bl	80004a8 <__aeabi_f2d>
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <StartControlVel+0x2fc>)
 8001e42:	f7fe fcb3 	bl	80007ac <__aeabi_ddiv>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <StartControlVel+0x2e8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	3301      	adds	r3, #1
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb04 	bl	8000464 <__aeabi_ui2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4620      	mov	r0, r4
 8001e62:	4629      	mov	r1, r5
 8001e64:	f7fe fb78 	bl	8000558 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fd84 	bl	800097c <__aeabi_d2iz>
 8001e74:	4603      	mov	r3, r0
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28

			  if ( u_1_aux > 0 ){
 8001e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	dd0a      	ble.n	8001e94 <StartControlVel+0x230>
				  HAL_GPIO_WritePin(Motor1Dir1_GPIO_Port, Motor1Dir1_Pin, SET);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2102      	movs	r1, #2
 8001e82:	4829      	ldr	r0, [pc, #164]	; (8001f28 <StartControlVel+0x2c4>)
 8001e84:	f002 fd1c 	bl	80048c0 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Motor1Dir2_GPIO_Port, Motor1Dir2_Pin, RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2140      	movs	r1, #64	; 0x40
 8001e8c:	4827      	ldr	r0, [pc, #156]	; (8001f2c <StartControlVel+0x2c8>)
 8001e8e:	f002 fd17 	bl	80048c0 <HAL_GPIO_WritePin>
 8001e92:	e009      	b.n	8001ea8 <StartControlVel+0x244>
			  }
			  else{
				  HAL_GPIO_WritePin(Motor1Dir1_GPIO_Port, Motor1Dir1_Pin, RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2102      	movs	r1, #2
 8001e98:	4823      	ldr	r0, [pc, #140]	; (8001f28 <StartControlVel+0x2c4>)
 8001e9a:	f002 fd11 	bl	80048c0 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Motor1Dir2_GPIO_Port, Motor1Dir2_Pin, SET);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	2140      	movs	r1, #64	; 0x40
 8001ea2:	4822      	ldr	r0, [pc, #136]	; (8001f2c <StartControlVel+0x2c8>)
 8001ea4:	f002 fd0c 	bl	80048c0 <HAL_GPIO_WritePin>
			  }

			  if ( u_2_aux > 0 ){
 8001ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	dd0a      	ble.n	8001ec4 <StartControlVel+0x260>
				  HAL_GPIO_WritePin(Motor2Dir1_GPIO_Port, Motor2Dir1_Pin, SET);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2120      	movs	r1, #32
 8001eb2:	481e      	ldr	r0, [pc, #120]	; (8001f2c <StartControlVel+0x2c8>)
 8001eb4:	f002 fd04 	bl	80048c0 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Motor2Dir2_GPIO_Port, Motor2Dir2_Pin, RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2110      	movs	r1, #16
 8001ebc:	481b      	ldr	r0, [pc, #108]	; (8001f2c <StartControlVel+0x2c8>)
 8001ebe:	f002 fcff 	bl	80048c0 <HAL_GPIO_WritePin>
 8001ec2:	e009      	b.n	8001ed8 <StartControlVel+0x274>
			  }
			  else{
				  HAL_GPIO_WritePin(Motor2Dir1_GPIO_Port, Motor2Dir1_Pin, RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2120      	movs	r1, #32
 8001ec8:	4818      	ldr	r0, [pc, #96]	; (8001f2c <StartControlVel+0x2c8>)
 8001eca:	f002 fcf9 	bl	80048c0 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Motor2Dir2_GPIO_Port, Motor2Dir2_Pin, SET);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2110      	movs	r1, #16
 8001ed2:	4816      	ldr	r0, [pc, #88]	; (8001f2c <StartControlVel+0x2c8>)
 8001ed4:	f002 fcf4 	bl	80048c0 <HAL_GPIO_WritePin>
			  }

			  if ( u_3_aux > 0 ){
 8001ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	dd0a      	ble.n	8001ef4 <StartControlVel+0x290>
				  HAL_GPIO_WritePin(Motor3Dir1_GPIO_Port, Motor3Dir1_Pin, SET);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	2108      	movs	r1, #8
 8001ee2:	4812      	ldr	r0, [pc, #72]	; (8001f2c <StartControlVel+0x2c8>)
 8001ee4:	f002 fcec 	bl	80048c0 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Motor3Dir2_GPIO_Port, Motor3Dir2_Pin, RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2104      	movs	r1, #4
 8001eec:	4810      	ldr	r0, [pc, #64]	; (8001f30 <StartControlVel+0x2cc>)
 8001eee:	f002 fce7 	bl	80048c0 <HAL_GPIO_WritePin>
 8001ef2:	e009      	b.n	8001f08 <StartControlVel+0x2a4>
			  }
			  else{
				  HAL_GPIO_WritePin(Motor3Dir1_GPIO_Port, Motor3Dir1_Pin, RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2108      	movs	r1, #8
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <StartControlVel+0x2c8>)
 8001efa:	f002 fce1 	bl	80048c0 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Motor3Dir2_GPIO_Port, Motor3Dir2_Pin, SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2104      	movs	r1, #4
 8001f02:	480b      	ldr	r0, [pc, #44]	; (8001f30 <StartControlVel+0x2cc>)
 8001f04:	f002 fcdc 	bl	80048c0 <HAL_GPIO_WritePin>
			  }

			  if ( u_4_aux > 0 ){
 8001f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	dd2a      	ble.n	8001f64 <StartControlVel+0x300>
				  HAL_GPIO_WritePin(Motor4Dir1_GPIO_Port, Motor4Dir1_Pin, SET);
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <StartControlVel+0x2c4>)
 8001f16:	f002 fcd3 	bl	80048c0 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Motor4Dir2_GPIO_Port, Motor4Dir2_Pin, RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4801      	ldr	r0, [pc, #4]	; (8001f28 <StartControlVel+0x2c4>)
 8001f22:	f002 fccd 	bl	80048c0 <HAL_GPIO_WritePin>
 8001f26:	e029      	b.n	8001f7c <StartControlVel+0x318>
 8001f28:	48000800 	.word	0x48000800
 8001f2c:	48000400 	.word	0x48000400
 8001f30:	48000c00 	.word	0x48000c00
 8001f34:	40012c00 	.word	0x40012c00
 8001f38:	40000800 	.word	0x40000800
 8001f3c:	40014000 	.word	0x40014000
 8001f40:	2000044c 	.word	0x2000044c
 8001f44:	20000498 	.word	0x20000498
 8001f48:	200004e4 	.word	0x200004e4
 8001f4c:	20000530 	.word	0x20000530
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000680 	.word	0x20000680
 8001f58:	2000066c 	.word	0x2000066c
 8001f5c:	2000067c 	.word	0x2000067c
 8001f60:	40340000 	.word	0x40340000
			  }
			  else{
				  HAL_GPIO_WritePin(Motor4Dir1_GPIO_Port, Motor4Dir1_Pin, RESET);
 8001f64:	2200      	movs	r2, #0
 8001f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6a:	4818      	ldr	r0, [pc, #96]	; (8001fcc <StartControlVel+0x368>)
 8001f6c:	f002 fca8 	bl	80048c0 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Motor4Dir2_GPIO_Port, Motor4Dir2_Pin, SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f76:	4815      	ldr	r0, [pc, #84]	; (8001fcc <StartControlVel+0x368>)
 8001f78:	f002 fca2 	bl	80048c0 <HAL_GPIO_WritePin>
			  }


			  TIM1->CCR1  = (uint32_t)abs((u_1_aux));
 8001f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f82:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <StartControlVel+0x36c>)
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM2->CCR1  = (uint32_t)abs((u_2_aux));
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f90:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f98:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM4->CCR1  = (uint32_t)abs((u_3_aux));
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001fa0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <StartControlVel+0x370>)
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM17->CCR1 = (uint32_t)abs((u_4_aux));
 8001fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001faa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001fae:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <StartControlVel+0x374>)
 8001fb4:	635a      	str	r2, [r3, #52]	; 0x34

			  xSemaphoreGive( myBinarySemConvControlHandle );
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <StartControlVel+0x378>)
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	f008 fa2a 	bl	800a418 <xQueueGenericSend>
		  // Hago el control
		  // TIM1->CCR1 = velocidad_medida.w_00;
	//	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)vel, 1);
  	  }
	  osDelay(1);
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f007 ffc8 	bl	8009f5a <osDelay>
	  if ( state == RUN_State){
 8001fca:	e6aa      	b.n	8001d22 <StartControlVel+0xbe>
 8001fcc:	48000800 	.word	0x48000800
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40000800 	.word	0x40000800
 8001fd8:	40014800 	.word	0x40014800
 8001fdc:	20000674 	.word	0x20000674

08001fe0 <StartMeasureAccel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMeasureAccel */
void StartMeasureAccel(void const * argument)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMeasureAccel */
	s_Aceleracion aceleracion;
//	char str[100];
	xSemaphoreGive( myBinarySemAccelTxHandle );
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <StartMeasureAccel+0x64>)
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	2300      	movs	r3, #0
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	f008 fa11 	bl	800a418 <xQueueGenericSend>
  /* Infinite loop */
  for(;;)
  {
	  if ( state == RUN_State){
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <StartMeasureAccel+0x68>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d11d      	bne.n	800203a <StartMeasureAccel+0x5a>
		// Leo aceleraciones
		aceleracion.a_m[0] = 4;
 8001ffe:	2304      	movs	r3, #4
 8002000:	827b      	strh	r3, [r7, #18]
		aceleracion.a_m[1] = 5;
 8002002:	2305      	movs	r3, #5
 8002004:	82bb      	strh	r3, [r7, #20]
		aceleracion.a_m[2] = 6;
 8002006:	2306      	movs	r3, #6
 8002008:	82fb      	strh	r3, [r7, #22]
		aceleracion.phi_m[0] = 7;
 800200a:	2307      	movs	r3, #7
 800200c:	81bb      	strh	r3, [r7, #12]
		aceleracion.phi_m[1] = 8;
 800200e:	2308      	movs	r3, #8
 8002010:	81fb      	strh	r3, [r7, #14]
		aceleracion.phi_m[2] = 9;
 8002012:	2309      	movs	r3, #9
 8002014:	823b      	strh	r3, [r7, #16]

		if( xSemaphoreTake( myBinarySemAccelTxHandle, ( TickType_t ) 0 ) == pdTRUE )
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <StartMeasureAccel+0x64>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f008 fbd9 	bl	800a7d4 <xQueueSemaphoreTake>
 8002022:	4603      	mov	r3, r0
 8002024:	2b01      	cmp	r3, #1
 8002026:	d108      	bne.n	800203a <StartMeasureAccel+0x5a>
		{
			//Envio las aceleraciones a la tarea de transmitir valores medidos
			if( xQueueSend(myQueueAccelTxHandle, &aceleracion, portMAX_DELAY) == pdPASS ){
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <StartMeasureAccel+0x6c>)
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	f107 010c 	add.w	r1, r7, #12
 8002030:	2300      	movs	r3, #0
 8002032:	f04f 32ff 	mov.w	r2, #4294967295
 8002036:	f008 f9ef 	bl	800a418 <xQueueGenericSend>
		//																											  aceleracion.phi_m[2]);
		//			HAL_UART_Transmit(&huart3,str,sizeof(str),100);
			}
		}
	  }
	  osDelay(5);
 800203a:	2005      	movs	r0, #5
 800203c:	f007 ff8d 	bl	8009f5a <osDelay>
	  if ( state == RUN_State){
 8002040:	e7d9      	b.n	8001ff6 <StartMeasureAccel+0x16>
 8002042:	bf00      	nop
 8002044:	20000664 	.word	0x20000664
 8002048:	20000000 	.word	0x20000000
 800204c:	20000688 	.word	0x20000688

08002050 <StartMeasureVel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMeasureVel */
void StartMeasureVel(void const * argument)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMeasureVel */
	s_Velocidad_ruedas vel_medida;
//	char str[100];
	xSemaphoreGive( myBinarySemVelControlHandle );
 8002058:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <StartMeasureVel+0x108>)
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	2300      	movs	r3, #0
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	f008 f9d9 	bl	800a418 <xQueueGenericSend>
	xSemaphoreGive( myBinarySemVelTxHandle );
 8002066:	4b3d      	ldr	r3, [pc, #244]	; (800215c <StartMeasureVel+0x10c>)
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	2300      	movs	r3, #0
 800206c:	2200      	movs	r2, #0
 800206e:	2100      	movs	r1, #0
 8002070:	f008 f9d2 	bl	800a418 <xQueueGenericSend>
  /* Infinite loop */
  for(;;)
  {
	  if ( state == RUN_State){
 8002074:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <StartMeasureVel+0x110>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d169      	bne.n	8002150 <StartMeasureVel+0x100>
		  // Mido velocidad de cada rueda
		  int adc_val1 = 0.0;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
		  HAL_ADC_Start(&hadc1);
 8002080:	4838      	ldr	r0, [pc, #224]	; (8002164 <StartMeasureVel+0x114>)
 8002082:	f000 fe51 	bl	8002d28 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8002086:	2164      	movs	r1, #100	; 0x64
 8002088:	4836      	ldr	r0, [pc, #216]	; (8002164 <StartMeasureVel+0x114>)
 800208a:	f000 ff99 	bl	8002fc0 <HAL_ADC_PollForConversion>
		  adc_val1 = (int)HAL_ADC_GetValue(&hadc1);
 800208e:	4835      	ldr	r0, [pc, #212]	; (8002164 <StartMeasureVel+0x114>)
 8002090:	f001 f898 	bl	80031c4 <HAL_ADC_GetValue>
 8002094:	4603      	mov	r3, r0
 8002096:	61fb      	str	r3, [r7, #28]
		  HAL_ADC_Stop(&hadc1);
 8002098:	4832      	ldr	r0, [pc, #200]	; (8002164 <StartMeasureVel+0x114>)
 800209a:	f000 ff5b 	bl	8002f54 <HAL_ADC_Stop>


		  vel_medida.u_1 = (int)((adc_val1/4096.0)*100);
 800209e:	69f8      	ldr	r0, [r7, #28]
 80020a0:	f7fe f9f0 	bl	8000484 <__aeabi_i2d>
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <StartMeasureVel+0x118>)
 80020aa:	f7fe fb7f 	bl	80007ac <__aeabi_ddiv>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <StartMeasureVel+0x11c>)
 80020bc:	f7fe fa4c 	bl	8000558 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7fe fc58 	bl	800097c <__aeabi_d2iz>
 80020cc:	ee07 0a90 	vmov	s15, r0
 80020d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d4:	edc7 7a03 	vstr	s15, [r7, #12]
		  vel_medida.u_2 = adc_val1+32;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	3320      	adds	r3, #32
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e4:	edc7 7a04 	vstr	s15, [r7, #16]
		  vel_medida.u_3 = adc_val1+64;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	3340      	adds	r3, #64	; 0x40
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f4:	edc7 7a05 	vstr	s15, [r7, #20]
		  vel_medida.u_4 = adc_val1+128;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	3380      	adds	r3, #128	; 0x80
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002104:	edc7 7a06 	vstr	s15, [r7, #24]

		  // Intento tomar el semaforo
		  if( xSemaphoreTake( myBinarySemVelControlHandle, ( TickType_t ) 0 ) == pdTRUE )
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <StartMeasureVel+0x108>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f008 fb60 	bl	800a7d4 <xQueueSemaphoreTake>
 8002114:	4603      	mov	r3, r0
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <StartMeasureVel+0xdc>
		  {
			  // Envio velocidad a la tarea de control de motores
			  if( xQueueSend(myQueueVelControlHandle, &vel_medida, portMAX_DELAY) == pdPASS ){
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <StartMeasureVel+0x120>)
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	f107 010c 	add.w	r1, r7, #12
 8002122:	2300      	movs	r3, #0
 8002124:	f04f 32ff 	mov.w	r2, #4294967295
 8002128:	f008 f976 	bl	800a418 <xQueueGenericSend>
	//			  HAL_UART_Transmit(&huart3,str,sizeof(str),100);
			  }
		  }

		  // Intento tomar el semaforo
		  if( xSemaphoreTake( myBinarySemVelTxHandle, ( TickType_t ) 0 ) == pdTRUE )
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <StartMeasureVel+0x10c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f008 fb4e 	bl	800a7d4 <xQueueSemaphoreTake>
 8002138:	4603      	mov	r3, r0
 800213a:	2b01      	cmp	r3, #1
 800213c:	d108      	bne.n	8002150 <StartMeasureVel+0x100>
		  {
			  // Envio velocidad a la tarea que transmite los valores
			  if( xQueueSend(myQueueVelTxHandle, &vel_medida, portMAX_DELAY) == pdPASS ){
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <StartMeasureVel+0x124>)
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	f107 010c 	add.w	r1, r7, #12
 8002146:	2300      	movs	r3, #0
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	f008 f964 	bl	800a418 <xQueueGenericSend>
	//		  	  HAL_UART_Transmit(&huart3,str,sizeof(str),100);
			  }
		  }

	  }
	  osDelay(5);
 8002150:	2005      	movs	r0, #5
 8002152:	f007 ff02 	bl	8009f5a <osDelay>
	  if ( state == RUN_State){
 8002156:	e78d      	b.n	8002074 <StartMeasureVel+0x24>
 8002158:	2000066c 	.word	0x2000066c
 800215c:	20000668 	.word	0x20000668
 8002160:	20000000 	.word	0x20000000
 8002164:	20000320 	.word	0x20000320
 8002168:	40b00000 	.word	0x40b00000
 800216c:	40590000 	.word	0x40590000
 8002170:	20000680 	.word	0x20000680
 8002174:	20000684 	.word	0x20000684

08002178 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800218a:	f000 fbb3 	bl	80028f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40000400 	.word	0x40000400

0800219c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a0:	b672      	cpsid	i
}
 80021a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <Error_Handler+0x8>
	...

080021a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_MspInit+0x4c>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_MspInit+0x4c>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6193      	str	r3, [r2, #24]
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_MspInit+0x4c>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_MspInit+0x4c>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <HAL_MspInit+0x4c>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d0:	61d3      	str	r3, [r2, #28]
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_MspInit+0x4c>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	210f      	movs	r1, #15
 80021e2:	f06f 0001 	mvn.w	r0, #1
 80021e6:	f001 fe0f 	bl	8003e08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000

080021f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002218:	d124      	bne.n	8002264 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_ADC_MspInit+0x74>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <HAL_ADC_MspInit+0x74>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	6153      	str	r3, [r2, #20]
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_ADC_MspInit+0x74>)
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_ADC_MspInit+0x74>)
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	4a0d      	ldr	r2, [pc, #52]	; (800226c <HAL_ADC_MspInit+0x74>)
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	6153      	str	r3, [r2, #20]
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_ADC_MspInit+0x74>)
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800224a:	2303      	movs	r3, #3
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800224e:	2303      	movs	r3, #3
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	4619      	mov	r1, r3
 800225c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002260:	f002 f9a4 	bl	80045ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000

08002270 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <HAL_CRC_MspInit+0x38>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10b      	bne.n	800229a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_CRC_MspInit+0x3c>)
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_CRC_MspInit+0x3c>)
 8002288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800228c:	6153      	str	r3, [r2, #20]
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_CRC_MspInit+0x3c>)
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023000 	.word	0x40023000
 80022ac:	40021000 	.word	0x40021000

080022b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1f      	ldr	r2, [pc, #124]	; (800234c <HAL_I2C_MspInit+0x9c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d138      	bne.n	8002344 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_I2C_MspInit+0xa0>)
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_I2C_MspInit+0xa0>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	6153      	str	r3, [r2, #20]
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_I2C_MspInit+0xa0>)
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f0:	2312      	movs	r3, #18
 80022f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022f8:	2303      	movs	r3, #3
 80022fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022fc:	2304      	movs	r3, #4
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	4813      	ldr	r0, [pc, #76]	; (8002354 <HAL_I2C_MspInit+0xa4>)
 8002308:	f002 f950 	bl	80045ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_I2C_MspInit+0xa0>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <HAL_I2C_MspInit+0xa0>)
 8002312:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002316:	61d3      	str	r3, [r2, #28]
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_I2C_MspInit+0xa0>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2105      	movs	r1, #5
 8002328:	201f      	movs	r0, #31
 800232a:	f001 fd6d 	bl	8003e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800232e:	201f      	movs	r0, #31
 8002330:	f001 fd86 	bl	8003e40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2105      	movs	r1, #5
 8002338:	2020      	movs	r0, #32
 800233a:	f001 fd65 	bl	8003e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800233e:	2020      	movs	r0, #32
 8002340:	f001 fd7e 	bl	8003e40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002344:	bf00      	nop
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40005400 	.word	0x40005400
 8002350:	40021000 	.word	0x40021000
 8002354:	48000400 	.word	0x48000400

08002358 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <HAL_SPI_MspInit+0x7c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d128      	bne.n	80023cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800237a:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <HAL_SPI_MspInit+0x80>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <HAL_SPI_MspInit+0x80>)
 8002380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002384:	61d3      	str	r3, [r2, #28]
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_SPI_MspInit+0x80>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_SPI_MspInit+0x80>)
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <HAL_SPI_MspInit+0x80>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239c:	6153      	str	r3, [r2, #20]
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_SPI_MspInit+0x80>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80023aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023bc:	2305      	movs	r3, #5
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <HAL_SPI_MspInit+0x84>)
 80023c8:	f002 f8f0 	bl	80045ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3728      	adds	r7, #40	; 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40003800 	.word	0x40003800
 80023d8:	40021000 	.word	0x40021000
 80023dc:	48000400 	.word	0x48000400

080023e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a38      	ldr	r2, [pc, #224]	; (80024d0 <HAL_TIM_Base_MspInit+0xf0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d134      	bne.n	800245c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023f2:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <HAL_TIM_Base_MspInit+0xf4>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	4a37      	ldr	r2, [pc, #220]	; (80024d4 <HAL_TIM_Base_MspInit+0xf4>)
 80023f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023fc:	6193      	str	r3, [r2, #24]
 80023fe:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <HAL_TIM_Base_MspInit+0xf4>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800240a:	4b33      	ldr	r3, [pc, #204]	; (80024d8 <HAL_TIM_Base_MspInit+0xf8>)
 800240c:	4a33      	ldr	r2, [pc, #204]	; (80024dc <HAL_TIM_Base_MspInit+0xfc>)
 800240e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002410:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_TIM_Base_MspInit+0xf8>)
 8002412:	2210      	movs	r2, #16
 8002414:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002416:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <HAL_TIM_Base_MspInit+0xf8>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800241c:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_TIM_Base_MspInit+0xf8>)
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002422:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HAL_TIM_Base_MspInit+0xf8>)
 8002424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002428:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800242a:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <HAL_TIM_Base_MspInit+0xf8>)
 800242c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002430:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002432:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <HAL_TIM_Base_MspInit+0xf8>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_TIM_Base_MspInit+0xf8>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800243e:	4826      	ldr	r0, [pc, #152]	; (80024d8 <HAL_TIM_Base_MspInit+0xf8>)
 8002440:	f001 ff0a 	bl	8004258 <HAL_DMA_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800244a:	f7ff fea7 	bl	800219c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_TIM_Base_MspInit+0xf8>)
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
 8002454:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <HAL_TIM_Base_MspInit+0xf8>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800245a:	e034      	b.n	80024c6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002464:	d10c      	bne.n	8002480 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_TIM_Base_MspInit+0xf4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <HAL_TIM_Base_MspInit+0xf4>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	61d3      	str	r3, [r2, #28]
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <HAL_TIM_Base_MspInit+0xf4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
}
 800247e:	e022      	b.n	80024c6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a16      	ldr	r2, [pc, #88]	; (80024e0 <HAL_TIM_Base_MspInit+0x100>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10c      	bne.n	80024a4 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_TIM_Base_MspInit+0xf4>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <HAL_TIM_Base_MspInit+0xf4>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	61d3      	str	r3, [r2, #28]
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_TIM_Base_MspInit+0xf4>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
}
 80024a2:	e010      	b.n	80024c6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM17)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <HAL_TIM_Base_MspInit+0x104>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d10b      	bne.n	80024c6 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_TIM_Base_MspInit+0xf4>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <HAL_TIM_Base_MspInit+0xf4>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b8:	6193      	str	r3, [r2, #24]
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_TIM_Base_MspInit+0xf4>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
}
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	40021000 	.word	0x40021000
 80024d8:	2000057c 	.word	0x2000057c
 80024dc:	4002001c 	.word	0x4002001c
 80024e0:	40000800 	.word	0x40000800
 80024e4:	40014800 	.word	0x40014800

080024e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08c      	sub	sp, #48	; 0x30
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 031c 	add.w	r3, r7, #28
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a46      	ldr	r2, [pc, #280]	; (8002620 <HAL_TIM_MspPostInit+0x138>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d11c      	bne.n	8002544 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	4b46      	ldr	r3, [pc, #280]	; (8002624 <HAL_TIM_MspPostInit+0x13c>)
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	4a45      	ldr	r2, [pc, #276]	; (8002624 <HAL_TIM_MspPostInit+0x13c>)
 8002510:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002514:	6153      	str	r3, [r2, #20]
 8002516:	4b43      	ldr	r3, [pc, #268]	; (8002624 <HAL_TIM_MspPostInit+0x13c>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800251e:	61bb      	str	r3, [r7, #24]
 8002520:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002522:	2301      	movs	r3, #1
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002532:	2302      	movs	r3, #2
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	483a      	ldr	r0, [pc, #232]	; (8002628 <HAL_TIM_MspPostInit+0x140>)
 800253e:	f002 f835 	bl	80045ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002542:	e069      	b.n	8002618 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d11e      	bne.n	800258c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b35      	ldr	r3, [pc, #212]	; (8002624 <HAL_TIM_MspPostInit+0x13c>)
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	4a34      	ldr	r2, [pc, #208]	; (8002624 <HAL_TIM_MspPostInit+0x13c>)
 8002554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002558:	6153      	str	r3, [r2, #20]
 800255a:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HAL_TIM_MspPostInit+0x13c>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800256a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	2300      	movs	r3, #0
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002578:	2301      	movs	r3, #1
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4619      	mov	r1, r3
 8002582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002586:	f002 f811 	bl	80045ac <HAL_GPIO_Init>
}
 800258a:	e045      	b.n	8002618 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM4)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a26      	ldr	r2, [pc, #152]	; (800262c <HAL_TIM_MspPostInit+0x144>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d11e      	bne.n	80025d4 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_TIM_MspPostInit+0x13c>)
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	4a22      	ldr	r2, [pc, #136]	; (8002624 <HAL_TIM_MspPostInit+0x13c>)
 800259c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a0:	6153      	str	r3, [r2, #20]
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_TIM_MspPostInit+0x13c>)
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80025c0:	230a      	movs	r3, #10
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	f107 031c 	add.w	r3, r7, #28
 80025c8:	4619      	mov	r1, r3
 80025ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ce:	f001 ffed 	bl	80045ac <HAL_GPIO_Init>
}
 80025d2:	e021      	b.n	8002618 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM17)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a15      	ldr	r2, [pc, #84]	; (8002630 <HAL_TIM_MspPostInit+0x148>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d11c      	bne.n	8002618 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_TIM_MspPostInit+0x13c>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	4a10      	ldr	r2, [pc, #64]	; (8002624 <HAL_TIM_MspPostInit+0x13c>)
 80025e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e8:	6153      	str	r3, [r2, #20]
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_TIM_MspPostInit+0x13c>)
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002606:	2301      	movs	r3, #1
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	f107 031c 	add.w	r3, r7, #28
 800260e:	4619      	mov	r1, r3
 8002610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002614:	f001 ffca 	bl	80045ac <HAL_GPIO_Init>
}
 8002618:	bf00      	nop
 800261a:	3730      	adds	r7, #48	; 0x30
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40012c00 	.word	0x40012c00
 8002624:	40021000 	.word	0x40021000
 8002628:	48000800 	.word	0x48000800
 800262c:	40000800 	.word	0x40000800
 8002630:	40014800 	.word	0x40014800

08002634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <HAL_UART_MspInit+0x7c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d128      	bne.n	80026a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002656:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <HAL_UART_MspInit+0x80>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	4a16      	ldr	r2, [pc, #88]	; (80026b4 <HAL_UART_MspInit+0x80>)
 800265c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002660:	61d3      	str	r3, [r2, #28]
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <HAL_UART_MspInit+0x80>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_UART_MspInit+0x80>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4a10      	ldr	r2, [pc, #64]	; (80026b4 <HAL_UART_MspInit+0x80>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002678:	6153      	str	r3, [r2, #20]
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_UART_MspInit+0x80>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002686:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800268a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002698:	2307      	movs	r3, #7
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	4619      	mov	r1, r3
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <HAL_UART_MspInit+0x84>)
 80026a4:	f001 ff82 	bl	80045ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026a8:	bf00      	nop
 80026aa:	3728      	adds	r7, #40	; 0x28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40004800 	.word	0x40004800
 80026b4:	40021000 	.word	0x40021000
 80026b8:	48000400 	.word	0x48000400

080026bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	; 0x38
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80026cc:	4b33      	ldr	r3, [pc, #204]	; (800279c <HAL_InitTick+0xe0>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	4a32      	ldr	r2, [pc, #200]	; (800279c <HAL_InitTick+0xe0>)
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	61d3      	str	r3, [r2, #28]
 80026d8:	4b30      	ldr	r3, [pc, #192]	; (800279c <HAL_InitTick+0xe0>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026e4:	f107 0210 	add.w	r2, r7, #16
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f004 fa8a 	bl	8006c08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d103      	bne.n	8002706 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026fe:	f004 fa3f 	bl	8006b80 <HAL_RCC_GetPCLK1Freq>
 8002702:	6378      	str	r0, [r7, #52]	; 0x34
 8002704:	e004      	b.n	8002710 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002706:	f004 fa3b 	bl	8006b80 <HAL_RCC_GetPCLK1Freq>
 800270a:	4603      	mov	r3, r0
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002712:	4a23      	ldr	r2, [pc, #140]	; (80027a0 <HAL_InitTick+0xe4>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	0c9b      	lsrs	r3, r3, #18
 800271a:	3b01      	subs	r3, #1
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <HAL_InitTick+0xe8>)
 8002720:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <HAL_InitTick+0xec>)
 8002722:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002724:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_InitTick+0xe8>)
 8002726:	f240 32e7 	movw	r2, #999	; 0x3e7
 800272a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800272c:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_InitTick+0xe8>)
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_InitTick+0xe8>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002738:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <HAL_InitTick+0xe8>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_InitTick+0xe8>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002744:	4817      	ldr	r0, [pc, #92]	; (80027a4 <HAL_InitTick+0xe8>)
 8002746:	f004 fd5a 	bl	80071fe <HAL_TIM_Base_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002754:	2b00      	cmp	r3, #0
 8002756:	d11b      	bne.n	8002790 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002758:	4812      	ldr	r0, [pc, #72]	; (80027a4 <HAL_InitTick+0xe8>)
 800275a:	f004 fda7 	bl	80072ac <HAL_TIM_Base_Start_IT>
 800275e:	4603      	mov	r3, r0
 8002760:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002768:	2b00      	cmp	r3, #0
 800276a:	d111      	bne.n	8002790 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800276c:	201d      	movs	r0, #29
 800276e:	f001 fb67 	bl	8003e40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b0f      	cmp	r3, #15
 8002776:	d808      	bhi.n	800278a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002778:	2200      	movs	r2, #0
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	201d      	movs	r0, #29
 800277e:	f001 fb43 	bl	8003e08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <HAL_InitTick+0xf0>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	e002      	b.n	8002790 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002790:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002794:	4618      	mov	r0, r3
 8002796:	3738      	adds	r7, #56	; 0x38
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	431bde83 	.word	0x431bde83
 80027a4:	20000690 	.word	0x20000690
 80027a8:	40000400 	.word	0x40000400
 80027ac:	20000008 	.word	0x20000008

080027b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <NMI_Handler+0x4>

080027b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ba:	e7fe      	b.n	80027ba <HardFault_Handler+0x4>

080027bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <MemManage_Handler+0x4>

080027c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <BusFault_Handler+0x4>

080027c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <UsageFault_Handler+0x4>

080027ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <DMA1_Channel2_IRQHandler+0x10>)
 80027e2:	f001 fdf7 	bl	80043d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2000057c 	.word	0x2000057c

080027f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <TIM3_IRQHandler+0x10>)
 80027f6:	f004 ff37 	bl	8007668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000690 	.word	0x20000690

08002804 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <I2C1_EV_IRQHandler+0x10>)
 800280a:	f002 f93d 	bl	8004a88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000394 	.word	0x20000394

08002818 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800281c:	4802      	ldr	r0, [pc, #8]	; (8002828 <I2C1_ER_IRQHandler+0x10>)
 800281e:	f002 f94d 	bl	8004abc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000394 	.word	0x20000394

0800282c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <USART3_IRQHandler+0x10>)
 8002832:	f006 f8c3 	bl	80089bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200005c0 	.word	0x200005c0

08002840 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002844:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002848:	f002 f86c 	bl	8004924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}

08002850 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <SystemInit+0x20>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <SystemInit+0x20>)
 800285c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002878:	f7ff ffea 	bl	8002850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800287c:	480c      	ldr	r0, [pc, #48]	; (80028b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800287e:	490d      	ldr	r1, [pc, #52]	; (80028b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002880:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <LoopForever+0xe>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002884:	e002      	b.n	800288c <LoopCopyDataInit>

08002886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288a:	3304      	adds	r3, #4

0800288c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800288c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002890:	d3f9      	bcc.n	8002886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002892:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002894:	4c0a      	ldr	r4, [pc, #40]	; (80028c0 <LoopForever+0x16>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002898:	e001      	b.n	800289e <LoopFillZerobss>

0800289a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800289c:	3204      	adds	r2, #4

0800289e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a0:	d3fb      	bcc.n	800289a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028a2:	f009 fe49 	bl	800c538 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028a6:	f7fe f90b 	bl	8000ac0 <main>

080028aa <LoopForever>:

LoopForever:
    b LoopForever
 80028aa:	e7fe      	b.n	80028aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80028b8:	0800c7f4 	.word	0x0800c7f4
  ldr r2, =_sbss
 80028bc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80028c0:	2000307c 	.word	0x2000307c

080028c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028c4:	e7fe      	b.n	80028c4 <ADC1_2_IRQHandler>
	...

080028c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_Init+0x28>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <HAL_Init+0x28>)
 80028d2:	f043 0310 	orr.w	r3, r3, #16
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d8:	2003      	movs	r0, #3
 80028da:	f001 fa8a 	bl	8003df2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028de:	200f      	movs	r0, #15
 80028e0:	f7ff feec 	bl	80026bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e4:	f7ff fc60 	bl	80021a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40022000 	.word	0x40022000

080028f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_IncTick+0x20>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x24>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4413      	add	r3, r2
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <HAL_IncTick+0x24>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	2000000c 	.word	0x2000000c
 8002918:	200006dc 	.word	0x200006dc

0800291c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_GetTick+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	200006dc 	.word	0x200006dc

08002934 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b09a      	sub	sp, #104	; 0x68
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e1e3      	b.n	8002d1c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d176      	bne.n	8002a54 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d152      	bne.n	8002a14 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff fc35 	bl	80021f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d13b      	bne.n	8002a14 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f001 f85f 	bl	8003a60 <ADC_Disable>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d12f      	bne.n	8002a14 <HAL_ADC_Init+0xe0>
 80029b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d12b      	bne.n	8002a14 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029c4:	f023 0302 	bic.w	r3, r3, #2
 80029c8:	f043 0202 	orr.w	r2, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029de:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029ee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029f0:	4b92      	ldr	r3, [pc, #584]	; (8002c3c <HAL_ADC_Init+0x308>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a92      	ldr	r2, [pc, #584]	; (8002c40 <HAL_ADC_Init+0x30c>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0c9a      	lsrs	r2, r3, #18
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a06:	e002      	b.n	8002a0e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f9      	bne.n	8002a08 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a30:	d110      	bne.n	8002a54 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f023 0312 	bic.w	r3, r3, #18
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f040 8150 	bne.w	8002d02 <HAL_ADC_Init+0x3ce>
 8002a62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 814b 	bne.w	8002d02 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 8143 	bne.w	8002d02 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a84:	f043 0202 	orr.w	r2, r3, #2
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a94:	d004      	beq.n	8002aa0 <HAL_ADC_Init+0x16c>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6a      	ldr	r2, [pc, #424]	; (8002c44 <HAL_ADC_Init+0x310>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_Init+0x170>
 8002aa0:	4b69      	ldr	r3, [pc, #420]	; (8002c48 <HAL_ADC_Init+0x314>)
 8002aa2:	e000      	b.n	8002aa6 <HAL_ADC_Init+0x172>
 8002aa4:	4b69      	ldr	r3, [pc, #420]	; (8002c4c <HAL_ADC_Init+0x318>)
 8002aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab0:	d102      	bne.n	8002ab8 <HAL_ADC_Init+0x184>
 8002ab2:	4b64      	ldr	r3, [pc, #400]	; (8002c44 <HAL_ADC_Init+0x310>)
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e01a      	b.n	8002aee <HAL_ADC_Init+0x1ba>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a61      	ldr	r2, [pc, #388]	; (8002c44 <HAL_ADC_Init+0x310>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d103      	bne.n	8002aca <HAL_ADC_Init+0x196>
 8002ac2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	e011      	b.n	8002aee <HAL_ADC_Init+0x1ba>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a60      	ldr	r2, [pc, #384]	; (8002c50 <HAL_ADC_Init+0x31c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d102      	bne.n	8002ada <HAL_ADC_Init+0x1a6>
 8002ad4:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <HAL_ADC_Init+0x320>)
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e009      	b.n	8002aee <HAL_ADC_Init+0x1ba>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a5d      	ldr	r2, [pc, #372]	; (8002c54 <HAL_ADC_Init+0x320>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d102      	bne.n	8002aea <HAL_ADC_Init+0x1b6>
 8002ae4:	4b5a      	ldr	r3, [pc, #360]	; (8002c50 <HAL_ADC_Init+0x31c>)
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e001      	b.n	8002aee <HAL_ADC_Init+0x1ba>
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d108      	bne.n	8002b0e <HAL_ADC_Init+0x1da>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_Init+0x1da>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_ADC_Init+0x1dc>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d11c      	bne.n	8002b4e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d010      	beq.n	8002b3c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d107      	bne.n	8002b36 <HAL_ADC_Init+0x202>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_Init+0x202>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_ADC_Init+0x204>
 8002b36:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d108      	bne.n	8002b4e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	7e5b      	ldrb	r3, [r3, #25]
 8002b52:	035b      	lsls	r3, r3, #13
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b58:	2a01      	cmp	r2, #1
 8002b5a:	d002      	beq.n	8002b62 <HAL_ADC_Init+0x22e>
 8002b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b60:	e000      	b.n	8002b64 <HAL_ADC_Init+0x230>
 8002b62:	2200      	movs	r2, #0
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b74:	4313      	orrs	r3, r2
 8002b76:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d11b      	bne.n	8002bba <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7e5b      	ldrb	r3, [r3, #25]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	045a      	lsls	r2, r3, #17
 8002b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b9c:	e00d      	b.n	8002bba <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ba6:	f043 0220 	orr.w	r2, r3, #32
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d054      	beq.n	8002c6c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <HAL_ADC_Init+0x31c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_ADC_Init+0x2a2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a20      	ldr	r2, [pc, #128]	; (8002c54 <HAL_ADC_Init+0x320>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d140      	bne.n	8002c58 <HAL_ADC_Init+0x324>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002bde:	d02a      	beq.n	8002c36 <HAL_ADC_Init+0x302>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be8:	d022      	beq.n	8002c30 <HAL_ADC_Init+0x2fc>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002bf2:	d01a      	beq.n	8002c2a <HAL_ADC_Init+0x2f6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002bfc:	d012      	beq.n	8002c24 <HAL_ADC_Init+0x2f0>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002c06:	d00a      	beq.n	8002c1e <HAL_ADC_Init+0x2ea>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002c10:	d002      	beq.n	8002c18 <HAL_ADC_Init+0x2e4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	e023      	b.n	8002c60 <HAL_ADC_Init+0x32c>
 8002c18:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c1c:	e020      	b.n	8002c60 <HAL_ADC_Init+0x32c>
 8002c1e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c22:	e01d      	b.n	8002c60 <HAL_ADC_Init+0x32c>
 8002c24:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002c28:	e01a      	b.n	8002c60 <HAL_ADC_Init+0x32c>
 8002c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c2e:	e017      	b.n	8002c60 <HAL_ADC_Init+0x32c>
 8002c30:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002c34:	e014      	b.n	8002c60 <HAL_ADC_Init+0x32c>
 8002c36:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002c3a:	e011      	b.n	8002c60 <HAL_ADC_Init+0x32c>
 8002c3c:	20000004 	.word	0x20000004
 8002c40:	431bde83 	.word	0x431bde83
 8002c44:	50000100 	.word	0x50000100
 8002c48:	50000300 	.word	0x50000300
 8002c4c:	50000700 	.word	0x50000700
 8002c50:	50000400 	.word	0x50000400
 8002c54:	50000500 	.word	0x50000500
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c64:	4313      	orrs	r3, r2
 8002c66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d114      	bne.n	8002ca4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c88:	f023 0302 	bic.w	r3, r3, #2
 8002c8c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7e1b      	ldrb	r3, [r3, #24]
 8002c92:	039a      	lsls	r2, r3, #14
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <HAL_ADC_Init+0x3f0>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10c      	bne.n	8002cda <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f023 010f 	bic.w	r1, r3, #15
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	1e5a      	subs	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd8:	e007      	b.n	8002cea <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 020f 	bic.w	r2, r2, #15
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f023 0303 	bic.w	r3, r3, #3
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
 8002d00:	e00a      	b.n	8002d18 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f023 0312 	bic.w	r3, r3, #18
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002d18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3768      	adds	r7, #104	; 0x68
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	fff0c007 	.word	0xfff0c007

08002d28 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 80f9 	bne.w	8002f36 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_Start+0x2a>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e0f4      	b.n	8002f3c <HAL_ADC_Start+0x214>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fe1c 	bl	8003998 <ADC_Enable>
 8002d60:	4603      	mov	r3, r0
 8002d62:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 80e0 	bne.w	8002f2c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d88:	d004      	beq.n	8002d94 <HAL_ADC_Start+0x6c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6d      	ldr	r2, [pc, #436]	; (8002f44 <HAL_ADC_Start+0x21c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d106      	bne.n	8002da2 <HAL_ADC_Start+0x7a>
 8002d94:	4b6c      	ldr	r3, [pc, #432]	; (8002f48 <HAL_ADC_Start+0x220>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d010      	beq.n	8002dc2 <HAL_ADC_Start+0x9a>
 8002da0:	e005      	b.n	8002dae <HAL_ADC_Start+0x86>
 8002da2:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_ADC_Start+0x224>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_ADC_Start+0x9a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db6:	d004      	beq.n	8002dc2 <HAL_ADC_Start+0x9a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a64      	ldr	r2, [pc, #400]	; (8002f50 <HAL_ADC_Start+0x228>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d115      	bne.n	8002dee <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d036      	beq.n	8002e4a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002de4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002dec:	e02d      	b.n	8002e4a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e02:	d004      	beq.n	8002e0e <HAL_ADC_Start+0xe6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a4e      	ldr	r2, [pc, #312]	; (8002f44 <HAL_ADC_Start+0x21c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d10a      	bne.n	8002e24 <HAL_ADC_Start+0xfc>
 8002e0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf14      	ite	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	2300      	moveq	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e008      	b.n	8002e36 <HAL_ADC_Start+0x10e>
 8002e24:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_ADC_Start+0x228>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e56:	d106      	bne.n	8002e66 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5c:	f023 0206 	bic.w	r2, r3, #6
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	645a      	str	r2, [r3, #68]	; 0x44
 8002e64:	e002      	b.n	8002e6c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	221c      	movs	r2, #28
 8002e7a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e84:	d004      	beq.n	8002e90 <HAL_ADC_Start+0x168>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a2e      	ldr	r2, [pc, #184]	; (8002f44 <HAL_ADC_Start+0x21c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d106      	bne.n	8002e9e <HAL_ADC_Start+0x176>
 8002e90:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_ADC_Start+0x220>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d03e      	beq.n	8002f1a <HAL_ADC_Start+0x1f2>
 8002e9c:	e005      	b.n	8002eaa <HAL_ADC_Start+0x182>
 8002e9e:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <HAL_ADC_Start+0x224>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d037      	beq.n	8002f1a <HAL_ADC_Start+0x1f2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb2:	d004      	beq.n	8002ebe <HAL_ADC_Start+0x196>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <HAL_ADC_Start+0x21c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d106      	bne.n	8002ecc <HAL_ADC_Start+0x1a4>
 8002ebe:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <HAL_ADC_Start+0x220>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2b05      	cmp	r3, #5
 8002ec8:	d027      	beq.n	8002f1a <HAL_ADC_Start+0x1f2>
 8002eca:	e005      	b.n	8002ed8 <HAL_ADC_Start+0x1b0>
 8002ecc:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <HAL_ADC_Start+0x224>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d020      	beq.n	8002f1a <HAL_ADC_Start+0x1f2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee0:	d004      	beq.n	8002eec <HAL_ADC_Start+0x1c4>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <HAL_ADC_Start+0x21c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d106      	bne.n	8002efa <HAL_ADC_Start+0x1d2>
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <HAL_ADC_Start+0x220>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	d010      	beq.n	8002f1a <HAL_ADC_Start+0x1f2>
 8002ef8:	e005      	b.n	8002f06 <HAL_ADC_Start+0x1de>
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_ADC_Start+0x224>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2b09      	cmp	r3, #9
 8002f04:	d009      	beq.n	8002f1a <HAL_ADC_Start+0x1f2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f0e:	d004      	beq.n	8002f1a <HAL_ADC_Start+0x1f2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <HAL_ADC_Start+0x228>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10f      	bne.n	8002f3a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0204 	orr.w	r2, r2, #4
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	e006      	b.n	8002f3a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f34:	e001      	b.n	8002f3a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
 8002f38:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	50000100 	.word	0x50000100
 8002f48:	50000300 	.word	0x50000300
 8002f4c:	50000700 	.word	0x50000700
 8002f50:	50000400 	.word	0x50000400

08002f54 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_Stop+0x1a>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e023      	b.n	8002fb6 <HAL_ADC_Stop+0x62>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f76:	216c      	movs	r1, #108	; 0x6c
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fdd7 	bl	8003b2c <ADC_ConversionStop>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d111      	bne.n	8002fac <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fd69 	bl	8003a60 <ADC_Disable>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d102      	bne.n	8002fdc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e03a      	b.n	8003052 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe4:	d004      	beq.n	8002ff0 <HAL_ADC_PollForConversion+0x30>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a72      	ldr	r2, [pc, #456]	; (80031b4 <HAL_ADC_PollForConversion+0x1f4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_PollForConversion+0x34>
 8002ff0:	4b71      	ldr	r3, [pc, #452]	; (80031b8 <HAL_ADC_PollForConversion+0x1f8>)
 8002ff2:	e000      	b.n	8002ff6 <HAL_ADC_PollForConversion+0x36>
 8002ff4:	4b71      	ldr	r3, [pc, #452]	; (80031bc <HAL_ADC_PollForConversion+0x1fc>)
 8002ff6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2b00      	cmp	r3, #0
 8003002:	d112      	bne.n	800302a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d11d      	bne.n	800304e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0bf      	b.n	80031aa <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f043 0220 	orr.w	r2, r3, #32
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e0ad      	b.n	80031aa <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800304e:	230c      	movs	r3, #12
 8003050:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305a:	d004      	beq.n	8003066 <HAL_ADC_PollForConversion+0xa6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a54      	ldr	r2, [pc, #336]	; (80031b4 <HAL_ADC_PollForConversion+0x1f4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d106      	bne.n	8003074 <HAL_ADC_PollForConversion+0xb4>
 8003066:	4b54      	ldr	r3, [pc, #336]	; (80031b8 <HAL_ADC_PollForConversion+0x1f8>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2b00      	cmp	r3, #0
 8003070:	d010      	beq.n	8003094 <HAL_ADC_PollForConversion+0xd4>
 8003072:	e005      	b.n	8003080 <HAL_ADC_PollForConversion+0xc0>
 8003074:	4b51      	ldr	r3, [pc, #324]	; (80031bc <HAL_ADC_PollForConversion+0x1fc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2b00      	cmp	r3, #0
 800307e:	d009      	beq.n	8003094 <HAL_ADC_PollForConversion+0xd4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003088:	d004      	beq.n	8003094 <HAL_ADC_PollForConversion+0xd4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a4c      	ldr	r2, [pc, #304]	; (80031c0 <HAL_ADC_PollForConversion+0x200>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d104      	bne.n	800309e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	e00f      	b.n	80030be <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a6:	d004      	beq.n	80030b2 <HAL_ADC_PollForConversion+0xf2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a41      	ldr	r2, [pc, #260]	; (80031b4 <HAL_ADC_PollForConversion+0x1f4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d102      	bne.n	80030b8 <HAL_ADC_PollForConversion+0xf8>
 80030b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030b6:	e000      	b.n	80030ba <HAL_ADC_PollForConversion+0xfa>
 80030b8:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <HAL_ADC_PollForConversion+0x200>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80030be:	f7ff fc2d 	bl	800291c <HAL_GetTick>
 80030c2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80030c4:	e021      	b.n	800310a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d01d      	beq.n	800310a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <HAL_ADC_PollForConversion+0x124>
 80030d4:	f7ff fc22 	bl	800291c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d212      	bcs.n	800310a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f043 0204 	orr.w	r2, r3, #4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e04f      	b.n	80031aa <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0d6      	beq.n	80030c6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800312e:	2b00      	cmp	r3, #0
 8003130:	d131      	bne.n	8003196 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003138:	2b00      	cmp	r3, #0
 800313a:	d12c      	bne.n	8003196 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b08      	cmp	r3, #8
 8003148:	d125      	bne.n	8003196 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d112      	bne.n	800317e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d112      	bne.n	8003196 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f043 0201 	orr.w	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
 800317c:	e00b      	b.n	8003196 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f043 0220 	orr.w	r2, r3, #32
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d103      	bne.n	80031a8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	50000100 	.word	0x50000100
 80031b8:	50000300 	.word	0x50000300
 80031bc:	50000700 	.word	0x50000700
 80031c0:	50000400 	.word	0x50000400

080031c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b09b      	sub	sp, #108	; 0x6c
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x22>
 80031fe:	2302      	movs	r3, #2
 8003200:	e2c8      	b.n	8003794 <HAL_ADC_ConfigChannel+0x5b4>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	f040 82ac 	bne.w	8003772 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b04      	cmp	r3, #4
 8003220:	d81c      	bhi.n	800325c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	461a      	mov	r2, r3
 8003236:	231f      	movs	r3, #31
 8003238:	4093      	lsls	r3, r2
 800323a:	43db      	mvns	r3, r3
 800323c:	4019      	ands	r1, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	4413      	add	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa00 f203 	lsl.w	r2, r0, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
 800325a:	e063      	b.n	8003324 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b09      	cmp	r3, #9
 8003262:	d81e      	bhi.n	80032a2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	3b1e      	subs	r3, #30
 8003278:	221f      	movs	r2, #31
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	4019      	ands	r1, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	3b1e      	subs	r3, #30
 8003294:	fa00 f203 	lsl.w	r2, r0, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	635a      	str	r2, [r3, #52]	; 0x34
 80032a0:	e040      	b.n	8003324 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b0e      	cmp	r3, #14
 80032a8:	d81e      	bhi.n	80032e8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	3b3c      	subs	r3, #60	; 0x3c
 80032be:	221f      	movs	r2, #31
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	4019      	ands	r1, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	3b3c      	subs	r3, #60	; 0x3c
 80032da:	fa00 f203 	lsl.w	r2, r0, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	639a      	str	r2, [r3, #56]	; 0x38
 80032e6:	e01d      	b.n	8003324 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	3b5a      	subs	r3, #90	; 0x5a
 80032fc:	221f      	movs	r2, #31
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	4019      	ands	r1, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	3b5a      	subs	r3, #90	; 0x5a
 8003318:	fa00 f203 	lsl.w	r2, r0, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 80e5 	bne.w	80034fe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b09      	cmp	r3, #9
 800333a:	d91c      	bls.n	8003376 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6999      	ldr	r1, [r3, #24]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	3b1e      	subs	r3, #30
 800334e:	2207      	movs	r2, #7
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	4019      	ands	r1, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6898      	ldr	r0, [r3, #8]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	3b1e      	subs	r3, #30
 8003368:	fa00 f203 	lsl.w	r2, r0, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	619a      	str	r2, [r3, #24]
 8003374:	e019      	b.n	80033aa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6959      	ldr	r1, [r3, #20]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	2207      	movs	r2, #7
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	4019      	ands	r1, r3
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6898      	ldr	r0, [r3, #8]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	fa00 f203 	lsl.w	r2, r0, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	08db      	lsrs	r3, r3, #3
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d84f      	bhi.n	800346c <HAL_ADC_ConfigChannel+0x28c>
 80033cc:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <HAL_ADC_ConfigChannel+0x1f4>)
 80033ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d2:	bf00      	nop
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	08003407 	.word	0x08003407
 80033dc:	08003429 	.word	0x08003429
 80033e0:	0800344b 	.word	0x0800344b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033ea:	4b99      	ldr	r3, [pc, #612]	; (8003650 <HAL_ADC_ConfigChannel+0x470>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	0691      	lsls	r1, r2, #26
 80033f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033f6:	430a      	orrs	r2, r1
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003402:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003404:	e07b      	b.n	80034fe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800340c:	4b90      	ldr	r3, [pc, #576]	; (8003650 <HAL_ADC_ConfigChannel+0x470>)
 800340e:	4013      	ands	r3, r2
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	0691      	lsls	r1, r2, #26
 8003416:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003418:	430a      	orrs	r2, r1
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003424:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003426:	e06a      	b.n	80034fe <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800342e:	4b88      	ldr	r3, [pc, #544]	; (8003650 <HAL_ADC_ConfigChannel+0x470>)
 8003430:	4013      	ands	r3, r2
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	0691      	lsls	r1, r2, #26
 8003438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800343a:	430a      	orrs	r2, r1
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003446:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003448:	e059      	b.n	80034fe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003450:	4b7f      	ldr	r3, [pc, #508]	; (8003650 <HAL_ADC_ConfigChannel+0x470>)
 8003452:	4013      	ands	r3, r2
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	0691      	lsls	r1, r2, #26
 800345a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800345c:	430a      	orrs	r2, r1
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003468:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800346a:	e048      	b.n	80034fe <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003472:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	069b      	lsls	r3, r3, #26
 800347c:	429a      	cmp	r2, r3
 800347e:	d107      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800348e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003496:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	069b      	lsls	r3, r3, #26
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d107      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	069b      	lsls	r3, r3, #26
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d107      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	069b      	lsls	r3, r3, #26
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d107      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80034fc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	2b01      	cmp	r3, #1
 800350a:	d108      	bne.n	800351e <HAL_ADC_ConfigChannel+0x33e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_ADC_ConfigChannel+0x33e>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_ADC_ConfigChannel+0x340>
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	f040 8131 	bne.w	8003788 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d00f      	beq.n	800354e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2201      	movs	r2, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43da      	mvns	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	400a      	ands	r2, r1
 8003548:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800354c:	e049      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2201      	movs	r2, #1
 800355c:	409a      	lsls	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b09      	cmp	r3, #9
 800356e:	d91c      	bls.n	80035aa <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6999      	ldr	r1, [r3, #24]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	3b1b      	subs	r3, #27
 8003582:	2207      	movs	r2, #7
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	4019      	ands	r1, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6898      	ldr	r0, [r3, #8]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	3b1b      	subs	r3, #27
 800359c:	fa00 f203 	lsl.w	r2, r0, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	619a      	str	r2, [r3, #24]
 80035a8:	e01b      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6959      	ldr	r1, [r3, #20]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	4613      	mov	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	2207      	movs	r2, #7
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	4019      	ands	r1, r3
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6898      	ldr	r0, [r3, #8]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	fa00 f203 	lsl.w	r2, r0, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ea:	d004      	beq.n	80035f6 <HAL_ADC_ConfigChannel+0x416>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a18      	ldr	r2, [pc, #96]	; (8003654 <HAL_ADC_ConfigChannel+0x474>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x41a>
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <HAL_ADC_ConfigChannel+0x478>)
 80035f8:	e000      	b.n	80035fc <HAL_ADC_ConfigChannel+0x41c>
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <HAL_ADC_ConfigChannel+0x47c>)
 80035fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b10      	cmp	r3, #16
 8003604:	d105      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800360e:	2b00      	cmp	r3, #0
 8003610:	d015      	beq.n	800363e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003616:	2b11      	cmp	r3, #17
 8003618:	d105      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800361a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800362a:	2b12      	cmp	r3, #18
 800362c:	f040 80ac 	bne.w	8003788 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003638:	2b00      	cmp	r3, #0
 800363a:	f040 80a5 	bne.w	8003788 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003646:	d10b      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x480>
 8003648:	4b02      	ldr	r3, [pc, #8]	; (8003654 <HAL_ADC_ConfigChannel+0x474>)
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e023      	b.n	8003696 <HAL_ADC_ConfigChannel+0x4b6>
 800364e:	bf00      	nop
 8003650:	83fff000 	.word	0x83fff000
 8003654:	50000100 	.word	0x50000100
 8003658:	50000300 	.word	0x50000300
 800365c:	50000700 	.word	0x50000700
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a4e      	ldr	r2, [pc, #312]	; (80037a0 <HAL_ADC_ConfigChannel+0x5c0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d103      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x492>
 800366a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	e011      	b.n	8003696 <HAL_ADC_ConfigChannel+0x4b6>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a4b      	ldr	r2, [pc, #300]	; (80037a4 <HAL_ADC_ConfigChannel+0x5c4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d102      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x4a2>
 800367c:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <HAL_ADC_ConfigChannel+0x5c8>)
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e009      	b.n	8003696 <HAL_ADC_ConfigChannel+0x4b6>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a48      	ldr	r2, [pc, #288]	; (80037a8 <HAL_ADC_ConfigChannel+0x5c8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d102      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x4b2>
 800368c:	4b45      	ldr	r3, [pc, #276]	; (80037a4 <HAL_ADC_ConfigChannel+0x5c4>)
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e001      	b.n	8003696 <HAL_ADC_ConfigChannel+0x4b6>
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d108      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x4d6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x4d6>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x4d8>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d150      	bne.n	800375e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d010      	beq.n	80036e4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <HAL_ADC_ConfigChannel+0x4fe>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_ADC_ConfigChannel+0x4fe>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x500>
 80036de:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d13c      	bne.n	800375e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d11d      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x548>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f4:	d118      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80036f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003700:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003702:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <HAL_ADC_ConfigChannel+0x5cc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a2a      	ldr	r2, [pc, #168]	; (80037b0 <HAL_ADC_ConfigChannel+0x5d0>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	0c9a      	lsrs	r2, r3, #18
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003718:	e002      	b.n	8003720 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	3b01      	subs	r3, #1
 800371e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f9      	bne.n	800371a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003726:	e02e      	b.n	8003786 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b11      	cmp	r3, #17
 800372e:	d10b      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x568>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003738:	d106      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800373a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003744:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003746:	e01e      	b.n	8003786 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b12      	cmp	r3, #18
 800374e:	d11a      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800375a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800375c:	e013      	b.n	8003786 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f043 0220 	orr.w	r2, r3, #32
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003770:	e00a      	b.n	8003788 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f043 0220 	orr.w	r2, r3, #32
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003784:	e000      	b.n	8003788 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003786:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003790:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003794:	4618      	mov	r0, r3
 8003796:	376c      	adds	r7, #108	; 0x6c
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	50000100 	.word	0x50000100
 80037a4:	50000400 	.word	0x50000400
 80037a8:	50000500 	.word	0x50000500
 80037ac:	20000004 	.word	0x20000004
 80037b0:	431bde83 	.word	0x431bde83

080037b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b099      	sub	sp, #100	; 0x64
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037cc:	d102      	bne.n	80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80037ce:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	e01a      	b.n	800380a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a6a      	ldr	r2, [pc, #424]	; (8003984 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d103      	bne.n	80037e6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80037de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	e011      	b.n	800380a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a67      	ldr	r2, [pc, #412]	; (8003988 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d102      	bne.n	80037f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80037f0:	4b66      	ldr	r3, [pc, #408]	; (800398c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	e009      	b.n	800380a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a64      	ldr	r2, [pc, #400]	; (800398c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d102      	bne.n	8003806 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003800:	4b61      	ldr	r3, [pc, #388]	; (8003988 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	e001      	b.n	800380a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0b0      	b.n	8003976 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800381e:	2302      	movs	r3, #2
 8003820:	e0a9      	b.n	8003976 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	f040 808d 	bne.w	8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 8086 	bne.w	8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003850:	d004      	beq.n	800385c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a4b      	ldr	r2, [pc, #300]	; (8003984 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d101      	bne.n	8003860 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800385c:	4b4c      	ldr	r3, [pc, #304]	; (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800385e:	e000      	b.n	8003862 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003860:	4b4c      	ldr	r3, [pc, #304]	; (8003994 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003862:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d040      	beq.n	80038ee <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800386c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800387e:	035b      	lsls	r3, r3, #13
 8003880:	430b      	orrs	r3, r1
 8003882:	431a      	orrs	r2, r3
 8003884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003886:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b01      	cmp	r3, #1
 8003894:	d108      	bne.n	80038a8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80038a8:	2300      	movs	r3, #0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d15c      	bne.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d107      	bne.n	80038ca <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80038ca:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d14b      	bne.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80038d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80038d8:	f023 030f 	bic.w	r3, r3, #15
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	6811      	ldr	r1, [r2, #0]
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	6892      	ldr	r2, [r2, #8]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	431a      	orrs	r2, r3
 80038e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038ea:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80038ec:	e03c      	b.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038f8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d108      	bne.n	800391a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d123      	bne.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d107      	bne.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800393c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800393e:	2b00      	cmp	r3, #0
 8003940:	d112      	bne.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800394a:	f023 030f 	bic.w	r3, r3, #15
 800394e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003950:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003952:	e009      	b.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003966:	e000      	b.n	800396a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003968:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003972:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003976:	4618      	mov	r0, r3
 8003978:	3764      	adds	r7, #100	; 0x64
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	50000100 	.word	0x50000100
 8003988:	50000400 	.word	0x50000400
 800398c:	50000500 	.word	0x50000500
 8003990:	50000300 	.word	0x50000300
 8003994:	50000700 	.word	0x50000700

08003998 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d108      	bne.n	80039c4 <ADC_Enable+0x2c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <ADC_Enable+0x2c>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <ADC_Enable+0x2e>
 80039c4:	2300      	movs	r3, #0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d143      	bne.n	8003a52 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <ADC_Enable+0xc4>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00d      	beq.n	80039f4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f043 0210 	orr.w	r2, r3, #16
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	f043 0201 	orr.w	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e02f      	b.n	8003a54 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003a04:	f7fe ff8a 	bl	800291c <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a0a:	e01b      	b.n	8003a44 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a0c:	f7fe ff86 	bl	800291c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d914      	bls.n	8003a44 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d00d      	beq.n	8003a44 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f043 0210 	orr.w	r2, r3, #16
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a38:	f043 0201 	orr.w	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e007      	b.n	8003a54 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d1dc      	bne.n	8003a0c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	8000003f 	.word	0x8000003f

08003a60 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d108      	bne.n	8003a8c <ADC_Disable+0x2c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <ADC_Disable+0x2c>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <ADC_Disable+0x2e>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d047      	beq.n	8003b22 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 030d 	and.w	r3, r3, #13
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d10f      	bne.n	8003ac0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0202 	orr.w	r2, r2, #2
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003ab8:	f7fe ff30 	bl	800291c <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003abe:	e029      	b.n	8003b14 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f043 0210 	orr.w	r2, r3, #16
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e023      	b.n	8003b24 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003adc:	f7fe ff1e 	bl	800291c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d914      	bls.n	8003b14 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10d      	bne.n	8003b14 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f043 0210 	orr.w	r2, r3, #16
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b08:	f043 0201 	orr.w	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e007      	b.n	8003b24 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d0dc      	beq.n	8003adc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 809b 	beq.w	8003c88 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b60:	d12a      	bne.n	8003bb8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d126      	bne.n	8003bb8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d122      	bne.n	8003bb8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003b72:	230c      	movs	r3, #12
 8003b74:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003b76:	e014      	b.n	8003ba2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4a46      	ldr	r2, [pc, #280]	; (8003c94 <ADC_ConversionStop+0x168>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d90d      	bls.n	8003b9c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f043 0210 	orr.w	r2, r3, #16
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e076      	b.n	8003c8a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d1e3      	bne.n	8003b78 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2240      	movs	r2, #64	; 0x40
 8003bb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b60      	cmp	r3, #96	; 0x60
 8003bbc:	d015      	beq.n	8003bea <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d10e      	bne.n	8003bea <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d107      	bne.n	8003bea <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0210 	orr.w	r2, r2, #16
 8003be8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	d015      	beq.n	8003c1c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d10e      	bne.n	8003c1c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d107      	bne.n	8003c1c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0220 	orr.w	r2, r2, #32
 8003c1a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b60      	cmp	r3, #96	; 0x60
 8003c20:	d005      	beq.n	8003c2e <ADC_ConversionStop+0x102>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b6c      	cmp	r3, #108	; 0x6c
 8003c26:	d105      	bne.n	8003c34 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c28:	230c      	movs	r3, #12
 8003c2a:	617b      	str	r3, [r7, #20]
        break;
 8003c2c:	e005      	b.n	8003c3a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c2e:	2308      	movs	r3, #8
 8003c30:	617b      	str	r3, [r7, #20]
        break;
 8003c32:	e002      	b.n	8003c3a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c34:	2304      	movs	r3, #4
 8003c36:	617b      	str	r3, [r7, #20]
        break;
 8003c38:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c3a:	f7fe fe6f 	bl	800291c <HAL_GetTick>
 8003c3e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003c40:	e01b      	b.n	8003c7a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c42:	f7fe fe6b 	bl	800291c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b0b      	cmp	r3, #11
 8003c4e:	d914      	bls.n	8003c7a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0210 	orr.w	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e007      	b.n	8003c8a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1dc      	bne.n	8003c42 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	000993ff 	.word	0x000993ff

08003c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cca:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	60d3      	str	r3, [r2, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f003 0307 	and.w	r3, r3, #7
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	db0b      	blt.n	8003d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	4907      	ldr	r1, [pc, #28]	; (8003d34 <__NVIC_EnableIRQ+0x38>)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000e100 	.word	0xe000e100

08003d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	db0a      	blt.n	8003d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	490c      	ldr	r1, [pc, #48]	; (8003d84 <__NVIC_SetPriority+0x4c>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	0112      	lsls	r2, r2, #4
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d60:	e00a      	b.n	8003d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4908      	ldr	r1, [pc, #32]	; (8003d88 <__NVIC_SetPriority+0x50>)
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	3b04      	subs	r3, #4
 8003d70:	0112      	lsls	r2, r2, #4
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	440b      	add	r3, r1
 8003d76:	761a      	strb	r2, [r3, #24]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000e100 	.word	0xe000e100
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	; 0x24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f1c3 0307 	rsb	r3, r3, #7
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	bf28      	it	cs
 8003daa:	2304      	movcs	r3, #4
 8003dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3304      	adds	r3, #4
 8003db2:	2b06      	cmp	r3, #6
 8003db4:	d902      	bls.n	8003dbc <NVIC_EncodePriority+0x30>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3b03      	subs	r3, #3
 8003dba:	e000      	b.n	8003dbe <NVIC_EncodePriority+0x32>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	401a      	ands	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	43d9      	mvns	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de4:	4313      	orrs	r3, r2
         );
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3724      	adds	r7, #36	; 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ff4c 	bl	8003c98 <__NVIC_SetPriorityGrouping>
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e1a:	f7ff ff61 	bl	8003ce0 <__NVIC_GetPriorityGrouping>
 8003e1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	6978      	ldr	r0, [r7, #20]
 8003e26:	f7ff ffb1 	bl	8003d8c <NVIC_EncodePriority>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e30:	4611      	mov	r1, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff ff80 	bl	8003d38 <__NVIC_SetPriority>
}
 8003e38:	bf00      	nop
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff ff54 	bl	8003cfc <__NVIC_EnableIRQ>
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e054      	b.n	8003f18 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7f5b      	ldrb	r3, [r3, #29]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fe f9f6 	bl	8002270 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	791b      	ldrb	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10c      	bne.n	8003eac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a22      	ldr	r2, [pc, #136]	; (8003f20 <HAL_CRC_Init+0xc4>)
 8003e98:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0218 	bic.w	r2, r2, #24
 8003ea8:	609a      	str	r2, [r3, #8]
 8003eaa:	e00c      	b.n	8003ec6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6899      	ldr	r1, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f940 	bl	800413c <HAL_CRCEx_Polynomial_Set>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e028      	b.n	8003f18 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	795b      	ldrb	r3, [r3, #5]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d105      	bne.n	8003eda <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed6:	611a      	str	r2, [r3, #16]
 8003ed8:	e004      	b.n	8003ee4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6912      	ldr	r2, [r2, #16]
 8003ee2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699a      	ldr	r2, [r3, #24]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	04c11db7 	.word	0x04c11db7

08003f24 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2202      	movs	r2, #2
 8003f38:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d006      	beq.n	8003f50 <HAL_CRC_Accumulate+0x2c>
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d829      	bhi.n	8003f9a <HAL_CRC_Accumulate+0x76>
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d019      	beq.n	8003f7e <HAL_CRC_Accumulate+0x5a>
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d01e      	beq.n	8003f8c <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8003f4e:	e024      	b.n	8003f9a <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e00a      	b.n	8003f6c <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	441a      	add	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d3f0      	bcc.n	8003f56 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	613b      	str	r3, [r7, #16]
      break;
 8003f7c:	e00e      	b.n	8003f9c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f812 	bl	8003fac <CRC_Handle_8>
 8003f88:	6138      	str	r0, [r7, #16]
      break;
 8003f8a:	e007      	b.n	8003f9c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f899 	bl	80040c8 <CRC_Handle_16>
 8003f96:	6138      	str	r0, [r7, #16]
      break;
 8003f98:	e000      	b.n	8003f9c <HAL_CRC_Accumulate+0x78>
      break;
 8003f9a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003fa2:	693b      	ldr	r3, [r7, #16]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b089      	sub	sp, #36	; 0x24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61fb      	str	r3, [r7, #28]
 8003fbc:	e023      	b.n	8004006 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	3301      	adds	r3, #1
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	440b      	add	r3, r1
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003fd8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	3302      	adds	r3, #2
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	440b      	add	r3, r1
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003fe8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	3303      	adds	r3, #3
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	440b      	add	r3, r1
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003ffc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003ffe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	3301      	adds	r3, #1
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	429a      	cmp	r2, r3
 800400e:	d3d6      	bcc.n	8003fbe <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d04d      	beq.n	80040b6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d107      	bne.n	8004034 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	4413      	add	r3, r2
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d116      	bne.n	800406c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	4413      	add	r3, r2
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	b21a      	sxth	r2, r3
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	3301      	adds	r3, #1
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	440b      	add	r3, r1
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	b21b      	sxth	r3, r3
 800405a:	4313      	orrs	r3, r2
 800405c:	b21b      	sxth	r3, r3
 800405e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	8b7a      	ldrh	r2, [r7, #26]
 800406a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b03      	cmp	r3, #3
 8004074:	d11f      	bne.n	80040b6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	4413      	add	r3, r2
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	b21a      	sxth	r2, r3
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	3301      	adds	r3, #1
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	440b      	add	r3, r1
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	b21b      	sxth	r3, r3
 8004092:	4313      	orrs	r3, r2
 8004094:	b21b      	sxth	r3, r3
 8004096:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	8b7a      	ldrh	r2, [r7, #26]
 80040a2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	3302      	adds	r3, #2
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4413      	add	r3, r2
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3724      	adds	r7, #36	; 0x24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	e013      	b.n	8004102 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	4413      	add	r3, r2
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	041a      	lsls	r2, r3, #16
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	3302      	adds	r3, #2
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	440b      	add	r3, r1
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	4619      	mov	r1, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	3301      	adds	r3, #1
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	429a      	cmp	r2, r3
 800410a:	d3e6      	bcc.n	80040da <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	4413      	add	r3, r2
 8004124:	881a      	ldrh	r2, [r3, #0]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800414c:	231f      	movs	r3, #31
 800414e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]
 800415e:	e063      	b.n	8004228 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004160:	bf00      	nop
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1e5a      	subs	r2, r3, #1
 8004166:	613a      	str	r2, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <HAL_CRCEx_Polynomial_Set+0x44>
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b18      	cmp	r3, #24
 8004184:	d846      	bhi.n	8004214 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004186:	a201      	add	r2, pc, #4	; (adr r2, 800418c <HAL_CRCEx_Polynomial_Set+0x50>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	0800421b 	.word	0x0800421b
 8004190:	08004215 	.word	0x08004215
 8004194:	08004215 	.word	0x08004215
 8004198:	08004215 	.word	0x08004215
 800419c:	08004215 	.word	0x08004215
 80041a0:	08004215 	.word	0x08004215
 80041a4:	08004215 	.word	0x08004215
 80041a8:	08004215 	.word	0x08004215
 80041ac:	08004209 	.word	0x08004209
 80041b0:	08004215 	.word	0x08004215
 80041b4:	08004215 	.word	0x08004215
 80041b8:	08004215 	.word	0x08004215
 80041bc:	08004215 	.word	0x08004215
 80041c0:	08004215 	.word	0x08004215
 80041c4:	08004215 	.word	0x08004215
 80041c8:	08004215 	.word	0x08004215
 80041cc:	080041fd 	.word	0x080041fd
 80041d0:	08004215 	.word	0x08004215
 80041d4:	08004215 	.word	0x08004215
 80041d8:	08004215 	.word	0x08004215
 80041dc:	08004215 	.word	0x08004215
 80041e0:	08004215 	.word	0x08004215
 80041e4:	08004215 	.word	0x08004215
 80041e8:	08004215 	.word	0x08004215
 80041ec:	080041f1 	.word	0x080041f1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b06      	cmp	r3, #6
 80041f4:	d913      	bls.n	800421e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80041fa:	e010      	b.n	800421e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b07      	cmp	r3, #7
 8004200:	d90f      	bls.n	8004222 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004206:	e00c      	b.n	8004222 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b0f      	cmp	r3, #15
 800420c:	d90b      	bls.n	8004226 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004212:	e008      	b.n	8004226 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	75fb      	strb	r3, [r7, #23]
        break;
 8004218:	e006      	b.n	8004228 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800421a:	bf00      	nop
 800421c:	e004      	b.n	8004228 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800421e:	bf00      	nop
 8004220:	e002      	b.n	8004228 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004226:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10d      	bne.n	800424a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f023 0118 	bic.w	r1, r3, #24
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	430a      	orrs	r2, r1
 8004248:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800424a:	7dfb      	ldrb	r3, [r7, #23]
}
 800424c:	4618      	mov	r0, r3
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e037      	b.n	80042de <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2202      	movs	r2, #2
 8004272:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004284:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004288:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004292:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800429e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f937 	bl	8004534 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}  
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d008      	beq.n	800430a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2204      	movs	r2, #4
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e020      	b.n	800434c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 020e 	bic.w	r2, r2, #14
 8004318:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	2101      	movs	r1, #1
 8004334:	fa01 f202 	lsl.w	r2, r1, r2
 8004338:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800436a:	2b02      	cmp	r3, #2
 800436c:	d005      	beq.n	800437a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2204      	movs	r2, #4
 8004372:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
 8004378:	e027      	b.n	80043ca <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 020e 	bic.w	r2, r2, #14
 8004388:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a2:	2101      	movs	r1, #1
 80043a4:	fa01 f202 	lsl.w	r2, r1, r2
 80043a8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	4798      	blx	r3
    } 
  }
  return status;
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	2204      	movs	r2, #4
 80043f2:	409a      	lsls	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d024      	beq.n	8004446 <HAL_DMA_IRQHandler+0x72>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01f      	beq.n	8004446 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b00      	cmp	r3, #0
 8004412:	d107      	bne.n	8004424 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0204 	bic.w	r2, r2, #4
 8004422:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	2104      	movs	r1, #4
 800442e:	fa01 f202 	lsl.w	r2, r1, r2
 8004432:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d06a      	beq.n	8004512 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004444:	e065      	b.n	8004512 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	2202      	movs	r2, #2
 800444c:	409a      	lsls	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4013      	ands	r3, r2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d02c      	beq.n	80044b0 <HAL_DMA_IRQHandler+0xdc>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d027      	beq.n	80044b0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 020a 	bic.w	r2, r2, #10
 800447c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448e:	2102      	movs	r1, #2
 8004490:	fa01 f202 	lsl.w	r2, r1, r2
 8004494:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d035      	beq.n	8004512 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80044ae:	e030      	b.n	8004512 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b4:	2208      	movs	r2, #8
 80044b6:	409a      	lsls	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d028      	beq.n	8004512 <HAL_DMA_IRQHandler+0x13e>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d023      	beq.n	8004512 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 020e 	bic.w	r2, r2, #14
 80044d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	2101      	movs	r1, #1
 80044e4:	fa01 f202 	lsl.w	r2, r1, r2
 80044e8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	2b00      	cmp	r3, #0
 8004506:	d004      	beq.n	8004512 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
    }
  }
}  
 8004510:	e7ff      	b.n	8004512 <HAL_DMA_IRQHandler+0x13e>
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	4b14      	ldr	r3, [pc, #80]	; (8004594 <DMA_CalcBaseAndBitshift+0x60>)
 8004544:	429a      	cmp	r2, r3
 8004546:	d80f      	bhi.n	8004568 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <DMA_CalcBaseAndBitshift+0x64>)
 8004550:	4413      	add	r3, r2
 8004552:	4a12      	ldr	r2, [pc, #72]	; (800459c <DMA_CalcBaseAndBitshift+0x68>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	009a      	lsls	r2, r3, #2
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a0f      	ldr	r2, [pc, #60]	; (80045a0 <DMA_CalcBaseAndBitshift+0x6c>)
 8004564:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004566:	e00e      	b.n	8004586 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <DMA_CalcBaseAndBitshift+0x70>)
 8004570:	4413      	add	r3, r2
 8004572:	4a0a      	ldr	r2, [pc, #40]	; (800459c <DMA_CalcBaseAndBitshift+0x68>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	009a      	lsls	r2, r3, #2
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <DMA_CalcBaseAndBitshift+0x74>)
 8004584:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40020407 	.word	0x40020407
 8004598:	bffdfff8 	.word	0xbffdfff8
 800459c:	cccccccd 	.word	0xcccccccd
 80045a0:	40020000 	.word	0x40020000
 80045a4:	bffdfbf8 	.word	0xbffdfbf8
 80045a8:	40020400 	.word	0x40020400

080045ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ba:	e160      	b.n	800487e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	2101      	movs	r1, #1
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	4013      	ands	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8152 	beq.w	8004878 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d005      	beq.n	80045ec <HAL_GPIO_Init+0x40>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d130      	bne.n	800464e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	2203      	movs	r2, #3
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004622:	2201      	movs	r2, #1
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 0201 	and.w	r2, r3, #1
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b03      	cmp	r3, #3
 8004658:	d017      	beq.n	800468a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	2203      	movs	r2, #3
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d123      	bne.n	80046de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	08da      	lsrs	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3208      	adds	r2, #8
 800469e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	220f      	movs	r2, #15
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43db      	mvns	r3, r3
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4013      	ands	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	08da      	lsrs	r2, r3, #3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3208      	adds	r2, #8
 80046d8:	6939      	ldr	r1, [r7, #16]
 80046da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	2203      	movs	r2, #3
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4013      	ands	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0203 	and.w	r2, r3, #3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80ac 	beq.w	8004878 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004720:	4b5e      	ldr	r3, [pc, #376]	; (800489c <HAL_GPIO_Init+0x2f0>)
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	4a5d      	ldr	r2, [pc, #372]	; (800489c <HAL_GPIO_Init+0x2f0>)
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	6193      	str	r3, [r2, #24]
 800472c:	4b5b      	ldr	r3, [pc, #364]	; (800489c <HAL_GPIO_Init+0x2f0>)
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004738:	4a59      	ldr	r2, [pc, #356]	; (80048a0 <HAL_GPIO_Init+0x2f4>)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	3302      	adds	r3, #2
 8004740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	220f      	movs	r2, #15
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004762:	d025      	beq.n	80047b0 <HAL_GPIO_Init+0x204>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a4f      	ldr	r2, [pc, #316]	; (80048a4 <HAL_GPIO_Init+0x2f8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d01f      	beq.n	80047ac <HAL_GPIO_Init+0x200>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a4e      	ldr	r2, [pc, #312]	; (80048a8 <HAL_GPIO_Init+0x2fc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d019      	beq.n	80047a8 <HAL_GPIO_Init+0x1fc>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a4d      	ldr	r2, [pc, #308]	; (80048ac <HAL_GPIO_Init+0x300>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <HAL_GPIO_Init+0x1f8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a4c      	ldr	r2, [pc, #304]	; (80048b0 <HAL_GPIO_Init+0x304>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00d      	beq.n	80047a0 <HAL_GPIO_Init+0x1f4>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a4b      	ldr	r2, [pc, #300]	; (80048b4 <HAL_GPIO_Init+0x308>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <HAL_GPIO_Init+0x1f0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a4a      	ldr	r2, [pc, #296]	; (80048b8 <HAL_GPIO_Init+0x30c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d101      	bne.n	8004798 <HAL_GPIO_Init+0x1ec>
 8004794:	2306      	movs	r3, #6
 8004796:	e00c      	b.n	80047b2 <HAL_GPIO_Init+0x206>
 8004798:	2307      	movs	r3, #7
 800479a:	e00a      	b.n	80047b2 <HAL_GPIO_Init+0x206>
 800479c:	2305      	movs	r3, #5
 800479e:	e008      	b.n	80047b2 <HAL_GPIO_Init+0x206>
 80047a0:	2304      	movs	r3, #4
 80047a2:	e006      	b.n	80047b2 <HAL_GPIO_Init+0x206>
 80047a4:	2303      	movs	r3, #3
 80047a6:	e004      	b.n	80047b2 <HAL_GPIO_Init+0x206>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e002      	b.n	80047b2 <HAL_GPIO_Init+0x206>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_GPIO_Init+0x206>
 80047b0:	2300      	movs	r3, #0
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	f002 0203 	and.w	r2, r2, #3
 80047b8:	0092      	lsls	r2, r2, #2
 80047ba:	4093      	lsls	r3, r2
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047c2:	4937      	ldr	r1, [pc, #220]	; (80048a0 <HAL_GPIO_Init+0x2f4>)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	3302      	adds	r3, #2
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047d0:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <HAL_GPIO_Init+0x310>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	43db      	mvns	r3, r3
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80047f4:	4a31      	ldr	r2, [pc, #196]	; (80048bc <HAL_GPIO_Init+0x310>)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047fa:	4b30      	ldr	r3, [pc, #192]	; (80048bc <HAL_GPIO_Init+0x310>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	43db      	mvns	r3, r3
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4013      	ands	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800481e:	4a27      	ldr	r2, [pc, #156]	; (80048bc <HAL_GPIO_Init+0x310>)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004824:	4b25      	ldr	r3, [pc, #148]	; (80048bc <HAL_GPIO_Init+0x310>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	43db      	mvns	r3, r3
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4013      	ands	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004848:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <HAL_GPIO_Init+0x310>)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800484e:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <HAL_GPIO_Init+0x310>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	43db      	mvns	r3, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004872:	4a12      	ldr	r2, [pc, #72]	; (80048bc <HAL_GPIO_Init+0x310>)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3301      	adds	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	f47f ae97 	bne.w	80045bc <HAL_GPIO_Init+0x10>
  }
}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40021000 	.word	0x40021000
 80048a0:	40010000 	.word	0x40010000
 80048a4:	48000400 	.word	0x48000400
 80048a8:	48000800 	.word	0x48000800
 80048ac:	48000c00 	.word	0x48000c00
 80048b0:	48001000 	.word	0x48001000
 80048b4:	48001400 	.word	0x48001400
 80048b8:	48001800 	.word	0x48001800
 80048bc:	40010400 	.word	0x40010400

080048c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	807b      	strh	r3, [r7, #2]
 80048cc:	4613      	mov	r3, r2
 80048ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048d0:	787b      	ldrb	r3, [r7, #1]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048d6:	887a      	ldrh	r2, [r7, #2]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048dc:	e002      	b.n	80048e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048de:	887a      	ldrh	r2, [r7, #2]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004902:	887a      	ldrh	r2, [r7, #2]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4013      	ands	r3, r2
 8004908:	041a      	lsls	r2, r3, #16
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	43d9      	mvns	r1, r3
 800490e:	887b      	ldrh	r3, [r7, #2]
 8004910:	400b      	ands	r3, r1
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	619a      	str	r2, [r3, #24]
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004930:	695a      	ldr	r2, [r3, #20]
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	4013      	ands	r3, r2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d006      	beq.n	8004948 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800493a:	4a05      	ldr	r2, [pc, #20]	; (8004950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f806 	bl	8004954 <HAL_GPIO_EXTI_Callback>
  }
}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40010400 	.word	0x40010400

08004954 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e081      	b.n	8004a80 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7fd fc8d 	bl	80022b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2224      	movs	r2, #36	; 0x24
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d107      	bne.n	80049e4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049e0:	609a      	str	r2, [r3, #8]
 80049e2:	e006      	b.n	80049f2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80049f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d104      	bne.n	8004a04 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a02:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a16:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a26:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69d9      	ldr	r1, [r3, #28]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1a      	ldr	r2, [r3, #32]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0201 	orr.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	68f9      	ldr	r1, [r7, #12]
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
  }
}
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00f      	beq.n	8004afe <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	f043 0201 	orr.w	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004afc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00f      	beq.n	8004b28 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	f043 0208 	orr.w	r2, r3, #8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b26:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00f      	beq.n	8004b52 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b40:	f043 0202 	orr.w	r2, r3, #2
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b50:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 030b 	and.w	r3, r3, #11
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fb77 	bl	8005258 <I2C_ITError>
  }
}
 8004b6a:	bf00      	nop
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	70fb      	strb	r3, [r7, #3]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b086      	sub	sp, #24
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <I2C_Slave_ISR_IT+0x24>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e0e1      	b.n	8004dda <I2C_Slave_ISR_IT+0x1e8>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004c32:	6939      	ldr	r1, [r7, #16]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f9b5 	bl	8004fa4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d04b      	beq.n	8004cdc <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d046      	beq.n	8004cdc <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d128      	bne.n	8004caa <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b28      	cmp	r3, #40	; 0x28
 8004c62:	d108      	bne.n	8004c76 <I2C_Slave_ISR_IT+0x84>
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c6a:	d104      	bne.n	8004c76 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004c6c:	6939      	ldr	r1, [r7, #16]
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fa9e 	bl	80051b0 <I2C_ITListenCplt>
 8004c74:	e031      	b.n	8004cda <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b29      	cmp	r3, #41	; 0x29
 8004c80:	d10e      	bne.n	8004ca0 <I2C_Slave_ISR_IT+0xae>
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c88:	d00a      	beq.n	8004ca0 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2210      	movs	r2, #16
 8004c90:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 fbf7 	bl	8005486 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f926 	bl	8004eea <I2C_ITSlaveSeqCplt>
 8004c9e:	e01c      	b.n	8004cda <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004ca8:	e08f      	b.n	8004dca <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2210      	movs	r2, #16
 8004cb0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb6:	f043 0204 	orr.w	r2, r3, #4
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <I2C_Slave_ISR_IT+0xda>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cca:	d17e      	bne.n	8004dca <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 fac0 	bl	8005258 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004cd8:	e077      	b.n	8004dca <I2C_Slave_ISR_IT+0x1d8>
 8004cda:	e076      	b.n	8004dca <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d02f      	beq.n	8004d46 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02a      	beq.n	8004d46 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d018      	beq.n	8004d2c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d14b      	bne.n	8004dce <I2C_Slave_ISR_IT+0x1dc>
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d3c:	d047      	beq.n	8004dce <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f8d3 	bl	8004eea <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004d44:	e043      	b.n	8004dce <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d004      	beq.n	8004d64 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004d5a:	6939      	ldr	r1, [r7, #16]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f840 	bl	8004de2 <I2C_ITAddrCplt>
 8004d62:	e035      	b.n	8004dd0 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d030      	beq.n	8004dd0 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d02b      	beq.n	8004dd0 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d018      	beq.n	8004db4 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	851a      	strh	r2, [r3, #40]	; 0x28
 8004db2:	e00d      	b.n	8004dd0 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dba:	d002      	beq.n	8004dc2 <I2C_Slave_ISR_IT+0x1d0>
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f891 	bl	8004eea <I2C_ITSlaveSeqCplt>
 8004dc8:	e002      	b.n	8004dd0 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004dca:	bf00      	nop
 8004dcc:	e000      	b.n	8004dd0 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004dce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004df8:	2b28      	cmp	r3, #40	; 0x28
 8004dfa:	d16a      	bne.n	8004ed2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	0c1b      	lsrs	r3, r3, #16
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	0c1b      	lsrs	r3, r3, #16
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004e1a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e28:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004e36:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d138      	bne.n	8004eb2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004e40:	897b      	ldrh	r3, [r7, #10]
 8004e42:	09db      	lsrs	r3, r3, #7
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	89bb      	ldrh	r3, [r7, #12]
 8004e48:	4053      	eors	r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f003 0306 	and.w	r3, r3, #6
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d11c      	bne.n	8004e8e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004e54:	897b      	ldrh	r3, [r7, #10]
 8004e56:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d13b      	bne.n	8004ee2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2208      	movs	r2, #8
 8004e76:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e80:	89ba      	ldrh	r2, [r7, #12]
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fe87 	bl	8004b9a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e8c:	e029      	b.n	8004ee2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004e8e:	893b      	ldrh	r3, [r7, #8]
 8004e90:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fb37 	bl	800550a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ea4:	89ba      	ldrh	r2, [r7, #12]
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff fe75 	bl	8004b9a <HAL_I2C_AddrCallback>
}
 8004eb0:	e017      	b.n	8004ee2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fb27 	bl	800550a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ec4:	89ba      	ldrh	r2, [r7, #12]
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fe65 	bl	8004b9a <HAL_I2C_AddrCallback>
}
 8004ed0:	e007      	b.n	8004ee2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2208      	movs	r2, #8
 8004ed8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e00c      	b.n	8004f38 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f36:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b29      	cmp	r3, #41	; 0x29
 8004f42:	d112      	bne.n	8004f6a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2228      	movs	r2, #40	; 0x28
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2221      	movs	r2, #33	; 0x21
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f52:	2101      	movs	r1, #1
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fad8 	bl	800550a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fe05 	bl	8004b72 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f68:	e017      	b.n	8004f9a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b2a      	cmp	r3, #42	; 0x2a
 8004f74:	d111      	bne.n	8004f9a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2228      	movs	r2, #40	; 0x28
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2222      	movs	r2, #34	; 0x22
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004f84:	2102      	movs	r1, #2
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fabf 	bl	800550a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff fdf6 	bl	8004b86 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f9a:	bf00      	nop
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b21      	cmp	r3, #33	; 0x21
 8004fce:	d002      	beq.n	8004fd6 <I2C_ITSlaveCplt+0x32>
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b29      	cmp	r3, #41	; 0x29
 8004fd4:	d108      	bne.n	8004fe8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004fd6:	f248 0101 	movw	r1, #32769	; 0x8001
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fa95 	bl	800550a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2221      	movs	r2, #33	; 0x21
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8004fe6:	e00d      	b.n	8005004 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b22      	cmp	r3, #34	; 0x22
 8004fec:	d002      	beq.n	8004ff4 <I2C_ITSlaveCplt+0x50>
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ff2:	d107      	bne.n	8005004 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004ff4:	f248 0102 	movw	r1, #32770	; 0x8002
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fa86 	bl	800550a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2222      	movs	r2, #34	; 0x22
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005012:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6859      	ldr	r1, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b62      	ldr	r3, [pc, #392]	; (80051a8 <I2C_ITSlaveCplt+0x204>)
 8005020:	400b      	ands	r3, r1
 8005022:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fa2e 	bl	8005486 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d013      	beq.n	800505c <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005042:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01f      	beq.n	800508c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	b29a      	uxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	855a      	strh	r2, [r3, #42]	; 0x2a
 800505a:	e017      	b.n	800508c <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d012      	beq.n	800508c <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005074:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d006      	beq.n	800508c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	b29a      	uxth	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	d020      	beq.n	80050d8 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00c      	beq.n	80050d8 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e6:	f043 0204 	orr.w	r2, r3, #4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005100:	2b00      	cmp	r3, #0
 8005102:	d010      	beq.n	8005126 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005108:	4619      	mov	r1, r3
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f8a4 	bl	8005258 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b28      	cmp	r3, #40	; 0x28
 800511a:	d141      	bne.n	80051a0 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800511c:	6979      	ldr	r1, [r7, #20]
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f846 	bl	80051b0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005124:	e03c      	b.n	80051a0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800512e:	d014      	beq.n	800515a <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff feda 	bl	8004eea <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <I2C_ITSlaveCplt+0x208>)
 800513a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff fd2f 	bl	8004bb6 <HAL_I2C_ListenCpltCallback>
}
 8005158:	e022      	b.n	80051a0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b22      	cmp	r3, #34	; 0x22
 8005164:	d10e      	bne.n	8005184 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fd02 	bl	8004b86 <HAL_I2C_SlaveRxCpltCallback>
}
 8005182:	e00d      	b.n	80051a0 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fce9 	bl	8004b72 <HAL_I2C_SlaveTxCpltCallback>
}
 80051a0:	bf00      	nop
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	fe00e800 	.word	0xfe00e800
 80051ac:	ffff0000 	.word	0xffff0000

080051b0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a25      	ldr	r2, [pc, #148]	; (8005254 <I2C_ITListenCplt+0xa4>)
 80051be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d022      	beq.n	800522c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	d012      	beq.n	800522c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005224:	f043 0204 	orr.w	r2, r3, #4
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800522c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f96a 	bl	800550a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2210      	movs	r2, #16
 800523c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff fcb5 	bl	8004bb6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800524c:	bf00      	nop
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	ffff0000 	.word	0xffff0000

08005258 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005268:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a6d      	ldr	r2, [pc, #436]	; (800542c <I2C_ITError+0x1d4>)
 8005276:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b28      	cmp	r3, #40	; 0x28
 800528e:	d005      	beq.n	800529c <I2C_ITError+0x44>
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	2b29      	cmp	r3, #41	; 0x29
 8005294:	d002      	beq.n	800529c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	2b2a      	cmp	r3, #42	; 0x2a
 800529a:	d10b      	bne.n	80052b4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800529c:	2103      	movs	r1, #3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f933 	bl	800550a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2228      	movs	r2, #40	; 0x28
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a60      	ldr	r2, [pc, #384]	; (8005430 <I2C_ITError+0x1d8>)
 80052b0:	635a      	str	r2, [r3, #52]	; 0x34
 80052b2:	e030      	b.n	8005316 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80052b4:	f248 0103 	movw	r1, #32771	; 0x8003
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f926 	bl	800550a <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f8e1 	bl	8005486 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b60      	cmp	r3, #96	; 0x60
 80052ce:	d01f      	beq.n	8005310 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d114      	bne.n	8005310 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d109      	bne.n	8005308 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2210      	movs	r2, #16
 80052fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005300:	f043 0204 	orr.w	r2, r3, #4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2220      	movs	r2, #32
 800530e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	2b00      	cmp	r3, #0
 8005322:	d039      	beq.n	8005398 <I2C_ITError+0x140>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b11      	cmp	r3, #17
 8005328:	d002      	beq.n	8005330 <I2C_ITError+0xd8>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b21      	cmp	r3, #33	; 0x21
 800532e:	d133      	bne.n	8005398 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800533e:	d107      	bne.n	8005350 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800534e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff f8e0 	bl	800451a <HAL_DMA_GetState>
 800535a:	4603      	mov	r3, r0
 800535c:	2b01      	cmp	r3, #1
 800535e:	d017      	beq.n	8005390 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	4a33      	ldr	r2, [pc, #204]	; (8005434 <I2C_ITError+0x1dc>)
 8005366:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	4618      	mov	r0, r3
 8005376:	f7fe ffef 	bl	8004358 <HAL_DMA_Abort_IT>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d04d      	beq.n	800541c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800538a:	4610      	mov	r0, r2
 800538c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800538e:	e045      	b.n	800541c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f851 	bl	8005438 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005396:	e041      	b.n	800541c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539c:	2b00      	cmp	r3, #0
 800539e:	d039      	beq.n	8005414 <I2C_ITError+0x1bc>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b12      	cmp	r3, #18
 80053a4:	d002      	beq.n	80053ac <I2C_ITError+0x154>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b22      	cmp	r3, #34	; 0x22
 80053aa:	d133      	bne.n	8005414 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ba:	d107      	bne.n	80053cc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff f8a2 	bl	800451a <HAL_DMA_GetState>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d017      	beq.n	800540c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e0:	4a14      	ldr	r2, [pc, #80]	; (8005434 <I2C_ITError+0x1dc>)
 80053e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fe ffb1 	bl	8004358 <HAL_DMA_Abort_IT>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d011      	beq.n	8005420 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005406:	4610      	mov	r0, r2
 8005408:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800540a:	e009      	b.n	8005420 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f813 	bl	8005438 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005412:	e005      	b.n	8005420 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f80f 	bl	8005438 <I2C_TreatErrorCallback>
  }
}
 800541a:	e002      	b.n	8005422 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800541c:	bf00      	nop
 800541e:	e000      	b.n	8005422 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005420:	bf00      	nop
}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	ffff0000 	.word	0xffff0000
 8005430:	08004bf3 	.word	0x08004bf3
 8005434:	080054cf 	.word	0x080054cf

08005438 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b60      	cmp	r3, #96	; 0x60
 800544a:	d10e      	bne.n	800546a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff fbbb 	bl	8004bde <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005468:	e009      	b.n	800547e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff fba6 	bl	8004bca <HAL_I2C_ErrorCallback>
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b02      	cmp	r3, #2
 800549a:	d103      	bne.n	80054a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2200      	movs	r2, #0
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d007      	beq.n	80054c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699a      	ldr	r2, [r3, #24]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0201 	orr.w	r2, r2, #1
 80054c0:	619a      	str	r2, [r3, #24]
  }
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	2200      	movs	r2, #0
 80054ea:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f8:	2200      	movs	r2, #0
 80054fa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff ff9b 	bl	8005438 <I2C_TreatErrorCallback>
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800550a:	b480      	push	{r7}
 800550c:	b085      	sub	sp, #20
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800551a:	887b      	ldrh	r3, [r7, #2]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00f      	beq.n	8005544 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800552a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005538:	2b28      	cmp	r3, #40	; 0x28
 800553a:	d003      	beq.n	8005544 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005542:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005544:	887b      	ldrh	r3, [r7, #2]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00f      	beq.n	800556e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005554:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005562:	2b28      	cmp	r3, #40	; 0x28
 8005564:	d003      	beq.n	800556e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800556c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800556e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005572:	2b00      	cmp	r3, #0
 8005574:	da03      	bge.n	800557e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800557c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800557e:	887b      	ldrh	r3, [r7, #2]
 8005580:	2b10      	cmp	r3, #16
 8005582:	d103      	bne.n	800558c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800558a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800558c:	887b      	ldrh	r3, [r7, #2]
 800558e:	2b20      	cmp	r3, #32
 8005590:	d103      	bne.n	800559a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f043 0320 	orr.w	r3, r3, #32
 8005598:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800559a:	887b      	ldrh	r3, [r7, #2]
 800559c:	2b40      	cmp	r3, #64	; 0x40
 800559e:	d103      	bne.n	80055a8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055a6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6819      	ldr	r1, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	43da      	mvns	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	400a      	ands	r2, r1
 80055b8:	601a      	str	r2, [r3, #0]
}
 80055ba:	bf00      	nop
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d138      	bne.n	800564e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e032      	b.n	8005650 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2224      	movs	r2, #36	; 0x24
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005618:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6819      	ldr	r1, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0201 	orr.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	e000      	b.n	8005650 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800564e:	2302      	movs	r3, #2
  }
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b20      	cmp	r3, #32
 8005670:	d139      	bne.n	80056e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800567c:	2302      	movs	r3, #2
 800567e:	e033      	b.n	80056e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2224      	movs	r2, #36	; 0x24
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e000      	b.n	80056e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
  }
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005700:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005704:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800570a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	f001 b83a 	b.w	800678e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800571a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800571e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 816f 	beq.w	8005a0e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005730:	4bb5      	ldr	r3, [pc, #724]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b04      	cmp	r3, #4
 800573a:	d00c      	beq.n	8005756 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800573c:	4bb2      	ldr	r3, [pc, #712]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 030c 	and.w	r3, r3, #12
 8005744:	2b08      	cmp	r3, #8
 8005746:	d15c      	bne.n	8005802 <HAL_RCC_OscConfig+0x10e>
 8005748:	4baf      	ldr	r3, [pc, #700]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005754:	d155      	bne.n	8005802 <HAL_RCC_OscConfig+0x10e>
 8005756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800575a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005762:	fa93 f3a3 	rbit	r3, r3
 8005766:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800576a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800576e:	fab3 f383 	clz	r3, r3
 8005772:	b2db      	uxtb	r3, r3
 8005774:	095b      	lsrs	r3, r3, #5
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b01      	cmp	r3, #1
 8005780:	d102      	bne.n	8005788 <HAL_RCC_OscConfig+0x94>
 8005782:	4ba1      	ldr	r3, [pc, #644]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	e015      	b.n	80057b4 <HAL_RCC_OscConfig+0xc0>
 8005788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800578c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005790:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005794:	fa93 f3a3 	rbit	r3, r3
 8005798:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800579c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80057a4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80057a8:	fa93 f3a3 	rbit	r3, r3
 80057ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80057b0:	4b95      	ldr	r3, [pc, #596]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057b8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80057bc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80057c0:	fa92 f2a2 	rbit	r2, r2
 80057c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80057c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80057cc:	fab2 f282 	clz	r2, r2
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	f042 0220 	orr.w	r2, r2, #32
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	f002 021f 	and.w	r2, r2, #31
 80057dc:	2101      	movs	r1, #1
 80057de:	fa01 f202 	lsl.w	r2, r1, r2
 80057e2:	4013      	ands	r3, r2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8111 	beq.w	8005a0c <HAL_RCC_OscConfig+0x318>
 80057ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f040 8108 	bne.w	8005a0c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	f000 bfc6 	b.w	800678e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005806:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005812:	d106      	bne.n	8005822 <HAL_RCC_OscConfig+0x12e>
 8005814:	4b7c      	ldr	r3, [pc, #496]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a7b      	ldr	r2, [pc, #492]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 800581a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	e036      	b.n	8005890 <HAL_RCC_OscConfig+0x19c>
 8005822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005826:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10c      	bne.n	800584c <HAL_RCC_OscConfig+0x158>
 8005832:	4b75      	ldr	r3, [pc, #468]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a74      	ldr	r2, [pc, #464]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 8005838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	4b72      	ldr	r3, [pc, #456]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a71      	ldr	r2, [pc, #452]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 8005844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	e021      	b.n	8005890 <HAL_RCC_OscConfig+0x19c>
 800584c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005850:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800585c:	d10c      	bne.n	8005878 <HAL_RCC_OscConfig+0x184>
 800585e:	4b6a      	ldr	r3, [pc, #424]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a69      	ldr	r2, [pc, #420]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 8005864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	4b67      	ldr	r3, [pc, #412]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a66      	ldr	r2, [pc, #408]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 8005870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e00b      	b.n	8005890 <HAL_RCC_OscConfig+0x19c>
 8005878:	4b63      	ldr	r3, [pc, #396]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a62      	ldr	r2, [pc, #392]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 800587e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	4b60      	ldr	r3, [pc, #384]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a5f      	ldr	r2, [pc, #380]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 800588a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800588e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005894:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d059      	beq.n	8005954 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a0:	f7fd f83c 	bl	800291c <HAL_GetTick>
 80058a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058a8:	e00a      	b.n	80058c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058aa:	f7fd f837 	bl	800291c <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	; 0x64
 80058b8:	d902      	bls.n	80058c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	f000 bf67 	b.w	800678e <HAL_RCC_OscConfig+0x109a>
 80058c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058c4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80058cc:	fa93 f3a3 	rbit	r3, r3
 80058d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80058d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d8:	fab3 f383 	clz	r3, r3
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d102      	bne.n	80058f2 <HAL_RCC_OscConfig+0x1fe>
 80058ec:	4b46      	ldr	r3, [pc, #280]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	e015      	b.n	800591e <HAL_RCC_OscConfig+0x22a>
 80058f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80058fe:	fa93 f3a3 	rbit	r3, r3
 8005902:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005906:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800590a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800590e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8005912:	fa93 f3a3 	rbit	r3, r3
 8005916:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800591a:	4b3b      	ldr	r3, [pc, #236]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005922:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005926:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800592a:	fa92 f2a2 	rbit	r2, r2
 800592e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8005932:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005936:	fab2 f282 	clz	r2, r2
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	f042 0220 	orr.w	r2, r2, #32
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	f002 021f 	and.w	r2, r2, #31
 8005946:	2101      	movs	r1, #1
 8005948:	fa01 f202 	lsl.w	r2, r1, r2
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ab      	beq.n	80058aa <HAL_RCC_OscConfig+0x1b6>
 8005952:	e05c      	b.n	8005a0e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fc ffe2 	bl	800291c <HAL_GetTick>
 8005958:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800595c:	e00a      	b.n	8005974 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800595e:	f7fc ffdd 	bl	800291c <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b64      	cmp	r3, #100	; 0x64
 800596c:	d902      	bls.n	8005974 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	f000 bf0d 	b.w	800678e <HAL_RCC_OscConfig+0x109a>
 8005974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005978:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005980:	fa93 f3a3 	rbit	r3, r3
 8005984:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005988:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800598c:	fab3 f383 	clz	r3, r3
 8005990:	b2db      	uxtb	r3, r3
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	d102      	bne.n	80059a6 <HAL_RCC_OscConfig+0x2b2>
 80059a0:	4b19      	ldr	r3, [pc, #100]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	e015      	b.n	80059d2 <HAL_RCC_OscConfig+0x2de>
 80059a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80059b2:	fa93 f3a3 	rbit	r3, r3
 80059b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80059ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80059c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80059ce:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <HAL_RCC_OscConfig+0x314>)
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059d6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80059da:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80059de:	fa92 f2a2 	rbit	r2, r2
 80059e2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80059e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80059ea:	fab2 f282 	clz	r2, r2
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	f042 0220 	orr.w	r2, r2, #32
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	f002 021f 	and.w	r2, r2, #31
 80059fa:	2101      	movs	r1, #1
 80059fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1ab      	bne.n	800595e <HAL_RCC_OscConfig+0x26a>
 8005a06:	e002      	b.n	8005a0e <HAL_RCC_OscConfig+0x31a>
 8005a08:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 817f 	beq.w	8005d22 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005a24:	4ba7      	ldr	r3, [pc, #668]	; (8005cc4 <HAL_RCC_OscConfig+0x5d0>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 030c 	and.w	r3, r3, #12
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00c      	beq.n	8005a4a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005a30:	4ba4      	ldr	r3, [pc, #656]	; (8005cc4 <HAL_RCC_OscConfig+0x5d0>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 030c 	and.w	r3, r3, #12
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d173      	bne.n	8005b24 <HAL_RCC_OscConfig+0x430>
 8005a3c:	4ba1      	ldr	r3, [pc, #644]	; (8005cc4 <HAL_RCC_OscConfig+0x5d0>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a48:	d16c      	bne.n	8005b24 <HAL_RCC_OscConfig+0x430>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a50:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005a54:	fa93 f3a3 	rbit	r3, r3
 8005a58:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005a5c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a60:	fab3 f383 	clz	r3, r3
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d102      	bne.n	8005a7a <HAL_RCC_OscConfig+0x386>
 8005a74:	4b93      	ldr	r3, [pc, #588]	; (8005cc4 <HAL_RCC_OscConfig+0x5d0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	e013      	b.n	8005aa2 <HAL_RCC_OscConfig+0x3ae>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a80:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005a84:	fa93 f3a3 	rbit	r3, r3
 8005a88:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005a92:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005a96:	fa93 f3a3 	rbit	r3, r3
 8005a9a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005a9e:	4b89      	ldr	r3, [pc, #548]	; (8005cc4 <HAL_RCC_OscConfig+0x5d0>)
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005aa8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005aac:	fa92 f2a2 	rbit	r2, r2
 8005ab0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8005ab4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005ab8:	fab2 f282 	clz	r2, r2
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	f042 0220 	orr.w	r2, r2, #32
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	f002 021f 	and.w	r2, r2, #31
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f202 	lsl.w	r2, r1, r2
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <HAL_RCC_OscConfig+0x3f6>
 8005ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ad8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d002      	beq.n	8005aea <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f000 be52 	b.w	800678e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aea:	4b76      	ldr	r3, [pc, #472]	; (8005cc4 <HAL_RCC_OscConfig+0x5d0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005af6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	21f8      	movs	r1, #248	; 0xf8
 8005b00:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b04:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8005b08:	fa91 f1a1 	rbit	r1, r1
 8005b0c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8005b10:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005b14:	fab1 f181 	clz	r1, r1
 8005b18:	b2c9      	uxtb	r1, r1
 8005b1a:	408b      	lsls	r3, r1
 8005b1c:	4969      	ldr	r1, [pc, #420]	; (8005cc4 <HAL_RCC_OscConfig+0x5d0>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b22:	e0fe      	b.n	8005d22 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8088 	beq.w	8005c46 <HAL_RCC_OscConfig+0x552>
 8005b36:	2301      	movs	r3, #1
 8005b38:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005b40:	fa93 f3a3 	rbit	r3, r3
 8005b44:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005b48:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b4c:	fab3 f383 	clz	r3, r3
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2301      	movs	r3, #1
 8005b60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b62:	f7fc fedb 	bl	800291c <HAL_GetTick>
 8005b66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b6c:	f7fc fed6 	bl	800291c <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d902      	bls.n	8005b82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	f000 be06 	b.w	800678e <HAL_RCC_OscConfig+0x109a>
 8005b82:	2302      	movs	r3, #2
 8005b84:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b88:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b8c:	fa93 f3a3 	rbit	r3, r3
 8005b90:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005b94:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b98:	fab3 f383 	clz	r3, r3
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d102      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x4be>
 8005bac:	4b45      	ldr	r3, [pc, #276]	; (8005cc4 <HAL_RCC_OscConfig+0x5d0>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	e013      	b.n	8005bda <HAL_RCC_OscConfig+0x4e6>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005bbc:	fa93 f3a3 	rbit	r3, r3
 8005bc0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005bca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005bce:	fa93 f3a3 	rbit	r3, r3
 8005bd2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005bd6:	4b3b      	ldr	r3, [pc, #236]	; (8005cc4 <HAL_RCC_OscConfig+0x5d0>)
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005be0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005be4:	fa92 f2a2 	rbit	r2, r2
 8005be8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005bec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005bf0:	fab2 f282 	clz	r2, r2
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	f042 0220 	orr.w	r2, r2, #32
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	f002 021f 	and.w	r2, r2, #31
 8005c00:	2101      	movs	r1, #1
 8005c02:	fa01 f202 	lsl.w	r2, r1, r2
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0af      	beq.n	8005b6c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c0c:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <HAL_RCC_OscConfig+0x5d0>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	21f8      	movs	r1, #248	; 0xf8
 8005c22:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c26:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005c2a:	fa91 f1a1 	rbit	r1, r1
 8005c2e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005c32:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005c36:	fab1 f181 	clz	r1, r1
 8005c3a:	b2c9      	uxtb	r1, r1
 8005c3c:	408b      	lsls	r3, r1
 8005c3e:	4921      	ldr	r1, [pc, #132]	; (8005cc4 <HAL_RCC_OscConfig+0x5d0>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	600b      	str	r3, [r1, #0]
 8005c44:	e06d      	b.n	8005d22 <HAL_RCC_OscConfig+0x62e>
 8005c46:	2301      	movs	r3, #1
 8005c48:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005c50:	fa93 f3a3 	rbit	r3, r3
 8005c54:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005c58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c5c:	fab3 f383 	clz	r3, r3
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	2300      	movs	r3, #0
 8005c70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c72:	f7fc fe53 	bl	800291c <HAL_GetTick>
 8005c76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c7a:	e00a      	b.n	8005c92 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c7c:	f7fc fe4e 	bl	800291c <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d902      	bls.n	8005c92 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	f000 bd7e 	b.w	800678e <HAL_RCC_OscConfig+0x109a>
 8005c92:	2302      	movs	r3, #2
 8005c94:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c9c:	fa93 f3a3 	rbit	r3, r3
 8005ca0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005ca4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ca8:	fab3 f383 	clz	r3, r3
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d105      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x5d4>
 8005cbc:	4b01      	ldr	r3, [pc, #4]	; (8005cc4 <HAL_RCC_OscConfig+0x5d0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	e016      	b.n	8005cf0 <HAL_RCC_OscConfig+0x5fc>
 8005cc2:	bf00      	nop
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	2302      	movs	r3, #2
 8005cca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd2:	fa93 f3a3 	rbit	r3, r3
 8005cd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005cda:	2302      	movs	r3, #2
 8005cdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ce4:	fa93 f3a3 	rbit	r3, r3
 8005ce8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005cec:	4bbf      	ldr	r3, [pc, #764]	; (8005fec <HAL_RCC_OscConfig+0x8f8>)
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005cf6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005cfa:	fa92 f2a2 	rbit	r2, r2
 8005cfe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8005d02:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005d06:	fab2 f282 	clz	r2, r2
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	f042 0220 	orr.w	r2, r2, #32
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	f002 021f 	and.w	r2, r2, #31
 8005d16:	2101      	movs	r1, #1
 8005d18:	fa01 f202 	lsl.w	r2, r1, r2
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1ac      	bne.n	8005c7c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8113 	beq.w	8005f5e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d07c      	beq.n	8005e42 <HAL_RCC_OscConfig+0x74e>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d52:	fa93 f3a3 	rbit	r3, r3
 8005d56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005d5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d5e:	fab3 f383 	clz	r3, r3
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	4ba2      	ldr	r3, [pc, #648]	; (8005ff0 <HAL_RCC_OscConfig+0x8fc>)
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	2301      	movs	r3, #1
 8005d70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d72:	f7fc fdd3 	bl	800291c <HAL_GetTick>
 8005d76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d7a:	e00a      	b.n	8005d92 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d7c:	f7fc fdce 	bl	800291c <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d902      	bls.n	8005d92 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	f000 bcfe 	b.w	800678e <HAL_RCC_OscConfig+0x109a>
 8005d92:	2302      	movs	r3, #2
 8005d94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9c:	fa93 f2a3 	rbit	r2, r3
 8005da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005da4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db2:	2202      	movs	r2, #2
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	fa93 f2a3 	rbit	r2, r3
 8005dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	fa93 f2a3 	rbit	r2, r3
 8005de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005df0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005df2:	4b7e      	ldr	r3, [pc, #504]	; (8005fec <HAL_RCC_OscConfig+0x8f8>)
 8005df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dfa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005dfe:	2102      	movs	r1, #2
 8005e00:	6019      	str	r1, [r3, #0]
 8005e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	fa93 f1a3 	rbit	r1, r3
 8005e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e18:	6019      	str	r1, [r3, #0]
  return result;
 8005e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	fab3 f383 	clz	r3, r3
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f003 031f 	and.w	r3, r3, #31
 8005e34:	2101      	movs	r1, #1
 8005e36:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d09d      	beq.n	8005d7c <HAL_RCC_OscConfig+0x688>
 8005e40:	e08d      	b.n	8005f5e <HAL_RCC_OscConfig+0x86a>
 8005e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e52:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	fa93 f2a3 	rbit	r2, r3
 8005e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e60:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005e64:	601a      	str	r2, [r3, #0]
  return result;
 8005e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005e6e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e70:	fab3 f383 	clz	r3, r3
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	4b5d      	ldr	r3, [pc, #372]	; (8005ff0 <HAL_RCC_OscConfig+0x8fc>)
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	461a      	mov	r2, r3
 8005e80:	2300      	movs	r3, #0
 8005e82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e84:	f7fc fd4a 	bl	800291c <HAL_GetTick>
 8005e88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e8c:	e00a      	b.n	8005ea4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e8e:	f7fc fd45 	bl	800291c <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d902      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	f000 bc75 	b.w	800678e <HAL_RCC_OscConfig+0x109a>
 8005ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ea8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005eac:	2202      	movs	r2, #2
 8005eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005eb4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	fa93 f2a3 	rbit	r2, r3
 8005ebe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ec2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ecc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	fa93 f2a3 	rbit	r2, r3
 8005ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ef0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005efc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	fa93 f2a3 	rbit	r2, r3
 8005f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f0a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f0e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f10:	4b36      	ldr	r3, [pc, #216]	; (8005fec <HAL_RCC_OscConfig+0x8f8>)
 8005f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f18:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005f1c:	2102      	movs	r1, #2
 8005f1e:	6019      	str	r1, [r3, #0]
 8005f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	fa93 f1a3 	rbit	r1, r3
 8005f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f32:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005f36:	6019      	str	r1, [r3, #0]
  return result;
 8005f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	fab3 f383 	clz	r3, r3
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f003 031f 	and.w	r3, r3, #31
 8005f52:	2101      	movs	r1, #1
 8005f54:	fa01 f303 	lsl.w	r3, r1, r3
 8005f58:	4013      	ands	r3, r2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d197      	bne.n	8005e8e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 81a5 	beq.w	80062be <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f74:	2300      	movs	r3, #0
 8005f76:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f7a:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <HAL_RCC_OscConfig+0x8f8>)
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d116      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f86:	4b19      	ldr	r3, [pc, #100]	; (8005fec <HAL_RCC_OscConfig+0x8f8>)
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_RCC_OscConfig+0x8f8>)
 8005f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f90:	61d3      	str	r3, [r2, #28]
 8005f92:	4b16      	ldr	r3, [pc, #88]	; (8005fec <HAL_RCC_OscConfig+0x8f8>)
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <HAL_RCC_OscConfig+0x900>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d121      	bne.n	8006004 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <HAL_RCC_OscConfig+0x900>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a0b      	ldr	r2, [pc, #44]	; (8005ff4 <HAL_RCC_OscConfig+0x900>)
 8005fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fcc:	f7fc fca6 	bl	800291c <HAL_GetTick>
 8005fd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd4:	e010      	b.n	8005ff8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd6:	f7fc fca1 	bl	800291c <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b64      	cmp	r3, #100	; 0x64
 8005fe4:	d908      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e3d1      	b.n	800678e <HAL_RCC_OscConfig+0x109a>
 8005fea:	bf00      	nop
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	10908120 	.word	0x10908120
 8005ff4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff8:	4b8d      	ldr	r3, [pc, #564]	; (8006230 <HAL_RCC_OscConfig+0xb3c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0e8      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006008:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d106      	bne.n	8006022 <HAL_RCC_OscConfig+0x92e>
 8006014:	4b87      	ldr	r3, [pc, #540]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	4a86      	ldr	r2, [pc, #536]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	6213      	str	r3, [r2, #32]
 8006020:	e035      	b.n	800608e <HAL_RCC_OscConfig+0x99a>
 8006022:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006026:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10c      	bne.n	800604c <HAL_RCC_OscConfig+0x958>
 8006032:	4b80      	ldr	r3, [pc, #512]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	4a7f      	ldr	r2, [pc, #508]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	6213      	str	r3, [r2, #32]
 800603e:	4b7d      	ldr	r3, [pc, #500]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	4a7c      	ldr	r2, [pc, #496]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 8006044:	f023 0304 	bic.w	r3, r3, #4
 8006048:	6213      	str	r3, [r2, #32]
 800604a:	e020      	b.n	800608e <HAL_RCC_OscConfig+0x99a>
 800604c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006050:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2b05      	cmp	r3, #5
 800605a:	d10c      	bne.n	8006076 <HAL_RCC_OscConfig+0x982>
 800605c:	4b75      	ldr	r3, [pc, #468]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	4a74      	ldr	r2, [pc, #464]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 8006062:	f043 0304 	orr.w	r3, r3, #4
 8006066:	6213      	str	r3, [r2, #32]
 8006068:	4b72      	ldr	r3, [pc, #456]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	4a71      	ldr	r2, [pc, #452]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 800606e:	f043 0301 	orr.w	r3, r3, #1
 8006072:	6213      	str	r3, [r2, #32]
 8006074:	e00b      	b.n	800608e <HAL_RCC_OscConfig+0x99a>
 8006076:	4b6f      	ldr	r3, [pc, #444]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	4a6e      	ldr	r2, [pc, #440]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 800607c:	f023 0301 	bic.w	r3, r3, #1
 8006080:	6213      	str	r3, [r2, #32]
 8006082:	4b6c      	ldr	r3, [pc, #432]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	4a6b      	ldr	r2, [pc, #428]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 8006088:	f023 0304 	bic.w	r3, r3, #4
 800608c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800608e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006092:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8081 	beq.w	80061a2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a0:	f7fc fc3c 	bl	800291c <HAL_GetTick>
 80060a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a8:	e00b      	b.n	80060c2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060aa:	f7fc fc37 	bl	800291c <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e365      	b.n	800678e <HAL_RCC_OscConfig+0x109a>
 80060c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80060ca:	2202      	movs	r2, #2
 80060cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	fa93 f2a3 	rbit	r2, r3
 80060dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80060ee:	2202      	movs	r2, #2
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	fa93 f2a3 	rbit	r2, r3
 8006100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006104:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006108:	601a      	str	r2, [r3, #0]
  return result;
 800610a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800610e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006112:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006114:	fab3 f383 	clz	r3, r3
 8006118:	b2db      	uxtb	r3, r3
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f043 0302 	orr.w	r3, r3, #2
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d102      	bne.n	800612e <HAL_RCC_OscConfig+0xa3a>
 8006128:	4b42      	ldr	r3, [pc, #264]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	e013      	b.n	8006156 <HAL_RCC_OscConfig+0xa62>
 800612e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006132:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006136:	2202      	movs	r2, #2
 8006138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800613e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	fa93 f2a3 	rbit	r2, r3
 8006148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800614c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	4b38      	ldr	r3, [pc, #224]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800615a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800615e:	2102      	movs	r1, #2
 8006160:	6011      	str	r1, [r2, #0]
 8006162:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006166:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	fa92 f1a2 	rbit	r1, r2
 8006170:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006174:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8006178:	6011      	str	r1, [r2, #0]
  return result;
 800617a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800617e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8006182:	6812      	ldr	r2, [r2, #0]
 8006184:	fab2 f282 	clz	r2, r2
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	f002 021f 	and.w	r2, r2, #31
 8006194:	2101      	movs	r1, #1
 8006196:	fa01 f202 	lsl.w	r2, r1, r2
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d084      	beq.n	80060aa <HAL_RCC_OscConfig+0x9b6>
 80061a0:	e083      	b.n	80062aa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a2:	f7fc fbbb 	bl	800291c <HAL_GetTick>
 80061a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061aa:	e00b      	b.n	80061c4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061ac:	f7fc fbb6 	bl	800291c <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061bc:	4293      	cmp	r3, r2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e2e4      	b.n	800678e <HAL_RCC_OscConfig+0x109a>
 80061c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80061cc:	2202      	movs	r2, #2
 80061ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	fa93 f2a3 	rbit	r2, r3
 80061de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80061f0:	2202      	movs	r2, #2
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	fa93 f2a3 	rbit	r2, r3
 8006202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006206:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800620a:	601a      	str	r2, [r3, #0]
  return result;
 800620c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006210:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006214:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006216:	fab3 f383 	clz	r3, r3
 800621a:	b2db      	uxtb	r3, r3
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f043 0302 	orr.w	r3, r3, #2
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d106      	bne.n	8006238 <HAL_RCC_OscConfig+0xb44>
 800622a:	4b02      	ldr	r3, [pc, #8]	; (8006234 <HAL_RCC_OscConfig+0xb40>)
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	e017      	b.n	8006260 <HAL_RCC_OscConfig+0xb6c>
 8006230:	40007000 	.word	0x40007000
 8006234:	40021000 	.word	0x40021000
 8006238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800623c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006240:	2202      	movs	r2, #2
 8006242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006248:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	fa93 f2a3 	rbit	r2, r3
 8006252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006256:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	4bb3      	ldr	r3, [pc, #716]	; (800652c <HAL_RCC_OscConfig+0xe38>)
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006264:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006268:	2102      	movs	r1, #2
 800626a:	6011      	str	r1, [r2, #0]
 800626c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006270:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006274:	6812      	ldr	r2, [r2, #0]
 8006276:	fa92 f1a2 	rbit	r1, r2
 800627a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800627e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8006282:	6011      	str	r1, [r2, #0]
  return result;
 8006284:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006288:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	fab2 f282 	clz	r2, r2
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	f002 021f 	and.w	r2, r2, #31
 800629e:	2101      	movs	r1, #1
 80062a0:	fa01 f202 	lsl.w	r2, r1, r2
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d180      	bne.n	80061ac <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062aa:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d105      	bne.n	80062be <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b2:	4b9e      	ldr	r3, [pc, #632]	; (800652c <HAL_RCC_OscConfig+0xe38>)
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	4a9d      	ldr	r2, [pc, #628]	; (800652c <HAL_RCC_OscConfig+0xe38>)
 80062b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062bc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 825e 	beq.w	800678c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062d0:	4b96      	ldr	r3, [pc, #600]	; (800652c <HAL_RCC_OscConfig+0xe38>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f003 030c 	and.w	r3, r3, #12
 80062d8:	2b08      	cmp	r3, #8
 80062da:	f000 821f 	beq.w	800671c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	f040 8170 	bne.w	80065d0 <HAL_RCC_OscConfig+0xedc>
 80062f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80062f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006302:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	fa93 f2a3 	rbit	r2, r3
 800630c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006310:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006314:	601a      	str	r2, [r3, #0]
  return result;
 8006316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800631a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800631e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006320:	fab3 f383 	clz	r3, r3
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800632a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	461a      	mov	r2, r3
 8006332:	2300      	movs	r3, #0
 8006334:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006336:	f7fc faf1 	bl	800291c <HAL_GetTick>
 800633a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800633e:	e009      	b.n	8006354 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006340:	f7fc faec 	bl	800291c <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e21c      	b.n	800678e <HAL_RCC_OscConfig+0x109a>
 8006354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006358:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800635c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006366:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	fa93 f2a3 	rbit	r2, r3
 8006370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006374:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006378:	601a      	str	r2, [r3, #0]
  return result;
 800637a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800637e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006382:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006384:	fab3 f383 	clz	r3, r3
 8006388:	b2db      	uxtb	r3, r3
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d102      	bne.n	800639e <HAL_RCC_OscConfig+0xcaa>
 8006398:	4b64      	ldr	r3, [pc, #400]	; (800652c <HAL_RCC_OscConfig+0xe38>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	e027      	b.n	80063ee <HAL_RCC_OscConfig+0xcfa>
 800639e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063a2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80063a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063b0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	fa93 f2a3 	rbit	r2, r3
 80063ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063be:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80063cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	fa93 f2a3 	rbit	r2, r3
 80063e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063e4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	4b50      	ldr	r3, [pc, #320]	; (800652c <HAL_RCC_OscConfig+0xe38>)
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80063f2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80063f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80063fa:	6011      	str	r1, [r2, #0]
 80063fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006400:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	fa92 f1a2 	rbit	r1, r2
 800640a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800640e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006412:	6011      	str	r1, [r2, #0]
  return result;
 8006414:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006418:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800641c:	6812      	ldr	r2, [r2, #0]
 800641e:	fab2 f282 	clz	r2, r2
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	f042 0220 	orr.w	r2, r2, #32
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	f002 021f 	and.w	r2, r2, #31
 800642e:	2101      	movs	r1, #1
 8006430:	fa01 f202 	lsl.w	r2, r1, r2
 8006434:	4013      	ands	r3, r2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d182      	bne.n	8006340 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800643a:	4b3c      	ldr	r3, [pc, #240]	; (800652c <HAL_RCC_OscConfig+0xe38>)
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	f023 020f 	bic.w	r2, r3, #15
 8006442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006446:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	4937      	ldr	r1, [pc, #220]	; (800652c <HAL_RCC_OscConfig+0xe38>)
 8006450:	4313      	orrs	r3, r2
 8006452:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006454:	4b35      	ldr	r3, [pc, #212]	; (800652c <HAL_RCC_OscConfig+0xe38>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800645c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006460:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a19      	ldr	r1, [r3, #32]
 8006468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800646c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	430b      	orrs	r3, r1
 8006476:	492d      	ldr	r1, [pc, #180]	; (800652c <HAL_RCC_OscConfig+0xe38>)
 8006478:	4313      	orrs	r3, r2
 800647a:	604b      	str	r3, [r1, #4]
 800647c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006480:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006484:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800648e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	fa93 f2a3 	rbit	r2, r3
 8006498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800649c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80064a0:	601a      	str	r2, [r3, #0]
  return result;
 80064a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80064aa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064ac:	fab3 f383 	clz	r3, r3
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80064b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	461a      	mov	r2, r3
 80064be:	2301      	movs	r3, #1
 80064c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c2:	f7fc fa2b 	bl	800291c <HAL_GetTick>
 80064c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064ca:	e009      	b.n	80064e0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064cc:	f7fc fa26 	bl	800291c <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e156      	b.n	800678e <HAL_RCC_OscConfig+0x109a>
 80064e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064e4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80064e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	fa93 f2a3 	rbit	r2, r3
 80064fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006500:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006504:	601a      	str	r2, [r3, #0]
  return result;
 8006506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800650a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800650e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006510:	fab3 f383 	clz	r3, r3
 8006514:	b2db      	uxtb	r3, r3
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	b2db      	uxtb	r3, r3
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	d105      	bne.n	8006530 <HAL_RCC_OscConfig+0xe3c>
 8006524:	4b01      	ldr	r3, [pc, #4]	; (800652c <HAL_RCC_OscConfig+0xe38>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	e02a      	b.n	8006580 <HAL_RCC_OscConfig+0xe8c>
 800652a:	bf00      	nop
 800652c:	40021000 	.word	0x40021000
 8006530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006534:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006538:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800653c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006542:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	fa93 f2a3 	rbit	r2, r3
 800654c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006550:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800655a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800655e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006568:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	fa93 f2a3 	rbit	r2, r3
 8006572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006576:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	4b86      	ldr	r3, [pc, #536]	; (8006798 <HAL_RCC_OscConfig+0x10a4>)
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006584:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006588:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800658c:	6011      	str	r1, [r2, #0]
 800658e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006592:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006596:	6812      	ldr	r2, [r2, #0]
 8006598:	fa92 f1a2 	rbit	r1, r2
 800659c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80065a0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80065a4:	6011      	str	r1, [r2, #0]
  return result;
 80065a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80065aa:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	fab2 f282 	clz	r2, r2
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	f042 0220 	orr.w	r2, r2, #32
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	f002 021f 	and.w	r2, r2, #31
 80065c0:	2101      	movs	r1, #1
 80065c2:	fa01 f202 	lsl.w	r2, r1, r2
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f43f af7f 	beq.w	80064cc <HAL_RCC_OscConfig+0xdd8>
 80065ce:	e0dd      	b.n	800678c <HAL_RCC_OscConfig+0x1098>
 80065d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80065d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065e2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	fa93 f2a3 	rbit	r2, r3
 80065ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80065f4:	601a      	str	r2, [r3, #0]
  return result;
 80065f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065fa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80065fe:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006600:	fab3 f383 	clz	r3, r3
 8006604:	b2db      	uxtb	r3, r3
 8006606:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800660a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	461a      	mov	r2, r3
 8006612:	2300      	movs	r3, #0
 8006614:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006616:	f7fc f981 	bl	800291c <HAL_GetTick>
 800661a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800661e:	e009      	b.n	8006634 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006620:	f7fc f97c 	bl	800291c <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e0ac      	b.n	800678e <HAL_RCC_OscConfig+0x109a>
 8006634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006638:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800663c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006646:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	fa93 f2a3 	rbit	r2, r3
 8006650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006654:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006658:	601a      	str	r2, [r3, #0]
  return result;
 800665a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800665e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006662:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006664:	fab3 f383 	clz	r3, r3
 8006668:	b2db      	uxtb	r3, r3
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	b2db      	uxtb	r3, r3
 800666e:	f043 0301 	orr.w	r3, r3, #1
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b01      	cmp	r3, #1
 8006676:	d102      	bne.n	800667e <HAL_RCC_OscConfig+0xf8a>
 8006678:	4b47      	ldr	r3, [pc, #284]	; (8006798 <HAL_RCC_OscConfig+0x10a4>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	e027      	b.n	80066ce <HAL_RCC_OscConfig+0xfda>
 800667e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006682:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800668a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800668c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006690:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	fa93 f2a3 	rbit	r2, r3
 800669a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800669e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066a8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80066ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066b6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	fa93 f2a3 	rbit	r2, r3
 80066c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066c4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	4b33      	ldr	r3, [pc, #204]	; (8006798 <HAL_RCC_OscConfig+0x10a4>)
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80066d2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80066d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80066da:	6011      	str	r1, [r2, #0]
 80066dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80066e0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	fa92 f1a2 	rbit	r1, r2
 80066ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80066ee:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80066f2:	6011      	str	r1, [r2, #0]
  return result;
 80066f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80066f8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	fab2 f282 	clz	r2, r2
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	f042 0220 	orr.w	r2, r2, #32
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	f002 021f 	and.w	r2, r2, #31
 800670e:	2101      	movs	r1, #1
 8006710:	fa01 f202 	lsl.w	r2, r1, r2
 8006714:	4013      	ands	r3, r2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d182      	bne.n	8006620 <HAL_RCC_OscConfig+0xf2c>
 800671a:	e037      	b.n	800678c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800671c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006720:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e02e      	b.n	800678e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006730:	4b19      	ldr	r3, [pc, #100]	; (8006798 <HAL_RCC_OscConfig+0x10a4>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006738:	4b17      	ldr	r3, [pc, #92]	; (8006798 <HAL_RCC_OscConfig+0x10a4>)
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006740:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006744:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800674c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	429a      	cmp	r2, r3
 8006756:	d117      	bne.n	8006788 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006758:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800675c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006764:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800676c:	429a      	cmp	r2, r3
 800676e:	d10b      	bne.n	8006788 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006774:	f003 020f 	and.w	r2, r3, #15
 8006778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800677c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006784:	429a      	cmp	r2, r3
 8006786:	d001      	beq.n	800678c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	40021000 	.word	0x40021000

0800679c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b09e      	sub	sp, #120	; 0x78
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e162      	b.n	8006a7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067b4:	4b90      	ldr	r3, [pc, #576]	; (80069f8 <HAL_RCC_ClockConfig+0x25c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d910      	bls.n	80067e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067c2:	4b8d      	ldr	r3, [pc, #564]	; (80069f8 <HAL_RCC_ClockConfig+0x25c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f023 0207 	bic.w	r2, r3, #7
 80067ca:	498b      	ldr	r1, [pc, #556]	; (80069f8 <HAL_RCC_ClockConfig+0x25c>)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067d2:	4b89      	ldr	r3, [pc, #548]	; (80069f8 <HAL_RCC_ClockConfig+0x25c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d001      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e14a      	b.n	8006a7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d008      	beq.n	8006802 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f0:	4b82      	ldr	r3, [pc, #520]	; (80069fc <HAL_RCC_ClockConfig+0x260>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	497f      	ldr	r1, [pc, #508]	; (80069fc <HAL_RCC_ClockConfig+0x260>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 80dc 	beq.w	80069c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d13c      	bne.n	8006892 <HAL_RCC_ClockConfig+0xf6>
 8006818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800681c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800681e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006820:	fa93 f3a3 	rbit	r3, r3
 8006824:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006828:	fab3 f383 	clz	r3, r3
 800682c:	b2db      	uxtb	r3, r3
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f043 0301 	orr.w	r3, r3, #1
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b01      	cmp	r3, #1
 800683a:	d102      	bne.n	8006842 <HAL_RCC_ClockConfig+0xa6>
 800683c:	4b6f      	ldr	r3, [pc, #444]	; (80069fc <HAL_RCC_ClockConfig+0x260>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	e00f      	b.n	8006862 <HAL_RCC_ClockConfig+0xc6>
 8006842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006846:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800684a:	fa93 f3a3 	rbit	r3, r3
 800684e:	667b      	str	r3, [r7, #100]	; 0x64
 8006850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006854:	663b      	str	r3, [r7, #96]	; 0x60
 8006856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006858:	fa93 f3a3 	rbit	r3, r3
 800685c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800685e:	4b67      	ldr	r3, [pc, #412]	; (80069fc <HAL_RCC_ClockConfig+0x260>)
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006866:	65ba      	str	r2, [r7, #88]	; 0x58
 8006868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800686a:	fa92 f2a2 	rbit	r2, r2
 800686e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006870:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006872:	fab2 f282 	clz	r2, r2
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	f042 0220 	orr.w	r2, r2, #32
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	f002 021f 	and.w	r2, r2, #31
 8006882:	2101      	movs	r1, #1
 8006884:	fa01 f202 	lsl.w	r2, r1, r2
 8006888:	4013      	ands	r3, r2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d17b      	bne.n	8006986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e0f3      	b.n	8006a7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d13c      	bne.n	8006914 <HAL_RCC_ClockConfig+0x178>
 800689a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800689e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a2:	fa93 f3a3 	rbit	r3, r3
 80068a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80068a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068aa:	fab3 f383 	clz	r3, r3
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d102      	bne.n	80068c4 <HAL_RCC_ClockConfig+0x128>
 80068be:	4b4f      	ldr	r3, [pc, #316]	; (80069fc <HAL_RCC_ClockConfig+0x260>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	e00f      	b.n	80068e4 <HAL_RCC_ClockConfig+0x148>
 80068c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068cc:	fa93 f3a3 	rbit	r3, r3
 80068d0:	647b      	str	r3, [r7, #68]	; 0x44
 80068d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068d6:	643b      	str	r3, [r7, #64]	; 0x40
 80068d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068da:	fa93 f3a3 	rbit	r3, r3
 80068de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e0:	4b46      	ldr	r3, [pc, #280]	; (80069fc <HAL_RCC_ClockConfig+0x260>)
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80068ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068ec:	fa92 f2a2 	rbit	r2, r2
 80068f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80068f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068f4:	fab2 f282 	clz	r2, r2
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	f042 0220 	orr.w	r2, r2, #32
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	f002 021f 	and.w	r2, r2, #31
 8006904:	2101      	movs	r1, #1
 8006906:	fa01 f202 	lsl.w	r2, r1, r2
 800690a:	4013      	ands	r3, r2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d13a      	bne.n	8006986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e0b2      	b.n	8006a7a <HAL_RCC_ClockConfig+0x2de>
 8006914:	2302      	movs	r3, #2
 8006916:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	fa93 f3a3 	rbit	r3, r3
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006922:	fab3 f383 	clz	r3, r3
 8006926:	b2db      	uxtb	r3, r3
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	b2db      	uxtb	r3, r3
 800692c:	f043 0301 	orr.w	r3, r3, #1
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b01      	cmp	r3, #1
 8006934:	d102      	bne.n	800693c <HAL_RCC_ClockConfig+0x1a0>
 8006936:	4b31      	ldr	r3, [pc, #196]	; (80069fc <HAL_RCC_ClockConfig+0x260>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	e00d      	b.n	8006958 <HAL_RCC_ClockConfig+0x1bc>
 800693c:	2302      	movs	r3, #2
 800693e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	fa93 f3a3 	rbit	r3, r3
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
 8006948:	2302      	movs	r3, #2
 800694a:	623b      	str	r3, [r7, #32]
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	fa93 f3a3 	rbit	r3, r3
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	4b29      	ldr	r3, [pc, #164]	; (80069fc <HAL_RCC_ClockConfig+0x260>)
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	2202      	movs	r2, #2
 800695a:	61ba      	str	r2, [r7, #24]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	fa92 f2a2 	rbit	r2, r2
 8006962:	617a      	str	r2, [r7, #20]
  return result;
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	fab2 f282 	clz	r2, r2
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	f042 0220 	orr.w	r2, r2, #32
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	f002 021f 	and.w	r2, r2, #31
 8006976:	2101      	movs	r1, #1
 8006978:	fa01 f202 	lsl.w	r2, r1, r2
 800697c:	4013      	ands	r3, r2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e079      	b.n	8006a7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006986:	4b1d      	ldr	r3, [pc, #116]	; (80069fc <HAL_RCC_ClockConfig+0x260>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f023 0203 	bic.w	r2, r3, #3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	491a      	ldr	r1, [pc, #104]	; (80069fc <HAL_RCC_ClockConfig+0x260>)
 8006994:	4313      	orrs	r3, r2
 8006996:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006998:	f7fb ffc0 	bl	800291c <HAL_GetTick>
 800699c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800699e:	e00a      	b.n	80069b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069a0:	f7fb ffbc 	bl	800291c <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e061      	b.n	8006a7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069b6:	4b11      	ldr	r3, [pc, #68]	; (80069fc <HAL_RCC_ClockConfig+0x260>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f003 020c 	and.w	r2, r3, #12
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d1eb      	bne.n	80069a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069c8:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <HAL_RCC_ClockConfig+0x25c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d214      	bcs.n	8006a00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d6:	4b08      	ldr	r3, [pc, #32]	; (80069f8 <HAL_RCC_ClockConfig+0x25c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f023 0207 	bic.w	r2, r3, #7
 80069de:	4906      	ldr	r1, [pc, #24]	; (80069f8 <HAL_RCC_ClockConfig+0x25c>)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e6:	4b04      	ldr	r3, [pc, #16]	; (80069f8 <HAL_RCC_ClockConfig+0x25c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d005      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e040      	b.n	8006a7a <HAL_RCC_ClockConfig+0x2de>
 80069f8:	40022000 	.word	0x40022000
 80069fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a0c:	4b1d      	ldr	r3, [pc, #116]	; (8006a84 <HAL_RCC_ClockConfig+0x2e8>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	491a      	ldr	r1, [pc, #104]	; (8006a84 <HAL_RCC_ClockConfig+0x2e8>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d009      	beq.n	8006a3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a2a:	4b16      	ldr	r3, [pc, #88]	; (8006a84 <HAL_RCC_ClockConfig+0x2e8>)
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	4912      	ldr	r1, [pc, #72]	; (8006a84 <HAL_RCC_ClockConfig+0x2e8>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006a3e:	f000 f829 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8006a42:	4601      	mov	r1, r0
 8006a44:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <HAL_RCC_ClockConfig+0x2e8>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a4c:	22f0      	movs	r2, #240	; 0xf0
 8006a4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	fa92 f2a2 	rbit	r2, r2
 8006a56:	60fa      	str	r2, [r7, #12]
  return result;
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	fab2 f282 	clz	r2, r2
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	40d3      	lsrs	r3, r2
 8006a62:	4a09      	ldr	r2, [pc, #36]	; (8006a88 <HAL_RCC_ClockConfig+0x2ec>)
 8006a64:	5cd3      	ldrb	r3, [r2, r3]
 8006a66:	fa21 f303 	lsr.w	r3, r1, r3
 8006a6a:	4a08      	ldr	r2, [pc, #32]	; (8006a8c <HAL_RCC_ClockConfig+0x2f0>)
 8006a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006a6e:	4b08      	ldr	r3, [pc, #32]	; (8006a90 <HAL_RCC_ClockConfig+0x2f4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fb fe22 	bl	80026bc <HAL_InitTick>
  
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3778      	adds	r7, #120	; 0x78
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	40021000 	.word	0x40021000
 8006a88:	0800c7b4 	.word	0x0800c7b4
 8006a8c:	20000004 	.word	0x20000004
 8006a90:	20000008 	.word	0x20000008

08006a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b08b      	sub	sp, #44	; 0x2c
 8006a98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006aae:	4b2a      	ldr	r3, [pc, #168]	; (8006b58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f003 030c 	and.w	r3, r3, #12
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d002      	beq.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x30>
 8006abe:	2b08      	cmp	r3, #8
 8006ac0:	d003      	beq.n	8006aca <HAL_RCC_GetSysClockFreq+0x36>
 8006ac2:	e03f      	b.n	8006b44 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ac4:	4b25      	ldr	r3, [pc, #148]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006ac6:	623b      	str	r3, [r7, #32]
      break;
 8006ac8:	e03f      	b.n	8006b4a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006ad0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006ad4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	fa92 f2a2 	rbit	r2, r2
 8006adc:	607a      	str	r2, [r7, #4]
  return result;
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	fab2 f282 	clz	r2, r2
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	40d3      	lsrs	r3, r2
 8006ae8:	4a1d      	ldr	r2, [pc, #116]	; (8006b60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006aea:	5cd3      	ldrb	r3, [r2, r3]
 8006aec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006aee:	4b1a      	ldr	r3, [pc, #104]	; (8006b58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	220f      	movs	r2, #15
 8006af8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	fa92 f2a2 	rbit	r2, r2
 8006b00:	60fa      	str	r2, [r7, #12]
  return result;
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	fab2 f282 	clz	r2, r2
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	40d3      	lsrs	r3, r2
 8006b0c:	4a15      	ldr	r2, [pc, #84]	; (8006b64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006b0e:	5cd3      	ldrb	r3, [r2, r3]
 8006b10:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b1c:	4a0f      	ldr	r2, [pc, #60]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	fb02 f303 	mul.w	r3, r2, r3
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2c:	e007      	b.n	8006b3e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b2e:	4a0b      	ldr	r2, [pc, #44]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	fb02 f303 	mul.w	r3, r2, r3
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	623b      	str	r3, [r7, #32]
      break;
 8006b42:	e002      	b.n	8006b4a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b44:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006b46:	623b      	str	r3, [r7, #32]
      break;
 8006b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	372c      	adds	r7, #44	; 0x2c
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	007a1200 	.word	0x007a1200
 8006b60:	0800c7cc 	.word	0x0800c7cc
 8006b64:	0800c7dc 	.word	0x0800c7dc

08006b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b6c:	4b03      	ldr	r3, [pc, #12]	; (8006b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	20000004 	.word	0x20000004

08006b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006b86:	f7ff ffef 	bl	8006b68 <HAL_RCC_GetHCLKFreq>
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006b98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	fa92 f2a2 	rbit	r2, r2
 8006ba0:	603a      	str	r2, [r7, #0]
  return result;
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	fab2 f282 	clz	r2, r2
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	40d3      	lsrs	r3, r2
 8006bac:	4a04      	ldr	r2, [pc, #16]	; (8006bc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006bae:	5cd3      	ldrb	r3, [r2, r3]
 8006bb0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	0800c7c4 	.word	0x0800c7c4

08006bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006bca:	f7ff ffcd 	bl	8006b68 <HAL_RCC_GetHCLKFreq>
 8006bce:	4601      	mov	r1, r0
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006bd8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006bdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	fa92 f2a2 	rbit	r2, r2
 8006be4:	603a      	str	r2, [r7, #0]
  return result;
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	fab2 f282 	clz	r2, r2
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	40d3      	lsrs	r3, r2
 8006bf0:	4a04      	ldr	r2, [pc, #16]	; (8006c04 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006bf2:	5cd3      	ldrb	r3, [r2, r3]
 8006bf4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40021000 	.word	0x40021000
 8006c04:	0800c7c4 	.word	0x0800c7c4

08006c08 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	220f      	movs	r2, #15
 8006c16:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c18:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <HAL_RCC_GetClockConfig+0x5c>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f003 0203 	and.w	r2, r3, #3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006c24:	4b0f      	ldr	r3, [pc, #60]	; (8006c64 <HAL_RCC_GetClockConfig+0x5c>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006c30:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <HAL_RCC_GetClockConfig+0x5c>)
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c3c:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <HAL_RCC_GetClockConfig+0x5c>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	08db      	lsrs	r3, r3, #3
 8006c42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006c4a:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <HAL_RCC_GetClockConfig+0x60>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0207 	and.w	r2, r3, #7
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	601a      	str	r2, [r3, #0]
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40021000 	.word	0x40021000
 8006c68:	40022000 	.word	0x40022000

08006c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b092      	sub	sp, #72	; 0x48
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 80d4 	beq.w	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c90:	4b4e      	ldr	r3, [pc, #312]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10e      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c9c:	4b4b      	ldr	r3, [pc, #300]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	4a4a      	ldr	r2, [pc, #296]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca6:	61d3      	str	r3, [r2, #28]
 8006ca8:	4b48      	ldr	r3, [pc, #288]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cba:	4b45      	ldr	r3, [pc, #276]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d118      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cc6:	4b42      	ldr	r3, [pc, #264]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a41      	ldr	r2, [pc, #260]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cd2:	f7fb fe23 	bl	800291c <HAL_GetTick>
 8006cd6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cd8:	e008      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cda:	f7fb fe1f 	bl	800291c <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b64      	cmp	r3, #100	; 0x64
 8006ce6:	d901      	bls.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e1d6      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cec:	4b38      	ldr	r3, [pc, #224]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cf8:	4b34      	ldr	r3, [pc, #208]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 8084 	beq.w	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d07c      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d18:	4b2c      	ldr	r3, [pc, #176]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	fa93 f3a3 	rbit	r3, r3
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d32:	fab3 f383 	clz	r3, r3
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4b26      	ldr	r3, [pc, #152]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	461a      	mov	r2, r3
 8006d42:	2301      	movs	r3, #1
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	fa93 f3a3 	rbit	r3, r3
 8006d52:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d56:	fab3 f383 	clz	r3, r3
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4b1d      	ldr	r3, [pc, #116]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	461a      	mov	r2, r3
 8006d66:	2300      	movs	r3, #0
 8006d68:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006d6a:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d04b      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7a:	f7fb fdcf 	bl	800291c <HAL_GetTick>
 8006d7e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d80:	e00a      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d82:	f7fb fdcb 	bl	800291c <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e180      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	fa93 f3a3 	rbit	r3, r3
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
 8006da4:	2302      	movs	r3, #2
 8006da6:	623b      	str	r3, [r7, #32]
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	fa93 f3a3 	rbit	r3, r3
 8006dae:	61fb      	str	r3, [r7, #28]
  return result;
 8006db0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db2:	fab3 f383 	clz	r3, r3
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f043 0302 	orr.w	r3, r3, #2
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d108      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006dc6:	4b01      	ldr	r3, [pc, #4]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	e00d      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	40007000 	.word	0x40007000
 8006dd4:	10908100 	.word	0x10908100
 8006dd8:	2302      	movs	r3, #2
 8006dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	fa93 f3a3 	rbit	r3, r3
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	4b9a      	ldr	r3, [pc, #616]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	2202      	movs	r2, #2
 8006dea:	613a      	str	r2, [r7, #16]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	fa92 f2a2 	rbit	r2, r2
 8006df2:	60fa      	str	r2, [r7, #12]
  return result;
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	fab2 f282 	clz	r2, r2
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e00:	b2d2      	uxtb	r2, r2
 8006e02:	f002 021f 	and.w	r2, r2, #31
 8006e06:	2101      	movs	r1, #1
 8006e08:	fa01 f202 	lsl.w	r2, r1, r2
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0b7      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006e12:	4b8f      	ldr	r3, [pc, #572]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	498c      	ldr	r1, [pc, #560]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006e24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d105      	bne.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e2c:	4b88      	ldr	r3, [pc, #544]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	4a87      	ldr	r2, [pc, #540]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d008      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e44:	4b82      	ldr	r3, [pc, #520]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	f023 0203 	bic.w	r2, r3, #3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	497f      	ldr	r1, [pc, #508]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e62:	4b7b      	ldr	r3, [pc, #492]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	4978      	ldr	r1, [pc, #480]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d008      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e80:	4b73      	ldr	r3, [pc, #460]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	4970      	ldr	r1, [pc, #448]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d008      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e9e:	4b6c      	ldr	r3, [pc, #432]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	f023 0210 	bic.w	r2, r3, #16
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	4969      	ldr	r1, [pc, #420]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d008      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006ebc:	4b64      	ldr	r3, [pc, #400]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec8:	4961      	ldr	r1, [pc, #388]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d008      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006eda:	4b5d      	ldr	r3, [pc, #372]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	f023 0220 	bic.w	r2, r3, #32
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	495a      	ldr	r1, [pc, #360]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d008      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ef8:	4b55      	ldr	r3, [pc, #340]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	4952      	ldr	r1, [pc, #328]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d008      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f16:	4b4e      	ldr	r3, [pc, #312]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	494b      	ldr	r1, [pc, #300]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f34:	4b46      	ldr	r3, [pc, #280]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	4943      	ldr	r1, [pc, #268]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d008      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f52:	4b3f      	ldr	r3, [pc, #252]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	493c      	ldr	r1, [pc, #240]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d008      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006f70:	4b37      	ldr	r3, [pc, #220]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7c:	4934      	ldr	r1, [pc, #208]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d008      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006f8e:	4b30      	ldr	r3, [pc, #192]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f92:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	492d      	ldr	r1, [pc, #180]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d008      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006fac:	4b28      	ldr	r3, [pc, #160]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb8:	4925      	ldr	r1, [pc, #148]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d008      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006fca:	4b21      	ldr	r3, [pc, #132]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	491e      	ldr	r1, [pc, #120]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006fe8:	4b19      	ldr	r3, [pc, #100]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff4:	4916      	ldr	r1, [pc, #88]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d008      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007006:	4b12      	ldr	r3, [pc, #72]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007012:	490f      	ldr	r1, [pc, #60]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007014:	4313      	orrs	r3, r2
 8007016:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d008      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007024:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007028:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007030:	4907      	ldr	r1, [pc, #28]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007032:	4313      	orrs	r3, r2
 8007034:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00c      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007042:	4b03      	ldr	r3, [pc, #12]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007046:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	e002      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800704e:	bf00      	nop
 8007050:	40021000 	.word	0x40021000
 8007054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007056:	4913      	ldr	r1, [pc, #76]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007058:	4313      	orrs	r3, r2
 800705a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d008      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007068:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007074:	490b      	ldr	r1, [pc, #44]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007076:	4313      	orrs	r3, r2
 8007078:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d008      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8007086:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007092:	4904      	ldr	r1, [pc, #16]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007094:	4313      	orrs	r3, r2
 8007096:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3748      	adds	r7, #72	; 0x48
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40021000 	.word	0x40021000

080070a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e09d      	b.n	80071f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d108      	bne.n	80070d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ca:	d009      	beq.n	80070e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	61da      	str	r2, [r3, #28]
 80070d2:	e005      	b.n	80070e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7fb f92c 	bl	8002358 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007116:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007120:	d902      	bls.n	8007128 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	e002      	b.n	800712e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800712c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007136:	d007      	beq.n	8007148 <HAL_SPI_Init+0xa0>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007140:	d002      	beq.n	8007148 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	431a      	orrs	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007176:	431a      	orrs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007180:	431a      	orrs	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718a:	ea42 0103 	orr.w	r1, r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	0c1b      	lsrs	r3, r3, #16
 80071a4:	f003 0204 	and.w	r2, r3, #4
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80071c4:	ea42 0103 	orr.w	r1, r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69da      	ldr	r2, [r3, #28]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e049      	b.n	80072a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d106      	bne.n	800722a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7fb f8db 	bl	80023e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3304      	adds	r3, #4
 800723a:	4619      	mov	r1, r3
 800723c:	4610      	mov	r0, r2
 800723e:	f000 fd39 	bl	8007cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d001      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e04f      	b.n	8007364 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0201 	orr.w	r2, r2, #1
 80072da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a23      	ldr	r2, [pc, #140]	; (8007370 <HAL_TIM_Base_Start_IT+0xc4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d01d      	beq.n	8007322 <HAL_TIM_Base_Start_IT+0x76>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ee:	d018      	beq.n	8007322 <HAL_TIM_Base_Start_IT+0x76>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a1f      	ldr	r2, [pc, #124]	; (8007374 <HAL_TIM_Base_Start_IT+0xc8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d013      	beq.n	8007322 <HAL_TIM_Base_Start_IT+0x76>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a1e      	ldr	r2, [pc, #120]	; (8007378 <HAL_TIM_Base_Start_IT+0xcc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00e      	beq.n	8007322 <HAL_TIM_Base_Start_IT+0x76>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a1c      	ldr	r2, [pc, #112]	; (800737c <HAL_TIM_Base_Start_IT+0xd0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d009      	beq.n	8007322 <HAL_TIM_Base_Start_IT+0x76>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a1b      	ldr	r2, [pc, #108]	; (8007380 <HAL_TIM_Base_Start_IT+0xd4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d004      	beq.n	8007322 <HAL_TIM_Base_Start_IT+0x76>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a19      	ldr	r2, [pc, #100]	; (8007384 <HAL_TIM_Base_Start_IT+0xd8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d115      	bne.n	800734e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	4b17      	ldr	r3, [pc, #92]	; (8007388 <HAL_TIM_Base_Start_IT+0xdc>)
 800732a:	4013      	ands	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b06      	cmp	r3, #6
 8007332:	d015      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0xb4>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800733a:	d011      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0201 	orr.w	r2, r2, #1
 800734a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800734c:	e008      	b.n	8007360 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f042 0201 	orr.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	e000      	b.n	8007362 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007360:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	40012c00 	.word	0x40012c00
 8007374:	40000400 	.word	0x40000400
 8007378:	40000800 	.word	0x40000800
 800737c:	40013400 	.word	0x40013400
 8007380:	40014000 	.word	0x40014000
 8007384:	40015000 	.word	0x40015000
 8007388:	00010007 	.word	0x00010007

0800738c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e049      	b.n	8007432 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d106      	bne.n	80073b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f841 	bl	800743a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4619      	mov	r1, r3
 80073ca:	4610      	mov	r0, r2
 80073cc:	f000 fc72 	bl	8007cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007442:	bf00      	nop
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
	...

08007450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d109      	bne.n	8007474 <HAL_TIM_PWM_Start+0x24>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b01      	cmp	r3, #1
 800746a:	bf14      	ite	ne
 800746c:	2301      	movne	r3, #1
 800746e:	2300      	moveq	r3, #0
 8007470:	b2db      	uxtb	r3, r3
 8007472:	e03c      	b.n	80074ee <HAL_TIM_PWM_Start+0x9e>
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2b04      	cmp	r3, #4
 8007478:	d109      	bne.n	800748e <HAL_TIM_PWM_Start+0x3e>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b01      	cmp	r3, #1
 8007484:	bf14      	ite	ne
 8007486:	2301      	movne	r3, #1
 8007488:	2300      	moveq	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	e02f      	b.n	80074ee <HAL_TIM_PWM_Start+0x9e>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b08      	cmp	r3, #8
 8007492:	d109      	bne.n	80074a8 <HAL_TIM_PWM_Start+0x58>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b01      	cmp	r3, #1
 800749e:	bf14      	ite	ne
 80074a0:	2301      	movne	r3, #1
 80074a2:	2300      	moveq	r3, #0
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	e022      	b.n	80074ee <HAL_TIM_PWM_Start+0x9e>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b0c      	cmp	r3, #12
 80074ac:	d109      	bne.n	80074c2 <HAL_TIM_PWM_Start+0x72>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	bf14      	ite	ne
 80074ba:	2301      	movne	r3, #1
 80074bc:	2300      	moveq	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	e015      	b.n	80074ee <HAL_TIM_PWM_Start+0x9e>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b10      	cmp	r3, #16
 80074c6:	d109      	bne.n	80074dc <HAL_TIM_PWM_Start+0x8c>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	bf14      	ite	ne
 80074d4:	2301      	movne	r3, #1
 80074d6:	2300      	moveq	r3, #0
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	e008      	b.n	80074ee <HAL_TIM_PWM_Start+0x9e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	bf14      	ite	ne
 80074e8:	2301      	movne	r3, #1
 80074ea:	2300      	moveq	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e0a1      	b.n	800763a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <HAL_TIM_PWM_Start+0xb6>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007504:	e023      	b.n	800754e <HAL_TIM_PWM_Start+0xfe>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b04      	cmp	r3, #4
 800750a:	d104      	bne.n	8007516 <HAL_TIM_PWM_Start+0xc6>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007514:	e01b      	b.n	800754e <HAL_TIM_PWM_Start+0xfe>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b08      	cmp	r3, #8
 800751a:	d104      	bne.n	8007526 <HAL_TIM_PWM_Start+0xd6>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007524:	e013      	b.n	800754e <HAL_TIM_PWM_Start+0xfe>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b0c      	cmp	r3, #12
 800752a:	d104      	bne.n	8007536 <HAL_TIM_PWM_Start+0xe6>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2202      	movs	r2, #2
 8007530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007534:	e00b      	b.n	800754e <HAL_TIM_PWM_Start+0xfe>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b10      	cmp	r3, #16
 800753a:	d104      	bne.n	8007546 <HAL_TIM_PWM_Start+0xf6>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007544:	e003      	b.n	800754e <HAL_TIM_PWM_Start+0xfe>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2202      	movs	r2, #2
 800754a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2201      	movs	r2, #1
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 ffea 	bl	8008530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a38      	ldr	r2, [pc, #224]	; (8007644 <HAL_TIM_PWM_Start+0x1f4>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d018      	beq.n	8007598 <HAL_TIM_PWM_Start+0x148>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a37      	ldr	r2, [pc, #220]	; (8007648 <HAL_TIM_PWM_Start+0x1f8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d013      	beq.n	8007598 <HAL_TIM_PWM_Start+0x148>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a35      	ldr	r2, [pc, #212]	; (800764c <HAL_TIM_PWM_Start+0x1fc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00e      	beq.n	8007598 <HAL_TIM_PWM_Start+0x148>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a34      	ldr	r2, [pc, #208]	; (8007650 <HAL_TIM_PWM_Start+0x200>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d009      	beq.n	8007598 <HAL_TIM_PWM_Start+0x148>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a32      	ldr	r2, [pc, #200]	; (8007654 <HAL_TIM_PWM_Start+0x204>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d004      	beq.n	8007598 <HAL_TIM_PWM_Start+0x148>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a31      	ldr	r2, [pc, #196]	; (8007658 <HAL_TIM_PWM_Start+0x208>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d101      	bne.n	800759c <HAL_TIM_PWM_Start+0x14c>
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <HAL_TIM_PWM_Start+0x14e>
 800759c:	2300      	movs	r3, #0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d007      	beq.n	80075b2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a23      	ldr	r2, [pc, #140]	; (8007644 <HAL_TIM_PWM_Start+0x1f4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d01d      	beq.n	80075f8 <HAL_TIM_PWM_Start+0x1a8>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c4:	d018      	beq.n	80075f8 <HAL_TIM_PWM_Start+0x1a8>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a24      	ldr	r2, [pc, #144]	; (800765c <HAL_TIM_PWM_Start+0x20c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d013      	beq.n	80075f8 <HAL_TIM_PWM_Start+0x1a8>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a22      	ldr	r2, [pc, #136]	; (8007660 <HAL_TIM_PWM_Start+0x210>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00e      	beq.n	80075f8 <HAL_TIM_PWM_Start+0x1a8>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a1a      	ldr	r2, [pc, #104]	; (8007648 <HAL_TIM_PWM_Start+0x1f8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d009      	beq.n	80075f8 <HAL_TIM_PWM_Start+0x1a8>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a18      	ldr	r2, [pc, #96]	; (800764c <HAL_TIM_PWM_Start+0x1fc>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d004      	beq.n	80075f8 <HAL_TIM_PWM_Start+0x1a8>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a19      	ldr	r2, [pc, #100]	; (8007658 <HAL_TIM_PWM_Start+0x208>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d115      	bne.n	8007624 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	4b19      	ldr	r3, [pc, #100]	; (8007664 <HAL_TIM_PWM_Start+0x214>)
 8007600:	4013      	ands	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b06      	cmp	r3, #6
 8007608:	d015      	beq.n	8007636 <HAL_TIM_PWM_Start+0x1e6>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007610:	d011      	beq.n	8007636 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0201 	orr.w	r2, r2, #1
 8007620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007622:	e008      	b.n	8007636 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0201 	orr.w	r2, r2, #1
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	e000      	b.n	8007638 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40012c00 	.word	0x40012c00
 8007648:	40013400 	.word	0x40013400
 800764c:	40014000 	.word	0x40014000
 8007650:	40014400 	.word	0x40014400
 8007654:	40014800 	.word	0x40014800
 8007658:	40015000 	.word	0x40015000
 800765c:	40000400 	.word	0x40000400
 8007660:	40000800 	.word	0x40000800
 8007664:	00010007 	.word	0x00010007

08007668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b02      	cmp	r3, #2
 800767c:	d122      	bne.n	80076c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b02      	cmp	r3, #2
 800768a:	d11b      	bne.n	80076c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f06f 0202 	mvn.w	r2, #2
 8007694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fae3 	bl	8007c76 <HAL_TIM_IC_CaptureCallback>
 80076b0:	e005      	b.n	80076be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fad5 	bl	8007c62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fae6 	bl	8007c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d122      	bne.n	8007718 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d11b      	bne.n	8007718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f06f 0204 	mvn.w	r2, #4
 80076e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2202      	movs	r2, #2
 80076ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fab9 	bl	8007c76 <HAL_TIM_IC_CaptureCallback>
 8007704:	e005      	b.n	8007712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 faab 	bl	8007c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fabc 	bl	8007c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b08      	cmp	r3, #8
 8007724:	d122      	bne.n	800776c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b08      	cmp	r3, #8
 8007732:	d11b      	bne.n	800776c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f06f 0208 	mvn.w	r2, #8
 800773c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2204      	movs	r2, #4
 8007742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	f003 0303 	and.w	r3, r3, #3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa8f 	bl	8007c76 <HAL_TIM_IC_CaptureCallback>
 8007758:	e005      	b.n	8007766 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa81 	bl	8007c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fa92 	bl	8007c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	2b10      	cmp	r3, #16
 8007778:	d122      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f003 0310 	and.w	r3, r3, #16
 8007784:	2b10      	cmp	r3, #16
 8007786:	d11b      	bne.n	80077c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f06f 0210 	mvn.w	r2, #16
 8007790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2208      	movs	r2, #8
 8007796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa65 	bl	8007c76 <HAL_TIM_IC_CaptureCallback>
 80077ac:	e005      	b.n	80077ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fa57 	bl	8007c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fa68 	bl	8007c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d10e      	bne.n	80077ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d107      	bne.n	80077ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0201 	mvn.w	r2, #1
 80077e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fa fcc6 	bl	8002178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f6:	2b80      	cmp	r3, #128	; 0x80
 80077f8:	d10e      	bne.n	8007818 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007804:	2b80      	cmp	r3, #128	; 0x80
 8007806:	d107      	bne.n	8007818 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 ffce 	bl	80087b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007826:	d10e      	bne.n	8007846 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007832:	2b80      	cmp	r3, #128	; 0x80
 8007834:	d107      	bne.n	8007846 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800783e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 ffc1 	bl	80087c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007850:	2b40      	cmp	r3, #64	; 0x40
 8007852:	d10e      	bne.n	8007872 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	d107      	bne.n	8007872 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800786a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fa16 	bl	8007c9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f003 0320 	and.w	r3, r3, #32
 800787c:	2b20      	cmp	r3, #32
 800787e:	d10e      	bne.n	800789e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b20      	cmp	r3, #32
 800788c:	d107      	bne.n	800789e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f06f 0220 	mvn.w	r2, #32
 8007896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 ff81 	bl	80087a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800789e:	bf00      	nop
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078c2:	2302      	movs	r3, #2
 80078c4:	e0ff      	b.n	8007ac6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b14      	cmp	r3, #20
 80078d2:	f200 80f0 	bhi.w	8007ab6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	08007931 	.word	0x08007931
 80078e0:	08007ab7 	.word	0x08007ab7
 80078e4:	08007ab7 	.word	0x08007ab7
 80078e8:	08007ab7 	.word	0x08007ab7
 80078ec:	08007971 	.word	0x08007971
 80078f0:	08007ab7 	.word	0x08007ab7
 80078f4:	08007ab7 	.word	0x08007ab7
 80078f8:	08007ab7 	.word	0x08007ab7
 80078fc:	080079b3 	.word	0x080079b3
 8007900:	08007ab7 	.word	0x08007ab7
 8007904:	08007ab7 	.word	0x08007ab7
 8007908:	08007ab7 	.word	0x08007ab7
 800790c:	080079f3 	.word	0x080079f3
 8007910:	08007ab7 	.word	0x08007ab7
 8007914:	08007ab7 	.word	0x08007ab7
 8007918:	08007ab7 	.word	0x08007ab7
 800791c:	08007a35 	.word	0x08007a35
 8007920:	08007ab7 	.word	0x08007ab7
 8007924:	08007ab7 	.word	0x08007ab7
 8007928:	08007ab7 	.word	0x08007ab7
 800792c:	08007a75 	.word	0x08007a75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68b9      	ldr	r1, [r7, #8]
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fa5a 	bl	8007df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0208 	orr.w	r2, r2, #8
 800794a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0204 	bic.w	r2, r2, #4
 800795a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6999      	ldr	r1, [r3, #24]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	619a      	str	r2, [r3, #24]
      break;
 800796e:	e0a5      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fad4 	bl	8007f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800798a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800799a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6999      	ldr	r1, [r3, #24]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	021a      	lsls	r2, r3, #8
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	619a      	str	r2, [r3, #24]
      break;
 80079b0:	e084      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 fb47 	bl	800804c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69da      	ldr	r2, [r3, #28]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 0208 	orr.w	r2, r2, #8
 80079cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0204 	bic.w	r2, r2, #4
 80079dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69d9      	ldr	r1, [r3, #28]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	61da      	str	r2, [r3, #28]
      break;
 80079f0:	e064      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fbb9 	bl	8008170 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69da      	ldr	r2, [r3, #28]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69d9      	ldr	r1, [r3, #28]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	021a      	lsls	r2, r3, #8
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	61da      	str	r2, [r3, #28]
      break;
 8007a32:	e043      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fc08 	bl	8008250 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0208 	orr.w	r2, r2, #8
 8007a4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0204 	bic.w	r2, r2, #4
 8007a5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	691a      	ldr	r2, [r3, #16]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a72:	e023      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fc52 	bl	8008324 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	021a      	lsls	r2, r3, #8
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ab4:	e002      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop

08007ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_TIM_ConfigClockSource+0x1c>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e0b6      	b.n	8007c5a <HAL_TIM_ConfigClockSource+0x18a>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b28:	d03e      	beq.n	8007ba8 <HAL_TIM_ConfigClockSource+0xd8>
 8007b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2e:	f200 8087 	bhi.w	8007c40 <HAL_TIM_ConfigClockSource+0x170>
 8007b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b36:	f000 8086 	beq.w	8007c46 <HAL_TIM_ConfigClockSource+0x176>
 8007b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3e:	d87f      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x170>
 8007b40:	2b70      	cmp	r3, #112	; 0x70
 8007b42:	d01a      	beq.n	8007b7a <HAL_TIM_ConfigClockSource+0xaa>
 8007b44:	2b70      	cmp	r3, #112	; 0x70
 8007b46:	d87b      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x170>
 8007b48:	2b60      	cmp	r3, #96	; 0x60
 8007b4a:	d050      	beq.n	8007bee <HAL_TIM_ConfigClockSource+0x11e>
 8007b4c:	2b60      	cmp	r3, #96	; 0x60
 8007b4e:	d877      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x170>
 8007b50:	2b50      	cmp	r3, #80	; 0x50
 8007b52:	d03c      	beq.n	8007bce <HAL_TIM_ConfigClockSource+0xfe>
 8007b54:	2b50      	cmp	r3, #80	; 0x50
 8007b56:	d873      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x170>
 8007b58:	2b40      	cmp	r3, #64	; 0x40
 8007b5a:	d058      	beq.n	8007c0e <HAL_TIM_ConfigClockSource+0x13e>
 8007b5c:	2b40      	cmp	r3, #64	; 0x40
 8007b5e:	d86f      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x170>
 8007b60:	2b30      	cmp	r3, #48	; 0x30
 8007b62:	d064      	beq.n	8007c2e <HAL_TIM_ConfigClockSource+0x15e>
 8007b64:	2b30      	cmp	r3, #48	; 0x30
 8007b66:	d86b      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x170>
 8007b68:	2b20      	cmp	r3, #32
 8007b6a:	d060      	beq.n	8007c2e <HAL_TIM_ConfigClockSource+0x15e>
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d867      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x170>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d05c      	beq.n	8007c2e <HAL_TIM_ConfigClockSource+0x15e>
 8007b74:	2b10      	cmp	r3, #16
 8007b76:	d05a      	beq.n	8007c2e <HAL_TIM_ConfigClockSource+0x15e>
 8007b78:	e062      	b.n	8007c40 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b8a:	f000 fcb1 	bl	80084f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	609a      	str	r2, [r3, #8]
      break;
 8007ba6:	e04f      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bb8:	f000 fc9a 	bl	80084f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bca:	609a      	str	r2, [r3, #8]
      break;
 8007bcc:	e03c      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f000 fc0e 	bl	80083fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2150      	movs	r1, #80	; 0x50
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fc67 	bl	80084ba <TIM_ITRx_SetConfig>
      break;
 8007bec:	e02c      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f000 fc2d 	bl	800845a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2160      	movs	r1, #96	; 0x60
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 fc57 	bl	80084ba <TIM_ITRx_SetConfig>
      break;
 8007c0c:	e01c      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f000 fbee 	bl	80083fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2140      	movs	r1, #64	; 0x40
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fc47 	bl	80084ba <TIM_ITRx_SetConfig>
      break;
 8007c2c:	e00c      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4619      	mov	r1, r3
 8007c38:	4610      	mov	r0, r2
 8007c3a:	f000 fc3e 	bl	80084ba <TIM_ITRx_SetConfig>
      break;
 8007c3e:	e003      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	73fb      	strb	r3, [r7, #15]
      break;
 8007c44:	e000      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007c46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b083      	sub	sp, #12
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c7e:	bf00      	nop
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b083      	sub	sp, #12
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c92:	bf00      	nop
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
	...

08007cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a42      	ldr	r2, [pc, #264]	; (8007dd0 <TIM_Base_SetConfig+0x11c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d013      	beq.n	8007cf4 <TIM_Base_SetConfig+0x40>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd2:	d00f      	beq.n	8007cf4 <TIM_Base_SetConfig+0x40>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a3f      	ldr	r2, [pc, #252]	; (8007dd4 <TIM_Base_SetConfig+0x120>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d00b      	beq.n	8007cf4 <TIM_Base_SetConfig+0x40>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a3e      	ldr	r2, [pc, #248]	; (8007dd8 <TIM_Base_SetConfig+0x124>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d007      	beq.n	8007cf4 <TIM_Base_SetConfig+0x40>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a3d      	ldr	r2, [pc, #244]	; (8007ddc <TIM_Base_SetConfig+0x128>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d003      	beq.n	8007cf4 <TIM_Base_SetConfig+0x40>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a3c      	ldr	r2, [pc, #240]	; (8007de0 <TIM_Base_SetConfig+0x12c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d108      	bne.n	8007d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a31      	ldr	r2, [pc, #196]	; (8007dd0 <TIM_Base_SetConfig+0x11c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d01f      	beq.n	8007d4e <TIM_Base_SetConfig+0x9a>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d14:	d01b      	beq.n	8007d4e <TIM_Base_SetConfig+0x9a>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a2e      	ldr	r2, [pc, #184]	; (8007dd4 <TIM_Base_SetConfig+0x120>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d017      	beq.n	8007d4e <TIM_Base_SetConfig+0x9a>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a2d      	ldr	r2, [pc, #180]	; (8007dd8 <TIM_Base_SetConfig+0x124>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <TIM_Base_SetConfig+0x9a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a2c      	ldr	r2, [pc, #176]	; (8007ddc <TIM_Base_SetConfig+0x128>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00f      	beq.n	8007d4e <TIM_Base_SetConfig+0x9a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a2c      	ldr	r2, [pc, #176]	; (8007de4 <TIM_Base_SetConfig+0x130>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00b      	beq.n	8007d4e <TIM_Base_SetConfig+0x9a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a2b      	ldr	r2, [pc, #172]	; (8007de8 <TIM_Base_SetConfig+0x134>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d007      	beq.n	8007d4e <TIM_Base_SetConfig+0x9a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a2a      	ldr	r2, [pc, #168]	; (8007dec <TIM_Base_SetConfig+0x138>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d003      	beq.n	8007d4e <TIM_Base_SetConfig+0x9a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a25      	ldr	r2, [pc, #148]	; (8007de0 <TIM_Base_SetConfig+0x12c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d108      	bne.n	8007d60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a12      	ldr	r2, [pc, #72]	; (8007dd0 <TIM_Base_SetConfig+0x11c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d013      	beq.n	8007db4 <TIM_Base_SetConfig+0x100>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a13      	ldr	r2, [pc, #76]	; (8007ddc <TIM_Base_SetConfig+0x128>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00f      	beq.n	8007db4 <TIM_Base_SetConfig+0x100>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a13      	ldr	r2, [pc, #76]	; (8007de4 <TIM_Base_SetConfig+0x130>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d00b      	beq.n	8007db4 <TIM_Base_SetConfig+0x100>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a12      	ldr	r2, [pc, #72]	; (8007de8 <TIM_Base_SetConfig+0x134>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d007      	beq.n	8007db4 <TIM_Base_SetConfig+0x100>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a11      	ldr	r2, [pc, #68]	; (8007dec <TIM_Base_SetConfig+0x138>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d003      	beq.n	8007db4 <TIM_Base_SetConfig+0x100>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a0c      	ldr	r2, [pc, #48]	; (8007de0 <TIM_Base_SetConfig+0x12c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d103      	bne.n	8007dbc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	691a      	ldr	r2, [r3, #16]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	615a      	str	r2, [r3, #20]
}
 8007dc2:	bf00      	nop
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	40012c00 	.word	0x40012c00
 8007dd4:	40000400 	.word	0x40000400
 8007dd8:	40000800 	.word	0x40000800
 8007ddc:	40013400 	.word	0x40013400
 8007de0:	40015000 	.word	0x40015000
 8007de4:	40014000 	.word	0x40014000
 8007de8:	40014400 	.word	0x40014400
 8007dec:	40014800 	.word	0x40014800

08007df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	f023 0201 	bic.w	r2, r3, #1
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0303 	bic.w	r3, r3, #3
 8007e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f023 0302 	bic.w	r3, r3, #2
 8007e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a30      	ldr	r2, [pc, #192]	; (8007f0c <TIM_OC1_SetConfig+0x11c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d013      	beq.n	8007e78 <TIM_OC1_SetConfig+0x88>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a2f      	ldr	r2, [pc, #188]	; (8007f10 <TIM_OC1_SetConfig+0x120>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00f      	beq.n	8007e78 <TIM_OC1_SetConfig+0x88>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a2e      	ldr	r2, [pc, #184]	; (8007f14 <TIM_OC1_SetConfig+0x124>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00b      	beq.n	8007e78 <TIM_OC1_SetConfig+0x88>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a2d      	ldr	r2, [pc, #180]	; (8007f18 <TIM_OC1_SetConfig+0x128>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d007      	beq.n	8007e78 <TIM_OC1_SetConfig+0x88>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a2c      	ldr	r2, [pc, #176]	; (8007f1c <TIM_OC1_SetConfig+0x12c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <TIM_OC1_SetConfig+0x88>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a2b      	ldr	r2, [pc, #172]	; (8007f20 <TIM_OC1_SetConfig+0x130>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d10c      	bne.n	8007e92 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f023 0308 	bic.w	r3, r3, #8
 8007e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f023 0304 	bic.w	r3, r3, #4
 8007e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a1d      	ldr	r2, [pc, #116]	; (8007f0c <TIM_OC1_SetConfig+0x11c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d013      	beq.n	8007ec2 <TIM_OC1_SetConfig+0xd2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a1c      	ldr	r2, [pc, #112]	; (8007f10 <TIM_OC1_SetConfig+0x120>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00f      	beq.n	8007ec2 <TIM_OC1_SetConfig+0xd2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a1b      	ldr	r2, [pc, #108]	; (8007f14 <TIM_OC1_SetConfig+0x124>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00b      	beq.n	8007ec2 <TIM_OC1_SetConfig+0xd2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a1a      	ldr	r2, [pc, #104]	; (8007f18 <TIM_OC1_SetConfig+0x128>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d007      	beq.n	8007ec2 <TIM_OC1_SetConfig+0xd2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a19      	ldr	r2, [pc, #100]	; (8007f1c <TIM_OC1_SetConfig+0x12c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d003      	beq.n	8007ec2 <TIM_OC1_SetConfig+0xd2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a18      	ldr	r2, [pc, #96]	; (8007f20 <TIM_OC1_SetConfig+0x130>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d111      	bne.n	8007ee6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	621a      	str	r2, [r3, #32]
}
 8007f00:	bf00      	nop
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	40013400 	.word	0x40013400
 8007f14:	40014000 	.word	0x40014000
 8007f18:	40014400 	.word	0x40014400
 8007f1c:	40014800 	.word	0x40014800
 8007f20:	40015000 	.word	0x40015000

08007f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f023 0210 	bic.w	r2, r3, #16
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f023 0320 	bic.w	r3, r3, #32
 8007f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a2c      	ldr	r2, [pc, #176]	; (8008034 <TIM_OC2_SetConfig+0x110>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d007      	beq.n	8007f98 <TIM_OC2_SetConfig+0x74>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a2b      	ldr	r2, [pc, #172]	; (8008038 <TIM_OC2_SetConfig+0x114>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d003      	beq.n	8007f98 <TIM_OC2_SetConfig+0x74>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a2a      	ldr	r2, [pc, #168]	; (800803c <TIM_OC2_SetConfig+0x118>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d10d      	bne.n	8007fb4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	011b      	lsls	r3, r3, #4
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a1f      	ldr	r2, [pc, #124]	; (8008034 <TIM_OC2_SetConfig+0x110>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d013      	beq.n	8007fe4 <TIM_OC2_SetConfig+0xc0>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a1e      	ldr	r2, [pc, #120]	; (8008038 <TIM_OC2_SetConfig+0x114>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00f      	beq.n	8007fe4 <TIM_OC2_SetConfig+0xc0>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a1e      	ldr	r2, [pc, #120]	; (8008040 <TIM_OC2_SetConfig+0x11c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00b      	beq.n	8007fe4 <TIM_OC2_SetConfig+0xc0>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a1d      	ldr	r2, [pc, #116]	; (8008044 <TIM_OC2_SetConfig+0x120>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d007      	beq.n	8007fe4 <TIM_OC2_SetConfig+0xc0>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a1c      	ldr	r2, [pc, #112]	; (8008048 <TIM_OC2_SetConfig+0x124>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d003      	beq.n	8007fe4 <TIM_OC2_SetConfig+0xc0>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a17      	ldr	r2, [pc, #92]	; (800803c <TIM_OC2_SetConfig+0x118>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d113      	bne.n	800800c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ff2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	4313      	orrs	r3, r2
 800800a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	621a      	str	r2, [r3, #32]
}
 8008026:	bf00      	nop
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	40012c00 	.word	0x40012c00
 8008038:	40013400 	.word	0x40013400
 800803c:	40015000 	.word	0x40015000
 8008040:	40014000 	.word	0x40014000
 8008044:	40014400 	.word	0x40014400
 8008048:	40014800 	.word	0x40014800

0800804c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800807a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 0303 	bic.w	r3, r3, #3
 8008086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	021b      	lsls	r3, r3, #8
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a2b      	ldr	r2, [pc, #172]	; (8008158 <TIM_OC3_SetConfig+0x10c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d007      	beq.n	80080be <TIM_OC3_SetConfig+0x72>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a2a      	ldr	r2, [pc, #168]	; (800815c <TIM_OC3_SetConfig+0x110>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d003      	beq.n	80080be <TIM_OC3_SetConfig+0x72>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a29      	ldr	r2, [pc, #164]	; (8008160 <TIM_OC3_SetConfig+0x114>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d10d      	bne.n	80080da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	021b      	lsls	r3, r3, #8
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080d8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a1e      	ldr	r2, [pc, #120]	; (8008158 <TIM_OC3_SetConfig+0x10c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d013      	beq.n	800810a <TIM_OC3_SetConfig+0xbe>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a1d      	ldr	r2, [pc, #116]	; (800815c <TIM_OC3_SetConfig+0x110>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00f      	beq.n	800810a <TIM_OC3_SetConfig+0xbe>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a1d      	ldr	r2, [pc, #116]	; (8008164 <TIM_OC3_SetConfig+0x118>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00b      	beq.n	800810a <TIM_OC3_SetConfig+0xbe>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a1c      	ldr	r2, [pc, #112]	; (8008168 <TIM_OC3_SetConfig+0x11c>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d007      	beq.n	800810a <TIM_OC3_SetConfig+0xbe>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a1b      	ldr	r2, [pc, #108]	; (800816c <TIM_OC3_SetConfig+0x120>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d003      	beq.n	800810a <TIM_OC3_SetConfig+0xbe>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a16      	ldr	r2, [pc, #88]	; (8008160 <TIM_OC3_SetConfig+0x114>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d113      	bne.n	8008132 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	011b      	lsls	r3, r3, #4
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	621a      	str	r2, [r3, #32]
}
 800814c:	bf00      	nop
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	40012c00 	.word	0x40012c00
 800815c:	40013400 	.word	0x40013400
 8008160:	40015000 	.word	0x40015000
 8008164:	40014000 	.word	0x40014000
 8008168:	40014400 	.word	0x40014400
 800816c:	40014800 	.word	0x40014800

08008170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800819e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	031b      	lsls	r3, r3, #12
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a1a      	ldr	r2, [pc, #104]	; (8008238 <TIM_OC4_SetConfig+0xc8>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d013      	beq.n	80081fc <TIM_OC4_SetConfig+0x8c>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a19      	ldr	r2, [pc, #100]	; (800823c <TIM_OC4_SetConfig+0xcc>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00f      	beq.n	80081fc <TIM_OC4_SetConfig+0x8c>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a18      	ldr	r2, [pc, #96]	; (8008240 <TIM_OC4_SetConfig+0xd0>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00b      	beq.n	80081fc <TIM_OC4_SetConfig+0x8c>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a17      	ldr	r2, [pc, #92]	; (8008244 <TIM_OC4_SetConfig+0xd4>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d007      	beq.n	80081fc <TIM_OC4_SetConfig+0x8c>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a16      	ldr	r2, [pc, #88]	; (8008248 <TIM_OC4_SetConfig+0xd8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d003      	beq.n	80081fc <TIM_OC4_SetConfig+0x8c>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a15      	ldr	r2, [pc, #84]	; (800824c <TIM_OC4_SetConfig+0xdc>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d109      	bne.n	8008210 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	019b      	lsls	r3, r3, #6
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	4313      	orrs	r3, r2
 800820e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	621a      	str	r2, [r3, #32]
}
 800822a:	bf00      	nop
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40012c00 	.word	0x40012c00
 800823c:	40013400 	.word	0x40013400
 8008240:	40014000 	.word	0x40014000
 8008244:	40014400 	.word	0x40014400
 8008248:	40014800 	.word	0x40014800
 800824c:	40015000 	.word	0x40015000

08008250 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800827e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008294:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	041b      	lsls	r3, r3, #16
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	4313      	orrs	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a19      	ldr	r2, [pc, #100]	; (800830c <TIM_OC5_SetConfig+0xbc>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d013      	beq.n	80082d2 <TIM_OC5_SetConfig+0x82>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a18      	ldr	r2, [pc, #96]	; (8008310 <TIM_OC5_SetConfig+0xc0>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00f      	beq.n	80082d2 <TIM_OC5_SetConfig+0x82>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a17      	ldr	r2, [pc, #92]	; (8008314 <TIM_OC5_SetConfig+0xc4>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00b      	beq.n	80082d2 <TIM_OC5_SetConfig+0x82>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a16      	ldr	r2, [pc, #88]	; (8008318 <TIM_OC5_SetConfig+0xc8>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d007      	beq.n	80082d2 <TIM_OC5_SetConfig+0x82>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a15      	ldr	r2, [pc, #84]	; (800831c <TIM_OC5_SetConfig+0xcc>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d003      	beq.n	80082d2 <TIM_OC5_SetConfig+0x82>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a14      	ldr	r2, [pc, #80]	; (8008320 <TIM_OC5_SetConfig+0xd0>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d109      	bne.n	80082e6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	021b      	lsls	r3, r3, #8
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	621a      	str	r2, [r3, #32]
}
 8008300:	bf00      	nop
 8008302:	371c      	adds	r7, #28
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	40012c00 	.word	0x40012c00
 8008310:	40013400 	.word	0x40013400
 8008314:	40014000 	.word	0x40014000
 8008318:	40014400 	.word	0x40014400
 800831c:	40014800 	.word	0x40014800
 8008320:	40015000 	.word	0x40015000

08008324 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	021b      	lsls	r3, r3, #8
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800836a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	051b      	lsls	r3, r3, #20
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4313      	orrs	r3, r2
 8008376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a1a      	ldr	r2, [pc, #104]	; (80083e4 <TIM_OC6_SetConfig+0xc0>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d013      	beq.n	80083a8 <TIM_OC6_SetConfig+0x84>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a19      	ldr	r2, [pc, #100]	; (80083e8 <TIM_OC6_SetConfig+0xc4>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00f      	beq.n	80083a8 <TIM_OC6_SetConfig+0x84>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a18      	ldr	r2, [pc, #96]	; (80083ec <TIM_OC6_SetConfig+0xc8>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00b      	beq.n	80083a8 <TIM_OC6_SetConfig+0x84>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a17      	ldr	r2, [pc, #92]	; (80083f0 <TIM_OC6_SetConfig+0xcc>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d007      	beq.n	80083a8 <TIM_OC6_SetConfig+0x84>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a16      	ldr	r2, [pc, #88]	; (80083f4 <TIM_OC6_SetConfig+0xd0>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d003      	beq.n	80083a8 <TIM_OC6_SetConfig+0x84>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a15      	ldr	r2, [pc, #84]	; (80083f8 <TIM_OC6_SetConfig+0xd4>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d109      	bne.n	80083bc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	029b      	lsls	r3, r3, #10
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	621a      	str	r2, [r3, #32]
}
 80083d6:	bf00      	nop
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	40012c00 	.word	0x40012c00
 80083e8:	40013400 	.word	0x40013400
 80083ec:	40014000 	.word	0x40014000
 80083f0:	40014400 	.word	0x40014400
 80083f4:	40014800 	.word	0x40014800
 80083f8:	40015000 	.word	0x40015000

080083fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a1b      	ldr	r3, [r3, #32]
 800840c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	f023 0201 	bic.w	r2, r3, #1
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	011b      	lsls	r3, r3, #4
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	4313      	orrs	r3, r2
 8008430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f023 030a 	bic.w	r3, r3, #10
 8008438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	4313      	orrs	r3, r2
 8008440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	621a      	str	r2, [r3, #32]
}
 800844e:	bf00      	nop
 8008450:	371c      	adds	r7, #28
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800845a:	b480      	push	{r7}
 800845c:	b087      	sub	sp, #28
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	f023 0210 	bic.w	r2, r3, #16
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	031b      	lsls	r3, r3, #12
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	4313      	orrs	r3, r2
 800848e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008496:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	011b      	lsls	r3, r3, #4
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	4313      	orrs	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	621a      	str	r2, [r3, #32]
}
 80084ae:	bf00      	nop
 80084b0:	371c      	adds	r7, #28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	f043 0307 	orr.w	r3, r3, #7
 80084dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	609a      	str	r2, [r3, #8]
}
 80084e4:	bf00      	nop
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800850a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	021a      	lsls	r2, r3, #8
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	431a      	orrs	r2, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4313      	orrs	r3, r2
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	4313      	orrs	r3, r2
 800851c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	609a      	str	r2, [r3, #8]
}
 8008524:	bf00      	nop
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f003 031f 	and.w	r3, r3, #31
 8008542:	2201      	movs	r2, #1
 8008544:	fa02 f303 	lsl.w	r3, r2, r3
 8008548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a1a      	ldr	r2, [r3, #32]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	43db      	mvns	r3, r3
 8008552:	401a      	ands	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a1a      	ldr	r2, [r3, #32]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f003 031f 	and.w	r3, r3, #31
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	fa01 f303 	lsl.w	r3, r1, r3
 8008568:	431a      	orrs	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	621a      	str	r2, [r3, #32]
}
 800856e:	bf00      	nop
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
	...

0800857c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008590:	2302      	movs	r3, #2
 8008592:	e06d      	b.n	8008670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a30      	ldr	r2, [pc, #192]	; (800867c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d009      	beq.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a2f      	ldr	r2, [pc, #188]	; (8008680 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d004      	beq.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a2d      	ldr	r2, [pc, #180]	; (8008684 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d108      	bne.n	80085e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a1e      	ldr	r2, [pc, #120]	; (800867c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d01d      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008610:	d018      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a1c      	ldr	r2, [pc, #112]	; (8008688 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d013      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a1a      	ldr	r2, [pc, #104]	; (800868c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d00e      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a15      	ldr	r2, [pc, #84]	; (8008680 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d009      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a16      	ldr	r2, [pc, #88]	; (8008690 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d004      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a11      	ldr	r2, [pc, #68]	; (8008684 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d10c      	bne.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800864a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	4313      	orrs	r3, r2
 8008654:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	40012c00 	.word	0x40012c00
 8008680:	40013400 	.word	0x40013400
 8008684:	40015000 	.word	0x40015000
 8008688:	40000400 	.word	0x40000400
 800868c:	40000800 	.word	0x40000800
 8008690:	40014000 	.word	0x40014000

08008694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e06a      	b.n	8008786 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008716:	4313      	orrs	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	041b      	lsls	r3, r3, #16
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a19      	ldr	r2, [pc, #100]	; (8008794 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d009      	beq.n	8008748 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a17      	ldr	r2, [pc, #92]	; (8008798 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d004      	beq.n	8008748 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a16      	ldr	r2, [pc, #88]	; (800879c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d115      	bne.n	8008774 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	051b      	lsls	r3, r3, #20
 8008754:	4313      	orrs	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	4313      	orrs	r3, r2
 8008772:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	40012c00 	.word	0x40012c00
 8008798:	40013400 	.word	0x40013400
 800879c:	40015000 	.word	0x40015000

080087a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e040      	b.n	8008870 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d106      	bne.n	8008804 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7f9 ff18 	bl	8002634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2224      	movs	r2, #36	; 0x24
 8008808:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0201 	bic.w	r2, r2, #1
 8008818:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fbd4 	bl	8008fc8 <UART_SetConfig>
 8008820:	4603      	mov	r3, r0
 8008822:	2b01      	cmp	r3, #1
 8008824:	d101      	bne.n	800882a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e022      	b.n	8008870 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fd9c 	bl	8009370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0201 	orr.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fe23 	bl	80094b4 <UART_CheckIdleState>
 800886e:	4603      	mov	r3, r0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008878:	b480      	push	{r7}
 800887a:	b08b      	sub	sp, #44	; 0x2c
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800888a:	2b20      	cmp	r3, #32
 800888c:	d147      	bne.n	800891e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <HAL_UART_Transmit_IT+0x22>
 8008894:	88fb      	ldrh	r3, [r7, #6]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e040      	b.n	8008920 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	88fa      	ldrh	r2, [r7, #6]
 80088a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	88fa      	ldrh	r2, [r7, #6]
 80088b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2221      	movs	r2, #33	; 0x21
 80088c6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d0:	d107      	bne.n	80088e2 <HAL_UART_Transmit_IT+0x6a>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d103      	bne.n	80088e2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4a13      	ldr	r2, [pc, #76]	; (800892c <HAL_UART_Transmit_IT+0xb4>)
 80088de:	66da      	str	r2, [r3, #108]	; 0x6c
 80088e0:	e002      	b.n	80088e8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4a12      	ldr	r2, [pc, #72]	; (8008930 <HAL_UART_Transmit_IT+0xb8>)
 80088e6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	e853 3f00 	ldrex	r3, [r3]
 80088f4:	613b      	str	r3, [r7, #16]
   return(result);
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fc:	627b      	str	r3, [r7, #36]	; 0x24
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	623b      	str	r3, [r7, #32]
 8008908:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890a:	69f9      	ldr	r1, [r7, #28]
 800890c:	6a3a      	ldr	r2, [r7, #32]
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	61bb      	str	r3, [r7, #24]
   return(result);
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1e6      	bne.n	80088e8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	e000      	b.n	8008920 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800891e:	2302      	movs	r3, #2
  }
}
 8008920:	4618      	mov	r0, r3
 8008922:	372c      	adds	r7, #44	; 0x2c
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	08009a0d 	.word	0x08009a0d
 8008930:	08009955 	.word	0x08009955

08008934 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b08a      	sub	sp, #40	; 0x28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	4613      	mov	r3, r2
 8008940:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008948:	2b20      	cmp	r3, #32
 800894a:	d132      	bne.n	80089b2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <HAL_UART_Receive_IT+0x24>
 8008952:	88fb      	ldrh	r3, [r7, #6]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e02b      	b.n	80089b4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d018      	beq.n	80089a2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	e853 3f00 	ldrex	r3, [r3]
 800897c:	613b      	str	r3, [r7, #16]
   return(result);
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	623b      	str	r3, [r7, #32]
 8008990:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	69f9      	ldr	r1, [r7, #28]
 8008994:	6a3a      	ldr	r2, [r7, #32]
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	61bb      	str	r3, [r7, #24]
   return(result);
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e6      	bne.n	8008970 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80089a2:	88fb      	ldrh	r3, [r7, #6]
 80089a4:	461a      	mov	r2, r3
 80089a6:	68b9      	ldr	r1, [r7, #8]
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 fe93 	bl	80096d4 <UART_Start_Receive_IT>
 80089ae:	4603      	mov	r3, r0
 80089b0:	e000      	b.n	80089b4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80089b2:	2302      	movs	r3, #2
  }
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3728      	adds	r7, #40	; 0x28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b0ba      	sub	sp, #232	; 0xe8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80089e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80089e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80089ea:	4013      	ands	r3, r2
 80089ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80089f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d115      	bne.n	8008a24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80089f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fc:	f003 0320 	and.w	r3, r3, #32
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00f      	beq.n	8008a24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a08:	f003 0320 	and.w	r3, r3, #32
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d009      	beq.n	8008a24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 82ab 	beq.w	8008f70 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	4798      	blx	r3
      }
      return;
 8008a22:	e2a5      	b.n	8008f70 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 8117 	beq.w	8008c5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d106      	bne.n	8008a48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008a3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008a3e:	4b85      	ldr	r3, [pc, #532]	; (8008c54 <HAL_UART_IRQHandler+0x298>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 810a 	beq.w	8008c5c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d011      	beq.n	8008a78 <HAL_UART_IRQHandler+0xbc>
 8008a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00b      	beq.n	8008a78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2201      	movs	r2, #1
 8008a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a6e:	f043 0201 	orr.w	r2, r3, #1
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a7c:	f003 0302 	and.w	r3, r3, #2
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d011      	beq.n	8008aa8 <HAL_UART_IRQHandler+0xec>
 8008a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2202      	movs	r2, #2
 8008a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a9e:	f043 0204 	orr.w	r2, r3, #4
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aac:	f003 0304 	and.w	r3, r3, #4
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d011      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x11c>
 8008ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00b      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2204      	movs	r2, #4
 8008ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ace:	f043 0202 	orr.w	r2, r3, #2
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008adc:	f003 0308 	and.w	r3, r3, #8
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d017      	beq.n	8008b14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ae8:	f003 0320 	and.w	r3, r3, #32
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d105      	bne.n	8008afc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008af4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00b      	beq.n	8008b14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2208      	movs	r2, #8
 8008b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b0a:	f043 0208 	orr.w	r2, r3, #8
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d012      	beq.n	8008b46 <HAL_UART_IRQHandler+0x18a>
 8008b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00c      	beq.n	8008b46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b3c:	f043 0220 	orr.w	r2, r3, #32
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8211 	beq.w	8008f74 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b56:	f003 0320 	and.w	r3, r3, #32
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00d      	beq.n	8008b7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b62:	f003 0320 	and.w	r3, r3, #32
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d007      	beq.n	8008b7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8e:	2b40      	cmp	r3, #64	; 0x40
 8008b90:	d005      	beq.n	8008b9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d04f      	beq.n	8008c3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fe5e 	bl	8009860 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bae:	2b40      	cmp	r3, #64	; 0x40
 8008bb0:	d141      	bne.n	8008c36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3308      	adds	r3, #8
 8008bda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008bde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008bea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1d9      	bne.n	8008bb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d013      	beq.n	8008c2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c0a:	4a13      	ldr	r2, [pc, #76]	; (8008c58 <HAL_UART_IRQHandler+0x29c>)
 8008c0c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fb fba0 	bl	8004358 <HAL_DMA_Abort_IT>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d017      	beq.n	8008c4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008c28:	4610      	mov	r0, r2
 8008c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c2c:	e00f      	b.n	8008c4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f9b4 	bl	8008f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c34:	e00b      	b.n	8008c4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f9b0 	bl	8008f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c3c:	e007      	b.n	8008c4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f9ac 	bl	8008f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008c4c:	e192      	b.n	8008f74 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c4e:	bf00      	nop
    return;
 8008c50:	e190      	b.n	8008f74 <HAL_UART_IRQHandler+0x5b8>
 8008c52:	bf00      	nop
 8008c54:	04000120 	.word	0x04000120
 8008c58:	08009929 	.word	0x08009929

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	f040 814b 	bne.w	8008efc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c6a:	f003 0310 	and.w	r3, r3, #16
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 8144 	beq.w	8008efc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 813d 	beq.w	8008efc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2210      	movs	r2, #16
 8008c88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c94:	2b40      	cmp	r3, #64	; 0x40
 8008c96:	f040 80b5 	bne.w	8008e04 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ca6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 8164 	beq.w	8008f78 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	f080 815c 	bcs.w	8008f78 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	f000 8086 	beq.w	8008de2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ce2:	e853 3f00 	ldrex	r3, [r3]
 8008ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008cea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cf2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d04:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1da      	bne.n	8008cd6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3308      	adds	r3, #8
 8008d26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d2a:	e853 3f00 	ldrex	r3, [r3]
 8008d2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d32:	f023 0301 	bic.w	r3, r3, #1
 8008d36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3308      	adds	r3, #8
 8008d40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d50:	e841 2300 	strex	r3, r2, [r1]
 8008d54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e1      	bne.n	8008d20 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3308      	adds	r3, #8
 8008d62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3308      	adds	r3, #8
 8008d7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d88:	e841 2300 	strex	r3, r2, [r1]
 8008d8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e3      	bne.n	8008d5c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2220      	movs	r2, #32
 8008d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db2:	f023 0310 	bic.w	r3, r3, #16
 8008db6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008dc6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008dca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dcc:	e841 2300 	strex	r3, r2, [r1]
 8008dd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1e4      	bne.n	8008da2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fb fa82 	bl	80042e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2202      	movs	r2, #2
 8008de6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f8d7 	bl	8008fb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e02:	e0b9      	b.n	8008f78 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80ab 	beq.w	8008f7c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008e26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 80a6 	beq.w	8008f7c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	e853 3f00 	ldrex	r3, [r3]
 8008e3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e52:	647b      	str	r3, [r7, #68]	; 0x44
 8008e54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e5a:	e841 2300 	strex	r3, r2, [r1]
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1e4      	bne.n	8008e30 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	e853 3f00 	ldrex	r3, [r3]
 8008e74:	623b      	str	r3, [r7, #32]
   return(result);
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	f023 0301 	bic.w	r3, r3, #1
 8008e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3308      	adds	r3, #8
 8008e86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e8a:	633a      	str	r2, [r7, #48]	; 0x30
 8008e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e3      	bne.n	8008e66 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	e853 3f00 	ldrex	r3, [r3]
 8008ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 0310 	bic.w	r3, r3, #16
 8008ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ed4:	61fb      	str	r3, [r7, #28]
 8008ed6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	69b9      	ldr	r1, [r7, #24]
 8008eda:	69fa      	ldr	r2, [r7, #28]
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e4      	bne.n	8008eb2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008eee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f85b 	bl	8008fb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008efa:	e03f      	b.n	8008f7c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00e      	beq.n	8008f26 <HAL_UART_IRQHandler+0x56a>
 8008f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d008      	beq.n	8008f26 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008f1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 ffa6 	bl	8009e70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f24:	e02d      	b.n	8008f82 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00e      	beq.n	8008f50 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d008      	beq.n	8008f50 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d01c      	beq.n	8008f80 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	4798      	blx	r3
    }
    return;
 8008f4e:	e017      	b.n	8008f80 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d012      	beq.n	8008f82 <HAL_UART_IRQHandler+0x5c6>
 8008f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00c      	beq.n	8008f82 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fdaf 	bl	8009acc <UART_EndTransmit_IT>
    return;
 8008f6e:	e008      	b.n	8008f82 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008f70:	bf00      	nop
 8008f72:	e006      	b.n	8008f82 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008f74:	bf00      	nop
 8008f76:	e004      	b.n	8008f82 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008f78:	bf00      	nop
 8008f7a:	e002      	b.n	8008f82 <HAL_UART_IRQHandler+0x5c6>
      return;
 8008f7c:	bf00      	nop
 8008f7e:	e000      	b.n	8008f82 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008f80:	bf00      	nop
  }

}
 8008f82:	37e8      	adds	r7, #232	; 0xe8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	4b92      	ldr	r3, [pc, #584]	; (800923c <UART_SetConfig+0x274>)
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	6812      	ldr	r2, [r2, #0]
 8008ffa:	6979      	ldr	r1, [r7, #20]
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68da      	ldr	r2, [r3, #12]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	4313      	orrs	r3, r2
 8009024:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	430a      	orrs	r2, r1
 8009038:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a80      	ldr	r2, [pc, #512]	; (8009240 <UART_SetConfig+0x278>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d120      	bne.n	8009086 <UART_SetConfig+0xbe>
 8009044:	4b7f      	ldr	r3, [pc, #508]	; (8009244 <UART_SetConfig+0x27c>)
 8009046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009048:	f003 0303 	and.w	r3, r3, #3
 800904c:	2b03      	cmp	r3, #3
 800904e:	d817      	bhi.n	8009080 <UART_SetConfig+0xb8>
 8009050:	a201      	add	r2, pc, #4	; (adr r2, 8009058 <UART_SetConfig+0x90>)
 8009052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009056:	bf00      	nop
 8009058:	08009069 	.word	0x08009069
 800905c:	08009075 	.word	0x08009075
 8009060:	0800907b 	.word	0x0800907b
 8009064:	0800906f 	.word	0x0800906f
 8009068:	2301      	movs	r3, #1
 800906a:	77fb      	strb	r3, [r7, #31]
 800906c:	e0b5      	b.n	80091da <UART_SetConfig+0x212>
 800906e:	2302      	movs	r3, #2
 8009070:	77fb      	strb	r3, [r7, #31]
 8009072:	e0b2      	b.n	80091da <UART_SetConfig+0x212>
 8009074:	2304      	movs	r3, #4
 8009076:	77fb      	strb	r3, [r7, #31]
 8009078:	e0af      	b.n	80091da <UART_SetConfig+0x212>
 800907a:	2308      	movs	r3, #8
 800907c:	77fb      	strb	r3, [r7, #31]
 800907e:	e0ac      	b.n	80091da <UART_SetConfig+0x212>
 8009080:	2310      	movs	r3, #16
 8009082:	77fb      	strb	r3, [r7, #31]
 8009084:	e0a9      	b.n	80091da <UART_SetConfig+0x212>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a6f      	ldr	r2, [pc, #444]	; (8009248 <UART_SetConfig+0x280>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d124      	bne.n	80090da <UART_SetConfig+0x112>
 8009090:	4b6c      	ldr	r3, [pc, #432]	; (8009244 <UART_SetConfig+0x27c>)
 8009092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009098:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800909c:	d011      	beq.n	80090c2 <UART_SetConfig+0xfa>
 800909e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090a2:	d817      	bhi.n	80090d4 <UART_SetConfig+0x10c>
 80090a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090a8:	d011      	beq.n	80090ce <UART_SetConfig+0x106>
 80090aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090ae:	d811      	bhi.n	80090d4 <UART_SetConfig+0x10c>
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d003      	beq.n	80090bc <UART_SetConfig+0xf4>
 80090b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090b8:	d006      	beq.n	80090c8 <UART_SetConfig+0x100>
 80090ba:	e00b      	b.n	80090d4 <UART_SetConfig+0x10c>
 80090bc:	2300      	movs	r3, #0
 80090be:	77fb      	strb	r3, [r7, #31]
 80090c0:	e08b      	b.n	80091da <UART_SetConfig+0x212>
 80090c2:	2302      	movs	r3, #2
 80090c4:	77fb      	strb	r3, [r7, #31]
 80090c6:	e088      	b.n	80091da <UART_SetConfig+0x212>
 80090c8:	2304      	movs	r3, #4
 80090ca:	77fb      	strb	r3, [r7, #31]
 80090cc:	e085      	b.n	80091da <UART_SetConfig+0x212>
 80090ce:	2308      	movs	r3, #8
 80090d0:	77fb      	strb	r3, [r7, #31]
 80090d2:	e082      	b.n	80091da <UART_SetConfig+0x212>
 80090d4:	2310      	movs	r3, #16
 80090d6:	77fb      	strb	r3, [r7, #31]
 80090d8:	e07f      	b.n	80091da <UART_SetConfig+0x212>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a5b      	ldr	r2, [pc, #364]	; (800924c <UART_SetConfig+0x284>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d124      	bne.n	800912e <UART_SetConfig+0x166>
 80090e4:	4b57      	ldr	r3, [pc, #348]	; (8009244 <UART_SetConfig+0x27c>)
 80090e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80090ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80090f0:	d011      	beq.n	8009116 <UART_SetConfig+0x14e>
 80090f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80090f6:	d817      	bhi.n	8009128 <UART_SetConfig+0x160>
 80090f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090fc:	d011      	beq.n	8009122 <UART_SetConfig+0x15a>
 80090fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009102:	d811      	bhi.n	8009128 <UART_SetConfig+0x160>
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <UART_SetConfig+0x148>
 8009108:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800910c:	d006      	beq.n	800911c <UART_SetConfig+0x154>
 800910e:	e00b      	b.n	8009128 <UART_SetConfig+0x160>
 8009110:	2300      	movs	r3, #0
 8009112:	77fb      	strb	r3, [r7, #31]
 8009114:	e061      	b.n	80091da <UART_SetConfig+0x212>
 8009116:	2302      	movs	r3, #2
 8009118:	77fb      	strb	r3, [r7, #31]
 800911a:	e05e      	b.n	80091da <UART_SetConfig+0x212>
 800911c:	2304      	movs	r3, #4
 800911e:	77fb      	strb	r3, [r7, #31]
 8009120:	e05b      	b.n	80091da <UART_SetConfig+0x212>
 8009122:	2308      	movs	r3, #8
 8009124:	77fb      	strb	r3, [r7, #31]
 8009126:	e058      	b.n	80091da <UART_SetConfig+0x212>
 8009128:	2310      	movs	r3, #16
 800912a:	77fb      	strb	r3, [r7, #31]
 800912c:	e055      	b.n	80091da <UART_SetConfig+0x212>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a47      	ldr	r2, [pc, #284]	; (8009250 <UART_SetConfig+0x288>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d124      	bne.n	8009182 <UART_SetConfig+0x1ba>
 8009138:	4b42      	ldr	r3, [pc, #264]	; (8009244 <UART_SetConfig+0x27c>)
 800913a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009140:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009144:	d011      	beq.n	800916a <UART_SetConfig+0x1a2>
 8009146:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800914a:	d817      	bhi.n	800917c <UART_SetConfig+0x1b4>
 800914c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009150:	d011      	beq.n	8009176 <UART_SetConfig+0x1ae>
 8009152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009156:	d811      	bhi.n	800917c <UART_SetConfig+0x1b4>
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <UART_SetConfig+0x19c>
 800915c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009160:	d006      	beq.n	8009170 <UART_SetConfig+0x1a8>
 8009162:	e00b      	b.n	800917c <UART_SetConfig+0x1b4>
 8009164:	2300      	movs	r3, #0
 8009166:	77fb      	strb	r3, [r7, #31]
 8009168:	e037      	b.n	80091da <UART_SetConfig+0x212>
 800916a:	2302      	movs	r3, #2
 800916c:	77fb      	strb	r3, [r7, #31]
 800916e:	e034      	b.n	80091da <UART_SetConfig+0x212>
 8009170:	2304      	movs	r3, #4
 8009172:	77fb      	strb	r3, [r7, #31]
 8009174:	e031      	b.n	80091da <UART_SetConfig+0x212>
 8009176:	2308      	movs	r3, #8
 8009178:	77fb      	strb	r3, [r7, #31]
 800917a:	e02e      	b.n	80091da <UART_SetConfig+0x212>
 800917c:	2310      	movs	r3, #16
 800917e:	77fb      	strb	r3, [r7, #31]
 8009180:	e02b      	b.n	80091da <UART_SetConfig+0x212>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a33      	ldr	r2, [pc, #204]	; (8009254 <UART_SetConfig+0x28c>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d124      	bne.n	80091d6 <UART_SetConfig+0x20e>
 800918c:	4b2d      	ldr	r3, [pc, #180]	; (8009244 <UART_SetConfig+0x27c>)
 800918e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009190:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009194:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009198:	d011      	beq.n	80091be <UART_SetConfig+0x1f6>
 800919a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800919e:	d817      	bhi.n	80091d0 <UART_SetConfig+0x208>
 80091a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091a4:	d011      	beq.n	80091ca <UART_SetConfig+0x202>
 80091a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091aa:	d811      	bhi.n	80091d0 <UART_SetConfig+0x208>
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <UART_SetConfig+0x1f0>
 80091b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091b4:	d006      	beq.n	80091c4 <UART_SetConfig+0x1fc>
 80091b6:	e00b      	b.n	80091d0 <UART_SetConfig+0x208>
 80091b8:	2300      	movs	r3, #0
 80091ba:	77fb      	strb	r3, [r7, #31]
 80091bc:	e00d      	b.n	80091da <UART_SetConfig+0x212>
 80091be:	2302      	movs	r3, #2
 80091c0:	77fb      	strb	r3, [r7, #31]
 80091c2:	e00a      	b.n	80091da <UART_SetConfig+0x212>
 80091c4:	2304      	movs	r3, #4
 80091c6:	77fb      	strb	r3, [r7, #31]
 80091c8:	e007      	b.n	80091da <UART_SetConfig+0x212>
 80091ca:	2308      	movs	r3, #8
 80091cc:	77fb      	strb	r3, [r7, #31]
 80091ce:	e004      	b.n	80091da <UART_SetConfig+0x212>
 80091d0:	2310      	movs	r3, #16
 80091d2:	77fb      	strb	r3, [r7, #31]
 80091d4:	e001      	b.n	80091da <UART_SetConfig+0x212>
 80091d6:	2310      	movs	r3, #16
 80091d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091e2:	d16b      	bne.n	80092bc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80091e4:	7ffb      	ldrb	r3, [r7, #31]
 80091e6:	2b08      	cmp	r3, #8
 80091e8:	d838      	bhi.n	800925c <UART_SetConfig+0x294>
 80091ea:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <UART_SetConfig+0x228>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009215 	.word	0x08009215
 80091f4:	0800921d 	.word	0x0800921d
 80091f8:	08009225 	.word	0x08009225
 80091fc:	0800925d 	.word	0x0800925d
 8009200:	0800922b 	.word	0x0800922b
 8009204:	0800925d 	.word	0x0800925d
 8009208:	0800925d 	.word	0x0800925d
 800920c:	0800925d 	.word	0x0800925d
 8009210:	08009233 	.word	0x08009233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009214:	f7fd fcb4 	bl	8006b80 <HAL_RCC_GetPCLK1Freq>
 8009218:	61b8      	str	r0, [r7, #24]
        break;
 800921a:	e024      	b.n	8009266 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800921c:	f7fd fcd2 	bl	8006bc4 <HAL_RCC_GetPCLK2Freq>
 8009220:	61b8      	str	r0, [r7, #24]
        break;
 8009222:	e020      	b.n	8009266 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009224:	4b0c      	ldr	r3, [pc, #48]	; (8009258 <UART_SetConfig+0x290>)
 8009226:	61bb      	str	r3, [r7, #24]
        break;
 8009228:	e01d      	b.n	8009266 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800922a:	f7fd fc33 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 800922e:	61b8      	str	r0, [r7, #24]
        break;
 8009230:	e019      	b.n	8009266 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009236:	61bb      	str	r3, [r7, #24]
        break;
 8009238:	e015      	b.n	8009266 <UART_SetConfig+0x29e>
 800923a:	bf00      	nop
 800923c:	efff69f3 	.word	0xefff69f3
 8009240:	40013800 	.word	0x40013800
 8009244:	40021000 	.word	0x40021000
 8009248:	40004400 	.word	0x40004400
 800924c:	40004800 	.word	0x40004800
 8009250:	40004c00 	.word	0x40004c00
 8009254:	40005000 	.word	0x40005000
 8009258:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	77bb      	strb	r3, [r7, #30]
        break;
 8009264:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d073      	beq.n	8009354 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	005a      	lsls	r2, r3, #1
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	085b      	lsrs	r3, r3, #1
 8009276:	441a      	add	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009280:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	2b0f      	cmp	r3, #15
 8009286:	d916      	bls.n	80092b6 <UART_SetConfig+0x2ee>
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800928e:	d212      	bcs.n	80092b6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	b29b      	uxth	r3, r3
 8009294:	f023 030f 	bic.w	r3, r3, #15
 8009298:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	085b      	lsrs	r3, r3, #1
 800929e:	b29b      	uxth	r3, r3
 80092a0:	f003 0307 	and.w	r3, r3, #7
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	89fb      	ldrh	r3, [r7, #14]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	89fa      	ldrh	r2, [r7, #14]
 80092b2:	60da      	str	r2, [r3, #12]
 80092b4:	e04e      	b.n	8009354 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	77bb      	strb	r3, [r7, #30]
 80092ba:	e04b      	b.n	8009354 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092bc:	7ffb      	ldrb	r3, [r7, #31]
 80092be:	2b08      	cmp	r3, #8
 80092c0:	d827      	bhi.n	8009312 <UART_SetConfig+0x34a>
 80092c2:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <UART_SetConfig+0x300>)
 80092c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c8:	080092ed 	.word	0x080092ed
 80092cc:	080092f5 	.word	0x080092f5
 80092d0:	080092fd 	.word	0x080092fd
 80092d4:	08009313 	.word	0x08009313
 80092d8:	08009303 	.word	0x08009303
 80092dc:	08009313 	.word	0x08009313
 80092e0:	08009313 	.word	0x08009313
 80092e4:	08009313 	.word	0x08009313
 80092e8:	0800930b 	.word	0x0800930b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092ec:	f7fd fc48 	bl	8006b80 <HAL_RCC_GetPCLK1Freq>
 80092f0:	61b8      	str	r0, [r7, #24]
        break;
 80092f2:	e013      	b.n	800931c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092f4:	f7fd fc66 	bl	8006bc4 <HAL_RCC_GetPCLK2Freq>
 80092f8:	61b8      	str	r0, [r7, #24]
        break;
 80092fa:	e00f      	b.n	800931c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092fc:	4b1b      	ldr	r3, [pc, #108]	; (800936c <UART_SetConfig+0x3a4>)
 80092fe:	61bb      	str	r3, [r7, #24]
        break;
 8009300:	e00c      	b.n	800931c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009302:	f7fd fbc7 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8009306:	61b8      	str	r0, [r7, #24]
        break;
 8009308:	e008      	b.n	800931c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800930a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800930e:	61bb      	str	r3, [r7, #24]
        break;
 8009310:	e004      	b.n	800931c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	77bb      	strb	r3, [r7, #30]
        break;
 800931a:	bf00      	nop
    }

    if (pclk != 0U)
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d018      	beq.n	8009354 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	085a      	lsrs	r2, r3, #1
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	441a      	add	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	fbb2 f3f3 	udiv	r3, r2, r3
 8009334:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	2b0f      	cmp	r3, #15
 800933a:	d909      	bls.n	8009350 <UART_SetConfig+0x388>
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009342:	d205      	bcs.n	8009350 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	b29a      	uxth	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60da      	str	r2, [r3, #12]
 800934e:	e001      	b.n	8009354 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009360:	7fbb      	ldrb	r3, [r7, #30]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3720      	adds	r7, #32
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	007a1200 	.word	0x007a1200

08009370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00a      	beq.n	800939a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	430a      	orrs	r2, r1
 8009398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	f003 0304 	and.w	r3, r3, #4
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00a      	beq.n	80093de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	f003 0308 	and.w	r3, r3, #8
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	f003 0310 	and.w	r3, r3, #16
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00a      	beq.n	8009422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	430a      	orrs	r2, r1
 8009420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	f003 0320 	and.w	r3, r3, #32
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01a      	beq.n	8009486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800946e:	d10a      	bne.n	8009486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	605a      	str	r2, [r3, #4]
  }
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b098      	sub	sp, #96	; 0x60
 80094b8:	af02      	add	r7, sp, #8
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094c4:	f7f9 fa2a 	bl	800291c <HAL_GetTick>
 80094c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0308 	and.w	r3, r3, #8
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	d12e      	bne.n	8009536 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094e0:	2200      	movs	r2, #0
 80094e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f88c 	bl	8009604 <UART_WaitOnFlagUntilTimeout>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d021      	beq.n	8009536 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009506:	653b      	str	r3, [r7, #80]	; 0x50
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	461a      	mov	r2, r3
 800950e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009510:	647b      	str	r3, [r7, #68]	; 0x44
 8009512:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009516:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800951e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e6      	bne.n	80094f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2220      	movs	r2, #32
 8009528:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e062      	b.n	80095fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0304 	and.w	r3, r3, #4
 8009540:	2b04      	cmp	r3, #4
 8009542:	d149      	bne.n	80095d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800954c:	2200      	movs	r2, #0
 800954e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f856 	bl	8009604 <UART_WaitOnFlagUntilTimeout>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d03c      	beq.n	80095d8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	e853 3f00 	ldrex	r3, [r3]
 800956a:	623b      	str	r3, [r7, #32]
   return(result);
 800956c:	6a3b      	ldr	r3, [r7, #32]
 800956e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	461a      	mov	r2, r3
 800957a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800957c:	633b      	str	r3, [r7, #48]	; 0x30
 800957e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009580:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009584:	e841 2300 	strex	r3, r2, [r1]
 8009588:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1e6      	bne.n	800955e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3308      	adds	r3, #8
 8009596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	e853 3f00 	ldrex	r3, [r3]
 800959e:	60fb      	str	r3, [r7, #12]
   return(result);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 0301 	bic.w	r3, r3, #1
 80095a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3308      	adds	r3, #8
 80095ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095b0:	61fa      	str	r2, [r7, #28]
 80095b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b4:	69b9      	ldr	r1, [r7, #24]
 80095b6:	69fa      	ldr	r2, [r7, #28]
 80095b8:	e841 2300 	strex	r3, r2, [r1]
 80095bc:	617b      	str	r3, [r7, #20]
   return(result);
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1e5      	bne.n	8009590 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2220      	movs	r2, #32
 80095c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e011      	b.n	80095fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2220      	movs	r2, #32
 80095dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2220      	movs	r2, #32
 80095e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3758      	adds	r7, #88	; 0x58
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	603b      	str	r3, [r7, #0]
 8009610:	4613      	mov	r3, r2
 8009612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009614:	e049      	b.n	80096aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961c:	d045      	beq.n	80096aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800961e:	f7f9 f97d 	bl	800291c <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	429a      	cmp	r2, r3
 800962c:	d302      	bcc.n	8009634 <UART_WaitOnFlagUntilTimeout+0x30>
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e048      	b.n	80096ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0304 	and.w	r3, r3, #4
 8009642:	2b00      	cmp	r3, #0
 8009644:	d031      	beq.n	80096aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	f003 0308 	and.w	r3, r3, #8
 8009650:	2b08      	cmp	r3, #8
 8009652:	d110      	bne.n	8009676 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2208      	movs	r2, #8
 800965a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f000 f8ff 	bl	8009860 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2208      	movs	r2, #8
 8009666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e029      	b.n	80096ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009684:	d111      	bne.n	80096aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800968e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 f8e5 	bl	8009860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2220      	movs	r2, #32
 800969a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e00f      	b.n	80096ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	69da      	ldr	r2, [r3, #28]
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	4013      	ands	r3, r2
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	bf0c      	ite	eq
 80096ba:	2301      	moveq	r3, #1
 80096bc:	2300      	movne	r3, #0
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	461a      	mov	r2, r3
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d0a6      	beq.n	8009616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b097      	sub	sp, #92	; 0x5c
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	4613      	mov	r3, r2
 80096e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	88fa      	ldrh	r2, [r7, #6]
 80096ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	88fa      	ldrh	r2, [r7, #6]
 80096f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009706:	d10e      	bne.n	8009726 <UART_Start_Receive_IT+0x52>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d105      	bne.n	800971c <UART_Start_Receive_IT+0x48>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800971a:	e02d      	b.n	8009778 <UART_Start_Receive_IT+0xa4>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	22ff      	movs	r2, #255	; 0xff
 8009720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009724:	e028      	b.n	8009778 <UART_Start_Receive_IT+0xa4>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10d      	bne.n	800974a <UART_Start_Receive_IT+0x76>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d104      	bne.n	8009740 <UART_Start_Receive_IT+0x6c>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	22ff      	movs	r2, #255	; 0xff
 800973a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800973e:	e01b      	b.n	8009778 <UART_Start_Receive_IT+0xa4>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	227f      	movs	r2, #127	; 0x7f
 8009744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009748:	e016      	b.n	8009778 <UART_Start_Receive_IT+0xa4>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009752:	d10d      	bne.n	8009770 <UART_Start_Receive_IT+0x9c>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d104      	bne.n	8009766 <UART_Start_Receive_IT+0x92>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	227f      	movs	r2, #127	; 0x7f
 8009760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009764:	e008      	b.n	8009778 <UART_Start_Receive_IT+0xa4>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	223f      	movs	r2, #63	; 0x3f
 800976a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800976e:	e003      	b.n	8009778 <UART_Start_Receive_IT+0xa4>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2222      	movs	r2, #34	; 0x22
 8009784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3308      	adds	r3, #8
 800978e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009792:	e853 3f00 	ldrex	r3, [r3]
 8009796:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979a:	f043 0301 	orr.w	r3, r3, #1
 800979e:	657b      	str	r3, [r7, #84]	; 0x54
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3308      	adds	r3, #8
 80097a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80097aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097b0:	e841 2300 	strex	r3, r2, [r1]
 80097b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80097b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1e5      	bne.n	8009788 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097c4:	d107      	bne.n	80097d6 <UART_Start_Receive_IT+0x102>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d103      	bne.n	80097d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	4a21      	ldr	r2, [pc, #132]	; (8009858 <UART_Start_Receive_IT+0x184>)
 80097d2:	669a      	str	r2, [r3, #104]	; 0x68
 80097d4:	e002      	b.n	80097dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	4a20      	ldr	r2, [pc, #128]	; (800985c <UART_Start_Receive_IT+0x188>)
 80097da:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d019      	beq.n	8009818 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80097f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009802:	637b      	str	r3, [r7, #52]	; 0x34
 8009804:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009806:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e6      	bne.n	80097e4 <UART_Start_Receive_IT+0x110>
 8009816:	e018      	b.n	800984a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	613b      	str	r3, [r7, #16]
   return(result);
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	f043 0320 	orr.w	r3, r3, #32
 800982c:	653b      	str	r3, [r7, #80]	; 0x50
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	461a      	mov	r2, r3
 8009834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009836:	623b      	str	r3, [r7, #32]
 8009838:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	69f9      	ldr	r1, [r7, #28]
 800983c:	6a3a      	ldr	r2, [r7, #32]
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	61bb      	str	r3, [r7, #24]
   return(result);
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e6      	bne.n	8009818 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	375c      	adds	r7, #92	; 0x5c
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	08009cc9 	.word	0x08009cc9
 800985c:	08009b21 	.word	0x08009b21

08009860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009860:	b480      	push	{r7}
 8009862:	b095      	sub	sp, #84	; 0x54
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009870:	e853 3f00 	ldrex	r3, [r3]
 8009874:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800987c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009886:	643b      	str	r3, [r7, #64]	; 0x40
 8009888:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800988c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800988e:	e841 2300 	strex	r3, r2, [r1]
 8009892:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e6      	bne.n	8009868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3308      	adds	r3, #8
 80098a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	f023 0301 	bic.w	r3, r3, #1
 80098b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3308      	adds	r3, #8
 80098b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e5      	bne.n	800989a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d118      	bne.n	8009908 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	e853 3f00 	ldrex	r3, [r3]
 80098e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	f023 0310 	bic.w	r3, r3, #16
 80098ea:	647b      	str	r3, [r7, #68]	; 0x44
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	461a      	mov	r2, r3
 80098f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098f4:	61bb      	str	r3, [r7, #24]
 80098f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f8:	6979      	ldr	r1, [r7, #20]
 80098fa:	69ba      	ldr	r2, [r7, #24]
 80098fc:	e841 2300 	strex	r3, r2, [r1]
 8009900:	613b      	str	r3, [r7, #16]
   return(result);
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1e6      	bne.n	80098d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2220      	movs	r2, #32
 800990c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800991c:	bf00      	nop
 800991e:	3754      	adds	r7, #84	; 0x54
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f7ff fb28 	bl	8008f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800994c:	bf00      	nop
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009954:	b480      	push	{r7}
 8009956:	b08f      	sub	sp, #60	; 0x3c
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009960:	2b21      	cmp	r3, #33	; 0x21
 8009962:	d14d      	bne.n	8009a00 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800996a:	b29b      	uxth	r3, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	d132      	bne.n	80099d6 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	e853 3f00 	ldrex	r3, [r3]
 800997c:	61fb      	str	r3, [r7, #28]
   return(result);
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009984:	637b      	str	r3, [r7, #52]	; 0x34
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009990:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009996:	e841 2300 	strex	r3, r2, [r1]
 800999a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1e6      	bne.n	8009970 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	e853 3f00 	ldrex	r3, [r3]
 80099ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099b6:	633b      	str	r3, [r7, #48]	; 0x30
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	61bb      	str	r3, [r7, #24]
 80099c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	6979      	ldr	r1, [r7, #20]
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	613b      	str	r3, [r7, #16]
   return(result);
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e6      	bne.n	80099a2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80099d4:	e014      	b.n	8009a00 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099da:	781a      	ldrb	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	b292      	uxth	r2, r2
 80099e2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	3b01      	subs	r3, #1
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009a00:	bf00      	nop
 8009a02:	373c      	adds	r7, #60	; 0x3c
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b091      	sub	sp, #68	; 0x44
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a18:	2b21      	cmp	r3, #33	; 0x21
 8009a1a:	d151      	bne.n	8009ac0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d132      	bne.n	8009a8e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	e853 3f00 	ldrex	r3, [r3]
 8009a34:	623b      	str	r3, [r7, #32]
   return(result);
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	461a      	mov	r2, r3
 8009a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a46:	633b      	str	r3, [r7, #48]	; 0x30
 8009a48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a4e:	e841 2300 	strex	r3, r2, [r1]
 8009a52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1e6      	bne.n	8009a28 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	e853 3f00 	ldrex	r3, [r3]
 8009a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	461a      	mov	r2, r3
 8009a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a78:	61fb      	str	r3, [r7, #28]
 8009a7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7c:	69b9      	ldr	r1, [r7, #24]
 8009a7e:	69fa      	ldr	r2, [r7, #28]
 8009a80:	e841 2300 	strex	r3, r2, [r1]
 8009a84:	617b      	str	r3, [r7, #20]
   return(result);
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e6      	bne.n	8009a5a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009a8c:	e018      	b.n	8009ac0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a92:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a96:	881a      	ldrh	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009aa0:	b292      	uxth	r2, r2
 8009aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa8:	1c9a      	adds	r2, r3, #2
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009ac0:	bf00      	nop
 8009ac2:	3744      	adds	r7, #68	; 0x44
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	e853 3f00 	ldrex	r3, [r3]
 8009ae0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ae8:	61fb      	str	r3, [r7, #28]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	61bb      	str	r3, [r7, #24]
 8009af4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af6:	6979      	ldr	r1, [r7, #20]
 8009af8:	69ba      	ldr	r2, [r7, #24]
 8009afa:	e841 2300 	strex	r3, r2, [r1]
 8009afe:	613b      	str	r3, [r7, #16]
   return(result);
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1e6      	bne.n	8009ad4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff fa38 	bl	8008f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b18:	bf00      	nop
 8009b1a:	3720      	adds	r7, #32
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b09c      	sub	sp, #112	; 0x70
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b2e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b38:	2b22      	cmp	r3, #34	; 0x22
 8009b3a:	f040 80b9 	bne.w	8009cb0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009b48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009b4c:	b2d9      	uxtb	r1, r3
 8009b4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b58:	400a      	ands	r2, r1
 8009b5a:	b2d2      	uxtb	r2, r2
 8009b5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	3b01      	subs	r3, #1
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f040 809c 	bne.w	8009cc0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b90:	e853 3f00 	ldrex	r3, [r3]
 8009b94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ba6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ba8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009baa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bae:	e841 2300 	strex	r3, r2, [r1]
 8009bb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1e6      	bne.n	8009b88 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3308      	adds	r3, #8
 8009bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc4:	e853 3f00 	ldrex	r3, [r3]
 8009bc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bcc:	f023 0301 	bic.w	r3, r3, #1
 8009bd0:	667b      	str	r3, [r7, #100]	; 0x64
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009bda:	647a      	str	r2, [r7, #68]	; 0x44
 8009bdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009be0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e5      	bne.n	8009bba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d018      	beq.n	8009c42 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c24:	663b      	str	r3, [r7, #96]	; 0x60
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8009c30:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e6      	bne.n	8009c10 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d12e      	bne.n	8009ca8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	e853 3f00 	ldrex	r3, [r3]
 8009c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f023 0310 	bic.w	r3, r3, #16
 8009c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c6e:	61fb      	str	r3, [r7, #28]
 8009c70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c72:	69b9      	ldr	r1, [r7, #24]
 8009c74:	69fa      	ldr	r2, [r7, #28]
 8009c76:	e841 2300 	strex	r3, r2, [r1]
 8009c7a:	617b      	str	r3, [r7, #20]
   return(result);
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1e6      	bne.n	8009c50 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	f003 0310 	and.w	r3, r3, #16
 8009c8c:	2b10      	cmp	r3, #16
 8009c8e:	d103      	bne.n	8009c98 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2210      	movs	r2, #16
 8009c96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7ff f985 	bl	8008fb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ca6:	e00b      	b.n	8009cc0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7f6 fef9 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 8009cae:	e007      	b.n	8009cc0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	699a      	ldr	r2, [r3, #24]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f042 0208 	orr.w	r2, r2, #8
 8009cbe:	619a      	str	r2, [r3, #24]
}
 8009cc0:	bf00      	nop
 8009cc2:	3770      	adds	r7, #112	; 0x70
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b09c      	sub	sp, #112	; 0x70
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cd6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ce0:	2b22      	cmp	r3, #34	; 0x22
 8009ce2:	f040 80b9 	bne.w	8009e58 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009cec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009cf6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009cfa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009cfe:	4013      	ands	r3, r2
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0a:	1c9a      	adds	r2, r3, #2
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f040 809c 	bne.w	8009e68 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d38:	e853 3f00 	ldrex	r3, [r3]
 8009d3c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d44:	667b      	str	r3, [r7, #100]	; 0x64
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8009d50:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d56:	e841 2300 	strex	r3, r2, [r1]
 8009d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e6      	bne.n	8009d30 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3308      	adds	r3, #8
 8009d68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6c:	e853 3f00 	ldrex	r3, [r3]
 8009d70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	f023 0301 	bic.w	r3, r3, #1
 8009d78:	663b      	str	r3, [r7, #96]	; 0x60
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	3308      	adds	r3, #8
 8009d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d82:	643a      	str	r2, [r7, #64]	; 0x40
 8009d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d8a:	e841 2300 	strex	r3, r2, [r1]
 8009d8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1e5      	bne.n	8009d62 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d018      	beq.n	8009dea <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	e853 3f00 	ldrex	r3, [r3]
 8009dc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dd8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e6      	bne.n	8009db8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d12e      	bne.n	8009e50 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	f023 0310 	bic.w	r3, r3, #16
 8009e0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e16:	61bb      	str	r3, [r7, #24]
 8009e18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	6979      	ldr	r1, [r7, #20]
 8009e1c:	69ba      	ldr	r2, [r7, #24]
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	613b      	str	r3, [r7, #16]
   return(result);
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e6      	bne.n	8009df8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	f003 0310 	and.w	r3, r3, #16
 8009e34:	2b10      	cmp	r3, #16
 8009e36:	d103      	bne.n	8009e40 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2210      	movs	r2, #16
 8009e3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7ff f8b1 	bl	8008fb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e4e:	e00b      	b.n	8009e68 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7f6 fe25 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 8009e56:	e007      	b.n	8009e68 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	699a      	ldr	r2, [r3, #24]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0208 	orr.w	r2, r2, #8
 8009e66:	619a      	str	r2, [r3, #24]
}
 8009e68:	bf00      	nop
 8009e6a:	3770      	adds	r7, #112	; 0x70
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e96:	2b84      	cmp	r3, #132	; 0x84
 8009e98:	d005      	beq.n	8009ea6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009e9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	3303      	adds	r3, #3
 8009ea4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009eb8:	f001 f896 	bl	800afe8 <vTaskStartScheduler>
  
  return osOK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec4:	b089      	sub	sp, #36	; 0x24
 8009ec6:	af04      	add	r7, sp, #16
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	695b      	ldr	r3, [r3, #20]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d020      	beq.n	8009f16 <osThreadCreate+0x54>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d01c      	beq.n	8009f16 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685c      	ldr	r4, [r3, #4]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691e      	ldr	r6, [r3, #16]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7ff ffc8 	bl	8009e84 <makeFreeRtosPriority>
 8009ef4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	695b      	ldr	r3, [r3, #20]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009efe:	9202      	str	r2, [sp, #8]
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	9100      	str	r1, [sp, #0]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	4632      	mov	r2, r6
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f000 fe96 	bl	800ac3c <xTaskCreateStatic>
 8009f10:	4603      	mov	r3, r0
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	e01c      	b.n	8009f50 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685c      	ldr	r4, [r3, #4]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f22:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff ffaa 	bl	8009e84 <makeFreeRtosPriority>
 8009f30:	4602      	mov	r2, r0
 8009f32:	f107 030c 	add.w	r3, r7, #12
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	9200      	str	r2, [sp, #0]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	4632      	mov	r2, r6
 8009f3e:	4629      	mov	r1, r5
 8009f40:	4620      	mov	r0, r4
 8009f42:	f000 fed7 	bl	800acf4 <xTaskCreate>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d001      	beq.n	8009f50 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	e000      	b.n	8009f52 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009f50:	68fb      	ldr	r3, [r7, #12]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f5a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <osDelay+0x16>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	e000      	b.n	8009f72 <osDelay+0x18>
 8009f70:	2301      	movs	r3, #1
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 f804 	bl	800af80 <vTaskDelay>
  
  return osOK;
 8009f78:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b086      	sub	sp, #24
 8009f86:	af02      	add	r7, sp, #8
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00f      	beq.n	8009fb4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d10a      	bne.n	8009fb0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	2203      	movs	r2, #3
 8009fa0:	9200      	str	r2, [sp, #0]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	f000 f962 	bl	800a270 <xQueueGenericCreateStatic>
 8009fac:	4603      	mov	r3, r0
 8009fae:	e016      	b.n	8009fde <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e014      	b.n	8009fde <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d110      	bne.n	8009fdc <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009fba:	2203      	movs	r2, #3
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	2001      	movs	r0, #1
 8009fc0:	f000 f9cd 	bl	800a35e <xQueueGenericCreate>
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <osSemaphoreCreate+0x56>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 fa20 	bl	800a418 <xQueueGenericSend>
      return sema;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	e000      	b.n	8009fde <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009fdc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009fe6:	b590      	push	{r4, r7, lr}
 8009fe8:	b085      	sub	sp, #20
 8009fea:	af02      	add	r7, sp, #8
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d011      	beq.n	800a01c <osMessageCreate+0x36>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00d      	beq.n	800a01c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6818      	ldr	r0, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6859      	ldr	r1, [r3, #4]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	689a      	ldr	r2, [r3, #8]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	2400      	movs	r4, #0
 800a012:	9400      	str	r4, [sp, #0]
 800a014:	f000 f92c 	bl	800a270 <xQueueGenericCreateStatic>
 800a018:	4603      	mov	r3, r0
 800a01a:	e008      	b.n	800a02e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	4619      	mov	r1, r3
 800a028:	f000 f999 	bl	800a35e <xQueueGenericCreate>
 800a02c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a02e:	4618      	mov	r0, r3
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	bd90      	pop	{r4, r7, pc}

0800a036 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a036:	b480      	push	{r7}
 800a038:	b083      	sub	sp, #12
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f103 0208 	add.w	r2, r3, #8
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f04f 32ff 	mov.w	r2, #4294967295
 800a04e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f103 0208 	add.w	r2, r3, #8
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f103 0208 	add.w	r2, r3, #8
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a06a:	bf00      	nop
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a084:	bf00      	nop
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	689a      	ldr	r2, [r3, #8]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	683a      	ldr	r2, [r7, #0]
 800a0ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	601a      	str	r2, [r3, #0]
}
 800a0cc:	bf00      	nop
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ee:	d103      	bne.n	800a0f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	60fb      	str	r3, [r7, #12]
 800a0f6:	e00c      	b.n	800a112 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	60fb      	str	r3, [r7, #12]
 800a0fe:	e002      	b.n	800a106 <vListInsert+0x2e>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	60fb      	str	r3, [r7, #12]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d2f6      	bcs.n	800a100 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	1c5a      	adds	r2, r3, #1
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	601a      	str	r2, [r3, #0]
}
 800a13e:	bf00      	nop
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a14a:	b480      	push	{r7}
 800a14c:	b085      	sub	sp, #20
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	6892      	ldr	r2, [r2, #8]
 800a160:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	6852      	ldr	r2, [r2, #4]
 800a16a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	429a      	cmp	r2, r3
 800a174:	d103      	bne.n	800a17e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	689a      	ldr	r2, [r3, #8]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	1e5a      	subs	r2, r3, #1
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
	...

0800a1a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10a      	bne.n	800a1ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a1c6:	bf00      	nop
 800a1c8:	e7fe      	b.n	800a1c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a1ca:	f001 fe9b 	bl	800bf04 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d6:	68f9      	ldr	r1, [r7, #12]
 800a1d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a1da:	fb01 f303 	mul.w	r3, r1, r3
 800a1de:	441a      	add	r2, r3
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	68f9      	ldr	r1, [r7, #12]
 800a1fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a200:	fb01 f303 	mul.w	r3, r1, r3
 800a204:	441a      	add	r2, r3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	22ff      	movs	r2, #255	; 0xff
 800a20e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	22ff      	movs	r2, #255	; 0xff
 800a216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d114      	bne.n	800a24a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d01a      	beq.n	800a25e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	3310      	adds	r3, #16
 800a22c:	4618      	mov	r0, r3
 800a22e:	f001 f933 	bl	800b498 <xTaskRemoveFromEventList>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d012      	beq.n	800a25e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a238:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <xQueueGenericReset+0xcc>)
 800a23a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a23e:	601a      	str	r2, [r3, #0]
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	e009      	b.n	800a25e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3310      	adds	r3, #16
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff fef1 	bl	800a036 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	3324      	adds	r3, #36	; 0x24
 800a258:	4618      	mov	r0, r3
 800a25a:	f7ff feec 	bl	800a036 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a25e:	f001 fe81 	bl	800bf64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a262:	2301      	movs	r3, #1
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	e000ed04 	.word	0xe000ed04

0800a270 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08e      	sub	sp, #56	; 0x38
 800a274:	af02      	add	r7, sp, #8
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10a      	bne.n	800a29a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10a      	bne.n	800a2b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2b2:	bf00      	nop
 800a2b4:	e7fe      	b.n	800a2b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d002      	beq.n	800a2c2 <xQueueGenericCreateStatic+0x52>
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <xQueueGenericCreateStatic+0x56>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e000      	b.n	800a2c8 <xQueueGenericCreateStatic+0x58>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10a      	bne.n	800a2e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	623b      	str	r3, [r7, #32]
}
 800a2de:	bf00      	nop
 800a2e0:	e7fe      	b.n	800a2e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d102      	bne.n	800a2ee <xQueueGenericCreateStatic+0x7e>
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <xQueueGenericCreateStatic+0x82>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e000      	b.n	800a2f4 <xQueueGenericCreateStatic+0x84>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10a      	bne.n	800a30e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	61fb      	str	r3, [r7, #28]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a30e:	2348      	movs	r3, #72	; 0x48
 800a310:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2b48      	cmp	r3, #72	; 0x48
 800a316:	d00a      	beq.n	800a32e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	61bb      	str	r3, [r7, #24]
}
 800a32a:	bf00      	nop
 800a32c:	e7fe      	b.n	800a32c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00d      	beq.n	800a354 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a340:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	4613      	mov	r3, r2
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	68b9      	ldr	r1, [r7, #8]
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 f843 	bl	800a3da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a356:	4618      	mov	r0, r3
 800a358:	3730      	adds	r7, #48	; 0x30
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b08a      	sub	sp, #40	; 0x28
 800a362:	af02      	add	r7, sp, #8
 800a364:	60f8      	str	r0, [r7, #12]
 800a366:	60b9      	str	r1, [r7, #8]
 800a368:	4613      	mov	r3, r2
 800a36a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10a      	bne.n	800a388 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	613b      	str	r3, [r7, #16]
}
 800a384:	bf00      	nop
 800a386:	e7fe      	b.n	800a386 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d102      	bne.n	800a394 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	61fb      	str	r3, [r7, #28]
 800a392:	e004      	b.n	800a39e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	fb02 f303 	mul.w	r3, r2, r3
 800a39c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	3348      	adds	r3, #72	; 0x48
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f001 fe90 	bl	800c0c8 <pvPortMalloc>
 800a3a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00f      	beq.n	800a3d0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	3348      	adds	r3, #72	; 0x48
 800a3b4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3be:	79fa      	ldrb	r2, [r7, #7]
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	68b9      	ldr	r1, [r7, #8]
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f000 f805 	bl	800a3da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a3d0:	69bb      	ldr	r3, [r7, #24]
	}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3720      	adds	r7, #32
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	607a      	str	r2, [r7, #4]
 800a3e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d103      	bne.n	800a3f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	e002      	b.n	800a3fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a408:	2101      	movs	r1, #1
 800a40a:	69b8      	ldr	r0, [r7, #24]
 800a40c:	f7ff fec8 	bl	800a1a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a410:	bf00      	nop
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08e      	sub	sp, #56	; 0x38
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a426:	2300      	movs	r3, #0
 800a428:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xQueueGenericSend+0x32>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d103      	bne.n	800a458 <xQueueGenericSend+0x40>
 800a450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a454:	2b00      	cmp	r3, #0
 800a456:	d101      	bne.n	800a45c <xQueueGenericSend+0x44>
 800a458:	2301      	movs	r3, #1
 800a45a:	e000      	b.n	800a45e <xQueueGenericSend+0x46>
 800a45c:	2300      	movs	r3, #0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10a      	bne.n	800a478 <xQueueGenericSend+0x60>
	__asm volatile
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a474:	bf00      	nop
 800a476:	e7fe      	b.n	800a476 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d103      	bne.n	800a486 <xQueueGenericSend+0x6e>
 800a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a482:	2b01      	cmp	r3, #1
 800a484:	d101      	bne.n	800a48a <xQueueGenericSend+0x72>
 800a486:	2301      	movs	r3, #1
 800a488:	e000      	b.n	800a48c <xQueueGenericSend+0x74>
 800a48a:	2300      	movs	r3, #0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10a      	bne.n	800a4a6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	623b      	str	r3, [r7, #32]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4a6:	f001 f9bd 	bl	800b824 <xTaskGetSchedulerState>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d102      	bne.n	800a4b6 <xQueueGenericSend+0x9e>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <xQueueGenericSend+0xa2>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e000      	b.n	800a4bc <xQueueGenericSend+0xa4>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10a      	bne.n	800a4d6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	61fb      	str	r3, [r7, #28]
}
 800a4d2:	bf00      	nop
 800a4d4:	e7fe      	b.n	800a4d4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4d6:	f001 fd15 	bl	800bf04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d302      	bcc.n	800a4ec <xQueueGenericSend+0xd4>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d129      	bne.n	800a540 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	68b9      	ldr	r1, [r7, #8]
 800a4f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4f2:	f000 fa93 	bl	800aa1c <prvCopyDataToQueue>
 800a4f6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d010      	beq.n	800a522 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	3324      	adds	r3, #36	; 0x24
 800a504:	4618      	mov	r0, r3
 800a506:	f000 ffc7 	bl	800b498 <xTaskRemoveFromEventList>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d013      	beq.n	800a538 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a510:	4b3f      	ldr	r3, [pc, #252]	; (800a610 <xQueueGenericSend+0x1f8>)
 800a512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	e00a      	b.n	800a538 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a524:	2b00      	cmp	r3, #0
 800a526:	d007      	beq.n	800a538 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a528:	4b39      	ldr	r3, [pc, #228]	; (800a610 <xQueueGenericSend+0x1f8>)
 800a52a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a52e:	601a      	str	r2, [r3, #0]
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a538:	f001 fd14 	bl	800bf64 <vPortExitCritical>
				return pdPASS;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e063      	b.n	800a608 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d103      	bne.n	800a54e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a546:	f001 fd0d 	bl	800bf64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	e05c      	b.n	800a608 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a550:	2b00      	cmp	r3, #0
 800a552:	d106      	bne.n	800a562 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a554:	f107 0314 	add.w	r3, r7, #20
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 ffff 	bl	800b55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a55e:	2301      	movs	r3, #1
 800a560:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a562:	f001 fcff 	bl	800bf64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a566:	f000 fda9 	bl	800b0bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a56a:	f001 fccb 	bl	800bf04 <vPortEnterCritical>
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a574:	b25b      	sxtb	r3, r3
 800a576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57a:	d103      	bne.n	800a584 <xQueueGenericSend+0x16c>
 800a57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a58a:	b25b      	sxtb	r3, r3
 800a58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a590:	d103      	bne.n	800a59a <xQueueGenericSend+0x182>
 800a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a59a:	f001 fce3 	bl	800bf64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a59e:	1d3a      	adds	r2, r7, #4
 800a5a0:	f107 0314 	add.w	r3, r7, #20
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 ffee 	bl	800b588 <xTaskCheckForTimeOut>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d124      	bne.n	800a5fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5b4:	f000 fb2a 	bl	800ac0c <prvIsQueueFull>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d018      	beq.n	800a5f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	3310      	adds	r3, #16
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 ff42 	bl	800b450 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a5cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5ce:	f000 fab5 	bl	800ab3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a5d2:	f000 fd81 	bl	800b0d8 <xTaskResumeAll>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f47f af7c 	bne.w	800a4d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a5de:	4b0c      	ldr	r3, [pc, #48]	; (800a610 <xQueueGenericSend+0x1f8>)
 800a5e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	e772      	b.n	800a4d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a5f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5f2:	f000 faa3 	bl	800ab3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5f6:	f000 fd6f 	bl	800b0d8 <xTaskResumeAll>
 800a5fa:	e76c      	b.n	800a4d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a5fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5fe:	f000 fa9d 	bl	800ab3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a602:	f000 fd69 	bl	800b0d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a606:	2300      	movs	r3, #0
		}
	}
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3738      	adds	r7, #56	; 0x38
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	e000ed04 	.word	0xe000ed04

0800a614 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b08c      	sub	sp, #48	; 0x30
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a620:	2300      	movs	r3, #0
 800a622:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10a      	bne.n	800a644 <xQueueReceive+0x30>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	623b      	str	r3, [r7, #32]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d103      	bne.n	800a652 <xQueueReceive+0x3e>
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d101      	bne.n	800a656 <xQueueReceive+0x42>
 800a652:	2301      	movs	r3, #1
 800a654:	e000      	b.n	800a658 <xQueueReceive+0x44>
 800a656:	2300      	movs	r3, #0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10a      	bne.n	800a672 <xQueueReceive+0x5e>
	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a660:	f383 8811 	msr	BASEPRI, r3
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	61fb      	str	r3, [r7, #28]
}
 800a66e:	bf00      	nop
 800a670:	e7fe      	b.n	800a670 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a672:	f001 f8d7 	bl	800b824 <xTaskGetSchedulerState>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d102      	bne.n	800a682 <xQueueReceive+0x6e>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <xQueueReceive+0x72>
 800a682:	2301      	movs	r3, #1
 800a684:	e000      	b.n	800a688 <xQueueReceive+0x74>
 800a686:	2300      	movs	r3, #0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10a      	bne.n	800a6a2 <xQueueReceive+0x8e>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	61bb      	str	r3, [r7, #24]
}
 800a69e:	bf00      	nop
 800a6a0:	e7fe      	b.n	800a6a0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6a2:	f001 fc2f 	bl	800bf04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d01f      	beq.n	800a6f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6b2:	68b9      	ldr	r1, [r7, #8]
 800a6b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6b6:	f000 fa1b 	bl	800aaf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	1e5a      	subs	r2, r3, #1
 800a6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00f      	beq.n	800a6ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6cc:	3310      	adds	r3, #16
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 fee2 	bl	800b498 <xTaskRemoveFromEventList>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d007      	beq.n	800a6ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6da:	4b3d      	ldr	r3, [pc, #244]	; (800a7d0 <xQueueReceive+0x1bc>)
 800a6dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e0:	601a      	str	r2, [r3, #0]
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6ea:	f001 fc3b 	bl	800bf64 <vPortExitCritical>
				return pdPASS;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e069      	b.n	800a7c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d103      	bne.n	800a700 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6f8:	f001 fc34 	bl	800bf64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	e062      	b.n	800a7c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a702:	2b00      	cmp	r3, #0
 800a704:	d106      	bne.n	800a714 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a706:	f107 0310 	add.w	r3, r7, #16
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 ff26 	bl	800b55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a710:	2301      	movs	r3, #1
 800a712:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a714:	f001 fc26 	bl	800bf64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a718:	f000 fcd0 	bl	800b0bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a71c:	f001 fbf2 	bl	800bf04 <vPortEnterCritical>
 800a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a726:	b25b      	sxtb	r3, r3
 800a728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72c:	d103      	bne.n	800a736 <xQueueReceive+0x122>
 800a72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a73c:	b25b      	sxtb	r3, r3
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a742:	d103      	bne.n	800a74c <xQueueReceive+0x138>
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	2200      	movs	r2, #0
 800a748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a74c:	f001 fc0a 	bl	800bf64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a750:	1d3a      	adds	r2, r7, #4
 800a752:	f107 0310 	add.w	r3, r7, #16
 800a756:	4611      	mov	r1, r2
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 ff15 	bl	800b588 <xTaskCheckForTimeOut>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d123      	bne.n	800a7ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a766:	f000 fa3b 	bl	800abe0 <prvIsQueueEmpty>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d017      	beq.n	800a7a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	3324      	adds	r3, #36	; 0x24
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	4611      	mov	r1, r2
 800a778:	4618      	mov	r0, r3
 800a77a:	f000 fe69 	bl	800b450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a780:	f000 f9dc 	bl	800ab3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a784:	f000 fca8 	bl	800b0d8 <xTaskResumeAll>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d189      	bne.n	800a6a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a78e:	4b10      	ldr	r3, [pc, #64]	; (800a7d0 <xQueueReceive+0x1bc>)
 800a790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	e780      	b.n	800a6a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a2:	f000 f9cb 	bl	800ab3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7a6:	f000 fc97 	bl	800b0d8 <xTaskResumeAll>
 800a7aa:	e77a      	b.n	800a6a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ae:	f000 f9c5 	bl	800ab3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7b2:	f000 fc91 	bl	800b0d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b8:	f000 fa12 	bl	800abe0 <prvIsQueueEmpty>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f43f af6f 	beq.w	800a6a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3730      	adds	r7, #48	; 0x30
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	e000ed04 	.word	0xe000ed04

0800a7d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08e      	sub	sp, #56	; 0x38
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10a      	bne.n	800a806 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	623b      	str	r3, [r7, #32]
}
 800a802:	bf00      	nop
 800a804:	e7fe      	b.n	800a804 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	61fb      	str	r3, [r7, #28]
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a824:	f000 fffe 	bl	800b824 <xTaskGetSchedulerState>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d102      	bne.n	800a834 <xQueueSemaphoreTake+0x60>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <xQueueSemaphoreTake+0x64>
 800a834:	2301      	movs	r3, #1
 800a836:	e000      	b.n	800a83a <xQueueSemaphoreTake+0x66>
 800a838:	2300      	movs	r3, #0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10a      	bne.n	800a854 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	61bb      	str	r3, [r7, #24]
}
 800a850:	bf00      	nop
 800a852:	e7fe      	b.n	800a852 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a854:	f001 fb56 	bl	800bf04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	2b00      	cmp	r3, #0
 800a862:	d024      	beq.n	800a8ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a866:	1e5a      	subs	r2, r3, #1
 800a868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d104      	bne.n	800a87e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a874:	f001 f9a0 	bl	800bbb8 <pvTaskIncrementMutexHeldCount>
 800a878:	4602      	mov	r2, r0
 800a87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00f      	beq.n	800a8a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a888:	3310      	adds	r3, #16
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 fe04 	bl	800b498 <xTaskRemoveFromEventList>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d007      	beq.n	800a8a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a896:	4b54      	ldr	r3, [pc, #336]	; (800a9e8 <xQueueSemaphoreTake+0x214>)
 800a898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8a6:	f001 fb5d 	bl	800bf64 <vPortExitCritical>
				return pdPASS;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e097      	b.n	800a9de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d111      	bne.n	800a8d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	617b      	str	r3, [r7, #20]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a8d0:	f001 fb48 	bl	800bf64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	e082      	b.n	800a9de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d106      	bne.n	800a8ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8de:	f107 030c 	add.w	r3, r7, #12
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f000 fe3a 	bl	800b55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8ec:	f001 fb3a 	bl	800bf64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8f0:	f000 fbe4 	bl	800b0bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8f4:	f001 fb06 	bl	800bf04 <vPortEnterCritical>
 800a8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8fe:	b25b      	sxtb	r3, r3
 800a900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a904:	d103      	bne.n	800a90e <xQueueSemaphoreTake+0x13a>
 800a906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a914:	b25b      	sxtb	r3, r3
 800a916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91a:	d103      	bne.n	800a924 <xQueueSemaphoreTake+0x150>
 800a91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a924:	f001 fb1e 	bl	800bf64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a928:	463a      	mov	r2, r7
 800a92a:	f107 030c 	add.w	r3, r7, #12
 800a92e:	4611      	mov	r1, r2
 800a930:	4618      	mov	r0, r3
 800a932:	f000 fe29 	bl	800b588 <xTaskCheckForTimeOut>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d132      	bne.n	800a9a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a93c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a93e:	f000 f94f 	bl	800abe0 <prvIsQueueEmpty>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d026      	beq.n	800a996 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d109      	bne.n	800a964 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a950:	f001 fad8 	bl	800bf04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 ff81 	bl	800b860 <xTaskPriorityInherit>
 800a95e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a960:	f001 fb00 	bl	800bf64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a966:	3324      	adds	r3, #36	; 0x24
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	4611      	mov	r1, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f000 fd6f 	bl	800b450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a974:	f000 f8e2 	bl	800ab3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a978:	f000 fbae 	bl	800b0d8 <xTaskResumeAll>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f47f af68 	bne.w	800a854 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a984:	4b18      	ldr	r3, [pc, #96]	; (800a9e8 <xQueueSemaphoreTake+0x214>)
 800a986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	e75e      	b.n	800a854 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a998:	f000 f8d0 	bl	800ab3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a99c:	f000 fb9c 	bl	800b0d8 <xTaskResumeAll>
 800a9a0:	e758      	b.n	800a854 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a9a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9a4:	f000 f8ca 	bl	800ab3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9a8:	f000 fb96 	bl	800b0d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9ae:	f000 f917 	bl	800abe0 <prvIsQueueEmpty>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f43f af4d 	beq.w	800a854 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00d      	beq.n	800a9dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a9c0:	f001 faa0 	bl	800bf04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a9c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9c6:	f000 f811 	bl	800a9ec <prvGetDisinheritPriorityAfterTimeout>
 800a9ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f001 f850 	bl	800ba78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a9d8:	f001 fac4 	bl	800bf64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a9dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3738      	adds	r7, #56	; 0x38
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	e000ed04 	.word	0xe000ed04

0800a9ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d006      	beq.n	800aa0a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f1c3 0307 	rsb	r3, r3, #7
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	e001      	b.n	800aa0e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
	}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10d      	bne.n	800aa56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d14d      	bne.n	800aade <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 ff90 	bl	800b96c <xTaskPriorityDisinherit>
 800aa4c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	605a      	str	r2, [r3, #4]
 800aa54:	e043      	b.n	800aade <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d119      	bne.n	800aa90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6898      	ldr	r0, [r3, #8]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa64:	461a      	mov	r2, r3
 800aa66:	68b9      	ldr	r1, [r7, #8]
 800aa68:	f001 fd8c 	bl	800c584 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	689a      	ldr	r2, [r3, #8]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa74:	441a      	add	r2, r3
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	689a      	ldr	r2, [r3, #8]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d32b      	bcc.n	800aade <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	609a      	str	r2, [r3, #8]
 800aa8e:	e026      	b.n	800aade <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	68d8      	ldr	r0, [r3, #12]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa98:	461a      	mov	r2, r3
 800aa9a:	68b9      	ldr	r1, [r7, #8]
 800aa9c:	f001 fd72 	bl	800c584 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	68da      	ldr	r2, [r3, #12]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa8:	425b      	negs	r3, r3
 800aaaa:	441a      	add	r2, r3
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	68da      	ldr	r2, [r3, #12]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d207      	bcs.n	800aacc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	685a      	ldr	r2, [r3, #4]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac4:	425b      	negs	r3, r3
 800aac6:	441a      	add	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d105      	bne.n	800aade <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	3b01      	subs	r3, #1
 800aadc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	1c5a      	adds	r2, r3, #1
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aae6:	697b      	ldr	r3, [r7, #20]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d018      	beq.n	800ab34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68da      	ldr	r2, [r3, #12]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0a:	441a      	add	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68da      	ldr	r2, [r3, #12]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d303      	bcc.n	800ab24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	68d9      	ldr	r1, [r3, #12]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	6838      	ldr	r0, [r7, #0]
 800ab30:	f001 fd28 	bl	800c584 <memcpy>
	}
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab44:	f001 f9de 	bl	800bf04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab50:	e011      	b.n	800ab76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d012      	beq.n	800ab80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	3324      	adds	r3, #36	; 0x24
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 fc9a 	bl	800b498 <xTaskRemoveFromEventList>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab6a:	f000 fd6f 	bl	800b64c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab6e:	7bfb      	ldrb	r3, [r7, #15]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	dce9      	bgt.n	800ab52 <prvUnlockQueue+0x16>
 800ab7e:	e000      	b.n	800ab82 <prvUnlockQueue+0x46>
					break;
 800ab80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	22ff      	movs	r2, #255	; 0xff
 800ab86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ab8a:	f001 f9eb 	bl	800bf64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab8e:	f001 f9b9 	bl	800bf04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab9a:	e011      	b.n	800abc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d012      	beq.n	800abca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3310      	adds	r3, #16
 800aba8:	4618      	mov	r0, r3
 800abaa:	f000 fc75 	bl	800b498 <xTaskRemoveFromEventList>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d001      	beq.n	800abb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800abb4:	f000 fd4a 	bl	800b64c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800abb8:	7bbb      	ldrb	r3, [r7, #14]
 800abba:	3b01      	subs	r3, #1
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	dce9      	bgt.n	800ab9c <prvUnlockQueue+0x60>
 800abc8:	e000      	b.n	800abcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800abca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	22ff      	movs	r2, #255	; 0xff
 800abd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800abd4:	f001 f9c6 	bl	800bf64 <vPortExitCritical>
}
 800abd8:	bf00      	nop
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abe8:	f001 f98c 	bl	800bf04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d102      	bne.n	800abfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800abf4:	2301      	movs	r3, #1
 800abf6:	60fb      	str	r3, [r7, #12]
 800abf8:	e001      	b.n	800abfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800abfa:	2300      	movs	r3, #0
 800abfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abfe:	f001 f9b1 	bl	800bf64 <vPortExitCritical>

	return xReturn;
 800ac02:	68fb      	ldr	r3, [r7, #12]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac14:	f001 f976 	bl	800bf04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d102      	bne.n	800ac2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac24:	2301      	movs	r3, #1
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	e001      	b.n	800ac2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac2e:	f001 f999 	bl	800bf64 <vPortExitCritical>

	return xReturn;
 800ac32:	68fb      	ldr	r3, [r7, #12]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b08e      	sub	sp, #56	; 0x38
 800ac40:	af04      	add	r7, sp, #16
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
 800ac48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10a      	bne.n	800ac66 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	623b      	str	r3, [r7, #32]
}
 800ac62:	bf00      	nop
 800ac64:	e7fe      	b.n	800ac64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10a      	bne.n	800ac82 <xTaskCreateStatic+0x46>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	61fb      	str	r3, [r7, #28]
}
 800ac7e:	bf00      	nop
 800ac80:	e7fe      	b.n	800ac80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac82:	23a0      	movs	r3, #160	; 0xa0
 800ac84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	2ba0      	cmp	r3, #160	; 0xa0
 800ac8a:	d00a      	beq.n	800aca2 <xTaskCreateStatic+0x66>
	__asm volatile
 800ac8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	61bb      	str	r3, [r7, #24]
}
 800ac9e:	bf00      	nop
 800aca0:	e7fe      	b.n	800aca0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d01e      	beq.n	800ace6 <xTaskCreateStatic+0xaa>
 800aca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d01b      	beq.n	800ace6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acb6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	2202      	movs	r2, #2
 800acbc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800acc0:	2300      	movs	r3, #0
 800acc2:	9303      	str	r3, [sp, #12]
 800acc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc6:	9302      	str	r3, [sp, #8]
 800acc8:	f107 0314 	add.w	r3, r7, #20
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	68b9      	ldr	r1, [r7, #8]
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f000 f851 	bl	800ad80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ace0:	f000 f8e4 	bl	800aeac <prvAddNewTaskToReadyList>
 800ace4:	e001      	b.n	800acea <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800ace6:	2300      	movs	r3, #0
 800ace8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800acea:	697b      	ldr	r3, [r7, #20]
	}
 800acec:	4618      	mov	r0, r3
 800acee:	3728      	adds	r7, #40	; 0x28
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b08c      	sub	sp, #48	; 0x30
 800acf8:	af04      	add	r7, sp, #16
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	4613      	mov	r3, r2
 800ad02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad04:	88fb      	ldrh	r3, [r7, #6]
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f001 f9dd 	bl	800c0c8 <pvPortMalloc>
 800ad0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00e      	beq.n	800ad34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ad16:	20a0      	movs	r0, #160	; 0xa0
 800ad18:	f001 f9d6 	bl	800c0c8 <pvPortMalloc>
 800ad1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d003      	beq.n	800ad2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	631a      	str	r2, [r3, #48]	; 0x30
 800ad2a:	e005      	b.n	800ad38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad2c:	6978      	ldr	r0, [r7, #20]
 800ad2e:	f001 fa8f 	bl	800c250 <vPortFree>
 800ad32:	e001      	b.n	800ad38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d017      	beq.n	800ad6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad46:	88fa      	ldrh	r2, [r7, #6]
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9303      	str	r3, [sp, #12]
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	9302      	str	r3, [sp, #8]
 800ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad52:	9301      	str	r3, [sp, #4]
 800ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	68b9      	ldr	r1, [r7, #8]
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f000 f80f 	bl	800ad80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad62:	69f8      	ldr	r0, [r7, #28]
 800ad64:	f000 f8a2 	bl	800aeac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	61bb      	str	r3, [r7, #24]
 800ad6c:	e002      	b.n	800ad74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad74:	69bb      	ldr	r3, [r7, #24]
	}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3720      	adds	r7, #32
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
	...

0800ad80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b088      	sub	sp, #32
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	f023 0307 	bic.w	r3, r3, #7
 800ada6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	f003 0307 	and.w	r3, r3, #7
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00a      	beq.n	800adc8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	617b      	str	r3, [r7, #20]
}
 800adc4:	bf00      	nop
 800adc6:	e7fe      	b.n	800adc6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adc8:	2300      	movs	r3, #0
 800adca:	61fb      	str	r3, [r7, #28]
 800adcc:	e012      	b.n	800adf4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	4413      	add	r3, r2
 800add4:	7819      	ldrb	r1, [r3, #0]
 800add6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	4413      	add	r3, r2
 800addc:	3334      	adds	r3, #52	; 0x34
 800adde:	460a      	mov	r2, r1
 800ade0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ade2:	68ba      	ldr	r2, [r7, #8]
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	4413      	add	r3, r2
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d006      	beq.n	800adfc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	3301      	adds	r3, #1
 800adf2:	61fb      	str	r3, [r7, #28]
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	2b0f      	cmp	r3, #15
 800adf8:	d9e9      	bls.n	800adce <prvInitialiseNewTask+0x4e>
 800adfa:	e000      	b.n	800adfe <prvInitialiseNewTask+0x7e>
		{
			break;
 800adfc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae08:	2b06      	cmp	r3, #6
 800ae0a:	d901      	bls.n	800ae10 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae0c:	2306      	movs	r3, #6
 800ae0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae1a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	2200      	movs	r2, #0
 800ae20:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	3304      	adds	r3, #4
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7ff f925 	bl	800a076 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2e:	3318      	adds	r3, #24
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff f920 	bl	800a076 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3e:	f1c3 0207 	rsb	r2, r3, #7
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5e:	334c      	adds	r3, #76	; 0x4c
 800ae60:	224c      	movs	r2, #76	; 0x4c
 800ae62:	2100      	movs	r1, #0
 800ae64:	4618      	mov	r0, r3
 800ae66:	f001 fb09 	bl	800c47c <memset>
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	4a0c      	ldr	r2, [pc, #48]	; (800aea0 <prvInitialiseNewTask+0x120>)
 800ae6e:	651a      	str	r2, [r3, #80]	; 0x50
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	4a0c      	ldr	r2, [pc, #48]	; (800aea4 <prvInitialiseNewTask+0x124>)
 800ae74:	655a      	str	r2, [r3, #84]	; 0x54
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	4a0b      	ldr	r2, [pc, #44]	; (800aea8 <prvInitialiseNewTask+0x128>)
 800ae7a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	68f9      	ldr	r1, [r7, #12]
 800ae80:	69b8      	ldr	r0, [r7, #24]
 800ae82:	f000 ff13 	bl	800bcac <pxPortInitialiseStack>
 800ae86:	4602      	mov	r2, r0
 800ae88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d002      	beq.n	800ae98 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae98:	bf00      	nop
 800ae9a:	3720      	adds	r7, #32
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	20002f3c 	.word	0x20002f3c
 800aea4:	20002fa4 	.word	0x20002fa4
 800aea8:	2000300c 	.word	0x2000300c

0800aeac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aeb4:	f001 f826 	bl	800bf04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aeb8:	4b2a      	ldr	r3, [pc, #168]	; (800af64 <prvAddNewTaskToReadyList+0xb8>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	4a29      	ldr	r2, [pc, #164]	; (800af64 <prvAddNewTaskToReadyList+0xb8>)
 800aec0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aec2:	4b29      	ldr	r3, [pc, #164]	; (800af68 <prvAddNewTaskToReadyList+0xbc>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d109      	bne.n	800aede <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aeca:	4a27      	ldr	r2, [pc, #156]	; (800af68 <prvAddNewTaskToReadyList+0xbc>)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aed0:	4b24      	ldr	r3, [pc, #144]	; (800af64 <prvAddNewTaskToReadyList+0xb8>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d110      	bne.n	800aefa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aed8:	f000 fbdc 	bl	800b694 <prvInitialiseTaskLists>
 800aedc:	e00d      	b.n	800aefa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aede:	4b23      	ldr	r3, [pc, #140]	; (800af6c <prvAddNewTaskToReadyList+0xc0>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d109      	bne.n	800aefa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aee6:	4b20      	ldr	r3, [pc, #128]	; (800af68 <prvAddNewTaskToReadyList+0xbc>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d802      	bhi.n	800aefa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aef4:	4a1c      	ldr	r2, [pc, #112]	; (800af68 <prvAddNewTaskToReadyList+0xbc>)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aefa:	4b1d      	ldr	r3, [pc, #116]	; (800af70 <prvAddNewTaskToReadyList+0xc4>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	3301      	adds	r3, #1
 800af00:	4a1b      	ldr	r2, [pc, #108]	; (800af70 <prvAddNewTaskToReadyList+0xc4>)
 800af02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af08:	2201      	movs	r2, #1
 800af0a:	409a      	lsls	r2, r3
 800af0c:	4b19      	ldr	r3, [pc, #100]	; (800af74 <prvAddNewTaskToReadyList+0xc8>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4313      	orrs	r3, r2
 800af12:	4a18      	ldr	r2, [pc, #96]	; (800af74 <prvAddNewTaskToReadyList+0xc8>)
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1a:	4613      	mov	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4a15      	ldr	r2, [pc, #84]	; (800af78 <prvAddNewTaskToReadyList+0xcc>)
 800af24:	441a      	add	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3304      	adds	r3, #4
 800af2a:	4619      	mov	r1, r3
 800af2c:	4610      	mov	r0, r2
 800af2e:	f7ff f8af 	bl	800a090 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af32:	f001 f817 	bl	800bf64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af36:	4b0d      	ldr	r3, [pc, #52]	; (800af6c <prvAddNewTaskToReadyList+0xc0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00e      	beq.n	800af5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af3e:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <prvAddNewTaskToReadyList+0xbc>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	429a      	cmp	r2, r3
 800af4a:	d207      	bcs.n	800af5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af4c:	4b0b      	ldr	r3, [pc, #44]	; (800af7c <prvAddNewTaskToReadyList+0xd0>)
 800af4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af52:	601a      	str	r2, [r3, #0]
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	200007e0 	.word	0x200007e0
 800af68:	200006e0 	.word	0x200006e0
 800af6c:	200007ec 	.word	0x200007ec
 800af70:	200007fc 	.word	0x200007fc
 800af74:	200007e8 	.word	0x200007e8
 800af78:	200006e4 	.word	0x200006e4
 800af7c:	e000ed04 	.word	0xe000ed04

0800af80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af88:	2300      	movs	r3, #0
 800af8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d017      	beq.n	800afc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af92:	4b13      	ldr	r3, [pc, #76]	; (800afe0 <vTaskDelay+0x60>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00a      	beq.n	800afb0 <vTaskDelay+0x30>
	__asm volatile
 800af9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	60bb      	str	r3, [r7, #8]
}
 800afac:	bf00      	nop
 800afae:	e7fe      	b.n	800afae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800afb0:	f000 f884 	bl	800b0bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afb4:	2100      	movs	r1, #0
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fe12 	bl	800bbe0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800afbc:	f000 f88c 	bl	800b0d8 <xTaskResumeAll>
 800afc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d107      	bne.n	800afd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800afc8:	4b06      	ldr	r3, [pc, #24]	; (800afe4 <vTaskDelay+0x64>)
 800afca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afce:	601a      	str	r2, [r3, #0]
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afd8:	bf00      	nop
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	20000808 	.word	0x20000808
 800afe4:	e000ed04 	.word	0xe000ed04

0800afe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b08a      	sub	sp, #40	; 0x28
 800afec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aff2:	2300      	movs	r3, #0
 800aff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aff6:	463a      	mov	r2, r7
 800aff8:	1d39      	adds	r1, r7, #4
 800affa:	f107 0308 	add.w	r3, r7, #8
 800affe:	4618      	mov	r0, r3
 800b000:	f7f5 fd34 	bl	8000a6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b004:	6839      	ldr	r1, [r7, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	68ba      	ldr	r2, [r7, #8]
 800b00a:	9202      	str	r2, [sp, #8]
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	2300      	movs	r3, #0
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	2300      	movs	r3, #0
 800b014:	460a      	mov	r2, r1
 800b016:	4921      	ldr	r1, [pc, #132]	; (800b09c <vTaskStartScheduler+0xb4>)
 800b018:	4821      	ldr	r0, [pc, #132]	; (800b0a0 <vTaskStartScheduler+0xb8>)
 800b01a:	f7ff fe0f 	bl	800ac3c <xTaskCreateStatic>
 800b01e:	4603      	mov	r3, r0
 800b020:	4a20      	ldr	r2, [pc, #128]	; (800b0a4 <vTaskStartScheduler+0xbc>)
 800b022:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b024:	4b1f      	ldr	r3, [pc, #124]	; (800b0a4 <vTaskStartScheduler+0xbc>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b02c:	2301      	movs	r3, #1
 800b02e:	617b      	str	r3, [r7, #20]
 800b030:	e001      	b.n	800b036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b032:	2300      	movs	r3, #0
 800b034:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d11b      	bne.n	800b074 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	613b      	str	r3, [r7, #16]
}
 800b04e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b050:	4b15      	ldr	r3, [pc, #84]	; (800b0a8 <vTaskStartScheduler+0xc0>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	334c      	adds	r3, #76	; 0x4c
 800b056:	4a15      	ldr	r2, [pc, #84]	; (800b0ac <vTaskStartScheduler+0xc4>)
 800b058:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b05a:	4b15      	ldr	r3, [pc, #84]	; (800b0b0 <vTaskStartScheduler+0xc8>)
 800b05c:	f04f 32ff 	mov.w	r2, #4294967295
 800b060:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b062:	4b14      	ldr	r3, [pc, #80]	; (800b0b4 <vTaskStartScheduler+0xcc>)
 800b064:	2201      	movs	r2, #1
 800b066:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b068:	4b13      	ldr	r3, [pc, #76]	; (800b0b8 <vTaskStartScheduler+0xd0>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b06e:	f000 fea7 	bl	800bdc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b072:	e00e      	b.n	800b092 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07a:	d10a      	bne.n	800b092 <vTaskStartScheduler+0xaa>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	60fb      	str	r3, [r7, #12]
}
 800b08e:	bf00      	nop
 800b090:	e7fe      	b.n	800b090 <vTaskStartScheduler+0xa8>
}
 800b092:	bf00      	nop
 800b094:	3718      	adds	r7, #24
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	0800c7ac 	.word	0x0800c7ac
 800b0a0:	0800b665 	.word	0x0800b665
 800b0a4:	20000804 	.word	0x20000804
 800b0a8:	200006e0 	.word	0x200006e0
 800b0ac:	20000060 	.word	0x20000060
 800b0b0:	20000800 	.word	0x20000800
 800b0b4:	200007ec 	.word	0x200007ec
 800b0b8:	200007e4 	.word	0x200007e4

0800b0bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b0bc:	b480      	push	{r7}
 800b0be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b0c0:	4b04      	ldr	r3, [pc, #16]	; (800b0d4 <vTaskSuspendAll+0x18>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	4a03      	ldr	r2, [pc, #12]	; (800b0d4 <vTaskSuspendAll+0x18>)
 800b0c8:	6013      	str	r3, [r2, #0]
}
 800b0ca:	bf00      	nop
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	20000808 	.word	0x20000808

0800b0d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0e6:	4b41      	ldr	r3, [pc, #260]	; (800b1ec <xTaskResumeAll+0x114>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10a      	bne.n	800b104 <xTaskResumeAll+0x2c>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	603b      	str	r3, [r7, #0]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b104:	f000 fefe 	bl	800bf04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b108:	4b38      	ldr	r3, [pc, #224]	; (800b1ec <xTaskResumeAll+0x114>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	3b01      	subs	r3, #1
 800b10e:	4a37      	ldr	r2, [pc, #220]	; (800b1ec <xTaskResumeAll+0x114>)
 800b110:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b112:	4b36      	ldr	r3, [pc, #216]	; (800b1ec <xTaskResumeAll+0x114>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d161      	bne.n	800b1de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b11a:	4b35      	ldr	r3, [pc, #212]	; (800b1f0 <xTaskResumeAll+0x118>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d05d      	beq.n	800b1de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b122:	e02e      	b.n	800b182 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b124:	4b33      	ldr	r3, [pc, #204]	; (800b1f4 <xTaskResumeAll+0x11c>)
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	3318      	adds	r3, #24
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff f80a 	bl	800a14a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3304      	adds	r3, #4
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7ff f805 	bl	800a14a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b144:	2201      	movs	r2, #1
 800b146:	409a      	lsls	r2, r3
 800b148:	4b2b      	ldr	r3, [pc, #172]	; (800b1f8 <xTaskResumeAll+0x120>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	4a2a      	ldr	r2, [pc, #168]	; (800b1f8 <xTaskResumeAll+0x120>)
 800b150:	6013      	str	r3, [r2, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b156:	4613      	mov	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4a27      	ldr	r2, [pc, #156]	; (800b1fc <xTaskResumeAll+0x124>)
 800b160:	441a      	add	r2, r3
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3304      	adds	r3, #4
 800b166:	4619      	mov	r1, r3
 800b168:	4610      	mov	r0, r2
 800b16a:	f7fe ff91 	bl	800a090 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b172:	4b23      	ldr	r3, [pc, #140]	; (800b200 <xTaskResumeAll+0x128>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b178:	429a      	cmp	r2, r3
 800b17a:	d302      	bcc.n	800b182 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b17c:	4b21      	ldr	r3, [pc, #132]	; (800b204 <xTaskResumeAll+0x12c>)
 800b17e:	2201      	movs	r2, #1
 800b180:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b182:	4b1c      	ldr	r3, [pc, #112]	; (800b1f4 <xTaskResumeAll+0x11c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1cc      	bne.n	800b124 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d001      	beq.n	800b194 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b190:	f000 fb22 	bl	800b7d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b194:	4b1c      	ldr	r3, [pc, #112]	; (800b208 <xTaskResumeAll+0x130>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d010      	beq.n	800b1c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b1a0:	f000 f836 	bl	800b210 <xTaskIncrementTick>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d002      	beq.n	800b1b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b1aa:	4b16      	ldr	r3, [pc, #88]	; (800b204 <xTaskResumeAll+0x12c>)
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1f1      	bne.n	800b1a0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b1bc:	4b12      	ldr	r3, [pc, #72]	; (800b208 <xTaskResumeAll+0x130>)
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1c2:	4b10      	ldr	r3, [pc, #64]	; (800b204 <xTaskResumeAll+0x12c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d009      	beq.n	800b1de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1ce:	4b0f      	ldr	r3, [pc, #60]	; (800b20c <xTaskResumeAll+0x134>)
 800b1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1de:	f000 fec1 	bl	800bf64 <vPortExitCritical>

	return xAlreadyYielded;
 800b1e2:	68bb      	ldr	r3, [r7, #8]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	20000808 	.word	0x20000808
 800b1f0:	200007e0 	.word	0x200007e0
 800b1f4:	200007a0 	.word	0x200007a0
 800b1f8:	200007e8 	.word	0x200007e8
 800b1fc:	200006e4 	.word	0x200006e4
 800b200:	200006e0 	.word	0x200006e0
 800b204:	200007f4 	.word	0x200007f4
 800b208:	200007f0 	.word	0x200007f0
 800b20c:	e000ed04 	.word	0xe000ed04

0800b210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b216:	2300      	movs	r3, #0
 800b218:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b21a:	4b51      	ldr	r3, [pc, #324]	; (800b360 <xTaskIncrementTick+0x150>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f040 808d 	bne.w	800b33e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b224:	4b4f      	ldr	r3, [pc, #316]	; (800b364 <xTaskIncrementTick+0x154>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	3301      	adds	r3, #1
 800b22a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b22c:	4a4d      	ldr	r2, [pc, #308]	; (800b364 <xTaskIncrementTick+0x154>)
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d120      	bne.n	800b27a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b238:	4b4b      	ldr	r3, [pc, #300]	; (800b368 <xTaskIncrementTick+0x158>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00a      	beq.n	800b258 <xTaskIncrementTick+0x48>
	__asm volatile
 800b242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b246:	f383 8811 	msr	BASEPRI, r3
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	603b      	str	r3, [r7, #0]
}
 800b254:	bf00      	nop
 800b256:	e7fe      	b.n	800b256 <xTaskIncrementTick+0x46>
 800b258:	4b43      	ldr	r3, [pc, #268]	; (800b368 <xTaskIncrementTick+0x158>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	60fb      	str	r3, [r7, #12]
 800b25e:	4b43      	ldr	r3, [pc, #268]	; (800b36c <xTaskIncrementTick+0x15c>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a41      	ldr	r2, [pc, #260]	; (800b368 <xTaskIncrementTick+0x158>)
 800b264:	6013      	str	r3, [r2, #0]
 800b266:	4a41      	ldr	r2, [pc, #260]	; (800b36c <xTaskIncrementTick+0x15c>)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6013      	str	r3, [r2, #0]
 800b26c:	4b40      	ldr	r3, [pc, #256]	; (800b370 <xTaskIncrementTick+0x160>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3301      	adds	r3, #1
 800b272:	4a3f      	ldr	r2, [pc, #252]	; (800b370 <xTaskIncrementTick+0x160>)
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	f000 faaf 	bl	800b7d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b27a:	4b3e      	ldr	r3, [pc, #248]	; (800b374 <xTaskIncrementTick+0x164>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	429a      	cmp	r2, r3
 800b282:	d34d      	bcc.n	800b320 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b284:	4b38      	ldr	r3, [pc, #224]	; (800b368 <xTaskIncrementTick+0x158>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d101      	bne.n	800b292 <xTaskIncrementTick+0x82>
 800b28e:	2301      	movs	r3, #1
 800b290:	e000      	b.n	800b294 <xTaskIncrementTick+0x84>
 800b292:	2300      	movs	r3, #0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d004      	beq.n	800b2a2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b298:	4b36      	ldr	r3, [pc, #216]	; (800b374 <xTaskIncrementTick+0x164>)
 800b29a:	f04f 32ff 	mov.w	r2, #4294967295
 800b29e:	601a      	str	r2, [r3, #0]
					break;
 800b2a0:	e03e      	b.n	800b320 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b2a2:	4b31      	ldr	r3, [pc, #196]	; (800b368 <xTaskIncrementTick+0x158>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d203      	bcs.n	800b2c2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b2ba:	4a2e      	ldr	r2, [pc, #184]	; (800b374 <xTaskIncrementTick+0x164>)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6013      	str	r3, [r2, #0]
						break;
 800b2c0:	e02e      	b.n	800b320 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fe ff3f 	bl	800a14a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d004      	beq.n	800b2de <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	3318      	adds	r3, #24
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fe ff36 	bl	800a14a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	409a      	lsls	r2, r3
 800b2e6:	4b24      	ldr	r3, [pc, #144]	; (800b378 <xTaskIncrementTick+0x168>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	4a22      	ldr	r2, [pc, #136]	; (800b378 <xTaskIncrementTick+0x168>)
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4a1f      	ldr	r2, [pc, #124]	; (800b37c <xTaskIncrementTick+0x16c>)
 800b2fe:	441a      	add	r2, r3
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	3304      	adds	r3, #4
 800b304:	4619      	mov	r1, r3
 800b306:	4610      	mov	r0, r2
 800b308:	f7fe fec2 	bl	800a090 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b310:	4b1b      	ldr	r3, [pc, #108]	; (800b380 <xTaskIncrementTick+0x170>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b316:	429a      	cmp	r2, r3
 800b318:	d3b4      	bcc.n	800b284 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b31a:	2301      	movs	r3, #1
 800b31c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b31e:	e7b1      	b.n	800b284 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b320:	4b17      	ldr	r3, [pc, #92]	; (800b380 <xTaskIncrementTick+0x170>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b326:	4915      	ldr	r1, [pc, #84]	; (800b37c <xTaskIncrementTick+0x16c>)
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	440b      	add	r3, r1
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2b01      	cmp	r3, #1
 800b336:	d907      	bls.n	800b348 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b338:	2301      	movs	r3, #1
 800b33a:	617b      	str	r3, [r7, #20]
 800b33c:	e004      	b.n	800b348 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b33e:	4b11      	ldr	r3, [pc, #68]	; (800b384 <xTaskIncrementTick+0x174>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3301      	adds	r3, #1
 800b344:	4a0f      	ldr	r2, [pc, #60]	; (800b384 <xTaskIncrementTick+0x174>)
 800b346:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b348:	4b0f      	ldr	r3, [pc, #60]	; (800b388 <xTaskIncrementTick+0x178>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b350:	2301      	movs	r3, #1
 800b352:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b354:	697b      	ldr	r3, [r7, #20]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3718      	adds	r7, #24
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20000808 	.word	0x20000808
 800b364:	200007e4 	.word	0x200007e4
 800b368:	20000798 	.word	0x20000798
 800b36c:	2000079c 	.word	0x2000079c
 800b370:	200007f8 	.word	0x200007f8
 800b374:	20000800 	.word	0x20000800
 800b378:	200007e8 	.word	0x200007e8
 800b37c:	200006e4 	.word	0x200006e4
 800b380:	200006e0 	.word	0x200006e0
 800b384:	200007f0 	.word	0x200007f0
 800b388:	200007f4 	.word	0x200007f4

0800b38c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b392:	4b29      	ldr	r3, [pc, #164]	; (800b438 <vTaskSwitchContext+0xac>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d003      	beq.n	800b3a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b39a:	4b28      	ldr	r3, [pc, #160]	; (800b43c <vTaskSwitchContext+0xb0>)
 800b39c:	2201      	movs	r2, #1
 800b39e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b3a0:	e044      	b.n	800b42c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b3a2:	4b26      	ldr	r3, [pc, #152]	; (800b43c <vTaskSwitchContext+0xb0>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b3a8:	4b25      	ldr	r3, [pc, #148]	; (800b440 <vTaskSwitchContext+0xb4>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	fab3 f383 	clz	r3, r3
 800b3b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b3b6:	7afb      	ldrb	r3, [r7, #11]
 800b3b8:	f1c3 031f 	rsb	r3, r3, #31
 800b3bc:	617b      	str	r3, [r7, #20]
 800b3be:	4921      	ldr	r1, [pc, #132]	; (800b444 <vTaskSwitchContext+0xb8>)
 800b3c0:	697a      	ldr	r2, [r7, #20]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	440b      	add	r3, r1
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10a      	bne.n	800b3e8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	607b      	str	r3, [r7, #4]
}
 800b3e4:	bf00      	nop
 800b3e6:	e7fe      	b.n	800b3e6 <vTaskSwitchContext+0x5a>
 800b3e8:	697a      	ldr	r2, [r7, #20]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	4413      	add	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4a14      	ldr	r2, [pc, #80]	; (800b444 <vTaskSwitchContext+0xb8>)
 800b3f4:	4413      	add	r3, r2
 800b3f6:	613b      	str	r3, [r7, #16]
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	605a      	str	r2, [r3, #4]
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	685a      	ldr	r2, [r3, #4]
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	3308      	adds	r3, #8
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d104      	bne.n	800b418 <vTaskSwitchContext+0x8c>
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	605a      	str	r2, [r3, #4]
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	4a0a      	ldr	r2, [pc, #40]	; (800b448 <vTaskSwitchContext+0xbc>)
 800b420:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b422:	4b09      	ldr	r3, [pc, #36]	; (800b448 <vTaskSwitchContext+0xbc>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	334c      	adds	r3, #76	; 0x4c
 800b428:	4a08      	ldr	r2, [pc, #32]	; (800b44c <vTaskSwitchContext+0xc0>)
 800b42a:	6013      	str	r3, [r2, #0]
}
 800b42c:	bf00      	nop
 800b42e:	371c      	adds	r7, #28
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	20000808 	.word	0x20000808
 800b43c:	200007f4 	.word	0x200007f4
 800b440:	200007e8 	.word	0x200007e8
 800b444:	200006e4 	.word	0x200006e4
 800b448:	200006e0 	.word	0x200006e0
 800b44c:	20000060 	.word	0x20000060

0800b450 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10a      	bne.n	800b476 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	60fb      	str	r3, [r7, #12]
}
 800b472:	bf00      	nop
 800b474:	e7fe      	b.n	800b474 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b476:	4b07      	ldr	r3, [pc, #28]	; (800b494 <vTaskPlaceOnEventList+0x44>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3318      	adds	r3, #24
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7fe fe2a 	bl	800a0d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b484:	2101      	movs	r1, #1
 800b486:	6838      	ldr	r0, [r7, #0]
 800b488:	f000 fbaa 	bl	800bbe0 <prvAddCurrentTaskToDelayedList>
}
 800b48c:	bf00      	nop
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	200006e0 	.word	0x200006e0

0800b498 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b086      	sub	sp, #24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10a      	bne.n	800b4c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	60fb      	str	r3, [r7, #12]
}
 800b4c0:	bf00      	nop
 800b4c2:	e7fe      	b.n	800b4c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	3318      	adds	r3, #24
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fe fe3e 	bl	800a14a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4ce:	4b1d      	ldr	r3, [pc, #116]	; (800b544 <xTaskRemoveFromEventList+0xac>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d11c      	bne.n	800b510 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fe fe35 	bl	800a14a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	409a      	lsls	r2, r3
 800b4e8:	4b17      	ldr	r3, [pc, #92]	; (800b548 <xTaskRemoveFromEventList+0xb0>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	4a16      	ldr	r2, [pc, #88]	; (800b548 <xTaskRemoveFromEventList+0xb0>)
 800b4f0:	6013      	str	r3, [r2, #0]
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4a13      	ldr	r2, [pc, #76]	; (800b54c <xTaskRemoveFromEventList+0xb4>)
 800b500:	441a      	add	r2, r3
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	3304      	adds	r3, #4
 800b506:	4619      	mov	r1, r3
 800b508:	4610      	mov	r0, r2
 800b50a:	f7fe fdc1 	bl	800a090 <vListInsertEnd>
 800b50e:	e005      	b.n	800b51c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	3318      	adds	r3, #24
 800b514:	4619      	mov	r1, r3
 800b516:	480e      	ldr	r0, [pc, #56]	; (800b550 <xTaskRemoveFromEventList+0xb8>)
 800b518:	f7fe fdba 	bl	800a090 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b520:	4b0c      	ldr	r3, [pc, #48]	; (800b554 <xTaskRemoveFromEventList+0xbc>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b526:	429a      	cmp	r2, r3
 800b528:	d905      	bls.n	800b536 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b52a:	2301      	movs	r3, #1
 800b52c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b52e:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <xTaskRemoveFromEventList+0xc0>)
 800b530:	2201      	movs	r2, #1
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	e001      	b.n	800b53a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b536:	2300      	movs	r3, #0
 800b538:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b53a:	697b      	ldr	r3, [r7, #20]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3718      	adds	r7, #24
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	20000808 	.word	0x20000808
 800b548:	200007e8 	.word	0x200007e8
 800b54c:	200006e4 	.word	0x200006e4
 800b550:	200007a0 	.word	0x200007a0
 800b554:	200006e0 	.word	0x200006e0
 800b558:	200007f4 	.word	0x200007f4

0800b55c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b564:	4b06      	ldr	r3, [pc, #24]	; (800b580 <vTaskInternalSetTimeOutState+0x24>)
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b56c:	4b05      	ldr	r3, [pc, #20]	; (800b584 <vTaskInternalSetTimeOutState+0x28>)
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	605a      	str	r2, [r3, #4]
}
 800b574:	bf00      	nop
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	200007f8 	.word	0x200007f8
 800b584:	200007e4 	.word	0x200007e4

0800b588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b088      	sub	sp, #32
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10a      	bne.n	800b5ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	613b      	str	r3, [r7, #16]
}
 800b5aa:	bf00      	nop
 800b5ac:	e7fe      	b.n	800b5ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10a      	bne.n	800b5ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	60fb      	str	r3, [r7, #12]
}
 800b5c6:	bf00      	nop
 800b5c8:	e7fe      	b.n	800b5c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b5ca:	f000 fc9b 	bl	800bf04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5ce:	4b1d      	ldr	r3, [pc, #116]	; (800b644 <xTaskCheckForTimeOut+0xbc>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	69ba      	ldr	r2, [r7, #24]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e6:	d102      	bne.n	800b5ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	61fb      	str	r3, [r7, #28]
 800b5ec:	e023      	b.n	800b636 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4b15      	ldr	r3, [pc, #84]	; (800b648 <xTaskCheckForTimeOut+0xc0>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d007      	beq.n	800b60a <xTaskCheckForTimeOut+0x82>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	69ba      	ldr	r2, [r7, #24]
 800b600:	429a      	cmp	r2, r3
 800b602:	d302      	bcc.n	800b60a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b604:	2301      	movs	r3, #1
 800b606:	61fb      	str	r3, [r7, #28]
 800b608:	e015      	b.n	800b636 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	429a      	cmp	r2, r3
 800b612:	d20b      	bcs.n	800b62c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	1ad2      	subs	r2, r2, r3
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff ff9b 	bl	800b55c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b626:	2300      	movs	r3, #0
 800b628:	61fb      	str	r3, [r7, #28]
 800b62a:	e004      	b.n	800b636 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	2200      	movs	r2, #0
 800b630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b632:	2301      	movs	r3, #1
 800b634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b636:	f000 fc95 	bl	800bf64 <vPortExitCritical>

	return xReturn;
 800b63a:	69fb      	ldr	r3, [r7, #28]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3720      	adds	r7, #32
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	200007e4 	.word	0x200007e4
 800b648:	200007f8 	.word	0x200007f8

0800b64c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b650:	4b03      	ldr	r3, [pc, #12]	; (800b660 <vTaskMissedYield+0x14>)
 800b652:	2201      	movs	r2, #1
 800b654:	601a      	str	r2, [r3, #0]
}
 800b656:	bf00      	nop
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	200007f4 	.word	0x200007f4

0800b664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b66c:	f000 f852 	bl	800b714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b670:	4b06      	ldr	r3, [pc, #24]	; (800b68c <prvIdleTask+0x28>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d9f9      	bls.n	800b66c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <prvIdleTask+0x2c>)
 800b67a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b688:	e7f0      	b.n	800b66c <prvIdleTask+0x8>
 800b68a:	bf00      	nop
 800b68c:	200006e4 	.word	0x200006e4
 800b690:	e000ed04 	.word	0xe000ed04

0800b694 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b69a:	2300      	movs	r3, #0
 800b69c:	607b      	str	r3, [r7, #4]
 800b69e:	e00c      	b.n	800b6ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	4a12      	ldr	r2, [pc, #72]	; (800b6f4 <prvInitialiseTaskLists+0x60>)
 800b6ac:	4413      	add	r3, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe fcc1 	bl	800a036 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	607b      	str	r3, [r7, #4]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b06      	cmp	r3, #6
 800b6be:	d9ef      	bls.n	800b6a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6c0:	480d      	ldr	r0, [pc, #52]	; (800b6f8 <prvInitialiseTaskLists+0x64>)
 800b6c2:	f7fe fcb8 	bl	800a036 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6c6:	480d      	ldr	r0, [pc, #52]	; (800b6fc <prvInitialiseTaskLists+0x68>)
 800b6c8:	f7fe fcb5 	bl	800a036 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6cc:	480c      	ldr	r0, [pc, #48]	; (800b700 <prvInitialiseTaskLists+0x6c>)
 800b6ce:	f7fe fcb2 	bl	800a036 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6d2:	480c      	ldr	r0, [pc, #48]	; (800b704 <prvInitialiseTaskLists+0x70>)
 800b6d4:	f7fe fcaf 	bl	800a036 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6d8:	480b      	ldr	r0, [pc, #44]	; (800b708 <prvInitialiseTaskLists+0x74>)
 800b6da:	f7fe fcac 	bl	800a036 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6de:	4b0b      	ldr	r3, [pc, #44]	; (800b70c <prvInitialiseTaskLists+0x78>)
 800b6e0:	4a05      	ldr	r2, [pc, #20]	; (800b6f8 <prvInitialiseTaskLists+0x64>)
 800b6e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6e4:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <prvInitialiseTaskLists+0x7c>)
 800b6e6:	4a05      	ldr	r2, [pc, #20]	; (800b6fc <prvInitialiseTaskLists+0x68>)
 800b6e8:	601a      	str	r2, [r3, #0]
}
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	200006e4 	.word	0x200006e4
 800b6f8:	20000770 	.word	0x20000770
 800b6fc:	20000784 	.word	0x20000784
 800b700:	200007a0 	.word	0x200007a0
 800b704:	200007b4 	.word	0x200007b4
 800b708:	200007cc 	.word	0x200007cc
 800b70c:	20000798 	.word	0x20000798
 800b710:	2000079c 	.word	0x2000079c

0800b714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b71a:	e019      	b.n	800b750 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b71c:	f000 fbf2 	bl	800bf04 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b720:	4b10      	ldr	r3, [pc, #64]	; (800b764 <prvCheckTasksWaitingTermination+0x50>)
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3304      	adds	r3, #4
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fe fd0c 	bl	800a14a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b732:	4b0d      	ldr	r3, [pc, #52]	; (800b768 <prvCheckTasksWaitingTermination+0x54>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3b01      	subs	r3, #1
 800b738:	4a0b      	ldr	r2, [pc, #44]	; (800b768 <prvCheckTasksWaitingTermination+0x54>)
 800b73a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b73c:	4b0b      	ldr	r3, [pc, #44]	; (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3b01      	subs	r3, #1
 800b742:	4a0a      	ldr	r2, [pc, #40]	; (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b744:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b746:	f000 fc0d 	bl	800bf64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f810 	bl	800b770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b750:	4b06      	ldr	r3, [pc, #24]	; (800b76c <prvCheckTasksWaitingTermination+0x58>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1e1      	bne.n	800b71c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b758:	bf00      	nop
 800b75a:	bf00      	nop
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	200007b4 	.word	0x200007b4
 800b768:	200007e0 	.word	0x200007e0
 800b76c:	200007c8 	.word	0x200007c8

0800b770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	334c      	adds	r3, #76	; 0x4c
 800b77c:	4618      	mov	r0, r3
 800b77e:	f000 fe85 	bl	800c48c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d108      	bne.n	800b79e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b790:	4618      	mov	r0, r3
 800b792:	f000 fd5d 	bl	800c250 <vPortFree>
				vPortFree( pxTCB );
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fd5a 	bl	800c250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b79c:	e018      	b.n	800b7d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d103      	bne.n	800b7b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fd51 	bl	800c250 <vPortFree>
	}
 800b7ae:	e00f      	b.n	800b7d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d00a      	beq.n	800b7d0 <prvDeleteTCB+0x60>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	60fb      	str	r3, [r7, #12]
}
 800b7cc:	bf00      	nop
 800b7ce:	e7fe      	b.n	800b7ce <prvDeleteTCB+0x5e>
	}
 800b7d0:	bf00      	nop
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7de:	4b0f      	ldr	r3, [pc, #60]	; (800b81c <prvResetNextTaskUnblockTime+0x44>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d101      	bne.n	800b7ec <prvResetNextTaskUnblockTime+0x14>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e000      	b.n	800b7ee <prvResetNextTaskUnblockTime+0x16>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d004      	beq.n	800b7fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7f2:	4b0b      	ldr	r3, [pc, #44]	; (800b820 <prvResetNextTaskUnblockTime+0x48>)
 800b7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7fa:	e008      	b.n	800b80e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b7fc:	4b07      	ldr	r3, [pc, #28]	; (800b81c <prvResetNextTaskUnblockTime+0x44>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	4a05      	ldr	r2, [pc, #20]	; (800b820 <prvResetNextTaskUnblockTime+0x48>)
 800b80c:	6013      	str	r3, [r2, #0]
}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	20000798 	.word	0x20000798
 800b820:	20000800 	.word	0x20000800

0800b824 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b82a:	4b0b      	ldr	r3, [pc, #44]	; (800b858 <xTaskGetSchedulerState+0x34>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d102      	bne.n	800b838 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b832:	2301      	movs	r3, #1
 800b834:	607b      	str	r3, [r7, #4]
 800b836:	e008      	b.n	800b84a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b838:	4b08      	ldr	r3, [pc, #32]	; (800b85c <xTaskGetSchedulerState+0x38>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d102      	bne.n	800b846 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b840:	2302      	movs	r3, #2
 800b842:	607b      	str	r3, [r7, #4]
 800b844:	e001      	b.n	800b84a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b846:	2300      	movs	r3, #0
 800b848:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b84a:	687b      	ldr	r3, [r7, #4]
	}
 800b84c:	4618      	mov	r0, r3
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr
 800b858:	200007ec 	.word	0x200007ec
 800b85c:	20000808 	.word	0x20000808

0800b860 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b86c:	2300      	movs	r3, #0
 800b86e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d06e      	beq.n	800b954 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87a:	4b39      	ldr	r3, [pc, #228]	; (800b960 <xTaskPriorityInherit+0x100>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b880:	429a      	cmp	r2, r3
 800b882:	d25e      	bcs.n	800b942 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	db06      	blt.n	800b89a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b88c:	4b34      	ldr	r3, [pc, #208]	; (800b960 <xTaskPriorityInherit+0x100>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b892:	f1c3 0207 	rsb	r2, r3, #7
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	6959      	ldr	r1, [r3, #20]
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4a2e      	ldr	r2, [pc, #184]	; (800b964 <xTaskPriorityInherit+0x104>)
 800b8ac:	4413      	add	r3, r2
 800b8ae:	4299      	cmp	r1, r3
 800b8b0:	d101      	bne.n	800b8b6 <xTaskPriorityInherit+0x56>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e000      	b.n	800b8b8 <xTaskPriorityInherit+0x58>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d03a      	beq.n	800b932 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	3304      	adds	r3, #4
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fe fc42 	bl	800a14a <uxListRemove>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d115      	bne.n	800b8f8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d0:	4924      	ldr	r1, [pc, #144]	; (800b964 <xTaskPriorityInherit+0x104>)
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	4413      	add	r3, r2
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	440b      	add	r3, r1
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10a      	bne.n	800b8f8 <xTaskPriorityInherit+0x98>
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ec:	43da      	mvns	r2, r3
 800b8ee:	4b1e      	ldr	r3, [pc, #120]	; (800b968 <xTaskPriorityInherit+0x108>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4013      	ands	r3, r2
 800b8f4:	4a1c      	ldr	r2, [pc, #112]	; (800b968 <xTaskPriorityInherit+0x108>)
 800b8f6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b8f8:	4b19      	ldr	r3, [pc, #100]	; (800b960 <xTaskPriorityInherit+0x100>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b906:	2201      	movs	r2, #1
 800b908:	409a      	lsls	r2, r3
 800b90a:	4b17      	ldr	r3, [pc, #92]	; (800b968 <xTaskPriorityInherit+0x108>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4313      	orrs	r3, r2
 800b910:	4a15      	ldr	r2, [pc, #84]	; (800b968 <xTaskPriorityInherit+0x108>)
 800b912:	6013      	str	r3, [r2, #0]
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b918:	4613      	mov	r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4413      	add	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4a10      	ldr	r2, [pc, #64]	; (800b964 <xTaskPriorityInherit+0x104>)
 800b922:	441a      	add	r2, r3
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	3304      	adds	r3, #4
 800b928:	4619      	mov	r1, r3
 800b92a:	4610      	mov	r0, r2
 800b92c:	f7fe fbb0 	bl	800a090 <vListInsertEnd>
 800b930:	e004      	b.n	800b93c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b932:	4b0b      	ldr	r3, [pc, #44]	; (800b960 <xTaskPriorityInherit+0x100>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b93c:	2301      	movs	r3, #1
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	e008      	b.n	800b954 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b946:	4b06      	ldr	r3, [pc, #24]	; (800b960 <xTaskPriorityInherit+0x100>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d201      	bcs.n	800b954 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b950:	2301      	movs	r3, #1
 800b952:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b954:	68fb      	ldr	r3, [r7, #12]
	}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	200006e0 	.word	0x200006e0
 800b964:	200006e4 	.word	0x200006e4
 800b968:	200007e8 	.word	0x200007e8

0800b96c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b978:	2300      	movs	r3, #0
 800b97a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d06e      	beq.n	800ba60 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b982:	4b3a      	ldr	r3, [pc, #232]	; (800ba6c <xTaskPriorityDisinherit+0x100>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d00a      	beq.n	800b9a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	60fb      	str	r3, [r7, #12]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10a      	bne.n	800b9c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	60bb      	str	r3, [r7, #8]
}
 800b9bc:	bf00      	nop
 800b9be:	e7fe      	b.n	800b9be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9c4:	1e5a      	subs	r2, r3, #1
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d044      	beq.n	800ba60 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d140      	bne.n	800ba60 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7fe fbb1 	bl	800a14a <uxListRemove>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d115      	bne.n	800ba1a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f2:	491f      	ldr	r1, [pc, #124]	; (800ba70 <xTaskPriorityDisinherit+0x104>)
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	440b      	add	r3, r1
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10a      	bne.n	800ba1a <xTaskPriorityDisinherit+0xae>
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba08:	2201      	movs	r2, #1
 800ba0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba0e:	43da      	mvns	r2, r3
 800ba10:	4b18      	ldr	r3, [pc, #96]	; (800ba74 <xTaskPriorityDisinherit+0x108>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4013      	ands	r3, r2
 800ba16:	4a17      	ldr	r2, [pc, #92]	; (800ba74 <xTaskPriorityDisinherit+0x108>)
 800ba18:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba26:	f1c3 0207 	rsb	r2, r3, #7
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba32:	2201      	movs	r2, #1
 800ba34:	409a      	lsls	r2, r3
 800ba36:	4b0f      	ldr	r3, [pc, #60]	; (800ba74 <xTaskPriorityDisinherit+0x108>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	4a0d      	ldr	r2, [pc, #52]	; (800ba74 <xTaskPriorityDisinherit+0x108>)
 800ba3e:	6013      	str	r3, [r2, #0]
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba44:	4613      	mov	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	4413      	add	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4a08      	ldr	r2, [pc, #32]	; (800ba70 <xTaskPriorityDisinherit+0x104>)
 800ba4e:	441a      	add	r2, r3
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	3304      	adds	r3, #4
 800ba54:	4619      	mov	r1, r3
 800ba56:	4610      	mov	r0, r2
 800ba58:	f7fe fb1a 	bl	800a090 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba60:	697b      	ldr	r3, [r7, #20]
	}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3718      	adds	r7, #24
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	200006e0 	.word	0x200006e0
 800ba70:	200006e4 	.word	0x200006e4
 800ba74:	200007e8 	.word	0x200007e8

0800ba78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba86:	2301      	movs	r3, #1
 800ba88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f000 8088 	beq.w	800bba2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10a      	bne.n	800bab0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	60fb      	str	r3, [r7, #12]
}
 800baac:	bf00      	nop
 800baae:	e7fe      	b.n	800baae <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d902      	bls.n	800bac0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	61fb      	str	r3, [r7, #28]
 800babe:	e002      	b.n	800bac6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baca:	69fa      	ldr	r2, [r7, #28]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d068      	beq.n	800bba2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bad4:	697a      	ldr	r2, [r7, #20]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d163      	bne.n	800bba2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bada:	4b34      	ldr	r3, [pc, #208]	; (800bbac <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	69ba      	ldr	r2, [r7, #24]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d10a      	bne.n	800bafa <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	60bb      	str	r3, [r7, #8]
}
 800baf6:	bf00      	nop
 800baf8:	e7fe      	b.n	800baf8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	69fa      	ldr	r2, [r7, #28]
 800bb04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	db04      	blt.n	800bb18 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	f1c3 0207 	rsb	r2, r3, #7
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	6959      	ldr	r1, [r3, #20]
 800bb1c:	693a      	ldr	r2, [r7, #16]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4a22      	ldr	r2, [pc, #136]	; (800bbb0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bb28:	4413      	add	r3, r2
 800bb2a:	4299      	cmp	r1, r3
 800bb2c:	d101      	bne.n	800bb32 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e000      	b.n	800bb34 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800bb32:	2300      	movs	r3, #0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d034      	beq.n	800bba2 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fe fb04 	bl	800a14a <uxListRemove>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d115      	bne.n	800bb74 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4c:	4918      	ldr	r1, [pc, #96]	; (800bbb0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bb4e:	4613      	mov	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	440b      	add	r3, r1
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10a      	bne.n	800bb74 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb62:	2201      	movs	r2, #1
 800bb64:	fa02 f303 	lsl.w	r3, r2, r3
 800bb68:	43da      	mvns	r2, r3
 800bb6a:	4b12      	ldr	r3, [pc, #72]	; (800bbb4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4013      	ands	r3, r2
 800bb70:	4a10      	ldr	r2, [pc, #64]	; (800bbb4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bb72:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb78:	2201      	movs	r2, #1
 800bb7a:	409a      	lsls	r2, r3
 800bb7c:	4b0d      	ldr	r3, [pc, #52]	; (800bbb4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	4a0c      	ldr	r2, [pc, #48]	; (800bbb4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800bb84:	6013      	str	r3, [r2, #0]
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4413      	add	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4a07      	ldr	r2, [pc, #28]	; (800bbb0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bb94:	441a      	add	r2, r3
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	f7fe fa77 	bl	800a090 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bba2:	bf00      	nop
 800bba4:	3720      	adds	r7, #32
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	200006e0 	.word	0x200006e0
 800bbb0:	200006e4 	.word	0x200006e4
 800bbb4:	200007e8 	.word	0x200007e8

0800bbb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800bbb8:	b480      	push	{r7}
 800bbba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bbbc:	4b07      	ldr	r3, [pc, #28]	; (800bbdc <pvTaskIncrementMutexHeldCount+0x24>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d004      	beq.n	800bbce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bbc4:	4b05      	ldr	r3, [pc, #20]	; (800bbdc <pvTaskIncrementMutexHeldCount+0x24>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbca:	3201      	adds	r2, #1
 800bbcc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bbce:	4b03      	ldr	r3, [pc, #12]	; (800bbdc <pvTaskIncrementMutexHeldCount+0x24>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
	}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	200006e0 	.word	0x200006e0

0800bbe0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbea:	4b29      	ldr	r3, [pc, #164]	; (800bc90 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbf0:	4b28      	ldr	r3, [pc, #160]	; (800bc94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fe faa7 	bl	800a14a <uxListRemove>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10b      	bne.n	800bc1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bc02:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc08:	2201      	movs	r2, #1
 800bc0a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc0e:	43da      	mvns	r2, r3
 800bc10:	4b21      	ldr	r3, [pc, #132]	; (800bc98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4013      	ands	r3, r2
 800bc16:	4a20      	ldr	r2, [pc, #128]	; (800bc98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bc18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc20:	d10a      	bne.n	800bc38 <prvAddCurrentTaskToDelayedList+0x58>
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d007      	beq.n	800bc38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc28:	4b1a      	ldr	r3, [pc, #104]	; (800bc94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3304      	adds	r3, #4
 800bc2e:	4619      	mov	r1, r3
 800bc30:	481a      	ldr	r0, [pc, #104]	; (800bc9c <prvAddCurrentTaskToDelayedList+0xbc>)
 800bc32:	f7fe fa2d 	bl	800a090 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc36:	e026      	b.n	800bc86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc40:	4b14      	ldr	r3, [pc, #80]	; (800bc94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc48:	68ba      	ldr	r2, [r7, #8]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d209      	bcs.n	800bc64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc50:	4b13      	ldr	r3, [pc, #76]	; (800bca0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	4b0f      	ldr	r3, [pc, #60]	; (800bc94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	3304      	adds	r3, #4
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	f7fe fa3b 	bl	800a0d8 <vListInsert>
}
 800bc62:	e010      	b.n	800bc86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc64:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	4b0a      	ldr	r3, [pc, #40]	; (800bc94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	4619      	mov	r1, r3
 800bc70:	4610      	mov	r0, r2
 800bc72:	f7fe fa31 	bl	800a0d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc76:	4b0c      	ldr	r3, [pc, #48]	; (800bca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d202      	bcs.n	800bc86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bc80:	4a09      	ldr	r2, [pc, #36]	; (800bca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	6013      	str	r3, [r2, #0]
}
 800bc86:	bf00      	nop
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	200007e4 	.word	0x200007e4
 800bc94:	200006e0 	.word	0x200006e0
 800bc98:	200007e8 	.word	0x200007e8
 800bc9c:	200007cc 	.word	0x200007cc
 800bca0:	2000079c 	.word	0x2000079c
 800bca4:	20000798 	.word	0x20000798
 800bca8:	20000800 	.word	0x20000800

0800bcac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	3b04      	subs	r3, #4
 800bcbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bcc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	3b04      	subs	r3, #4
 800bcca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	f023 0201 	bic.w	r2, r3, #1
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3b04      	subs	r3, #4
 800bcda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bcdc:	4a0c      	ldr	r2, [pc, #48]	; (800bd10 <pxPortInitialiseStack+0x64>)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	3b14      	subs	r3, #20
 800bce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3b04      	subs	r3, #4
 800bcf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f06f 0202 	mvn.w	r2, #2
 800bcfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3b20      	subs	r3, #32
 800bd00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd02:	68fb      	ldr	r3, [r7, #12]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	0800bd15 	.word	0x0800bd15

0800bd14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd1e:	4b12      	ldr	r3, [pc, #72]	; (800bd68 <prvTaskExitError+0x54>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd26:	d00a      	beq.n	800bd3e <prvTaskExitError+0x2a>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	60fb      	str	r3, [r7, #12]
}
 800bd3a:	bf00      	nop
 800bd3c:	e7fe      	b.n	800bd3c <prvTaskExitError+0x28>
	__asm volatile
 800bd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd42:	f383 8811 	msr	BASEPRI, r3
 800bd46:	f3bf 8f6f 	isb	sy
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	60bb      	str	r3, [r7, #8]
}
 800bd50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd52:	bf00      	nop
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d0fc      	beq.n	800bd54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd5a:	bf00      	nop
 800bd5c:	bf00      	nop
 800bd5e:	3714      	adds	r7, #20
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	20000010 	.word	0x20000010
 800bd6c:	00000000 	.word	0x00000000

0800bd70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd70:	4b07      	ldr	r3, [pc, #28]	; (800bd90 <pxCurrentTCBConst2>)
 800bd72:	6819      	ldr	r1, [r3, #0]
 800bd74:	6808      	ldr	r0, [r1, #0]
 800bd76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7a:	f380 8809 	msr	PSP, r0
 800bd7e:	f3bf 8f6f 	isb	sy
 800bd82:	f04f 0000 	mov.w	r0, #0
 800bd86:	f380 8811 	msr	BASEPRI, r0
 800bd8a:	4770      	bx	lr
 800bd8c:	f3af 8000 	nop.w

0800bd90 <pxCurrentTCBConst2>:
 800bd90:	200006e0 	.word	0x200006e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop

0800bd98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd98:	4808      	ldr	r0, [pc, #32]	; (800bdbc <prvPortStartFirstTask+0x24>)
 800bd9a:	6800      	ldr	r0, [r0, #0]
 800bd9c:	6800      	ldr	r0, [r0, #0]
 800bd9e:	f380 8808 	msr	MSP, r0
 800bda2:	f04f 0000 	mov.w	r0, #0
 800bda6:	f380 8814 	msr	CONTROL, r0
 800bdaa:	b662      	cpsie	i
 800bdac:	b661      	cpsie	f
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	df00      	svc	0
 800bdb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bdba:	bf00      	nop
 800bdbc:	e000ed08 	.word	0xe000ed08

0800bdc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bdc6:	4b46      	ldr	r3, [pc, #280]	; (800bee0 <xPortStartScheduler+0x120>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a46      	ldr	r2, [pc, #280]	; (800bee4 <xPortStartScheduler+0x124>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d10a      	bne.n	800bde6 <xPortStartScheduler+0x26>
	__asm volatile
 800bdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd4:	f383 8811 	msr	BASEPRI, r3
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	613b      	str	r3, [r7, #16]
}
 800bde2:	bf00      	nop
 800bde4:	e7fe      	b.n	800bde4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bde6:	4b3e      	ldr	r3, [pc, #248]	; (800bee0 <xPortStartScheduler+0x120>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a3f      	ldr	r2, [pc, #252]	; (800bee8 <xPortStartScheduler+0x128>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d10a      	bne.n	800be06 <xPortStartScheduler+0x46>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	60fb      	str	r3, [r7, #12]
}
 800be02:	bf00      	nop
 800be04:	e7fe      	b.n	800be04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be06:	4b39      	ldr	r3, [pc, #228]	; (800beec <xPortStartScheduler+0x12c>)
 800be08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	22ff      	movs	r2, #255	; 0xff
 800be16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be20:	78fb      	ldrb	r3, [r7, #3]
 800be22:	b2db      	uxtb	r3, r3
 800be24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	4b31      	ldr	r3, [pc, #196]	; (800bef0 <xPortStartScheduler+0x130>)
 800be2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be2e:	4b31      	ldr	r3, [pc, #196]	; (800bef4 <xPortStartScheduler+0x134>)
 800be30:	2207      	movs	r2, #7
 800be32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be34:	e009      	b.n	800be4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800be36:	4b2f      	ldr	r3, [pc, #188]	; (800bef4 <xPortStartScheduler+0x134>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	3b01      	subs	r3, #1
 800be3c:	4a2d      	ldr	r2, [pc, #180]	; (800bef4 <xPortStartScheduler+0x134>)
 800be3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be40:	78fb      	ldrb	r3, [r7, #3]
 800be42:	b2db      	uxtb	r3, r3
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	b2db      	uxtb	r3, r3
 800be48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be4a:	78fb      	ldrb	r3, [r7, #3]
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be52:	2b80      	cmp	r3, #128	; 0x80
 800be54:	d0ef      	beq.n	800be36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be56:	4b27      	ldr	r3, [pc, #156]	; (800bef4 <xPortStartScheduler+0x134>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f1c3 0307 	rsb	r3, r3, #7
 800be5e:	2b04      	cmp	r3, #4
 800be60:	d00a      	beq.n	800be78 <xPortStartScheduler+0xb8>
	__asm volatile
 800be62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be66:	f383 8811 	msr	BASEPRI, r3
 800be6a:	f3bf 8f6f 	isb	sy
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	60bb      	str	r3, [r7, #8]
}
 800be74:	bf00      	nop
 800be76:	e7fe      	b.n	800be76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be78:	4b1e      	ldr	r3, [pc, #120]	; (800bef4 <xPortStartScheduler+0x134>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	021b      	lsls	r3, r3, #8
 800be7e:	4a1d      	ldr	r2, [pc, #116]	; (800bef4 <xPortStartScheduler+0x134>)
 800be80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be82:	4b1c      	ldr	r3, [pc, #112]	; (800bef4 <xPortStartScheduler+0x134>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be8a:	4a1a      	ldr	r2, [pc, #104]	; (800bef4 <xPortStartScheduler+0x134>)
 800be8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	b2da      	uxtb	r2, r3
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be96:	4b18      	ldr	r3, [pc, #96]	; (800bef8 <xPortStartScheduler+0x138>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a17      	ldr	r2, [pc, #92]	; (800bef8 <xPortStartScheduler+0x138>)
 800be9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bea2:	4b15      	ldr	r3, [pc, #84]	; (800bef8 <xPortStartScheduler+0x138>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a14      	ldr	r2, [pc, #80]	; (800bef8 <xPortStartScheduler+0x138>)
 800bea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800beac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800beae:	f000 f8dd 	bl	800c06c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800beb2:	4b12      	ldr	r3, [pc, #72]	; (800befc <xPortStartScheduler+0x13c>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800beb8:	f000 f8fc 	bl	800c0b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bebc:	4b10      	ldr	r3, [pc, #64]	; (800bf00 <xPortStartScheduler+0x140>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a0f      	ldr	r2, [pc, #60]	; (800bf00 <xPortStartScheduler+0x140>)
 800bec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bec8:	f7ff ff66 	bl	800bd98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800becc:	f7ff fa5e 	bl	800b38c <vTaskSwitchContext>
	prvTaskExitError();
 800bed0:	f7ff ff20 	bl	800bd14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	e000ed00 	.word	0xe000ed00
 800bee4:	410fc271 	.word	0x410fc271
 800bee8:	410fc270 	.word	0x410fc270
 800beec:	e000e400 	.word	0xe000e400
 800bef0:	2000080c 	.word	0x2000080c
 800bef4:	20000810 	.word	0x20000810
 800bef8:	e000ed20 	.word	0xe000ed20
 800befc:	20000010 	.word	0x20000010
 800bf00:	e000ef34 	.word	0xe000ef34

0800bf04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	607b      	str	r3, [r7, #4]
}
 800bf1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf1e:	4b0f      	ldr	r3, [pc, #60]	; (800bf5c <vPortEnterCritical+0x58>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3301      	adds	r3, #1
 800bf24:	4a0d      	ldr	r2, [pc, #52]	; (800bf5c <vPortEnterCritical+0x58>)
 800bf26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf28:	4b0c      	ldr	r3, [pc, #48]	; (800bf5c <vPortEnterCritical+0x58>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d10f      	bne.n	800bf50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf30:	4b0b      	ldr	r3, [pc, #44]	; (800bf60 <vPortEnterCritical+0x5c>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00a      	beq.n	800bf50 <vPortEnterCritical+0x4c>
	__asm volatile
 800bf3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3e:	f383 8811 	msr	BASEPRI, r3
 800bf42:	f3bf 8f6f 	isb	sy
 800bf46:	f3bf 8f4f 	dsb	sy
 800bf4a:	603b      	str	r3, [r7, #0]
}
 800bf4c:	bf00      	nop
 800bf4e:	e7fe      	b.n	800bf4e <vPortEnterCritical+0x4a>
	}
}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr
 800bf5c:	20000010 	.word	0x20000010
 800bf60:	e000ed04 	.word	0xe000ed04

0800bf64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf6a:	4b12      	ldr	r3, [pc, #72]	; (800bfb4 <vPortExitCritical+0x50>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10a      	bne.n	800bf88 <vPortExitCritical+0x24>
	__asm volatile
 800bf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf76:	f383 8811 	msr	BASEPRI, r3
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	607b      	str	r3, [r7, #4]
}
 800bf84:	bf00      	nop
 800bf86:	e7fe      	b.n	800bf86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bf88:	4b0a      	ldr	r3, [pc, #40]	; (800bfb4 <vPortExitCritical+0x50>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	4a09      	ldr	r2, [pc, #36]	; (800bfb4 <vPortExitCritical+0x50>)
 800bf90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf92:	4b08      	ldr	r3, [pc, #32]	; (800bfb4 <vPortExitCritical+0x50>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d105      	bne.n	800bfa6 <vPortExitCritical+0x42>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bfa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bfa6:	bf00      	nop
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	20000010 	.word	0x20000010
	...

0800bfc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bfc0:	f3ef 8009 	mrs	r0, PSP
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	4b15      	ldr	r3, [pc, #84]	; (800c020 <pxCurrentTCBConst>)
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	f01e 0f10 	tst.w	lr, #16
 800bfd0:	bf08      	it	eq
 800bfd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bfd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfda:	6010      	str	r0, [r2, #0]
 800bfdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bfe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bfe4:	f380 8811 	msr	BASEPRI, r0
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f7ff f9cc 	bl	800b38c <vTaskSwitchContext>
 800bff4:	f04f 0000 	mov.w	r0, #0
 800bff8:	f380 8811 	msr	BASEPRI, r0
 800bffc:	bc09      	pop	{r0, r3}
 800bffe:	6819      	ldr	r1, [r3, #0]
 800c000:	6808      	ldr	r0, [r1, #0]
 800c002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c006:	f01e 0f10 	tst.w	lr, #16
 800c00a:	bf08      	it	eq
 800c00c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c010:	f380 8809 	msr	PSP, r0
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	f3af 8000 	nop.w

0800c020 <pxCurrentTCBConst>:
 800c020:	200006e0 	.word	0x200006e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c024:	bf00      	nop
 800c026:	bf00      	nop

0800c028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
	__asm volatile
 800c02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	607b      	str	r3, [r7, #4]
}
 800c040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c042:	f7ff f8e5 	bl	800b210 <xTaskIncrementTick>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d003      	beq.n	800c054 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c04c:	4b06      	ldr	r3, [pc, #24]	; (800c068 <SysTick_Handler+0x40>)
 800c04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c052:	601a      	str	r2, [r3, #0]
 800c054:	2300      	movs	r3, #0
 800c056:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	f383 8811 	msr	BASEPRI, r3
}
 800c05e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	e000ed04 	.word	0xe000ed04

0800c06c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c06c:	b480      	push	{r7}
 800c06e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c070:	4b0b      	ldr	r3, [pc, #44]	; (800c0a0 <vPortSetupTimerInterrupt+0x34>)
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c076:	4b0b      	ldr	r3, [pc, #44]	; (800c0a4 <vPortSetupTimerInterrupt+0x38>)
 800c078:	2200      	movs	r2, #0
 800c07a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c07c:	4b0a      	ldr	r3, [pc, #40]	; (800c0a8 <vPortSetupTimerInterrupt+0x3c>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a0a      	ldr	r2, [pc, #40]	; (800c0ac <vPortSetupTimerInterrupt+0x40>)
 800c082:	fba2 2303 	umull	r2, r3, r2, r3
 800c086:	099b      	lsrs	r3, r3, #6
 800c088:	4a09      	ldr	r2, [pc, #36]	; (800c0b0 <vPortSetupTimerInterrupt+0x44>)
 800c08a:	3b01      	subs	r3, #1
 800c08c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c08e:	4b04      	ldr	r3, [pc, #16]	; (800c0a0 <vPortSetupTimerInterrupt+0x34>)
 800c090:	2207      	movs	r2, #7
 800c092:	601a      	str	r2, [r3, #0]
}
 800c094:	bf00      	nop
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	e000e010 	.word	0xe000e010
 800c0a4:	e000e018 	.word	0xe000e018
 800c0a8:	20000004 	.word	0x20000004
 800c0ac:	10624dd3 	.word	0x10624dd3
 800c0b0:	e000e014 	.word	0xe000e014

0800c0b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c0b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c0c4 <vPortEnableVFP+0x10>
 800c0b8:	6801      	ldr	r1, [r0, #0]
 800c0ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c0be:	6001      	str	r1, [r0, #0]
 800c0c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c0c2:	bf00      	nop
 800c0c4:	e000ed88 	.word	0xe000ed88

0800c0c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b08a      	sub	sp, #40	; 0x28
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c0d4:	f7fe fff2 	bl	800b0bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c0d8:	4b58      	ldr	r3, [pc, #352]	; (800c23c <pvPortMalloc+0x174>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d101      	bne.n	800c0e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c0e0:	f000 f910 	bl	800c304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c0e4:	4b56      	ldr	r3, [pc, #344]	; (800c240 <pvPortMalloc+0x178>)
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f040 808e 	bne.w	800c20e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d01d      	beq.n	800c134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c0f8:	2208      	movs	r2, #8
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f003 0307 	and.w	r3, r3, #7
 800c106:	2b00      	cmp	r3, #0
 800c108:	d014      	beq.n	800c134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f023 0307 	bic.w	r3, r3, #7
 800c110:	3308      	adds	r3, #8
 800c112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f003 0307 	and.w	r3, r3, #7
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00a      	beq.n	800c134 <pvPortMalloc+0x6c>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	617b      	str	r3, [r7, #20]
}
 800c130:	bf00      	nop
 800c132:	e7fe      	b.n	800c132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d069      	beq.n	800c20e <pvPortMalloc+0x146>
 800c13a:	4b42      	ldr	r3, [pc, #264]	; (800c244 <pvPortMalloc+0x17c>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	429a      	cmp	r2, r3
 800c142:	d864      	bhi.n	800c20e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c144:	4b40      	ldr	r3, [pc, #256]	; (800c248 <pvPortMalloc+0x180>)
 800c146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c148:	4b3f      	ldr	r3, [pc, #252]	; (800c248 <pvPortMalloc+0x180>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c14e:	e004      	b.n	800c15a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	429a      	cmp	r2, r3
 800c162:	d903      	bls.n	800c16c <pvPortMalloc+0xa4>
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1f1      	bne.n	800c150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c16c:	4b33      	ldr	r3, [pc, #204]	; (800c23c <pvPortMalloc+0x174>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c172:	429a      	cmp	r2, r3
 800c174:	d04b      	beq.n	800c20e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2208      	movs	r2, #8
 800c17c:	4413      	add	r3, r2
 800c17e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	1ad2      	subs	r2, r2, r3
 800c190:	2308      	movs	r3, #8
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	429a      	cmp	r2, r3
 800c196:	d91f      	bls.n	800c1d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4413      	add	r3, r2
 800c19e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	f003 0307 	and.w	r3, r3, #7
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00a      	beq.n	800c1c0 <pvPortMalloc+0xf8>
	__asm volatile
 800c1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	613b      	str	r3, [r7, #16]
}
 800c1bc:	bf00      	nop
 800c1be:	e7fe      	b.n	800c1be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c2:	685a      	ldr	r2, [r3, #4]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	1ad2      	subs	r2, r2, r3
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c1d2:	69b8      	ldr	r0, [r7, #24]
 800c1d4:	f000 f8f8 	bl	800c3c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c1d8:	4b1a      	ldr	r3, [pc, #104]	; (800c244 <pvPortMalloc+0x17c>)
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	4a18      	ldr	r2, [pc, #96]	; (800c244 <pvPortMalloc+0x17c>)
 800c1e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c1e6:	4b17      	ldr	r3, [pc, #92]	; (800c244 <pvPortMalloc+0x17c>)
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	4b18      	ldr	r3, [pc, #96]	; (800c24c <pvPortMalloc+0x184>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d203      	bcs.n	800c1fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c1f2:	4b14      	ldr	r3, [pc, #80]	; (800c244 <pvPortMalloc+0x17c>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a15      	ldr	r2, [pc, #84]	; (800c24c <pvPortMalloc+0x184>)
 800c1f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	685a      	ldr	r2, [r3, #4]
 800c1fe:	4b10      	ldr	r3, [pc, #64]	; (800c240 <pvPortMalloc+0x178>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	431a      	orrs	r2, r3
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20a:	2200      	movs	r2, #0
 800c20c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c20e:	f7fe ff63 	bl	800b0d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	f003 0307 	and.w	r3, r3, #7
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00a      	beq.n	800c232 <pvPortMalloc+0x16a>
	__asm volatile
 800c21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c220:	f383 8811 	msr	BASEPRI, r3
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	f3bf 8f4f 	dsb	sy
 800c22c:	60fb      	str	r3, [r7, #12]
}
 800c22e:	bf00      	nop
 800c230:	e7fe      	b.n	800c230 <pvPortMalloc+0x168>
	return pvReturn;
 800c232:	69fb      	ldr	r3, [r7, #28]
}
 800c234:	4618      	mov	r0, r3
 800c236:	3728      	adds	r7, #40	; 0x28
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	20002f2c 	.word	0x20002f2c
 800c240:	20002f38 	.word	0x20002f38
 800c244:	20002f30 	.word	0x20002f30
 800c248:	20002f24 	.word	0x20002f24
 800c24c:	20002f34 	.word	0x20002f34

0800c250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d048      	beq.n	800c2f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c262:	2308      	movs	r3, #8
 800c264:	425b      	negs	r3, r3
 800c266:	697a      	ldr	r2, [r7, #20]
 800c268:	4413      	add	r3, r2
 800c26a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	685a      	ldr	r2, [r3, #4]
 800c274:	4b21      	ldr	r3, [pc, #132]	; (800c2fc <vPortFree+0xac>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4013      	ands	r3, r2
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10a      	bne.n	800c294 <vPortFree+0x44>
	__asm volatile
 800c27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	60fb      	str	r3, [r7, #12]
}
 800c290:	bf00      	nop
 800c292:	e7fe      	b.n	800c292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00a      	beq.n	800c2b2 <vPortFree+0x62>
	__asm volatile
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	f383 8811 	msr	BASEPRI, r3
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	60bb      	str	r3, [r7, #8]
}
 800c2ae:	bf00      	nop
 800c2b0:	e7fe      	b.n	800c2b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	685a      	ldr	r2, [r3, #4]
 800c2b6:	4b11      	ldr	r3, [pc, #68]	; (800c2fc <vPortFree+0xac>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4013      	ands	r3, r2
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d019      	beq.n	800c2f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d115      	bne.n	800c2f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	685a      	ldr	r2, [r3, #4]
 800c2cc:	4b0b      	ldr	r3, [pc, #44]	; (800c2fc <vPortFree+0xac>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	43db      	mvns	r3, r3
 800c2d2:	401a      	ands	r2, r3
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2d8:	f7fe fef0 	bl	800b0bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	685a      	ldr	r2, [r3, #4]
 800c2e0:	4b07      	ldr	r3, [pc, #28]	; (800c300 <vPortFree+0xb0>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	4a06      	ldr	r2, [pc, #24]	; (800c300 <vPortFree+0xb0>)
 800c2e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2ea:	6938      	ldr	r0, [r7, #16]
 800c2ec:	f000 f86c 	bl	800c3c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c2f0:	f7fe fef2 	bl	800b0d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c2f4:	bf00      	nop
 800c2f6:	3718      	adds	r7, #24
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	20002f38 	.word	0x20002f38
 800c300:	20002f30 	.word	0x20002f30

0800c304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c30a:	f242 7310 	movw	r3, #10000	; 0x2710
 800c30e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c310:	4b27      	ldr	r3, [pc, #156]	; (800c3b0 <prvHeapInit+0xac>)
 800c312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f003 0307 	and.w	r3, r3, #7
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00c      	beq.n	800c338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3307      	adds	r3, #7
 800c322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f023 0307 	bic.w	r3, r3, #7
 800c32a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c32c:	68ba      	ldr	r2, [r7, #8]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	1ad3      	subs	r3, r2, r3
 800c332:	4a1f      	ldr	r2, [pc, #124]	; (800c3b0 <prvHeapInit+0xac>)
 800c334:	4413      	add	r3, r2
 800c336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c33c:	4a1d      	ldr	r2, [pc, #116]	; (800c3b4 <prvHeapInit+0xb0>)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c342:	4b1c      	ldr	r3, [pc, #112]	; (800c3b4 <prvHeapInit+0xb0>)
 800c344:	2200      	movs	r2, #0
 800c346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	4413      	add	r3, r2
 800c34e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c350:	2208      	movs	r2, #8
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	1a9b      	subs	r3, r3, r2
 800c356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f023 0307 	bic.w	r3, r3, #7
 800c35e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	4a15      	ldr	r2, [pc, #84]	; (800c3b8 <prvHeapInit+0xb4>)
 800c364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c366:	4b14      	ldr	r3, [pc, #80]	; (800c3b8 <prvHeapInit+0xb4>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2200      	movs	r2, #0
 800c36c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c36e:	4b12      	ldr	r3, [pc, #72]	; (800c3b8 <prvHeapInit+0xb4>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2200      	movs	r2, #0
 800c374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	1ad2      	subs	r2, r2, r3
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c384:	4b0c      	ldr	r3, [pc, #48]	; (800c3b8 <prvHeapInit+0xb4>)
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	4a0a      	ldr	r2, [pc, #40]	; (800c3bc <prvHeapInit+0xb8>)
 800c392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	4a09      	ldr	r2, [pc, #36]	; (800c3c0 <prvHeapInit+0xbc>)
 800c39a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c39c:	4b09      	ldr	r3, [pc, #36]	; (800c3c4 <prvHeapInit+0xc0>)
 800c39e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c3a2:	601a      	str	r2, [r3, #0]
}
 800c3a4:	bf00      	nop
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	20000814 	.word	0x20000814
 800c3b4:	20002f24 	.word	0x20002f24
 800c3b8:	20002f2c 	.word	0x20002f2c
 800c3bc:	20002f34 	.word	0x20002f34
 800c3c0:	20002f30 	.word	0x20002f30
 800c3c4:	20002f38 	.word	0x20002f38

0800c3c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3d0:	4b28      	ldr	r3, [pc, #160]	; (800c474 <prvInsertBlockIntoFreeList+0xac>)
 800c3d2:	60fb      	str	r3, [r7, #12]
 800c3d4:	e002      	b.n	800c3dc <prvInsertBlockIntoFreeList+0x14>
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	60fb      	str	r3, [r7, #12]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d8f7      	bhi.n	800c3d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d108      	bne.n	800c40a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	685a      	ldr	r2, [r3, #4]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	441a      	add	r2, r3
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	441a      	add	r2, r3
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d118      	bne.n	800c450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	4b15      	ldr	r3, [pc, #84]	; (800c478 <prvInsertBlockIntoFreeList+0xb0>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	429a      	cmp	r2, r3
 800c428:	d00d      	beq.n	800c446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	685a      	ldr	r2, [r3, #4]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	441a      	add	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	e008      	b.n	800c458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c446:	4b0c      	ldr	r3, [pc, #48]	; (800c478 <prvInsertBlockIntoFreeList+0xb0>)
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	601a      	str	r2, [r3, #0]
 800c44e:	e003      	b.n	800c458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d002      	beq.n	800c466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c466:	bf00      	nop
 800c468:	3714      	adds	r7, #20
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	20002f24 	.word	0x20002f24
 800c478:	20002f2c 	.word	0x20002f2c

0800c47c <memset>:
 800c47c:	4402      	add	r2, r0
 800c47e:	4603      	mov	r3, r0
 800c480:	4293      	cmp	r3, r2
 800c482:	d100      	bne.n	800c486 <memset+0xa>
 800c484:	4770      	bx	lr
 800c486:	f803 1b01 	strb.w	r1, [r3], #1
 800c48a:	e7f9      	b.n	800c480 <memset+0x4>

0800c48c <_reclaim_reent>:
 800c48c:	4b29      	ldr	r3, [pc, #164]	; (800c534 <_reclaim_reent+0xa8>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4283      	cmp	r3, r0
 800c492:	b570      	push	{r4, r5, r6, lr}
 800c494:	4604      	mov	r4, r0
 800c496:	d04b      	beq.n	800c530 <_reclaim_reent+0xa4>
 800c498:	69c3      	ldr	r3, [r0, #28]
 800c49a:	b143      	cbz	r3, 800c4ae <_reclaim_reent+0x22>
 800c49c:	68db      	ldr	r3, [r3, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d144      	bne.n	800c52c <_reclaim_reent+0xa0>
 800c4a2:	69e3      	ldr	r3, [r4, #28]
 800c4a4:	6819      	ldr	r1, [r3, #0]
 800c4a6:	b111      	cbz	r1, 800c4ae <_reclaim_reent+0x22>
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f000 f879 	bl	800c5a0 <_free_r>
 800c4ae:	6961      	ldr	r1, [r4, #20]
 800c4b0:	b111      	cbz	r1, 800c4b8 <_reclaim_reent+0x2c>
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f000 f874 	bl	800c5a0 <_free_r>
 800c4b8:	69e1      	ldr	r1, [r4, #28]
 800c4ba:	b111      	cbz	r1, 800c4c2 <_reclaim_reent+0x36>
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f000 f86f 	bl	800c5a0 <_free_r>
 800c4c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c4c4:	b111      	cbz	r1, 800c4cc <_reclaim_reent+0x40>
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f000 f86a 	bl	800c5a0 <_free_r>
 800c4cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4ce:	b111      	cbz	r1, 800c4d6 <_reclaim_reent+0x4a>
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f000 f865 	bl	800c5a0 <_free_r>
 800c4d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c4d8:	b111      	cbz	r1, 800c4e0 <_reclaim_reent+0x54>
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f000 f860 	bl	800c5a0 <_free_r>
 800c4e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c4e2:	b111      	cbz	r1, 800c4ea <_reclaim_reent+0x5e>
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f000 f85b 	bl	800c5a0 <_free_r>
 800c4ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c4ec:	b111      	cbz	r1, 800c4f4 <_reclaim_reent+0x68>
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f000 f856 	bl	800c5a0 <_free_r>
 800c4f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c4f6:	b111      	cbz	r1, 800c4fe <_reclaim_reent+0x72>
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f000 f851 	bl	800c5a0 <_free_r>
 800c4fe:	6a23      	ldr	r3, [r4, #32]
 800c500:	b1b3      	cbz	r3, 800c530 <_reclaim_reent+0xa4>
 800c502:	4620      	mov	r0, r4
 800c504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c508:	4718      	bx	r3
 800c50a:	5949      	ldr	r1, [r1, r5]
 800c50c:	b941      	cbnz	r1, 800c520 <_reclaim_reent+0x94>
 800c50e:	3504      	adds	r5, #4
 800c510:	69e3      	ldr	r3, [r4, #28]
 800c512:	2d80      	cmp	r5, #128	; 0x80
 800c514:	68d9      	ldr	r1, [r3, #12]
 800c516:	d1f8      	bne.n	800c50a <_reclaim_reent+0x7e>
 800c518:	4620      	mov	r0, r4
 800c51a:	f000 f841 	bl	800c5a0 <_free_r>
 800c51e:	e7c0      	b.n	800c4a2 <_reclaim_reent+0x16>
 800c520:	680e      	ldr	r6, [r1, #0]
 800c522:	4620      	mov	r0, r4
 800c524:	f000 f83c 	bl	800c5a0 <_free_r>
 800c528:	4631      	mov	r1, r6
 800c52a:	e7ef      	b.n	800c50c <_reclaim_reent+0x80>
 800c52c:	2500      	movs	r5, #0
 800c52e:	e7ef      	b.n	800c510 <_reclaim_reent+0x84>
 800c530:	bd70      	pop	{r4, r5, r6, pc}
 800c532:	bf00      	nop
 800c534:	20000060 	.word	0x20000060

0800c538 <__libc_init_array>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	4d0d      	ldr	r5, [pc, #52]	; (800c570 <__libc_init_array+0x38>)
 800c53c:	4c0d      	ldr	r4, [pc, #52]	; (800c574 <__libc_init_array+0x3c>)
 800c53e:	1b64      	subs	r4, r4, r5
 800c540:	10a4      	asrs	r4, r4, #2
 800c542:	2600      	movs	r6, #0
 800c544:	42a6      	cmp	r6, r4
 800c546:	d109      	bne.n	800c55c <__libc_init_array+0x24>
 800c548:	4d0b      	ldr	r5, [pc, #44]	; (800c578 <__libc_init_array+0x40>)
 800c54a:	4c0c      	ldr	r4, [pc, #48]	; (800c57c <__libc_init_array+0x44>)
 800c54c:	f000 f880 	bl	800c650 <_init>
 800c550:	1b64      	subs	r4, r4, r5
 800c552:	10a4      	asrs	r4, r4, #2
 800c554:	2600      	movs	r6, #0
 800c556:	42a6      	cmp	r6, r4
 800c558:	d105      	bne.n	800c566 <__libc_init_array+0x2e>
 800c55a:	bd70      	pop	{r4, r5, r6, pc}
 800c55c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c560:	4798      	blx	r3
 800c562:	3601      	adds	r6, #1
 800c564:	e7ee      	b.n	800c544 <__libc_init_array+0xc>
 800c566:	f855 3b04 	ldr.w	r3, [r5], #4
 800c56a:	4798      	blx	r3
 800c56c:	3601      	adds	r6, #1
 800c56e:	e7f2      	b.n	800c556 <__libc_init_array+0x1e>
 800c570:	0800c7ec 	.word	0x0800c7ec
 800c574:	0800c7ec 	.word	0x0800c7ec
 800c578:	0800c7ec 	.word	0x0800c7ec
 800c57c:	0800c7f0 	.word	0x0800c7f0

0800c580 <__retarget_lock_acquire_recursive>:
 800c580:	4770      	bx	lr

0800c582 <__retarget_lock_release_recursive>:
 800c582:	4770      	bx	lr

0800c584 <memcpy>:
 800c584:	440a      	add	r2, r1
 800c586:	4291      	cmp	r1, r2
 800c588:	f100 33ff 	add.w	r3, r0, #4294967295
 800c58c:	d100      	bne.n	800c590 <memcpy+0xc>
 800c58e:	4770      	bx	lr
 800c590:	b510      	push	{r4, lr}
 800c592:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c59a:	4291      	cmp	r1, r2
 800c59c:	d1f9      	bne.n	800c592 <memcpy+0xe>
 800c59e:	bd10      	pop	{r4, pc}

0800c5a0 <_free_r>:
 800c5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5a2:	2900      	cmp	r1, #0
 800c5a4:	d044      	beq.n	800c630 <_free_r+0x90>
 800c5a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5aa:	9001      	str	r0, [sp, #4]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f1a1 0404 	sub.w	r4, r1, #4
 800c5b2:	bfb8      	it	lt
 800c5b4:	18e4      	addlt	r4, r4, r3
 800c5b6:	f000 f83f 	bl	800c638 <__malloc_lock>
 800c5ba:	4a1e      	ldr	r2, [pc, #120]	; (800c634 <_free_r+0x94>)
 800c5bc:	9801      	ldr	r0, [sp, #4]
 800c5be:	6813      	ldr	r3, [r2, #0]
 800c5c0:	b933      	cbnz	r3, 800c5d0 <_free_r+0x30>
 800c5c2:	6063      	str	r3, [r4, #4]
 800c5c4:	6014      	str	r4, [r2, #0]
 800c5c6:	b003      	add	sp, #12
 800c5c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5cc:	f000 b83a 	b.w	800c644 <__malloc_unlock>
 800c5d0:	42a3      	cmp	r3, r4
 800c5d2:	d908      	bls.n	800c5e6 <_free_r+0x46>
 800c5d4:	6825      	ldr	r5, [r4, #0]
 800c5d6:	1961      	adds	r1, r4, r5
 800c5d8:	428b      	cmp	r3, r1
 800c5da:	bf01      	itttt	eq
 800c5dc:	6819      	ldreq	r1, [r3, #0]
 800c5de:	685b      	ldreq	r3, [r3, #4]
 800c5e0:	1949      	addeq	r1, r1, r5
 800c5e2:	6021      	streq	r1, [r4, #0]
 800c5e4:	e7ed      	b.n	800c5c2 <_free_r+0x22>
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	b10b      	cbz	r3, 800c5f0 <_free_r+0x50>
 800c5ec:	42a3      	cmp	r3, r4
 800c5ee:	d9fa      	bls.n	800c5e6 <_free_r+0x46>
 800c5f0:	6811      	ldr	r1, [r2, #0]
 800c5f2:	1855      	adds	r5, r2, r1
 800c5f4:	42a5      	cmp	r5, r4
 800c5f6:	d10b      	bne.n	800c610 <_free_r+0x70>
 800c5f8:	6824      	ldr	r4, [r4, #0]
 800c5fa:	4421      	add	r1, r4
 800c5fc:	1854      	adds	r4, r2, r1
 800c5fe:	42a3      	cmp	r3, r4
 800c600:	6011      	str	r1, [r2, #0]
 800c602:	d1e0      	bne.n	800c5c6 <_free_r+0x26>
 800c604:	681c      	ldr	r4, [r3, #0]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	6053      	str	r3, [r2, #4]
 800c60a:	440c      	add	r4, r1
 800c60c:	6014      	str	r4, [r2, #0]
 800c60e:	e7da      	b.n	800c5c6 <_free_r+0x26>
 800c610:	d902      	bls.n	800c618 <_free_r+0x78>
 800c612:	230c      	movs	r3, #12
 800c614:	6003      	str	r3, [r0, #0]
 800c616:	e7d6      	b.n	800c5c6 <_free_r+0x26>
 800c618:	6825      	ldr	r5, [r4, #0]
 800c61a:	1961      	adds	r1, r4, r5
 800c61c:	428b      	cmp	r3, r1
 800c61e:	bf04      	itt	eq
 800c620:	6819      	ldreq	r1, [r3, #0]
 800c622:	685b      	ldreq	r3, [r3, #4]
 800c624:	6063      	str	r3, [r4, #4]
 800c626:	bf04      	itt	eq
 800c628:	1949      	addeq	r1, r1, r5
 800c62a:	6021      	streq	r1, [r4, #0]
 800c62c:	6054      	str	r4, [r2, #4]
 800c62e:	e7ca      	b.n	800c5c6 <_free_r+0x26>
 800c630:	b003      	add	sp, #12
 800c632:	bd30      	pop	{r4, r5, pc}
 800c634:	20003078 	.word	0x20003078

0800c638 <__malloc_lock>:
 800c638:	4801      	ldr	r0, [pc, #4]	; (800c640 <__malloc_lock+0x8>)
 800c63a:	f7ff bfa1 	b.w	800c580 <__retarget_lock_acquire_recursive>
 800c63e:	bf00      	nop
 800c640:	20003074 	.word	0x20003074

0800c644 <__malloc_unlock>:
 800c644:	4801      	ldr	r0, [pc, #4]	; (800c64c <__malloc_unlock+0x8>)
 800c646:	f7ff bf9c 	b.w	800c582 <__retarget_lock_release_recursive>
 800c64a:	bf00      	nop
 800c64c:	20003074 	.word	0x20003074

0800c650 <_init>:
 800c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c652:	bf00      	nop
 800c654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c656:	bc08      	pop	{r3}
 800c658:	469e      	mov	lr, r3
 800c65a:	4770      	bx	lr

0800c65c <_fini>:
 800c65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c65e:	bf00      	nop
 800c660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c662:	bc08      	pop	{r3}
 800c664:	469e      	mov	lr, r3
 800c666:	4770      	bx	lr
