
FreeRTOS_tesis_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010bec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08010d90  08010d90  00020d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011284  08011284  000301dc  2**0
                  CONTENTS
  4 .ARM          00000000  08011284  08011284  000301dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011284  08011284  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011284  08011284  00021284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011288  08011288  00021288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801128c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301dc  2**0
                  CONTENTS
 10 .bss          00005814  200001dc  200001dc  000301dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200059f0  200059f0  000301dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021fc9  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000046d2  00000000  00000000  00052218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c10  00000000  00000000  000568f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015f0  00000000  00000000  00058500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025e77  00000000  00000000  00059af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024a64  00000000  00000000  0007f967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2fde  00000000  00000000  000a43cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008674  00000000  00000000  001873ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0018fa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010d74 	.word	0x08010d74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08010d74 	.word	0x08010d74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <vApplicationGetIdleTaskMemory+0x30>)
 8000c6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	200001f8 	.word	0x200001f8
 8000c88:	20000298 	.word	0x20000298

08000c8c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PFP */
//__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
int RxFlag = RESET;
//int state = START_State;
int state = RUN_State;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	RxFlag = SET;
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <HAL_UART_RxCpltCallback+0x1c>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	200008d4 	.word	0x200008d4
 8000cac:	00000000 	.word	0x00000000

08000cb0 <HAL_GPIO_EXTI_Callback>:
int counter_stop = 0;
//Interrupcion para contar pulsos del encoder
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Encoder1_Pin){
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cc0:	d142      	bne.n	8000d48 <HAL_GPIO_EXTI_Callback+0x98>
		if(state == RUN_State){
 8000cc2:	4b89      	ldr	r3, [pc, #548]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x238>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	f040 8105 	bne.w	8000ed6 <HAL_GPIO_EXTI_Callback+0x226>
			counter_stop = 0;
 8000ccc:	4b87      	ldr	r3, [pc, #540]	; (8000eec <HAL_GPIO_EXTI_Callback+0x23c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]

			contador_actual[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8000cd2:	4b87      	ldr	r3, [pc, #540]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x240>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	4a86      	ldr	r2, [pc, #536]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000cda:	6013      	str	r3, [r2, #0]
			if(contador_actual[0] >= contador_pasado[0]){
 8000cdc:	4b85      	ldr	r3, [pc, #532]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b85      	ldr	r3, [pc, #532]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d307      	bcc.n	8000cf8 <HAL_GPIO_EXTI_Callback+0x48>
				tiempoPulsos[0] = contador_actual[0] - contador_pasado[0];
 8000ce8:	4b82      	ldr	r3, [pc, #520]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b82      	ldr	r3, [pc, #520]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	4a82      	ldr	r2, [pc, #520]	; (8000efc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e007      	b.n	8000d08 <HAL_GPIO_EXTI_Callback+0x58>
			}else{
				tiempoPulsos[0] = (4294967295 - contador_pasado[0]) + contador_actual[0];
 8000cf8:	4b7e      	ldr	r3, [pc, #504]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b7e      	ldr	r3, [pc, #504]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	3b01      	subs	r3, #1
 8000d04:	4a7d      	ldr	r2, [pc, #500]	; (8000efc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000d06:	6013      	str	r3, [r2, #0]
			}

			u1_medida = (60.0 * 72000000.0) / (tiempoPulsos[0] * 20.0);
 8000d08:	4b7c      	ldr	r3, [pc, #496]	; (8000efc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fc01 	bl	8000514 <__aeabi_ui2d>
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	4b7a      	ldr	r3, [pc, #488]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x250>)
 8000d18:	f7ff fc76 	bl	8000608 <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	a16f      	add	r1, pc, #444	; (adr r1, 8000ee0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000d22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d26:	f7ff fd99 	bl	800085c <__aeabi_ddiv>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	4610      	mov	r0, r2
 8000d30:	4619      	mov	r1, r3
 8000d32:	f7ff ff41 	bl	8000bb8 <__aeabi_d2f>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4a72      	ldr	r2, [pc, #456]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x254>)
 8000d3a:	6013      	str	r3, [r2, #0]
			contador_pasado[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8000d3c:	4b6c      	ldr	r3, [pc, #432]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x240>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	4a6d      	ldr	r2, [pc, #436]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000d44:	6013      	str	r3, [r2, #0]

			u4_medida = (60.0 * 72000000.0) / (tiempoPulsos[3] * 20.0);
			contador_pasado[3] = __HAL_TIM_GET_COUNTER(&htim2);
		}
	}
}
 8000d46:	e0c6      	b.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x226>
	else if(GPIO_Pin == Encoder2_Pin){
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d4e:	d13f      	bne.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x120>
		if(state == RUN_State){
 8000d50:	4b65      	ldr	r3, [pc, #404]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x238>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	f040 80be 	bne.w	8000ed6 <HAL_GPIO_EXTI_Callback+0x226>
			contador_actual[1] = __HAL_TIM_GET_COUNTER(&htim2);
 8000d5a:	4b65      	ldr	r3, [pc, #404]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x240>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d60:	4a64      	ldr	r2, [pc, #400]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000d62:	6053      	str	r3, [r2, #4]
			if(contador_actual[1] >= contador_pasado[1]){
 8000d64:	4b63      	ldr	r3, [pc, #396]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	4b63      	ldr	r3, [pc, #396]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d307      	bcc.n	8000d80 <HAL_GPIO_EXTI_Callback+0xd0>
				tiempoPulsos[1] = contador_actual[1] - contador_pasado[1];
 8000d70:	4b60      	ldr	r3, [pc, #384]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	4b60      	ldr	r3, [pc, #384]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	4a60      	ldr	r2, [pc, #384]	; (8000efc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000d7c:	6053      	str	r3, [r2, #4]
 8000d7e:	e007      	b.n	8000d90 <HAL_GPIO_EXTI_Callback+0xe0>
				tiempoPulsos[1] = (4294967295 - contador_pasado[1]) + contador_actual[1];
 8000d80:	4b5c      	ldr	r3, [pc, #368]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4b5c      	ldr	r3, [pc, #368]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4a5b      	ldr	r2, [pc, #364]	; (8000efc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000d8e:	6053      	str	r3, [r2, #4]
			u2_medida = (60.0 * 72000000.0) / (tiempoPulsos[1] * 20.0);
 8000d90:	4b5a      	ldr	r3, [pc, #360]	; (8000efc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fbbd 	bl	8000514 <__aeabi_ui2d>
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	4b58      	ldr	r3, [pc, #352]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x250>)
 8000da0:	f7ff fc32 	bl	8000608 <__aeabi_dmul>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	a14d      	add	r1, pc, #308	; (adr r1, 8000ee0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000daa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000dae:	f7ff fd55 	bl	800085c <__aeabi_ddiv>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4610      	mov	r0, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	f7ff fefd 	bl	8000bb8 <__aeabi_d2f>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4a51      	ldr	r2, [pc, #324]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x258>)
 8000dc2:	6013      	str	r3, [r2, #0]
			contador_pasado[1] = __HAL_TIM_GET_COUNTER(&htim2);
 8000dc4:	4b4a      	ldr	r3, [pc, #296]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x240>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dca:	4a4b      	ldr	r2, [pc, #300]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000dcc:	6053      	str	r3, [r2, #4]
}
 8000dce:	e082      	b.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x226>
	else if(GPIO_Pin == Encoder3_Pin){
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	2b80      	cmp	r3, #128	; 0x80
 8000dd4:	d13e      	bne.n	8000e54 <HAL_GPIO_EXTI_Callback+0x1a4>
		if(state == RUN_State){
 8000dd6:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x238>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d17b      	bne.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x226>
			contador_actual[2] = __HAL_TIM_GET_COUNTER(&htim2);
 8000dde:	4b44      	ldr	r3, [pc, #272]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x240>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de4:	4a43      	ldr	r2, [pc, #268]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000de6:	6093      	str	r3, [r2, #8]
			if(contador_actual[2] >= contador_pasado[2]){
 8000de8:	4b42      	ldr	r3, [pc, #264]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d307      	bcc.n	8000e04 <HAL_GPIO_EXTI_Callback+0x154>
				tiempoPulsos[2] = contador_actual[2] - contador_pasado[2];
 8000df4:	4b3f      	ldr	r3, [pc, #252]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	4b3f      	ldr	r3, [pc, #252]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	4a3f      	ldr	r2, [pc, #252]	; (8000efc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000e00:	6093      	str	r3, [r2, #8]
 8000e02:	e007      	b.n	8000e14 <HAL_GPIO_EXTI_Callback+0x164>
				tiempoPulsos[2] = (4294967295 - contador_pasado[2]) + contador_actual[2];
 8000e04:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	4b3b      	ldr	r3, [pc, #236]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	4a3a      	ldr	r2, [pc, #232]	; (8000efc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000e12:	6093      	str	r3, [r2, #8]
			u3_medida = (60.0 * 72000000.0) / (tiempoPulsos[2] * 20.0);
 8000e14:	4b39      	ldr	r3, [pc, #228]	; (8000efc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fb7b 	bl	8000514 <__aeabi_ui2d>
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x250>)
 8000e24:	f7ff fbf0 	bl	8000608 <__aeabi_dmul>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	a12c      	add	r1, pc, #176	; (adr r1, 8000ee0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e32:	f7ff fd13 	bl	800085c <__aeabi_ddiv>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff febb 	bl	8000bb8 <__aeabi_d2f>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a31      	ldr	r2, [pc, #196]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x25c>)
 8000e46:	6013      	str	r3, [r2, #0]
			contador_pasado[2] = __HAL_TIM_GET_COUNTER(&htim2);
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x240>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4e:	4a2a      	ldr	r2, [pc, #168]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000e50:	6093      	str	r3, [r2, #8]
}
 8000e52:	e040      	b.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x226>
	else if(GPIO_Pin == Encoder4_Pin){
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	2b40      	cmp	r3, #64	; 0x40
 8000e58:	d13d      	bne.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x226>
		if(state == RUN_State){
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x238>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d139      	bne.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x226>
			contador_actual[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8000e62:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x240>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000e6a:	60d3      	str	r3, [r2, #12]
			if(contador_actual[3] >= contador_pasado[3]){
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d307      	bcc.n	8000e88 <HAL_GPIO_EXTI_Callback+0x1d8>
				tiempoPulsos[3] = contador_actual[3] - contador_pasado[3];
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	4a1e      	ldr	r2, [pc, #120]	; (8000efc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000e84:	60d3      	str	r3, [r2, #12]
 8000e86:	e007      	b.n	8000e98 <HAL_GPIO_EXTI_Callback+0x1e8>
				tiempoPulsos[3] = (4294967295 - contador_pasado[3]) + contador_actual[3];
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a19      	ldr	r2, [pc, #100]	; (8000efc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000e96:	60d3      	str	r3, [r2, #12]
			u4_medida = (60.0 * 72000000.0) / (tiempoPulsos[3] * 20.0);
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fb39 	bl	8000514 <__aeabi_ui2d>
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x250>)
 8000ea8:	f7ff fbae 	bl	8000608 <__aeabi_dmul>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	a10b      	add	r1, pc, #44	; (adr r1, 8000ee0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000eb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000eb6:	f7ff fcd1 	bl	800085c <__aeabi_ddiv>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fe79 	bl	8000bb8 <__aeabi_d2f>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <HAL_GPIO_EXTI_Callback+0x260>)
 8000eca:	6013      	str	r3, [r2, #0]
			contador_pasado[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x240>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000ed4:	60d3      	str	r3, [r2, #12]
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	80000000 	.word	0x80000000
 8000ee4:	41f017df 	.word	0x41f017df
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	200008d8 	.word	0x200008d8
 8000ef0:	20000610 	.word	0x20000610
 8000ef4:	200008a4 	.word	0x200008a4
 8000ef8:	20000894 	.word	0x20000894
 8000efc:	200008b4 	.word	0x200008b4
 8000f00:	40340000 	.word	0x40340000
 8000f04:	200008c4 	.word	0x200008c4
 8000f08:	200008c8 	.word	0x200008c8
 8000f0c:	200008cc 	.word	0x200008cc
 8000f10:	200008d0 	.word	0x200008d0

08000f14 <HAL_ADC_ConvCpltCallback>:

int raw_adc_value = 0;
uint8_t flag_adc = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	raw_adc_value = HAL_ADC_GetValue(&hadc1);
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f1e:	f002 fe05 	bl	8003b2c <HAL_ADC_GetValue>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_ADC_ConvCpltCallback+0x28>)
 8000f28:	601a      	str	r2, [r3, #0]
	flag_adc = 1;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000498 	.word	0x20000498
 8000f3c:	200008dc 	.word	0x200008dc
 8000f40:	200008e0 	.word	0x200008e0

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b0d0      	sub	sp, #320	; 0x140
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f002 fa6b 	bl	8003424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f9bf 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f000 fe63 	bl	8001c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f56:	f000 fe3b 	bl	8001bd0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000f5a:	f000 fe09 	bl	8001b70 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000f5e:	f000 fb43 	bl	80015e8 <MX_TIM1_Init>
  MX_CRC_Init();
 8000f62:	f000 faa1 	bl	80014a8 <MX_CRC_Init>
  MX_I2C1_Init();
 8000f66:	f000 fac1 	bl	80014ec <MX_I2C1_Init>
  MX_TIM17_Init();
 8000f6a:	f000 fd87 	bl	8001a7c <MX_TIM17_Init>
  MX_SPI1_Init();
 8000f6e:	f000 fafd 	bl	800156c <MX_SPI1_Init>
  MX_TIM8_Init();
 8000f72:	f000 fc33 	bl	80017dc <MX_TIM8_Init>
  MX_TIM15_Init();
 8000f76:	f000 fcdd 	bl	8001934 <MX_TIM15_Init>
  MX_TIM2_Init();
 8000f7a:	f000 fbe1 	bl	8001740 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000f7e:	f000 fa23 	bl	80013c8 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f82:	f000 fa15 	bl	80013b0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 1);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2105      	movs	r1, #5
 8000f8a:	2012      	movs	r0, #18
 8000f8c:	f003 fe48 	bl	8004c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f90:	2012      	movs	r0, #18
 8000f92:	f003 fe61 	bl	8004c58 <HAL_NVIC_EnableIRQ>

  hcrc.Instance = CRC;
 8000f96:	4bb0      	ldr	r3, [pc, #704]	; (8001258 <main+0x314>)
 8000f98:	4ab0      	ldr	r2, [pc, #704]	; (800125c <main+0x318>)
 8000f9a:	601a      	str	r2, [r3, #0]

  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000f9c:	4bae      	ldr	r3, [pc, #696]	; (8001258 <main+0x314>)
 8000f9e:	2210      	movs	r2, #16
 8000fa0:	60da      	str	r2, [r3, #12]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000fa2:	4bad      	ldr	r3, [pc, #692]	; (8001258 <main+0x314>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000fa8:	4bab      	ldr	r3, [pc, #684]	; (8001258 <main+0x314>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 0x07;
 8000fae:	4baa      	ldr	r3, [pc, #680]	; (8001258 <main+0x314>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	609a      	str	r2, [r3, #8]
  hcrc.Init.InitValue = 0x00;
 8000fb4:	4ba8      	ldr	r3, [pc, #672]	; (8001258 <main+0x314>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fba:	4ba7      	ldr	r3, [pc, #668]	; (8001258 <main+0x314>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fc0:	4ba5      	ldr	r3, [pc, #660]	; (8001258 <main+0x314>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]

//  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fc6:	4ba4      	ldr	r3, [pc, #656]	; (8001258 <main+0x314>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fcc:	48a2      	ldr	r0, [pc, #648]	; (8001258 <main+0x314>)
 8000fce:	f003 fe51 	bl	8004c74 <HAL_CRC_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <main+0x98>
  {
	  Error_Handler();
 8000fd8:	f001 fcd6 	bl	8002988 <Error_Handler>
////  hcrc.Instance->DR = 0x00000000;
//  hcrc.Instance->INIT = 0x00000000;
//
//
//  crcVal = HAL_CRC_Accumulate(&hcrc, crcArray, 6);
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	48a0      	ldr	r0, [pc, #640]	; (8001260 <main+0x31c>)
 8000fe0:	f007 ffee 	bl	8008fc0 <HAL_TIM_OC_Start_IT>



  contador_pasado[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8000fe4:	4b9e      	ldr	r3, [pc, #632]	; (8001260 <main+0x31c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	4a9e      	ldr	r2, [pc, #632]	; (8001264 <main+0x320>)
 8000fec:	6013      	str	r3, [r2, #0]
  contador_pasado[1] = __HAL_TIM_GET_COUNTER(&htim2);
 8000fee:	4b9c      	ldr	r3, [pc, #624]	; (8001260 <main+0x31c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	4a9b      	ldr	r2, [pc, #620]	; (8001264 <main+0x320>)
 8000ff6:	6053      	str	r3, [r2, #4]
  contador_pasado[2] = __HAL_TIM_GET_COUNTER(&htim2);
 8000ff8:	4b99      	ldr	r3, [pc, #612]	; (8001260 <main+0x31c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	4a99      	ldr	r2, [pc, #612]	; (8001264 <main+0x320>)
 8001000:	6093      	str	r3, [r2, #8]
  contador_pasado[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8001002:	4b97      	ldr	r3, [pc, #604]	; (8001260 <main+0x31c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	4a96      	ldr	r2, [pc, #600]	; (8001264 <main+0x320>)
 800100a:	60d3      	str	r3, [r2, #12]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySemAccelTx */
  osSemaphoreDef(myBinarySemAccelTx);
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  myBinarySemAccelTxHandle = osSemaphoreCreate(osSemaphore(myBinarySemAccelTx), 1);
 8001018:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800101c:	2101      	movs	r1, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f00a ff18 	bl	800be54 <osSemaphoreCreate>
 8001024:	4603      	mov	r3, r0
 8001026:	4a90      	ldr	r2, [pc, #576]	; (8001268 <main+0x324>)
 8001028:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemVelTx */
  osSemaphoreDef(myBinarySemVelTx);
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  myBinarySemVelTxHandle = osSemaphoreCreate(osSemaphore(myBinarySemVelTx), 1);
 8001036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800103a:	2101      	movs	r1, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f00a ff09 	bl	800be54 <osSemaphoreCreate>
 8001042:	4603      	mov	r3, r0
 8001044:	4a89      	ldr	r2, [pc, #548]	; (800126c <main+0x328>)
 8001046:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemVelControl */
  osSemaphoreDef(myBinarySemVelControl);
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  myBinarySemVelControlHandle = osSemaphoreCreate(osSemaphore(myBinarySemVelControl), 1);
 8001054:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001058:	2101      	movs	r1, #1
 800105a:	4618      	mov	r0, r3
 800105c:	f00a fefa 	bl	800be54 <osSemaphoreCreate>
 8001060:	4603      	mov	r3, r0
 8001062:	4a83      	ldr	r2, [pc, #524]	; (8001270 <main+0x32c>)
 8001064:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemRxConv */
  osSemaphoreDef(myBinarySemRxConv);
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  myBinarySemRxConvHandle = osSemaphoreCreate(osSemaphore(myBinarySemRxConv), 1);
 8001072:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001076:	2101      	movs	r1, #1
 8001078:	4618      	mov	r0, r3
 800107a:	f00a feeb 	bl	800be54 <osSemaphoreCreate>
 800107e:	4603      	mov	r3, r0
 8001080:	4a7c      	ldr	r2, [pc, #496]	; (8001274 <main+0x330>)
 8001082:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemConvControl */
  osSemaphoreDef(myBinarySemConvControl);
 8001084:	2300      	movs	r3, #0
 8001086:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  myBinarySemConvControlHandle = osSemaphoreCreate(osSemaphore(myBinarySemConvControl), 1);
 8001090:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001094:	2101      	movs	r1, #1
 8001096:	4618      	mov	r0, r3
 8001098:	f00a fedc 	bl	800be54 <osSemaphoreCreate>
 800109c:	4603      	mov	r3, r0
 800109e:	4a76      	ldr	r2, [pc, #472]	; (8001278 <main+0x334>)
 80010a0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  // Queue RxTask to ConvDirec
  osMessageQDef(myQueueRxConv, sizeof(s_Velocidad), s_Velocidad);
 80010a2:	4b76      	ldr	r3, [pc, #472]	; (800127c <main+0x338>)
 80010a4:	f507 7484 	add.w	r4, r7, #264	; 0x108
 80010a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueRxConvHandle = osMessageCreate(osMessageQ(myQueueRxConv), NULL);
 80010ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00a feff 	bl	800beb8 <osMessageCreate>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a70      	ldr	r2, [pc, #448]	; (8001280 <main+0x33c>)
 80010be:	6013      	str	r3, [r2, #0]

  // Queue ConvDirec to ControlVel
  osMessageQDef(myQueueConvControl, sizeof(s_Velocidad_ruedas), s_Velocidad_ruedas);
 80010c0:	4b70      	ldr	r3, [pc, #448]	; (8001284 <main+0x340>)
 80010c2:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 80010c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueConvControlHandle = osMessageCreate(osMessageQ(myQueueConvControl), NULL);
 80010cc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f00a fef0 	bl	800beb8 <osMessageCreate>
 80010d8:	4603      	mov	r3, r0
 80010da:	4a6b      	ldr	r2, [pc, #428]	; (8001288 <main+0x344>)
 80010dc:	6013      	str	r3, [r2, #0]
  
  // Queue MeasureVel to ControlVel
  osMessageQDef(myQueueVelControl, sizeof(s_Velocidad_ruedas), s_Velocidad_ruedas);
 80010de:	4b69      	ldr	r3, [pc, #420]	; (8001284 <main+0x340>)
 80010e0:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 80010e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueVelControlHandle = osMessageCreate(osMessageQ(myQueueVelControl), NULL);
 80010ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00a fee1 	bl	800beb8 <osMessageCreate>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a64      	ldr	r2, [pc, #400]	; (800128c <main+0x348>)
 80010fa:	6013      	str	r3, [r2, #0]

  // Queue MeasureVel to TxTask
  osMessageQDef(myQueueVelTx, sizeof(s_Velocidad), s_Velocidad);
 80010fc:	4b5f      	ldr	r3, [pc, #380]	; (800127c <main+0x338>)
 80010fe:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8001102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueVelTxHandle = osMessageCreate(osMessageQ(myQueueVelTx), NULL);
 8001108:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f00a fed2 	bl	800beb8 <osMessageCreate>
 8001114:	4603      	mov	r3, r0
 8001116:	4a5e      	ldr	r2, [pc, #376]	; (8001290 <main+0x34c>)
 8001118:	6013      	str	r3, [r2, #0]

  // Queue MeasureAccel to TxTask
  osMessageQDef(myQueueAccelTx, sizeof(s_Aceleracion), s_Aceleracion);
 800111a:	4b58      	ldr	r3, [pc, #352]	; (800127c <main+0x338>)
 800111c:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8001120:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001122:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueAccelTxHandle = osMessageCreate(osMessageQ(myQueueAccelTx), NULL);
 8001126:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f00a fec3 	bl	800beb8 <osMessageCreate>
 8001132:	4603      	mov	r3, r0
 8001134:	4a57      	ldr	r2, [pc, #348]	; (8001294 <main+0x350>)
 8001136:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001138:	4b57      	ldr	r3, [pc, #348]	; (8001298 <main+0x354>)
 800113a:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800113e:	461d      	mov	r5, r3
 8001140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001144:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001148:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800114c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00a fe1e 	bl	800bd94 <osThreadCreate>
 8001158:	4603      	mov	r3, r0
 800115a:	4a50      	ldr	r2, [pc, #320]	; (800129c <main+0x358>)
 800115c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TxTask */
  osThreadDef(TxTask, StartTxTask, osPriorityLow, 0, 128);
 800115e:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <main+0x35c>)
 8001160:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001164:	461d      	mov	r5, r3
 8001166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800116e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TxTaskHandle = osThreadCreate(osThread(TxTask), NULL);
 8001172:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f00a fe0b 	bl	800bd94 <osThreadCreate>
 800117e:	4603      	mov	r3, r0
 8001180:	4a48      	ldr	r2, [pc, #288]	; (80012a4 <main+0x360>)
 8001182:	6013      	str	r3, [r2, #0]

  /* definition and creation of RxTask */
  osThreadDef(RxTask, StartRxTask, osPriorityNormal, 0, 128);
 8001184:	4b48      	ldr	r3, [pc, #288]	; (80012a8 <main+0x364>)
 8001186:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800118a:	461d      	mov	r5, r3
 800118c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001194:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RxTaskHandle = osThreadCreate(osThread(RxTask), NULL);
 8001198:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f00a fdf8 	bl	800bd94 <osThreadCreate>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a41      	ldr	r2, [pc, #260]	; (80012ac <main+0x368>)
 80011a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of CinematicConv */
  osThreadDef(CinematicConv, StartCinematicConv, osPriorityBelowNormal, 0, 128);
 80011aa:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <main+0x36c>)
 80011ac:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80011b0:	461d      	mov	r5, r3
 80011b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CinematicConvHandle = osThreadCreate(osThread(CinematicConv), NULL);
 80011be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00a fde5 	bl	800bd94 <osThreadCreate>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a39      	ldr	r2, [pc, #228]	; (80012b4 <main+0x370>)
 80011ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControlVel */
  osThreadDef(ControlVel, StartControlVel, osPriorityHigh, 0, 128);
 80011d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80011d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80011d8:	4a37      	ldr	r2, [pc, #220]	; (80012b8 <main+0x374>)
 80011da:	461c      	mov	r4, r3
 80011dc:	4615      	mov	r5, r2
 80011de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlVelHandle = osThreadCreate(osThread(ControlVel), NULL);
 80011ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00a fdcf 	bl	800bd94 <osThreadCreate>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a30      	ldr	r2, [pc, #192]	; (80012bc <main+0x378>)
 80011fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of MeasureAccel */
  osThreadDef(MeasureAccel, StartMeasureAccel, osPriorityAboveNormal, 0, 128);
 80011fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001200:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001204:	4a2e      	ldr	r2, [pc, #184]	; (80012c0 <main+0x37c>)
 8001206:	461c      	mov	r4, r3
 8001208:	4615      	mov	r5, r2
 800120a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001212:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MeasureAccelHandle = osThreadCreate(osThread(MeasureAccel), NULL);
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f00a fdb9 	bl	800bd94 <osThreadCreate>
 8001222:	4603      	mov	r3, r0
 8001224:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <main+0x380>)
 8001226:	6013      	str	r3, [r2, #0]

  /* definition and creation of MeasureVel */
  osThreadDef(MeasureVel, StartMeasureVel, osPriorityRealtime, 0, 128);
 8001228:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800122c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001230:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <main+0x384>)
 8001232:	461c      	mov	r4, r3
 8001234:	4615      	mov	r5, r2
 8001236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800123e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MeasureVelHandle = osThreadCreate(osThread(MeasureVel), NULL);
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f00a fda4 	bl	800bd94 <osThreadCreate>
 800124c:	4603      	mov	r3, r0
 800124e:	4a1f      	ldr	r2, [pc, #124]	; (80012cc <main+0x388>)
 8001250:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001252:	f00a fd98 	bl	800bd86 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001256:	e7fe      	b.n	8001256 <main+0x312>
 8001258:	200004e8 	.word	0x200004e8
 800125c:	40023000 	.word	0x40023000
 8001260:	20000610 	.word	0x20000610
 8001264:	20000894 	.word	0x20000894
 8001268:	2000086c 	.word	0x2000086c
 800126c:	20000870 	.word	0x20000870
 8001270:	20000874 	.word	0x20000874
 8001274:	20000878 	.word	0x20000878
 8001278:	2000087c 	.word	0x2000087c
 800127c:	08010d90 	.word	0x08010d90
 8001280:	20000880 	.word	0x20000880
 8001284:	08010da0 	.word	0x08010da0
 8001288:	20000884 	.word	0x20000884
 800128c:	20000888 	.word	0x20000888
 8001290:	2000088c 	.word	0x2000088c
 8001294:	20000890 	.word	0x20000890
 8001298:	08010dbc 	.word	0x08010dbc
 800129c:	20000850 	.word	0x20000850
 80012a0:	08010de0 	.word	0x08010de0
 80012a4:	20000854 	.word	0x20000854
 80012a8:	08010e04 	.word	0x08010e04
 80012ac:	20000858 	.word	0x20000858
 80012b0:	08010e30 	.word	0x08010e30
 80012b4:	2000085c 	.word	0x2000085c
 80012b8:	08010e58 	.word	0x08010e58
 80012bc:	20000860 	.word	0x20000860
 80012c0:	08010e84 	.word	0x08010e84
 80012c4:	20000864 	.word	0x20000864
 80012c8:	08010eac 	.word	0x08010eac
 80012cc:	20000868 	.word	0x20000868

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0a6      	sub	sp, #152	; 0x98
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012da:	2228      	movs	r2, #40	; 0x28
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f00d fd9f 	bl	800ee22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2258      	movs	r2, #88	; 0x58
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f00d fd91 	bl	800ee22 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001300:	2302      	movs	r3, #2
 8001302:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001304:	2301      	movs	r3, #1
 8001306:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001308:	2310      	movs	r3, #16
 800130a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001318:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800131c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800132e:	4618      	mov	r0, r3
 8001330:	f005 f96e 	bl	8006610 <HAL_RCC_OscConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800133a:	f001 fb25 	bl	8002988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133e:	230f      	movs	r3, #15
 8001340:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001342:	2302      	movs	r3, #2
 8001344:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800134a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001354:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001358:	2102      	movs	r1, #2
 800135a:	4618      	mov	r0, r3
 800135c:	f006 f9ac 	bl	80076b8 <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001366:	f001 fb0f 	bl	8002988 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <SystemClock_Config+0xdc>)
 800136c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM17|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800137c:	2300      	movs	r3, #0
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001380:	2300      	movs	r3, #0
 8001382:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001384:	2300      	movs	r3, #0
 8001386:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8001388:	2300      	movs	r3, #0
 800138a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800138c:	2300      	movs	r3, #0
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	4618      	mov	r0, r3
 8001394:	f006 fbf8 	bl	8007b88 <HAL_RCCEx_PeriphCLKConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800139e:	f001 faf3 	bl	8002988 <Error_Handler>
  }
}
 80013a2:	bf00      	nop
 80013a4:	3798      	adds	r7, #152	; 0x98
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	015030a4 	.word	0x015030a4

080013b0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2105      	movs	r1, #5
 80013b8:	2027      	movs	r0, #39	; 0x27
 80013ba:	f003 fc31 	bl	8004c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013be:	2027      	movs	r0, #39	; 0x27
 80013c0:	f003 fc4a 	bl	8004c58 <HAL_NVIC_EnableIRQ>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ea:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <MX_ADC1_Init+0xdc>)
 80013ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013f2:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <MX_ADC1_Init+0xdc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <MX_ADC1_Init+0xdc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <MX_ADC1_Init+0xdc>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001404:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <MX_ADC1_Init+0xdc>)
 8001406:	2200      	movs	r2, #0
 8001408:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_ADC1_Init+0xdc>)
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <MX_ADC1_Init+0xdc>)
 8001414:	2200      	movs	r2, #0
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_ADC1_Init+0xdc>)
 800141a:	2201      	movs	r2, #1
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <MX_ADC1_Init+0xdc>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_ADC1_Init+0xdc>)
 8001426:	2201      	movs	r2, #1
 8001428:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_ADC1_Init+0xdc>)
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_ADC1_Init+0xdc>)
 8001434:	2204      	movs	r2, #4
 8001436:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_ADC1_Init+0xdc>)
 800143a:	2200      	movs	r2, #0
 800143c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_ADC1_Init+0xdc>)
 8001440:	2200      	movs	r2, #0
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001444:	4817      	ldr	r0, [pc, #92]	; (80014a4 <MX_ADC1_Init+0xdc>)
 8001446:	f002 f837 	bl	80034b8 <HAL_ADC_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001450:	f001 fa9a 	bl	8002988 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4811      	ldr	r0, [pc, #68]	; (80014a4 <MX_ADC1_Init+0xdc>)
 8001460:	f003 f96a 	bl	8004738 <HAL_ADCEx_MultiModeConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800146a:	f001 fa8d 	bl	8002988 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800146e:	2301      	movs	r3, #1
 8001470:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001472:	2301      	movs	r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_ADC1_Init+0xdc>)
 800148c:	f002 fe6a 	bl	8004164 <HAL_ADC_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001496:	f001 fa77 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000498 	.word	0x20000498

080014a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <MX_CRC_Init+0x3c>)
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <MX_CRC_Init+0x40>)
 80014b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_CRC_Init+0x3c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <MX_CRC_Init+0x3c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_CRC_Init+0x3c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <MX_CRC_Init+0x3c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_CRC_Init+0x3c>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_CRC_Init+0x3c>)
 80014d2:	f003 fbcf 	bl	8004c74 <HAL_CRC_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014dc:	f001 fa54 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200004e8 	.word	0x200004e8
 80014e8:	40023000 	.word	0x40023000

080014ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <MX_I2C1_Init+0x74>)
 80014f2:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <MX_I2C1_Init+0x78>)
 80014f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_I2C1_Init+0x74>)
 80014f8:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <MX_I2C1_Init+0x7c>)
 80014fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <MX_I2C1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_I2C1_Init+0x74>)
 8001504:	2201      	movs	r2, #1
 8001506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MX_I2C1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_I2C1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_I2C1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_I2C1_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_I2C1_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001526:	480e      	ldr	r0, [pc, #56]	; (8001560 <MX_I2C1_Init+0x74>)
 8001528:	f004 f9ae 	bl	8005888 <HAL_I2C_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001532:	f001 fa29 	bl	8002988 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001536:	2100      	movs	r1, #0
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <MX_I2C1_Init+0x74>)
 800153a:	f004 ffd2 	bl	80064e2 <HAL_I2CEx_ConfigAnalogFilter>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001544:	f001 fa20 	bl	8002988 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001548:	2100      	movs	r1, #0
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_I2C1_Init+0x74>)
 800154c:	f005 f814 	bl	8006578 <HAL_I2CEx_ConfigDigitalFilter>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001556:	f001 fa17 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000050c 	.word	0x2000050c
 8001564:	40005400 	.word	0x40005400
 8001568:	2000090e 	.word	0x2000090e

0800156c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001572:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <MX_SPI1_Init+0x78>)
 8001574:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001578:	f44f 7282 	mov.w	r2, #260	; 0x104
 800157c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001586:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800158a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_SPI1_Init+0x74>)
 800158e:	2202      	movs	r2, #2
 8001590:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001594:	2201      	movs	r2, #1
 8001596:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_SPI1_Init+0x74>)
 800159a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015a2:	2228      	movs	r2, #40	; 0x28
 80015a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015ba:	2207      	movs	r2, #7
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015cc:	f006 fcfa 	bl	8007fc4 <HAL_SPI_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015d6:	f001 f9d7 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000560 	.word	0x20000560
 80015e4:	40013000 	.word	0x40013000

080015e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b09a      	sub	sp, #104	; 0x68
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001608:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
 8001618:	615a      	str	r2, [r3, #20]
 800161a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	222c      	movs	r2, #44	; 0x2c
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f00d fbfd 	bl	800ee22 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001628:	4b43      	ldr	r3, [pc, #268]	; (8001738 <MX_TIM1_Init+0x150>)
 800162a:	4a44      	ldr	r2, [pc, #272]	; (800173c <MX_TIM1_Init+0x154>)
 800162c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800162e:	4b42      	ldr	r3, [pc, #264]	; (8001738 <MX_TIM1_Init+0x150>)
 8001630:	2247      	movs	r2, #71	; 0x47
 8001632:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b40      	ldr	r3, [pc, #256]	; (8001738 <MX_TIM1_Init+0x150>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800163a:	4b3f      	ldr	r3, [pc, #252]	; (8001738 <MX_TIM1_Init+0x150>)
 800163c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001640:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <MX_TIM1_Init+0x150>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001648:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <MX_TIM1_Init+0x150>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b3a      	ldr	r3, [pc, #232]	; (8001738 <MX_TIM1_Init+0x150>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001654:	4838      	ldr	r0, [pc, #224]	; (8001738 <MX_TIM1_Init+0x150>)
 8001656:	f007 fbeb 	bl	8008e30 <HAL_TIM_Base_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001660:	f001 f992 	bl	8002988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001668:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800166a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800166e:	4619      	mov	r1, r3
 8001670:	4831      	ldr	r0, [pc, #196]	; (8001738 <MX_TIM1_Init+0x150>)
 8001672:	f008 f99f 	bl	80099b4 <HAL_TIM_ConfigClockSource>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800167c:	f001 f984 	bl	8002988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001680:	482d      	ldr	r0, [pc, #180]	; (8001738 <MX_TIM1_Init+0x150>)
 8001682:	f007 fdf5 	bl	8009270 <HAL_TIM_PWM_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800168c:	f001 f97c 	bl	8002988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800169c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016a0:	4619      	mov	r1, r3
 80016a2:	4825      	ldr	r0, [pc, #148]	; (8001738 <MX_TIM1_Init+0x150>)
 80016a4:	f008 ff96 	bl	800a5d4 <HAL_TIMEx_MasterConfigSynchronization>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80016ae:	f001 f96b 	bl	8002988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b2:	2360      	movs	r3, #96	; 0x60
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ba:	2300      	movs	r3, #0
 80016bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016be:	2300      	movs	r3, #0
 80016c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4818      	ldr	r0, [pc, #96]	; (8001738 <MX_TIM1_Init+0x150>)
 80016d8:	f008 f858 	bl	800978c <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80016e2:	f001 f951 	bl	8002988 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 237;
 80016f2:	23ed      	movs	r3, #237	; 0xed
 80016f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001708:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	4619      	mov	r1, r3
 800171a:	4807      	ldr	r0, [pc, #28]	; (8001738 <MX_TIM1_Init+0x150>)
 800171c:	f008 ffe6 	bl	800a6ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001726:	f001 f92f 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <MX_TIM1_Init+0x150>)
 800172c:	f001 fae0 	bl	8002cf0 <HAL_TIM_MspPostInit>

}
 8001730:	bf00      	nop
 8001732:	3768      	adds	r7, #104	; 0x68
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200005c4 	.word	0x200005c4
 800173c:	40012c00 	.word	0x40012c00

08001740 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800175e:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <MX_TIM2_Init+0x98>)
 8001760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001764:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_TIM2_Init+0x98>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_TIM2_Init+0x98>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_TIM2_Init+0x98>)
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_TIM2_Init+0x98>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MX_TIM2_Init+0x98>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001786:	4814      	ldr	r0, [pc, #80]	; (80017d8 <MX_TIM2_Init+0x98>)
 8001788:	f007 fb52 	bl	8008e30 <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001792:	f001 f8f9 	bl	8002988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4619      	mov	r1, r3
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_TIM2_Init+0x98>)
 80017a4:	f008 f906 	bl	80099b4 <HAL_TIM_ConfigClockSource>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017ae:	f001 f8eb 	bl	8002988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <MX_TIM2_Init+0x98>)
 80017c0:	f008 ff08 	bl	800a5d4 <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017ca:	f001 f8dd 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000610 	.word	0x20000610

080017dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b09a      	sub	sp, #104	; 0x68
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	222c      	movs	r2, #44	; 0x2c
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f00d fb03 	bl	800ee22 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <MX_TIM8_Init+0x150>)
 800181e:	4a44      	ldr	r2, [pc, #272]	; (8001930 <MX_TIM8_Init+0x154>)
 8001820:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 72-1;
 8001822:	4b42      	ldr	r3, [pc, #264]	; (800192c <MX_TIM8_Init+0x150>)
 8001824:	2247      	movs	r2, #71	; 0x47
 8001826:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001828:	4b40      	ldr	r3, [pc, #256]	; (800192c <MX_TIM8_Init+0x150>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 800182e:	4b3f      	ldr	r3, [pc, #252]	; (800192c <MX_TIM8_Init+0x150>)
 8001830:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001834:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <MX_TIM8_Init+0x150>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800183c:	4b3b      	ldr	r3, [pc, #236]	; (800192c <MX_TIM8_Init+0x150>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001842:	4b3a      	ldr	r3, [pc, #232]	; (800192c <MX_TIM8_Init+0x150>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001848:	4838      	ldr	r0, [pc, #224]	; (800192c <MX_TIM8_Init+0x150>)
 800184a:	f007 faf1 	bl	8008e30 <HAL_TIM_Base_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001854:	f001 f898 	bl	8002988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800185e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001862:	4619      	mov	r1, r3
 8001864:	4831      	ldr	r0, [pc, #196]	; (800192c <MX_TIM8_Init+0x150>)
 8001866:	f008 f8a5 	bl	80099b4 <HAL_TIM_ConfigClockSource>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001870:	f001 f88a 	bl	8002988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001874:	482d      	ldr	r0, [pc, #180]	; (800192c <MX_TIM8_Init+0x150>)
 8001876:	f007 fcfb 	bl	8009270 <HAL_TIM_PWM_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001880:	f001 f882 	bl	8002988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001890:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001894:	4619      	mov	r1, r3
 8001896:	4825      	ldr	r0, [pc, #148]	; (800192c <MX_TIM8_Init+0x150>)
 8001898:	f008 fe9c 	bl	800a5d4 <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80018a2:	f001 f871 	bl	8002988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a6:	2360      	movs	r3, #96	; 0x60
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ae:	2300      	movs	r3, #0
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b2:	2300      	movs	r3, #0
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c6:	2200      	movs	r2, #0
 80018c8:	4619      	mov	r1, r3
 80018ca:	4818      	ldr	r0, [pc, #96]	; (800192c <MX_TIM8_Init+0x150>)
 80018cc:	f007 ff5e 	bl	800978c <HAL_TIM_PWM_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80018d6:	f001 f857 	bl	8002988 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 237;
 80018e6:	23ed      	movs	r3, #237	; 0xed
 80018e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	4619      	mov	r1, r3
 800190e:	4807      	ldr	r0, [pc, #28]	; (800192c <MX_TIM8_Init+0x150>)
 8001910:	f008 feec 	bl	800a6ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800191a:	f001 f835 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800191e:	4803      	ldr	r0, [pc, #12]	; (800192c <MX_TIM8_Init+0x150>)
 8001920:	f001 f9e6 	bl	8002cf0 <HAL_TIM_MspPostInit>

}
 8001924:	bf00      	nop
 8001926:	3768      	adds	r7, #104	; 0x68
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2000065c 	.word	0x2000065c
 8001930:	40013400 	.word	0x40013400

08001934 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b09a      	sub	sp, #104	; 0x68
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001954:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
 8001964:	615a      	str	r2, [r3, #20]
 8001966:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	222c      	movs	r2, #44	; 0x2c
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f00d fa57 	bl	800ee22 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001974:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <MX_TIM15_Init+0x140>)
 8001976:	4a40      	ldr	r2, [pc, #256]	; (8001a78 <MX_TIM15_Init+0x144>)
 8001978:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72-1;
 800197a:	4b3e      	ldr	r3, [pc, #248]	; (8001a74 <MX_TIM15_Init+0x140>)
 800197c:	2247      	movs	r2, #71	; 0x47
 800197e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <MX_TIM15_Init+0x140>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 8001986:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <MX_TIM15_Init+0x140>)
 8001988:	f240 32e7 	movw	r2, #999	; 0x3e7
 800198c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <MX_TIM15_Init+0x140>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001994:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <MX_TIM15_Init+0x140>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <MX_TIM15_Init+0x140>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80019a0:	4834      	ldr	r0, [pc, #208]	; (8001a74 <MX_TIM15_Init+0x140>)
 80019a2:	f007 fa45 	bl	8008e30 <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80019ac:	f000 ffec 	bl	8002988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80019b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019ba:	4619      	mov	r1, r3
 80019bc:	482d      	ldr	r0, [pc, #180]	; (8001a74 <MX_TIM15_Init+0x140>)
 80019be:	f007 fff9 	bl	80099b4 <HAL_TIM_ConfigClockSource>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80019c8:	f000 ffde 	bl	8002988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80019cc:	4829      	ldr	r0, [pc, #164]	; (8001a74 <MX_TIM15_Init+0x140>)
 80019ce:	f007 fc4f 	bl	8009270 <HAL_TIM_PWM_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80019d8:	f000 ffd6 	bl	8002988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019e8:	4619      	mov	r1, r3
 80019ea:	4822      	ldr	r0, [pc, #136]	; (8001a74 <MX_TIM15_Init+0x140>)
 80019ec:	f008 fdf2 	bl	800a5d4 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80019f6:	f000 ffc7 	bl	8002988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fa:	2360      	movs	r3, #96	; 0x60
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a02:	2300      	movs	r3, #0
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4815      	ldr	r0, [pc, #84]	; (8001a74 <MX_TIM15_Init+0x140>)
 8001a20:	f007 feb4 	bl	800978c <HAL_TIM_PWM_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001a2a:	f000 ffad 	bl	8002988 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 237;
 8001a3a:	23ed      	movs	r3, #237	; 0xed
 8001a3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	4619      	mov	r1, r3
 8001a54:	4807      	ldr	r0, [pc, #28]	; (8001a74 <MX_TIM15_Init+0x140>)
 8001a56:	f008 fe49 	bl	800a6ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8001a60:	f000 ff92 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <MX_TIM15_Init+0x140>)
 8001a66:	f001 f943 	bl	8002cf0 <HAL_TIM_MspPostInit>

}
 8001a6a:	bf00      	nop
 8001a6c:	3768      	adds	r7, #104	; 0x68
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200006a8 	.word	0x200006a8
 8001a78:	40014000 	.word	0x40014000

08001a7c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b092      	sub	sp, #72	; 0x48
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
 8001a92:	615a      	str	r2, [r3, #20]
 8001a94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	222c      	movs	r2, #44	; 0x2c
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00d f9c0 	bl	800ee22 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <MX_TIM17_Init+0xec>)
 8001aa4:	4a31      	ldr	r2, [pc, #196]	; (8001b6c <MX_TIM17_Init+0xf0>)
 8001aa6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 72-1;
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <MX_TIM17_Init+0xec>)
 8001aaa:	2247      	movs	r2, #71	; 0x47
 8001aac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <MX_TIM17_Init+0xec>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <MX_TIM17_Init+0xec>)
 8001ab6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abc:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <MX_TIM17_Init+0xec>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ac2:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <MX_TIM17_Init+0xec>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <MX_TIM17_Init+0xec>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001ace:	4826      	ldr	r0, [pc, #152]	; (8001b68 <MX_TIM17_Init+0xec>)
 8001ad0:	f007 f9ae 	bl	8008e30 <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001ada:	f000 ff55 	bl	8002988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001ade:	4822      	ldr	r0, [pc, #136]	; (8001b68 <MX_TIM17_Init+0xec>)
 8001ae0:	f007 fbc6 	bl	8009270 <HAL_TIM_PWM_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001aea:	f000 ff4d 	bl	8002988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aee:	2360      	movs	r3, #96	; 0x60
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001afa:	2300      	movs	r3, #0
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0e:	2200      	movs	r2, #0
 8001b10:	4619      	mov	r1, r3
 8001b12:	4815      	ldr	r0, [pc, #84]	; (8001b68 <MX_TIM17_Init+0xec>)
 8001b14:	f007 fe3a 	bl	800978c <HAL_TIM_PWM_ConfigChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001b1e:	f000 ff33 	bl	8002988 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 237;
 8001b2e:	23ed      	movs	r3, #237	; 0xed
 8001b30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001b44:	463b      	mov	r3, r7
 8001b46:	4619      	mov	r1, r3
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <MX_TIM17_Init+0xec>)
 8001b4a:	f008 fdcf 	bl	800a6ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001b54:	f000 ff18 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <MX_TIM17_Init+0xec>)
 8001b5a:	f001 f8c9 	bl	8002cf0 <HAL_TIM_MspPostInit>

}
 8001b5e:	bf00      	nop
 8001b60:	3748      	adds	r7, #72	; 0x48
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200006f4 	.word	0x200006f4
 8001b6c:	40014800 	.word	0x40014800

08001b70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <MX_USART3_UART_Init+0x54>)
 8001b76:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <MX_USART3_UART_Init+0x58>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <MX_USART3_UART_Init+0x54>)
 8001b7c:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <MX_USART3_UART_Init+0x5c>)
 8001b7e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <MX_USART3_UART_Init+0x54>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_USART3_UART_Init+0x54>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <MX_USART3_UART_Init+0x54>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_USART3_UART_Init+0x54>)
 8001b94:	220c      	movs	r2, #12
 8001b96:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <MX_USART3_UART_Init+0x54>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_USART3_UART_Init+0x54>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <MX_USART3_UART_Init+0x54>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_USART3_UART_Init+0x54>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <MX_USART3_UART_Init+0x54>)
 8001bb2:	f008 fe64 	bl	800a87e <HAL_UART_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8001bbc:	f000 fee4 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000740 	.word	0x20000740
 8001bc8:	40004800 	.word	0x40004800
 8001bcc:	001e8480 	.word	0x001e8480

08001bd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <MX_DMA_Init+0x48>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <MX_DMA_Init+0x48>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6153      	str	r3, [r2, #20]
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <MX_DMA_Init+0x48>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	200c      	movs	r0, #12
 8001bf4:	f003 f814 	bl	8004c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bf8:	200c      	movs	r0, #12
 8001bfa:	f003 f82d 	bl	8004c58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2105      	movs	r1, #5
 8001c02:	200d      	movs	r0, #13
 8001c04:	f003 f80c 	bl	8004c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c08:	200d      	movs	r0, #13
 8001c0a:	f003 f825 	bl	8004c58 <HAL_NVIC_EnableIRQ>

}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <MX_GPIO_Init+0xf8>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	4a37      	ldr	r2, [pc, #220]	; (8001d14 <MX_GPIO_Init+0xf8>)
 8001c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c3c:	6153      	str	r3, [r2, #20]
 8001c3e:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <MX_GPIO_Init+0xf8>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <MX_GPIO_Init+0xf8>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <MX_GPIO_Init+0xf8>)
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c54:	6153      	str	r3, [r2, #20]
 8001c56:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <MX_GPIO_Init+0xf8>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <MX_GPIO_Init+0xf8>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	4a2b      	ldr	r2, [pc, #172]	; (8001d14 <MX_GPIO_Init+0xf8>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6153      	str	r3, [r2, #20]
 8001c6e:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <MX_GPIO_Init+0xf8>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c82:	f003 fdb7 	bl	80057f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8c:	4822      	ldr	r0, [pc, #136]	; (8001d18 <MX_GPIO_Init+0xfc>)
 8001c8e:	f003 fdb1 	bl	80057f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Encoder4_Pin Encoder3_Pin Encoder2_Pin
                           Encoder1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Encoder4_Pin|Encoder3_Pin|Encoder2_Pin
 8001c92:	f44f 530f 	mov.w	r3, #9152	; 0x23c0
 8001c96:	60fb      	str	r3, [r7, #12]
                          |Encoder1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	481c      	ldr	r0, [pc, #112]	; (8001d1c <MX_GPIO_Init+0x100>)
 8001caa:	f003 fc19 	bl	80054e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cae:	2320      	movs	r3, #32
 8001cb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc8:	f003 fc0a 	bl	80054e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 8001ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <MX_GPIO_Init+0xfc>)
 8001ce6:	f003 fbfb 	bl	80054e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2105      	movs	r1, #5
 8001cee:	2017      	movs	r0, #23
 8001cf0:	f002 ff96 	bl	8004c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cf4:	2017      	movs	r0, #23
 8001cf6:	f002 ffaf 	bl	8004c58 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	2028      	movs	r0, #40	; 0x28
 8001d00:	f002 ff8e 	bl	8004c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d04:	2028      	movs	r0, #40	; 0x28
 8001d06:	f002 ffa7 	bl	8004c58 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d0a:	bf00      	nop
 8001d0c:	3720      	adds	r7, #32
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	48000800 	.word	0x48000800

08001d20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2120      	movs	r1, #32
 8001d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d30:	f003 fd60 	bl	80057f4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  if ( state == RUN_State ){
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <StartDefaultTask+0x30>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d104      	bne.n	8001d46 <StartDefaultTask+0x26>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d42:	f003 fd6f 	bl	8005824 <HAL_GPIO_TogglePin>
	  }
	  osDelay(1500);
 8001d46:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001d4a:	f00a f86f 	bl	800be2c <osDelay>
	  if ( state == RUN_State ){
 8001d4e:	e7f1      	b.n	8001d34 <StartDefaultTask+0x14>
 8001d50:	20000000 	.word	0x20000000

08001d54 <StartTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTxTask */
void StartTxTask(void const * argument)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b098      	sub	sp, #96	; 0x60
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTxTask */
//	char str[100]="En tarea TxTask\n\r";
	unsigned char str[1]="a";
 8001d5c:	2361      	movs	r3, #97	; 0x61
 8001d5e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
//	u_Trama_rx trama_rx;
	s_Velocidad_ruedas velocidad_medida;
	s_Aceleracion aceleracion;
	u_Trama_tx trama_tx;
	trama_tx.data.u_m[0]   	= 0;
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
	trama_tx.data.u_m[1]   	= 0;
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
	trama_tx.data.u_m[2]   	= 0;
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
	trama_tx.data.u_m[3]   	= 0;
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
	trama_tx.data.a_m[0]   	= 0;
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
	trama_tx.data.a_m[1]   	= 0;
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
	trama_tx.data.a_m[2]   	= 0;
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
	trama_tx.data.phi_m[0] 	= 0;
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
	trama_tx.data.phi_m[1] 	= 0;
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
	trama_tx.data.phi_m[2] 	= 0;
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
	trama_tx.data.i_m   	= 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	873b      	strh	r3, [r7, #56]	; 0x38
	trama_tx.data.v_bat    	= 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	877b      	strh	r3, [r7, #58]	; 0x3a
	trama_tx.data.status   	= 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	87bb      	strh	r3, [r7, #60]	; 0x3c
	trama_tx.data.crc      	= 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	trama_tx.data.timestamp = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
	trama_tx.data.start     = '[';
 8001db4:	235b      	movs	r3, #91	; 0x5b
 8001db6:	60bb      	str	r3, [r7, #8]
	trama_tx.data.stop      = ']';
 8001db8:	235d      	movs	r3, #93	; 0x5d
 8001dba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
//	sprintf(trama_tx.trama_char, "0123456789aaa0123456789bbb0123456789c");
//	trama_rx.data.wz = 15;
//	trama_rx.data.vy = 30;
//	trama_rx.data.vx = 45;
//	trama_rx.data.crc = 60;
	HAL_ADC_Start_IT(&hadc1);
 8001dbe:	4826      	ldr	r0, [pc, #152]	; (8001e58 <StartTxTask+0x104>)
 8001dc0:	f001 fd74 	bl	80038ac <HAL_ADC_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	  if ( state == RUN_State ){
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <StartTxTask+0x108>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d140      	bne.n	8001e4e <StartTxTask+0xfa>
			// Recibo velocidad medida
			if ( xQueueReceive(myQueueVelTxHandle, &velocidad_medida, 0) == pdPASS ){
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <StartTxTask+0x10c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f00a fb84 	bl	800c4e4 <xQueueReceive>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d10e      	bne.n	8001e00 <StartTxTask+0xac>
		//		sprintf(str, "TxTask: Velocidad medida:\nw_00=%d w_01=%d w_10=%d w_11=%d", velocidad_medida.w_00,
		//												 								    velocidad_medida.w_01,
		//												 								    velocidad_medida.w_10,
		//												 								    velocidad_medida.w_11);
		//		HAL_UART_Transmit(&huart3,str,sizeof(str),100);
				trama_tx.data.u_m[0]   = velocidad_medida.u_1;
 8001de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de4:	613b      	str	r3, [r7, #16]
				trama_tx.data.u_m[1]   = velocidad_medida.u_2;
 8001de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de8:	617b      	str	r3, [r7, #20]
				trama_tx.data.u_m[2]   = velocidad_medida.u_3;
 8001dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dec:	61bb      	str	r3, [r7, #24]
				trama_tx.data.u_m[3]   = velocidad_medida.u_4;
 8001dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df0:	61fb      	str	r3, [r7, #28]
				xSemaphoreGive( myBinarySemVelTxHandle );
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <StartTxTask+0x110>)
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	2300      	movs	r3, #0
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	f00a fa74 	bl	800c2e8 <xQueueGenericSend>
			}

			// Recibo aceleracion medida
			if ( xQueueReceive(myQueueAccelTxHandle, &aceleracion, 0) == pdPASS ){
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <StartTxTask+0x114>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001e08:	2200      	movs	r2, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f00a fb6a 	bl	800c4e4 <xQueueReceive>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d106      	bne.n	8001e24 <StartTxTask+0xd0>
		//		trama_tx.data.i_m[3]   = 72;
		//		trama_tx.data.v_bat    = 72;
		//		trama_tx.data.status   = 72;
		//		trama_tx.data.timestamp = 72;
		//		trama_tx.data.crc      = 72;
				xSemaphoreGive( myBinarySemAccelTxHandle );
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <StartTxTask+0x118>)
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	f00a fa62 	bl	800c2e8 <xQueueGenericSend>
			}

			if(flag_adc){
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <StartTxTask+0x11c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d009      	beq.n	8001e40 <StartTxTask+0xec>
				trama_tx.data.v_bat = raw_adc_value;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <StartTxTask+0x120>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	877b      	strh	r3, [r7, #58]	; 0x3a
				flag_adc= 0;
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <StartTxTask+0x11c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start_IT(&hadc1);
 8001e3a:	4807      	ldr	r0, [pc, #28]	; (8001e58 <StartTxTask+0x104>)
 8001e3c:	f001 fd36 	bl	80038ac <HAL_ADC_Start_IT>
			}

			//Transmito la trama
			HAL_UART_Transmit_DMA(&huart3, trama_tx.string,sizeof(trama_tx.string));
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	2238      	movs	r2, #56	; 0x38
 8001e46:	4619      	mov	r1, r3
 8001e48:	480b      	ldr	r0, [pc, #44]	; (8001e78 <StartTxTask+0x124>)
 8001e4a:	f008 fd67 	bl	800a91c <HAL_UART_Transmit_DMA>
		//	HAL_UART_Transmit(&huart3, str, sizeof(str), 500);

		//	osDelay(5);

	  }
	  osDelay(5);
 8001e4e:	2005      	movs	r0, #5
 8001e50:	f009 ffec 	bl	800be2c <osDelay>
	  if ( state == RUN_State ){
 8001e54:	e7b6      	b.n	8001dc4 <StartTxTask+0x70>
 8001e56:	bf00      	nop
 8001e58:	20000498 	.word	0x20000498
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	2000088c 	.word	0x2000088c
 8001e64:	20000870 	.word	0x20000870
 8001e68:	20000890 	.word	0x20000890
 8001e6c:	2000086c 	.word	0x2000086c
 8001e70:	200008e0 	.word	0x200008e0
 8001e74:	200008dc 	.word	0x200008dc
 8001e78:	20000740 	.word	0x20000740

08001e7c <StartRxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRxTask */
void StartRxTask(void const * argument)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b0b4      	sub	sp, #208	; 0xd0
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRxTask */
	  uint8_t crcVal=0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	  uint8_t crcRx=0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	  uint8_t crcArray[12] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8001e90:	4a5d      	ldr	r2, [pc, #372]	; (8002008 <StartRxTask+0x18c>)
 8001e92:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e96:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//	trama_rx.data.wz = 15;
//	trama_rx.data.vy = 30;
//	trama_rx.data.vx = 45;
//	trama_rx.data.crc = 60;
	u_Trama_rx trama_rx;
	trama_rx.data.v_y = 0.0;
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	trama_rx.data.v_x = 0.0;
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	trama_rx.data.w_z = 0.0;
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	trama_rx.data.crc = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
    s_Velocidad velocidad;
    char str[150];
//    char str2[] = "Queue enviada desde Rx a Conv.\n\r";
    xSemaphoreGive( myBinarySemRxConvHandle );
 8001eba:	4b54      	ldr	r3, [pc, #336]	; (800200c <StartRxTask+0x190>)
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	f00a fa10 	bl	800c2e8 <xQueueGenericSend>

//    hcrc->Init.InitValue = 0x00;
//HAL_UART_Receive_IT(&huart3, trama_rx.string, sizeof(trama_rx.string));
HAL_UART_Receive_DMA(&huart3, trama_rx.string, sizeof(trama_rx.string));
 8001ec8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ecc:	2210      	movs	r2, #16
 8001ece:	4619      	mov	r1, r3
 8001ed0:	484f      	ldr	r0, [pc, #316]	; (8002010 <StartRxTask+0x194>)
 8001ed2:	f008 fd9f 	bl	800aa14 <HAL_UART_Receive_DMA>
int auxiliar = sizeof(trama_rx.string);
 8001ed6:	2310      	movs	r3, #16
 8001ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
//	   ptrtostruct.trama_struct.wz = 15;
//	   ptrtostruct.trama_struct.vy = 30;
//	   ptrtostruct.trama_struct.vx = 45;
//	   ptrtostruct.trama_struct.crc = 60;
//	  if( HAL_UART_Receive(&huart3, trama_rx.string, sizeof(trama_rx.string), 5) == HAL_OK){
	  if (RxFlag){
 8001edc:	4b4d      	ldr	r3, [pc, #308]	; (8002014 <StartRxTask+0x198>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 808d 	beq.w	8002000 <StartRxTask+0x184>
		  if ( state == RUN_State ){
 8001ee6:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <StartRxTask+0x19c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d16a      	bne.n	8001fc4 <StartRxTask+0x148>
			  velocidad.v_x = trama_rx.data.v_x;
 8001eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			  velocidad.v_y = trama_rx.data.v_y;
 8001ef6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  velocidad.w_z = trama_rx.data.w_z;
 8001efe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			  crcRx = (uint8_t)trama_rx.string[12];
 8001f06:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8001f0a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce

	//		  hcrc.Init.InitValue = 0x00;
			  crcArray[0]  = (uint8_t)trama_rx.string[0];
 8001f0e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001f12:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
			  crcArray[1]  = (uint8_t)trama_rx.string[1];
 8001f16:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001f1a:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
			  crcArray[2]  = (uint8_t)trama_rx.string[2];
 8001f1e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001f22:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
			  crcArray[3]  = (uint8_t)trama_rx.string[3];
 8001f26:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001f2a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
			  crcArray[4]  = (uint8_t)trama_rx.string[4];
 8001f2e:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8001f32:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
			  crcArray[5]  = (uint8_t)trama_rx.string[5];
 8001f36:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8001f3a:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
			  crcArray[6]  = (uint8_t)trama_rx.string[6];
 8001f3e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001f42:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
			  crcArray[7]  = (uint8_t)trama_rx.string[7];
 8001f46:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001f4a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
			  crcArray[8]  = (uint8_t)trama_rx.string[8];
 8001f4e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8001f52:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
			  crcArray[9]  = (uint8_t)trama_rx.string[9];
 8001f56:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8001f5a:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			  crcArray[10] = (uint8_t)trama_rx.string[10];
 8001f5e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001f62:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			  crcArray[11] = (uint8_t)trama_rx.string[11];
 8001f66:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001f6a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	//		  hcrc.Init.InitValue = 0x00;
	//		  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
	//		  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
	//		  crcVal = HAL_CRC_Calculate(&hcrc, crcArray, 3);

			  crcVal = HAL_CRC_Accumulate(&hcrc, crcArray, 12);
 8001f6e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f72:	220c      	movs	r2, #12
 8001f74:	4619      	mov	r1, r3
 8001f76:	4829      	ldr	r0, [pc, #164]	; (800201c <StartRxTask+0x1a0>)
 8001f78:	f002 fee0 	bl	8004d3c <HAL_CRC_Accumulate>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	//			  				  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 velocidad.v_y,
	//			  																					 velocidad.v_x,
	//																								 crcRx);
	//
	//
				  if( xSemaphoreTake( myBinarySemRxConvHandle, ( TickType_t ) 0 ) == pdTRUE ){
 8001f82:	4b22      	ldr	r3, [pc, #136]	; (800200c <StartRxTask+0x190>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00a fb8b 	bl	800c6a4 <xQueueSemaphoreTake>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d108      	bne.n	8001fa6 <StartRxTask+0x12a>
					  if(xQueueSend(myQueueRxConvHandle, &velocidad, portMAX_DELAY) == pdPASS){
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <StartRxTask+0x1a4>)
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa2:	f00a f9a1 	bl	800c2e8 <xQueueGenericSend>
	//		  else{
	//			  sprintf(str, "RxTask: crc recibido=%d\n\r crc_calculado=%d\n\r", crcRx, crcVal);
	//			  HAL_UART_Transmit(&huart3,str,sizeof(str),300);
	//		  }

			  hcrc.Instance->INIT = 0x00000000;
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <StartRxTask+0x1a0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
	//				  crcArray[4],
	//				  crcArray[5],
	//				  crcArray[6]);

	//		  HAL_UART_Transmit(&huart3,str,sizeof(str),300);
			  RxFlag = RESET;
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <StartRxTask+0x198>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

//			  for(int i=0; i<16;i=i+1)
//				  trama_rx.string[i] = 0;
//			  USART3->CR3 |= 0x1;
			  HAL_UART_Receive_DMA(&huart3, trama_rx.string, sizeof(trama_rx.string));
 8001fb4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001fb8:	2210      	movs	r2, #16
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4814      	ldr	r0, [pc, #80]	; (8002010 <StartRxTask+0x194>)
 8001fbe:	f008 fd29 	bl	800aa14 <HAL_UART_Receive_DMA>
 8001fc2:	e01d      	b.n	8002000 <StartRxTask+0x184>
		  }
		  else if ( state == START_State ){
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <StartRxTask+0x19c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d119      	bne.n	8002000 <StartRxTask+0x184>
			  velocidad.v_x = trama_rx.data.v_x;
 8001fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			  velocidad.v_y = trama_rx.data.v_y;
 8001fd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  velocidad.w_z = trama_rx.data.w_z;
 8001fdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			  crcRx = (uint8_t)trama_rx.string[6];
 8001fe4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001fe8:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			  if ( crcRx == 0xEF ){
 8001fec:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001ff0:	2bef      	cmp	r3, #239	; 0xef
 8001ff2:	d102      	bne.n	8001ffa <StartRxTask+0x17e>
				  state = RUN_State;
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <StartRxTask+0x19c>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
			  }
			  RxFlag = RESET;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <StartRxTask+0x198>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
//			  USART3->CR3 |= 0x1;
//			  HAL_UART_Receive_IT(&huart3, trama_rx.string, sizeof(trama_rx.string));
		  }
	  }

	  osDelay(5);
 8002000:	2005      	movs	r0, #5
 8002002:	f009 ff13 	bl	800be2c <osDelay>
	  if (RxFlag){
 8002006:	e769      	b.n	8001edc <StartRxTask+0x60>
 8002008:	08010ec8 	.word	0x08010ec8
 800200c:	20000878 	.word	0x20000878
 8002010:	20000740 	.word	0x20000740
 8002014:	200008d4 	.word	0x200008d4
 8002018:	20000000 	.word	0x20000000
 800201c:	200004e8 	.word	0x200004e8
 8002020:	20000880 	.word	0x20000880
 8002024:	00000000 	.word	0x00000000

08002028 <StartCinematicConv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCinematicConv */
void StartCinematicConv(void const * argument)
{
 8002028:	b5b0      	push	{r4, r5, r7, lr}
 800202a:	b0a6      	sub	sp, #152	; 0x98
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCinematicConv */
	float l = 0.15;
 8002030:	4bbd      	ldr	r3, [pc, #756]	; (8002328 <StartCinematicConv+0x300>)
 8002032:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float w = 0.125;
 8002036:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 800203a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	float r = 0.05;
 800203e:	4bbb      	ldr	r3, [pc, #748]	; (800232c <StartCinematicConv+0x304>)
 8002040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	s_Velocidad velocidad_recibida;
	s_Velocidad_ruedas velocidad_convertida;
	xSemaphoreGive( myBinarySemConvControlHandle );
 8002044:	4bba      	ldr	r3, [pc, #744]	; (8002330 <StartCinematicConv+0x308>)
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	2300      	movs	r3, #0
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	f00a f94b 	bl	800c2e8 <xQueueGenericSend>
	char str[100];

	/* Infinite loop */
	for(;;)
	{
		if ( state == RUN_State){
 8002052:	4bb8      	ldr	r3, [pc, #736]	; (8002334 <StartCinematicConv+0x30c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	f040 815d 	bne.w	8002316 <StartCinematicConv+0x2ee>
			// Recibo
			if ( xQueueReceive(myQueueRxConvHandle, &velocidad_recibida, 0) == pdPASS ){
 800205c:	4bb6      	ldr	r3, [pc, #728]	; (8002338 <StartCinematicConv+0x310>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002064:	2200      	movs	r2, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f00a fa3c 	bl	800c4e4 <xQueueReceive>
 800206c:	4603      	mov	r3, r0
 800206e:	2b01      	cmp	r3, #1
 8002070:	f040 8151 	bne.w	8002316 <StartCinematicConv+0x2ee>
	//																                              velocidad_recibida.v_y,
	//																                              velocidad_recibida.v_x);
	//			HAL_UART_Transmit(&huart3,str,sizeof(str),100);

				// Convierto velocidades
				velocidad_convertida.u_1 = ((1.0/(r*1.0))*((-l-w)*velocidad_recibida.w_z + velocidad_recibida.v_x - velocidad_recibida.v_y));
 8002074:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002078:	f7fe fa6e 	bl	8000558 <__aeabi_f2d>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	f04f 0000 	mov.w	r0, #0
 8002084:	49ad      	ldr	r1, [pc, #692]	; (800233c <StartCinematicConv+0x314>)
 8002086:	f7fe fbe9 	bl	800085c <__aeabi_ddiv>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4614      	mov	r4, r2
 8002090:	461d      	mov	r5, r3
 8002092:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002096:	eeb1 7a67 	vneg.f32	s14, s15
 800209a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800209e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020a2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80020a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020aa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80020ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020b2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80020b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ba:	ee17 0a90 	vmov	r0, s15
 80020be:	f7fe fa4b 	bl	8000558 <__aeabi_f2d>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4620      	mov	r0, r4
 80020c8:	4629      	mov	r1, r5
 80020ca:	f7fe fa9d 	bl	8000608 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	f7fe fd6f 	bl	8000bb8 <__aeabi_d2f>
 80020da:	4603      	mov	r3, r0
 80020dc:	673b      	str	r3, [r7, #112]	; 0x70
				velocidad_convertida.u_2 = ((1.0/(r*1.0))*((l+w)*velocidad_recibida.w_z + velocidad_recibida.v_x + velocidad_recibida.v_y));
 80020de:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80020e2:	f7fe fa39 	bl	8000558 <__aeabi_f2d>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	f04f 0000 	mov.w	r0, #0
 80020ee:	4993      	ldr	r1, [pc, #588]	; (800233c <StartCinematicConv+0x314>)
 80020f0:	f7fe fbb4 	bl	800085c <__aeabi_ddiv>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4614      	mov	r4, r2
 80020fa:	461d      	mov	r5, r3
 80020fc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002100:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002108:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800210c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002110:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002118:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800211c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002120:	ee17 0a90 	vmov	r0, s15
 8002124:	f7fe fa18 	bl	8000558 <__aeabi_f2d>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4620      	mov	r0, r4
 800212e:	4629      	mov	r1, r5
 8002130:	f7fe fa6a 	bl	8000608 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	f7fe fd3c 	bl	8000bb8 <__aeabi_d2f>
 8002140:	4603      	mov	r3, r0
 8002142:	677b      	str	r3, [r7, #116]	; 0x74
				velocidad_convertida.u_3 = ((1.0/(r*1.0))*((l+w)*velocidad_recibida.w_z + velocidad_recibida.v_x - velocidad_recibida.v_y));
 8002144:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002148:	f7fe fa06 	bl	8000558 <__aeabi_f2d>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	f04f 0000 	mov.w	r0, #0
 8002154:	4979      	ldr	r1, [pc, #484]	; (800233c <StartCinematicConv+0x314>)
 8002156:	f7fe fb81 	bl	800085c <__aeabi_ddiv>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4614      	mov	r4, r2
 8002160:	461d      	mov	r5, r3
 8002162:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002166:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800216a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800216e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002176:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800217a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002186:	ee17 0a90 	vmov	r0, s15
 800218a:	f7fe f9e5 	bl	8000558 <__aeabi_f2d>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4620      	mov	r0, r4
 8002194:	4629      	mov	r1, r5
 8002196:	f7fe fa37 	bl	8000608 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe fd09 	bl	8000bb8 <__aeabi_d2f>
 80021a6:	4603      	mov	r3, r0
 80021a8:	67bb      	str	r3, [r7, #120]	; 0x78
				velocidad_convertida.u_4 = ((1.0/(r*1.0))*((-l-w)*velocidad_recibida.w_z + velocidad_recibida.v_x + velocidad_recibida.v_y));
 80021aa:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80021ae:	f7fe f9d3 	bl	8000558 <__aeabi_f2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	f04f 0000 	mov.w	r0, #0
 80021ba:	4960      	ldr	r1, [pc, #384]	; (800233c <StartCinematicConv+0x314>)
 80021bc:	f7fe fb4e 	bl	800085c <__aeabi_ddiv>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4614      	mov	r4, r2
 80021c6:	461d      	mov	r5, r3
 80021c8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80021cc:	eeb1 7a67 	vneg.f32	s14, s15
 80021d0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80021d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021d8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80021dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80021e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021e8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80021ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f0:	ee17 0a90 	vmov	r0, s15
 80021f4:	f7fe f9b0 	bl	8000558 <__aeabi_f2d>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4620      	mov	r0, r4
 80021fe:	4629      	mov	r1, r5
 8002200:	f7fe fa02 	bl	8000608 <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f7fe fcd4 	bl	8000bb8 <__aeabi_d2f>
 8002210:	4603      	mov	r3, r0
 8002212:	67fb      	str	r3, [r7, #124]	; 0x7c

				velocidad_convertida.u_1 = (velocidad_convertida.u_1 * 30.0)/3.1415;
 8002214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f99e 	bl	8000558 <__aeabi_f2d>
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	4b47      	ldr	r3, [pc, #284]	; (8002340 <StartCinematicConv+0x318>)
 8002222:	f7fe f9f1 	bl	8000608 <__aeabi_dmul>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	a33c      	add	r3, pc, #240	; (adr r3, 8002320 <StartCinematicConv+0x2f8>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fe fb12 	bl	800085c <__aeabi_ddiv>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	f7fe fcba 	bl	8000bb8 <__aeabi_d2f>
 8002244:	4603      	mov	r3, r0
 8002246:	673b      	str	r3, [r7, #112]	; 0x70
				velocidad_convertida.u_2 = (velocidad_convertida.u_2 * 30.0)/3.1415;
 8002248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe f984 	bl	8000558 <__aeabi_f2d>
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <StartCinematicConv+0x318>)
 8002256:	f7fe f9d7 	bl	8000608 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	a32f      	add	r3, pc, #188	; (adr r3, 8002320 <StartCinematicConv+0x2f8>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe faf8 	bl	800085c <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fca0 	bl	8000bb8 <__aeabi_d2f>
 8002278:	4603      	mov	r3, r0
 800227a:	677b      	str	r3, [r7, #116]	; 0x74
				velocidad_convertida.u_3 = (velocidad_convertida.u_3 * 30.0)/3.1415;
 800227c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f96a 	bl	8000558 <__aeabi_f2d>
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <StartCinematicConv+0x318>)
 800228a:	f7fe f9bd 	bl	8000608 <__aeabi_dmul>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	a322      	add	r3, pc, #136	; (adr r3, 8002320 <StartCinematicConv+0x2f8>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe fade 	bl	800085c <__aeabi_ddiv>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	f7fe fc86 	bl	8000bb8 <__aeabi_d2f>
 80022ac:	4603      	mov	r3, r0
 80022ae:	67bb      	str	r3, [r7, #120]	; 0x78
                velocidad_convertida.u_4 = (velocidad_convertida.u_4 * 30.0)/3.1415;
 80022b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f950 	bl	8000558 <__aeabi_f2d>
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	4b20      	ldr	r3, [pc, #128]	; (8002340 <StartCinematicConv+0x318>)
 80022be:	f7fe f9a3 	bl	8000608 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	a315      	add	r3, pc, #84	; (adr r3, 8002320 <StartCinematicConv+0x2f8>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe fac4 	bl	800085c <__aeabi_ddiv>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f7fe fc6c 	bl	8000bb8 <__aeabi_d2f>
 80022e0:	4603      	mov	r3, r0
 80022e2:	67fb      	str	r3, [r7, #124]	; 0x7c


				xSemaphoreGive( myBinarySemRxConvHandle );
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <StartCinematicConv+0x31c>)
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	2300      	movs	r3, #0
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	f009 fffb 	bl	800c2e8 <xQueueGenericSend>

				//Envio a la tarea del control de velocidades
				if( xSemaphoreTake( myBinarySemConvControlHandle, ( TickType_t ) 0 ) == pdTRUE ){
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <StartCinematicConv+0x308>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f00a f9d3 	bl	800c6a4 <xQueueSemaphoreTake>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b01      	cmp	r3, #1
 8002302:	d108      	bne.n	8002316 <StartCinematicConv+0x2ee>
					if( xQueueSend(myQueueConvControlHandle, &velocidad_convertida, portMAX_DELAY) == pdPASS ){
 8002304:	4b10      	ldr	r3, [pc, #64]	; (8002348 <StartCinematicConv+0x320>)
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800230c:	2300      	movs	r3, #0
 800230e:	f04f 32ff 	mov.w	r2, #4294967295
 8002312:	f009 ffe9 	bl	800c2e8 <xQueueGenericSend>
	//					HAL_UART_Transmit(&huart3,str,sizeof(str),100);
					}
				}
			}
		}
		osDelay(5);
 8002316:	2005      	movs	r0, #5
 8002318:	f009 fd88 	bl	800be2c <osDelay>
		if ( state == RUN_State){
 800231c:	e699      	b.n	8002052 <StartCinematicConv+0x2a>
 800231e:	bf00      	nop
 8002320:	c083126f 	.word	0xc083126f
 8002324:	400921ca 	.word	0x400921ca
 8002328:	3e19999a 	.word	0x3e19999a
 800232c:	3d4ccccd 	.word	0x3d4ccccd
 8002330:	2000087c 	.word	0x2000087c
 8002334:	20000000 	.word	0x20000000
 8002338:	20000880 	.word	0x20000880
 800233c:	3ff00000 	.word	0x3ff00000
 8002340:	403e0000 	.word	0x403e0000
 8002344:	20000878 	.word	0x20000878
 8002348:	20000884 	.word	0x20000884
 800234c:	00000000 	.word	0x00000000

08002350 <StartControlVel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControlVel */
void StartControlVel(void const * argument)
{
 8002350:	b5b0      	push	{r4, r5, r7, lr}
 8002352:	b0cc      	sub	sp, #304	; 0x130
 8002354:	af00      	add	r7, sp, #0
 8002356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800235a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800235e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartControlVel */
//	char str[100];
	s_Velocidad_ruedas velocidad_medida;
	s_Velocidad_ruedas velocidad_ref;
	s_Velocidad_ruedas error_velocidad;
	int u_1_duty = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	int u_2_duty = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	int u_3_duty = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	int u_4_duty = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	char str[100]="a";
 8002378:	2361      	movs	r3, #97	; 0x61
 800237a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800237c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002380:	2260      	movs	r2, #96	; 0x60
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f00c fd4c 	bl	800ee22 <memset>


	float Kp, Ki, Kt, T;
	float entrada_PI[4] = {0.0, 0.0, 0.0, 0.0};
 800238a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
	float salida_PI[4] = {0.0, 0.0, 0.0, 0.0};
 8002398:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
	float H[4] = {0.0,0.0, 0.0, 0.0};
 80023a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
	float H_1[4] = {0.0,0.0,0.0,0.0};
 80023b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023bc:	461a      	mov	r2, r3
 80023be:	2300      	movs	r3, #0
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	6053      	str	r3, [r2, #4]
 80023c4:	6093      	str	r3, [r2, #8]
 80023c6:	60d3      	str	r3, [r2, #12]
	float I[4] = {0.0,0.0,0.0,0.0};
 80023c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023d0:	461a      	mov	r2, r3
 80023d2:	2300      	movs	r3, #0
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	6053      	str	r3, [r2, #4]
 80023d8:	6093      	str	r3, [r2, #8]
 80023da:	60d3      	str	r3, [r2, #12]
	float P[4] = {0.0,0.0,0.0,0.0};
 80023dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023e4:	461a      	mov	r2, r3
 80023e6:	2300      	movs	r3, #0
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	6053      	str	r3, [r2, #4]
 80023ec:	6093      	str	r3, [r2, #8]
 80023ee:	60d3      	str	r3, [r2, #12]

	T = 1.0/1000.0;
 80023f0:	4bc1      	ldr	r3, [pc, #772]	; (80026f8 <StartControlVel+0x3a8>)
 80023f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    Kp = 0.00282970945592438;
 80023f6:	4bc1      	ldr	r3, [pc, #772]	; (80026fc <StartControlVel+0x3ac>)
 80023f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    // Kp = 4.286;
    Ki = 7.4971179443538;
 80023fc:	4bc0      	ldr	r3, [pc, #768]	; (8002700 <StartControlVel+0x3b0>)
 80023fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    // Ki = 306.143;
	Kt = Ki * T/2.0;
 8002402:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8002406:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800240a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800240e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002416:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
//	HAL_GPIO_WritePin(Motor3Dir1_GPIO_Port, Motor3Dir1_Pin, RESET);
//	HAL_GPIO_WritePin(Motor3Dir2_GPIO_Port, Motor3Dir2_Pin, RESET);
//	HAL_GPIO_WritePin(Motor4Dir1_GPIO_Port, Motor4Dir1_Pin, RESET);
//	HAL_GPIO_WritePin(Motor4Dir2_GPIO_Port, Motor4Dir2_Pin, RESET);

	velocidad_ref.u_1 = 0.0;
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	velocidad_ref.u_2 = 0.0;
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	velocidad_ref.u_3 = 0.0;
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	velocidad_ref.u_4 = 0.0;
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

	velocidad_medida.u_1 = 0.0;
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	velocidad_medida.u_2 = 0.0;
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	velocidad_medida.u_3 = 0.0;
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	velocidad_medida.u_4 = 0.0;
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc


	TIM1->CCR1  = 0;
 800245a:	4baa      	ldr	r3, [pc, #680]	; (8002704 <StartControlVel+0x3b4>)
 800245c:	2200      	movs	r2, #0
 800245e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR1  = 0;
 8002460:	4ba9      	ldr	r3, [pc, #676]	; (8002708 <StartControlVel+0x3b8>)
 8002462:	2200      	movs	r2, #0
 8002464:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR1  = 0;
 8002466:	4ba9      	ldr	r3, [pc, #676]	; (800270c <StartControlVel+0x3bc>)
 8002468:	2200      	movs	r2, #0
 800246a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM17->CCR1 = 0;
 800246c:	4ba8      	ldr	r3, [pc, #672]	; (8002710 <StartControlVel+0x3c0>)
 800246e:	2200      	movs	r2, #0
 8002470:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002472:	2100      	movs	r1, #0
 8002474:	48a7      	ldr	r0, [pc, #668]	; (8002714 <StartControlVel+0x3c4>)
 8002476:	f006 ff5d 	bl	8009334 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800247a:	2100      	movs	r1, #0
 800247c:	48a6      	ldr	r0, [pc, #664]	; (8002718 <StartControlVel+0x3c8>)
 800247e:	f006 ff59 	bl	8009334 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8002482:	2100      	movs	r1, #0
 8002484:	48a5      	ldr	r0, [pc, #660]	; (800271c <StartControlVel+0x3cc>)
 8002486:	f006 ff55 	bl	8009334 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800248a:	2100      	movs	r1, #0
 800248c:	48a4      	ldr	r0, [pc, #656]	; (8002720 <StartControlVel+0x3d0>)
 800248e:	f006 ff51 	bl	8009334 <HAL_TIM_PWM_Start>

    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002492:	2100      	movs	r1, #0
 8002494:	489f      	ldr	r0, [pc, #636]	; (8002714 <StartControlVel+0x3c4>)
 8002496:	f007 ffe3 	bl	800a460 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 800249a:	2100      	movs	r1, #0
 800249c:	489e      	ldr	r0, [pc, #632]	; (8002718 <StartControlVel+0x3c8>)
 800249e:	f007 ffdf 	bl	800a460 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 80024a2:	2100      	movs	r1, #0
 80024a4:	489d      	ldr	r0, [pc, #628]	; (800271c <StartControlVel+0x3cc>)
 80024a6:	f007 ffdb 	bl	800a460 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 80024aa:	2100      	movs	r1, #0
 80024ac:	489c      	ldr	r0, [pc, #624]	; (8002720 <StartControlVel+0x3d0>)
 80024ae:	f007 ffd7 	bl	800a460 <HAL_TIMEx_PWMN_Start>

    int maxDuty1  = htim1.Instance->ARR + 1;
 80024b2:	4b98      	ldr	r3, [pc, #608]	; (8002714 <StartControlVel+0x3c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	3301      	adds	r3, #1
 80024ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	int maxDuty2  = htim8.Instance->ARR + 1;
 80024be:	4b96      	ldr	r3, [pc, #600]	; (8002718 <StartControlVel+0x3c8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	3301      	adds	r3, #1
 80024c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	int maxDuty3  = htim15.Instance->ARR + 1;
 80024ca:	4b94      	ldr	r3, [pc, #592]	; (800271c <StartControlVel+0x3cc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	3301      	adds	r3, #1
 80024d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	int maxDuty4  = htim17.Instance->ARR + 1;
 80024d6:	4b92      	ldr	r3, [pc, #584]	; (8002720 <StartControlVel+0x3d0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	3301      	adds	r3, #1
 80024de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	float aux;
  /* Infinite loop */
  for(;;)
  {
	if (state == RUN_State){
 80024e2:	4b90      	ldr	r3, [pc, #576]	; (8002724 <StartControlVel+0x3d4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	f040 80fb 	bne.w	80026e2 <StartControlVel+0x392>
		// Recibo la velocidad de referencia
		if ( xQueueReceive(myQueueConvControlHandle, &velocidad_ref, 0) == pdPASS ){
 80024ec:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <StartControlVel+0x3d8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80024f4:	2200      	movs	r2, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f009 fff4 	bl	800c4e4 <xQueueReceive>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d106      	bne.n	8002510 <StartControlVel+0x1c0>
		//		  sprintf(str, "ControlVel: Velocidad ref:\nw_00=%d w_01=%d w_10=%d w_11=%d", velocidad_ref.w_00,
		//																					  velocidad_ref.w_01,
		//																					  velocidad_ref.w_10,
		//																					  velocidad_ref.w_11);
		//		  HAL_UART_Transmit(&huart3,str,sizeof(str),100);
			xSemaphoreGive(myBinarySemConvControlHandle);
 8002502:	4b8a      	ldr	r3, [pc, #552]	; (800272c <StartControlVel+0x3dc>)
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	2300      	movs	r3, #0
 8002508:	2200      	movs	r2, #0
 800250a:	2100      	movs	r1, #0
 800250c:	f009 feec 	bl	800c2e8 <xQueueGenericSend>
		}


		// Recibo la velocidad medida
		if ( xQueueReceive(myQueueVelControlHandle, &velocidad_medida, 0) == pdPASS ){
 8002510:	4b87      	ldr	r3, [pc, #540]	; (8002730 <StartControlVel+0x3e0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8002518:	2200      	movs	r2, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f009 ffe2 	bl	800c4e4 <xQueueReceive>
 8002520:	4603      	mov	r3, r0
 8002522:	2b01      	cmp	r3, #1
 8002524:	f040 80dd 	bne.w	80026e2 <StartControlVel+0x392>
	        //////////////////////////////////////////////////
	        ////////////////// Rueda 1 ///////////////////////
	        //////////////////////////////////////////////////

	        /////////// Sentido de giro positivo /////////////
	        if ( velocidad_ref.u_1 >= 0.0 )
 8002528:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800252c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002534:	db08      	blt.n	8002548 <StartControlVel+0x1f8>
	        {
	            error_velocidad.u_1 = velocidad_ref.u_1 - velocidad_medida.u_1;
 8002536:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800253a:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 800253e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002542:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
 8002546:	e009      	b.n	800255c <StartControlVel+0x20c>
	        }
	        /////////// Sentido de giro negativo /////////////
	        else
	        {
	            error_velocidad.u_1 = -(velocidad_ref.u_1) - velocidad_medida.u_1;
 8002548:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800254c:	eeb1 7a67 	vneg.f32	s14, s15
 8002550:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8002554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002558:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	        }
	        // A partir de acá el control no distingue entre vel_ref positiva o negativa
	        entrada_PI[0] = error_velocidad.u_1;
 800255c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002560:	65fb      	str	r3, [r7, #92]	; 0x5c
	        // Bloque P:
	        P[0] = entrada_PI[0] * Kp;
 8002562:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002566:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800256a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002572:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002576:	edc3 7a00 	vstr	s15, [r3]
	        // Anti-windup -> el acumulador (integrador del PI) solo funcionará cuando el error de velocidad sea menor a 400rpm
	        if (error_velocidad.u_1 < 50.0)
 800257a:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800257e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002734 <StartControlVel+0x3e4>
 8002582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258a:	d50c      	bpl.n	80025a6 <StartControlVel+0x256>
	            H[0] = entrada_PI[0] + H_1[0];
 800258c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80025a4:	e009      	b.n	80025ba <StartControlVel+0x26a>
	        else
	        {
	            H[0] = 0.0;
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	            H_1[0] = 0.0;
 80025ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80025b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
	        }
	        // Bloque I:
	        I[0] = Kt * (H[0] + H_1[0]);
 80025ba:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80025be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80025c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ce:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 80025d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80025da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025de:	edc3 7a00 	vstr	s15, [r3]
	        // Sumo la parte proporcional e integral para obtener el PI completo
	        salida_PI[0] = P[0] + I[0];
 80025e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80025e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80025ea:	ed93 7a00 	vldr	s14, [r3]
 80025ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80025f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fe:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	        H_1[0] = H[0];
 8002602:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800260c:	601a      	str	r2, [r3, #0]
	        // Convierto valores en rpm a Volts. 198 rpm -> 12 Volts
	//            salida_PI[0] = salida_PI[0] + velocidad_ref.u_1;
	        salida_PI[0] = salida_PI[0] * (195.0);
 800260e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002612:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002738 <StartControlVel+0x3e8>
 8002616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800261a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	        // salida_PI[0] = velocidad_ref.u_1 * (20.0);
	        // limitador
	        if (salida_PI[0] < 0.0)
 800261e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262a:	d502      	bpl.n	8002632 <StartControlVel+0x2e2>
	            salida_PI[0] = 0.0;
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	64fb      	str	r3, [r7, #76]	; 0x4c
	        if (salida_PI[0] > 195.0)
 8002632:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002636:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002738 <StartControlVel+0x3e8>
 800263a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002642:	dd01      	ble.n	8002648 <StartControlVel+0x2f8>
	            salida_PI[0] = 195.0;
 8002644:	4b3d      	ldr	r3, [pc, #244]	; (800273c <StartControlVel+0x3ec>)
 8002646:	64fb      	str	r3, [r7, #76]	; 0x4c

	        salida_PI[0] = salida_PI[0] + velocidad_ref.u_1;
 8002648:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800264c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002654:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	//        salida_PI[0] = velocidad_ref.u_1;
	        // Giro positivo: conversión tension de control [0-12V] -> duty [maxDuty/2-maxDuty]
	        u_1_duty = (salida_PI[0] / 195.0) * (maxDuty1 / 2.0) + (maxDuty1 / 2.0);
 8002658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd ff7c 	bl	8000558 <__aeabi_f2d>
 8002660:	a323      	add	r3, pc, #140	; (adr r3, 80026f0 <StartControlVel+0x3a0>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	f7fe f8f9 	bl	800085c <__aeabi_ddiv>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4614      	mov	r4, r2
 8002670:	461d      	mov	r5, r3
 8002672:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8002676:	f7fd ff5d 	bl	8000534 <__aeabi_i2d>
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002682:	f7fe f8eb 	bl	800085c <__aeabi_ddiv>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4620      	mov	r0, r4
 800268c:	4629      	mov	r1, r5
 800268e:	f7fd ffbb 	bl	8000608 <__aeabi_dmul>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4614      	mov	r4, r2
 8002698:	461d      	mov	r5, r3
 800269a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800269e:	f7fd ff49 	bl	8000534 <__aeabi_i2d>
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026aa:	f7fe f8d7 	bl	800085c <__aeabi_ddiv>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4620      	mov	r0, r4
 80026b4:	4629      	mov	r1, r5
 80026b6:	f7fd fdf1 	bl	800029c <__adddf3>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4610      	mov	r0, r2
 80026c0:	4619      	mov	r1, r3
 80026c2:	f7fe fa51 	bl	8000b68 <__aeabi_d2iz>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	//            HAL_UART_Transmit_IT(&huart1, str, sizeof(str));
	        // htim15.Instance->CCR1 = duty.dato_int;
	//        if (u_1_duty >= maxDuty1-10)
	//        	u_1_duty= u_1_duty-4;

	        TIM1->CCR1 = u_1_duty;
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <StartControlVel+0x3b4>)
 80026ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80026d2:	6353      	str	r3, [r2, #52]	; 0x34
	        //////////////////////////////////////////////////
	        //////////////// Fin rueda 1 /////////////////////
	        //////////////////////////////////////////////////


		  xSemaphoreGive( myBinarySemVelControlHandle );
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <StartControlVel+0x3f0>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	2300      	movs	r3, #0
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	f009 fe03 	bl	800c2e8 <xQueueGenericSend>
		  // Hago el control
		  // TIM1->CCR1 = velocidad_medida.w_00;
	//	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)vel, 1);
  	  
	  osDelay(1);
 80026e2:	2001      	movs	r0, #1
 80026e4:	f009 fba2 	bl	800be2c <osDelay>
	if (state == RUN_State){
 80026e8:	e6fb      	b.n	80024e2 <StartControlVel+0x192>
 80026ea:	bf00      	nop
 80026ec:	f3af 8000 	nop.w
 80026f0:	00000000 	.word	0x00000000
 80026f4:	40686000 	.word	0x40686000
 80026f8:	3a83126f 	.word	0x3a83126f
 80026fc:	3b3972a6 	.word	0x3b3972a6
 8002700:	40efe864 	.word	0x40efe864
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40013400 	.word	0x40013400
 800270c:	40014000 	.word	0x40014000
 8002710:	40014800 	.word	0x40014800
 8002714:	200005c4 	.word	0x200005c4
 8002718:	2000065c 	.word	0x2000065c
 800271c:	200006a8 	.word	0x200006a8
 8002720:	200006f4 	.word	0x200006f4
 8002724:	20000000 	.word	0x20000000
 8002728:	20000884 	.word	0x20000884
 800272c:	2000087c 	.word	0x2000087c
 8002730:	20000888 	.word	0x20000888
 8002734:	42480000 	.word	0x42480000
 8002738:	43430000 	.word	0x43430000
 800273c:	43430000 	.word	0x43430000
 8002740:	20000874 	.word	0x20000874

08002744 <StartMeasureAccel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMeasureAccel */
void StartMeasureAccel(void const * argument)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMeasureAccel */
	s_Aceleracion aceleracion;
//	char str[100];
	int16_t valor;
	uint8_t data[2]={0,0};
 800274c:	2300      	movs	r3, #0
 800274e:	81bb      	strh	r3, [r7, #12]

	xSemaphoreGive( myBinarySemAccelTxHandle );
 8002750:	4b38      	ldr	r3, [pc, #224]	; (8002834 <StartMeasureAccel+0xf0>)
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	2300      	movs	r3, #0
 8002756:	2200      	movs	r2, #0
 8002758:	2100      	movs	r1, #0
 800275a:	f009 fdc5 	bl	800c2e8 <xQueueGenericSend>
  /* Infinite loop */
  for(;;)
  {
	  if ( state == RUN_State){
 800275e:	4b36      	ldr	r3, [pc, #216]	; (8002838 <StartMeasureAccel+0xf4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d161      	bne.n	800282a <StartMeasureAccel+0xe6>
		// Leo aceleraciones
		aceleracion.a_m[0] = 4;
 8002766:	2304      	movs	r3, #4
 8002768:	82fb      	strh	r3, [r7, #22]
		aceleracion.a_m[1] = 5;
 800276a:	2305      	movs	r3, #5
 800276c:	833b      	strh	r3, [r7, #24]
		aceleracion.a_m[2] = 6;
 800276e:	2306      	movs	r3, #6
 8002770:	837b      	strh	r3, [r7, #26]
		aceleracion.phi_m[0] = 7;
 8002772:	2307      	movs	r3, #7
 8002774:	823b      	strh	r3, [r7, #16]
		aceleracion.phi_m[1] = 8;
 8002776:	2308      	movs	r3, #8
 8002778:	827b      	strh	r3, [r7, #18]
		aceleracion.phi_m[2] = 9;
 800277a:	2309      	movs	r3, #9
 800277c:	82bb      	strh	r3, [r7, #20]

		data[0] = 0x0A; // Establecer el bit de lectura ADIS16364_REG_XACCL_OUT
 800277e:	230a      	movs	r3, #10
 8002780:	733b      	strb	r3, [r7, #12]
		// Habilitar el chip select
		HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_RESET);
 8002782:	2200      	movs	r2, #0
 8002784:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002788:	482c      	ldr	r0, [pc, #176]	; (800283c <StartMeasureAccel+0xf8>)
 800278a:	f003 f833 	bl	80057f4 <HAL_GPIO_WritePin>
		// Enviar comando de lectura del registro X_ACCEL_OUT
		HAL_SPI_Transmit(&hspi1, data, 1, HAL_MAX_DELAY);
 800278e:	f107 010c 	add.w	r1, r7, #12
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	2201      	movs	r2, #1
 8002798:	4829      	ldr	r0, [pc, #164]	; (8002840 <StartMeasureAccel+0xfc>)
 800279a:	f005 fcbe 	bl	800811a <HAL_SPI_Transmit>

		// Recibir datos del sensor (asumiendo datos de 16 bits)
		HAL_SPI_Receive(&hspi1, data, 2, HAL_MAX_DELAY);
 800279e:	f107 010c 	add.w	r1, r7, #12
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	2202      	movs	r2, #2
 80027a8:	4825      	ldr	r0, [pc, #148]	; (8002840 <StartMeasureAccel+0xfc>)
 80027aa:	f005 fe2b 	bl	8008404 <HAL_SPI_Receive>

		// Deshabilitar el chip select
		HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_SET);
 80027ae:	2201      	movs	r2, #1
 80027b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027b4:	4821      	ldr	r0, [pc, #132]	; (800283c <StartMeasureAccel+0xf8>)
 80027b6:	f003 f81d 	bl	80057f4 <HAL_GPIO_WritePin>

		// Combinar los bytes recibidos para obtener el valor de aceleración
		if ((data[0]>>6 & 1) == 0){
 80027ba:	7b3b      	ldrb	r3, [r7, #12]
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d11c      	bne.n	8002802 <StartMeasureAccel+0xbe>
			valor = (data[0]&0x3F)<< 8 | (data[1]);
 80027c8:	7b3b      	ldrb	r3, [r7, #12]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	7b7b      	ldrb	r3, [r7, #13]
 80027d6:	b21b      	sxth	r3, r3
 80027d8:	4313      	orrs	r3, r2
 80027da:	83fb      	strh	r3, [r7, #30]
			valor = (int16_t)(valor | (valor&0x2000)<<1 | (valor&0x2000)<<2);
 80027dc:	8bfb      	ldrh	r3, [r7, #30]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	b21b      	sxth	r3, r3
 80027e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e6:	b21a      	sxth	r2, r3
 80027e8:	8bfb      	ldrh	r3, [r7, #30]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	b21a      	sxth	r2, r3
 80027ee:	8bfb      	ldrh	r3, [r7, #30]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	b21b      	sxth	r3, r3
 80027f4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	4313      	orrs	r3, r2
 8002800:	83fb      	strh	r3, [r7, #30]
		}

		aceleracion.a_m[0] = valor;
 8002802:	8bfb      	ldrh	r3, [r7, #30]
 8002804:	82fb      	strh	r3, [r7, #22]


		if( xSemaphoreTake( myBinarySemAccelTxHandle, ( TickType_t ) 0 ) == pdTRUE )
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <StartMeasureAccel+0xf0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f009 ff49 	bl	800c6a4 <xQueueSemaphoreTake>
 8002812:	4603      	mov	r3, r0
 8002814:	2b01      	cmp	r3, #1
 8002816:	d108      	bne.n	800282a <StartMeasureAccel+0xe6>
		{
			//Envio las aceleraciones a la tarea de transmitir valores medidos
			if( xQueueSend(myQueueAccelTxHandle, &aceleracion, portMAX_DELAY) == pdPASS ){
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <StartMeasureAccel+0x100>)
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	f107 0110 	add.w	r1, r7, #16
 8002820:	2300      	movs	r3, #0
 8002822:	f04f 32ff 	mov.w	r2, #4294967295
 8002826:	f009 fd5f 	bl	800c2e8 <xQueueGenericSend>
		//																											  aceleracion.phi_m[2]);
		//			HAL_UART_Transmit(&huart3,str,sizeof(str),100);
			}
		}
	  }
	  osDelay(5);
 800282a:	2005      	movs	r0, #5
 800282c:	f009 fafe 	bl	800be2c <osDelay>
	  if ( state == RUN_State){
 8002830:	e795      	b.n	800275e <StartMeasureAccel+0x1a>
 8002832:	bf00      	nop
 8002834:	2000086c 	.word	0x2000086c
 8002838:	20000000 	.word	0x20000000
 800283c:	48000400 	.word	0x48000400
 8002840:	20000560 	.word	0x20000560
 8002844:	20000890 	.word	0x20000890

08002848 <StartMeasureVel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMeasureVel */
void StartMeasureVel(void const * argument)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMeasureVel */
	s_Velocidad_ruedas vel_medida;
	int STOP_FLAG = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
	vel_medida.u_1 = 0;
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
	vel_medida.u_2 = 0;
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
	vel_medida.u_3 = 0;
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
	vel_medida.u_4 = 0;
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	61bb      	str	r3, [r7, #24]
//	char str[100];
	xSemaphoreGive( myBinarySemVelControlHandle );
 800286c:	4b33      	ldr	r3, [pc, #204]	; (800293c <StartMeasureVel+0xf4>)
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	2300      	movs	r3, #0
 8002872:	2200      	movs	r2, #0
 8002874:	2100      	movs	r1, #0
 8002876:	f009 fd37 	bl	800c2e8 <xQueueGenericSend>
	xSemaphoreGive( myBinarySemVelTxHandle );
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <StartMeasureVel+0xf8>)
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	2300      	movs	r3, #0
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	f009 fd30 	bl	800c2e8 <xQueueGenericSend>
  /* Infinite loop */
  for(;;)
  {
	if ( state == RUN_State){
 8002888:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <StartMeasureVel+0xfc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d150      	bne.n	8002932 <StartMeasureVel+0xea>
//		vel_medida.u_1 = (int)((adc_val1/4096.0)*100);
//		vel_medida.u_2 = adc_val1+32;
//		vel_medida.u_3 = adc_val1+64;
//		vel_medida.u_4 = adc_val1+128;

		counter_stop = counter_stop + 1;
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <StartMeasureVel+0x100>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	4a2c      	ldr	r2, [pc, #176]	; (8002948 <StartMeasureVel+0x100>)
 8002898:	6013      	str	r3, [r2, #0]
		if(counter_stop>=120){
 800289a:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <StartMeasureVel+0x100>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b77      	cmp	r3, #119	; 0x77
 80028a0:	dd05      	ble.n	80028ae <StartMeasureVel+0x66>
			STOP_FLAG = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
			counter_stop = 120;
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <StartMeasureVel+0x100>)
 80028a8:	2278      	movs	r2, #120	; 0x78
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e001      	b.n	80028b2 <StartMeasureVel+0x6a>
		}
		else
			STOP_FLAG = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]

		if (STOP_FLAG == 1){
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d10c      	bne.n	80028d2 <StartMeasureVel+0x8a>
			vel_medida.u_1 = 0.0;
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
			vel_medida.u_2 = 0.0;
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
			vel_medida.u_3 = 0.0;
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
			vel_medida.u_4 = 0.0;
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	e00b      	b.n	80028ea <StartMeasureVel+0xa2>
		}
		else{
			vel_medida.u_1 = u1_medida;
 80028d2:	4b1e      	ldr	r3, [pc, #120]	; (800294c <StartMeasureVel+0x104>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]
			vel_medida.u_2 = u2_medida;
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <StartMeasureVel+0x108>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	613b      	str	r3, [r7, #16]
			vel_medida.u_3 = u3_medida;
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <StartMeasureVel+0x10c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	617b      	str	r3, [r7, #20]
			vel_medida.u_4 = u4_medida;
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <StartMeasureVel+0x110>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
		}

		// Intento tomar el semaforo
		if( xSemaphoreTake( myBinarySemVelControlHandle, ( TickType_t ) 0 ) == pdTRUE )
 80028ea:	4b14      	ldr	r3, [pc, #80]	; (800293c <StartMeasureVel+0xf4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f009 fed7 	bl	800c6a4 <xQueueSemaphoreTake>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d108      	bne.n	800290e <StartMeasureVel+0xc6>
		{
			// Envio velocidad a la tarea de control de motores
			if( xQueueSend(myQueueVelControlHandle, &vel_medida, portMAX_DELAY) == pdPASS ){
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <StartMeasureVel+0x114>)
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	f107 010c 	add.w	r1, r7, #12
 8002904:	2300      	movs	r3, #0
 8002906:	f04f 32ff 	mov.w	r2, #4294967295
 800290a:	f009 fced 	bl	800c2e8 <xQueueGenericSend>
			//			  HAL_UART_Transmit(&huart3,str,sizeof(str),100);
			}
		}

		// Intento tomar el semaforo
		if( xSemaphoreTake( myBinarySemVelTxHandle, ( TickType_t ) 0 ) == pdTRUE )
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <StartMeasureVel+0xf8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f009 fec5 	bl	800c6a4 <xQueueSemaphoreTake>
 800291a:	4603      	mov	r3, r0
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <StartMeasureVel+0xea>
		{
			// Envio velocidad a la tarea que transmite los valores
			if( xQueueSend(myQueueVelTxHandle, &vel_medida, portMAX_DELAY) == pdPASS ){
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <StartMeasureVel+0x118>)
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	f107 010c 	add.w	r1, r7, #12
 8002928:	2300      	movs	r3, #0
 800292a:	f04f 32ff 	mov.w	r2, #4294967295
 800292e:	f009 fcdb 	bl	800c2e8 <xQueueGenericSend>
			}
		}


	  }
	  osDelay(5);
 8002932:	2005      	movs	r0, #5
 8002934:	f009 fa7a 	bl	800be2c <osDelay>
	if ( state == RUN_State){
 8002938:	e7a6      	b.n	8002888 <StartMeasureVel+0x40>
 800293a:	bf00      	nop
 800293c:	20000874 	.word	0x20000874
 8002940:	20000870 	.word	0x20000870
 8002944:	20000000 	.word	0x20000000
 8002948:	200008d8 	.word	0x200008d8
 800294c:	200008c4 	.word	0x200008c4
 8002950:	200008c8 	.word	0x200008c8
 8002954:	200008cc 	.word	0x200008cc
 8002958:	200008d0 	.word	0x200008d0
 800295c:	20000888 	.word	0x20000888
 8002960:	2000088c 	.word	0x2000088c

08002964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a04      	ldr	r2, [pc, #16]	; (8002984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002976:	f000 fd6b 	bl	8003450 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40000400 	.word	0x40000400

08002988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800298c:	b672      	cpsid	i
}
 800298e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002990:	e7fe      	b.n	8002990 <Error_Handler+0x8>
	...

08002994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_MspInit+0x4c>)
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_MspInit+0x4c>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6193      	str	r3, [r2, #24]
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <HAL_MspInit+0x4c>)
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_MspInit+0x4c>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_MspInit+0x4c>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029bc:	61d3      	str	r3, [r2, #28]
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_MspInit+0x4c>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	210f      	movs	r1, #15
 80029ce:	f06f 0001 	mvn.w	r0, #1
 80029d2:	f002 f925 	bl	8004c20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a04:	d12c      	bne.n	8002a60 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_ADC_MspInit+0x84>)
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <HAL_ADC_MspInit+0x84>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6153      	str	r3, [r2, #20]
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_ADC_MspInit+0x84>)
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_ADC_MspInit+0x84>)
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <HAL_ADC_MspInit+0x84>)
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a28:	6153      	str	r3, [r2, #20]
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_ADC_MspInit+0x84>)
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a36:	2301      	movs	r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f107 0314 	add.w	r3, r7, #20
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4c:	f002 fd48 	bl	80054e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2105      	movs	r1, #5
 8002a54:	2012      	movs	r0, #18
 8002a56:	f002 f8e3 	bl	8004c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002a5a:	2012      	movs	r0, #18
 8002a5c:	f002 f8fc 	bl	8004c58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a60:	bf00      	nop
 8002a62:	3728      	adds	r7, #40	; 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000

08002a6c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_CRC_MspInit+0x38>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10b      	bne.n	8002a96 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_CRC_MspInit+0x3c>)
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_CRC_MspInit+0x3c>)
 8002a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a88:	6153      	str	r3, [r2, #20]
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <HAL_CRC_MspInit+0x3c>)
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40023000 	.word	0x40023000
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1f      	ldr	r2, [pc, #124]	; (8002b48 <HAL_I2C_MspInit+0x9c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d138      	bne.n	8002b40 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ace:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <HAL_I2C_MspInit+0xa0>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <HAL_I2C_MspInit+0xa0>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6153      	str	r3, [r2, #20]
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_I2C_MspInit+0xa0>)
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ae6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aec:	2312      	movs	r3, #18
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002af8:	2304      	movs	r3, #4
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4813      	ldr	r0, [pc, #76]	; (8002b50 <HAL_I2C_MspInit+0xa4>)
 8002b04:	f002 fcec 	bl	80054e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_I2C_MspInit+0xa0>)
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <HAL_I2C_MspInit+0xa0>)
 8002b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b12:	61d3      	str	r3, [r2, #28]
 8002b14:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <HAL_I2C_MspInit+0xa0>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002b20:	2200      	movs	r2, #0
 8002b22:	2105      	movs	r1, #5
 8002b24:	201f      	movs	r0, #31
 8002b26:	f002 f87b 	bl	8004c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b2a:	201f      	movs	r0, #31
 8002b2c:	f002 f894 	bl	8004c58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2105      	movs	r1, #5
 8002b34:	2020      	movs	r0, #32
 8002b36:	f002 f873 	bl	8004c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002b3a:	2020      	movs	r0, #32
 8002b3c:	f002 f88c 	bl	8004c58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b40:	bf00      	nop
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40005400 	.word	0x40005400
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	48000400 	.word	0x48000400

08002b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a25      	ldr	r2, [pc, #148]	; (8002c08 <HAL_SPI_MspInit+0xb4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d144      	bne.n	8002c00 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b76:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <HAL_SPI_MspInit+0xb8>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	4a24      	ldr	r2, [pc, #144]	; (8002c0c <HAL_SPI_MspInit+0xb8>)
 8002b7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b80:	6193      	str	r3, [r2, #24]
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_SPI_MspInit+0xb8>)
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <HAL_SPI_MspInit+0xb8>)
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_SPI_MspInit+0xb8>)
 8002b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b98:	6153      	str	r3, [r2, #20]
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_SPI_MspInit+0xb8>)
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_SPI_MspInit+0xb8>)
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_SPI_MspInit+0xb8>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb0:	6153      	str	r3, [r2, #20]
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_SPI_MspInit+0xb8>)
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bbe:	23c0      	movs	r3, #192	; 0xc0
 8002bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bce:	2305      	movs	r3, #5
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bdc:	f002 fc80 	bl	80054e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002be0:	2308      	movs	r3, #8
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bf0:	2305      	movs	r3, #5
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4805      	ldr	r0, [pc, #20]	; (8002c10 <HAL_SPI_MspInit+0xbc>)
 8002bfc:	f002 fc70 	bl	80054e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c00:	bf00      	nop
 8002c02:	3728      	adds	r7, #40	; 0x28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40013000 	.word	0x40013000
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	48000400 	.word	0x48000400

08002c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2e      	ldr	r2, [pc, #184]	; (8002cdc <HAL_TIM_Base_MspInit+0xc8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10c      	bne.n	8002c40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c26:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	4a2d      	ldr	r2, [pc, #180]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002c2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c30:	6193      	str	r3, [r2, #24]
 8002c32:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002c3e:	e046      	b.n	8002cce <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c48:	d10c      	bne.n	8002c64 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c4a:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	61d3      	str	r3, [r2, #28]
 8002c56:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	69bb      	ldr	r3, [r7, #24]
}
 8002c62:	e034      	b.n	8002cce <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1e      	ldr	r2, [pc, #120]	; (8002ce4 <HAL_TIM_Base_MspInit+0xd0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10c      	bne.n	8002c88 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002c74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c78:	6193      	str	r3, [r2, #24]
 8002c7a:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697b      	ldr	r3, [r7, #20]
}
 8002c86:	e022      	b.n	8002cce <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM15)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10c      	bne.n	8002cac <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6193      	str	r3, [r2, #24]
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]
}
 8002caa:	e010      	b.n	8002cce <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM17)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0e      	ldr	r2, [pc, #56]	; (8002cec <HAL_TIM_Base_MspInit+0xd8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d10b      	bne.n	8002cce <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc0:	6193      	str	r3, [r2, #24]
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
}
 8002cce:	bf00      	nop
 8002cd0:	3724      	adds	r7, #36	; 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40012c00 	.word	0x40012c00
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40013400 	.word	0x40013400
 8002ce8:	40014000 	.word	0x40014000
 8002cec:	40014800 	.word	0x40014800

08002cf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	; 0x38
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a79      	ldr	r2, [pc, #484]	; (8002ef4 <HAL_TIM_MspPostInit+0x204>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d139      	bne.n	8002d86 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d12:	4b79      	ldr	r3, [pc, #484]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4a78      	ldr	r2, [pc, #480]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002d18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d1c:	6153      	str	r3, [r2, #20]
 8002d1e:	4b76      	ldr	r3, [pc, #472]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d26:	623b      	str	r3, [r7, #32]
 8002d28:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2a:	4b73      	ldr	r3, [pc, #460]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	4a72      	ldr	r2, [pc, #456]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d34:	6153      	str	r3, [r2, #20]
 8002d36:	4b70      	ldr	r3, [pc, #448]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d42:	2301      	movs	r3, #1
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002d52:	2302      	movs	r3, #2
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4867      	ldr	r0, [pc, #412]	; (8002efc <HAL_TIM_MspPostInit+0x20c>)
 8002d5e:	f002 fbbf 	bl	80054e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d70:	2300      	movs	r3, #0
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002d74:	2306      	movs	r3, #6
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4860      	ldr	r0, [pc, #384]	; (8002f00 <HAL_TIM_MspPostInit+0x210>)
 8002d80:	f002 fbae 	bl	80054e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002d84:	e0b1      	b.n	8002eea <HAL_TIM_MspPostInit+0x1fa>
  else if(htim->Instance==TIM8)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a5e      	ldr	r2, [pc, #376]	; (8002f04 <HAL_TIM_MspPostInit+0x214>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d13b      	bne.n	8002e08 <HAL_TIM_MspPostInit+0x118>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d90:	4b59      	ldr	r3, [pc, #356]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	4a58      	ldr	r2, [pc, #352]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9a:	6153      	str	r3, [r2, #20]
 8002d9c:	4b56      	ldr	r3, [pc, #344]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	4a52      	ldr	r2, [pc, #328]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002dae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002db2:	6153      	str	r3, [r2, #20]
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de0:	f002 fb7e 	bl	80054e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002df6:	2304      	movs	r3, #4
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfe:	4619      	mov	r1, r3
 8002e00:	483e      	ldr	r0, [pc, #248]	; (8002efc <HAL_TIM_MspPostInit+0x20c>)
 8002e02:	f002 fb6d 	bl	80054e0 <HAL_GPIO_Init>
}
 8002e06:	e070      	b.n	8002eea <HAL_TIM_MspPostInit+0x1fa>
  else if(htim->Instance==TIM15)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a3e      	ldr	r2, [pc, #248]	; (8002f08 <HAL_TIM_MspPostInit+0x218>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d13a      	bne.n	8002e88 <HAL_TIM_MspPostInit+0x198>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4a38      	ldr	r2, [pc, #224]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e1c:	6153      	str	r3, [r2, #20]
 8002e1e:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2a:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	4a32      	ldr	r2, [pc, #200]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e34:	6153      	str	r3, [r2, #20]
 8002e36:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e42:	2302      	movs	r3, #2
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002e52:	2309      	movs	r3, #9
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e60:	f002 fb3e 	bl	80054e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002e76:	2301      	movs	r3, #1
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e7e:	4619      	mov	r1, r3
 8002e80:	481f      	ldr	r0, [pc, #124]	; (8002f00 <HAL_TIM_MspPostInit+0x210>)
 8002e82:	f002 fb2d 	bl	80054e0 <HAL_GPIO_Init>
}
 8002e86:	e030      	b.n	8002eea <HAL_TIM_MspPostInit+0x1fa>
  else if(htim->Instance==TIM17)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <HAL_TIM_MspPostInit+0x21c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d12b      	bne.n	8002eea <HAL_TIM_MspPostInit+0x1fa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e92:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e9c:	6153      	str	r3, [r2, #20]
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_TIM_MspPostInit+0x208>)
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8002eba:	230a      	movs	r3, #10
 8002ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	480e      	ldr	r0, [pc, #56]	; (8002f00 <HAL_TIM_MspPostInit+0x210>)
 8002ec6:	f002 fb0b 	bl	80054e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002eda:	2301      	movs	r3, #1
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4806      	ldr	r0, [pc, #24]	; (8002f00 <HAL_TIM_MspPostInit+0x210>)
 8002ee6:	f002 fafb 	bl	80054e0 <HAL_GPIO_Init>
}
 8002eea:	bf00      	nop
 8002eec:	3738      	adds	r7, #56	; 0x38
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	48000800 	.word	0x48000800
 8002f00:	48000400 	.word	0x48000400
 8002f04:	40013400 	.word	0x40013400
 8002f08:	40014000 	.word	0x40014000
 8002f0c:	40014800 	.word	0x40014800

08002f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	; 0x28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a3d      	ldr	r2, [pc, #244]	; (8003024 <HAL_UART_MspInit+0x114>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d174      	bne.n	800301c <HAL_UART_MspInit+0x10c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f32:	4b3d      	ldr	r3, [pc, #244]	; (8003028 <HAL_UART_MspInit+0x118>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4a3c      	ldr	r2, [pc, #240]	; (8003028 <HAL_UART_MspInit+0x118>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f3c:	61d3      	str	r3, [r2, #28]
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	; (8003028 <HAL_UART_MspInit+0x118>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <HAL_UART_MspInit+0x118>)
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	4a36      	ldr	r2, [pc, #216]	; (8003028 <HAL_UART_MspInit+0x118>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f54:	6153      	str	r3, [r2, #20]
 8002f56:	4b34      	ldr	r3, [pc, #208]	; (8003028 <HAL_UART_MspInit+0x118>)
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f70:	2303      	movs	r3, #3
 8002f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f74:	2307      	movs	r3, #7
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	482b      	ldr	r0, [pc, #172]	; (800302c <HAL_UART_MspInit+0x11c>)
 8002f80:	f002 faae 	bl	80054e0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002f84:	4b2a      	ldr	r3, [pc, #168]	; (8003030 <HAL_UART_MspInit+0x120>)
 8002f86:	4a2b      	ldr	r2, [pc, #172]	; (8003034 <HAL_UART_MspInit+0x124>)
 8002f88:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f8a:	4b29      	ldr	r3, [pc, #164]	; (8003030 <HAL_UART_MspInit+0x120>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <HAL_UART_MspInit+0x120>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f96:	4b26      	ldr	r3, [pc, #152]	; (8003030 <HAL_UART_MspInit+0x120>)
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f9c:	4b24      	ldr	r3, [pc, #144]	; (8003030 <HAL_UART_MspInit+0x120>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fa2:	4b23      	ldr	r3, [pc, #140]	; (8003030 <HAL_UART_MspInit+0x120>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_UART_MspInit+0x120>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fae:	4b20      	ldr	r3, [pc, #128]	; (8003030 <HAL_UART_MspInit+0x120>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002fb4:	481e      	ldr	r0, [pc, #120]	; (8003030 <HAL_UART_MspInit+0x120>)
 8002fb6:	f002 f85b 	bl	8005070 <HAL_DMA_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8002fc0:	f7ff fce2 	bl	8002988 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <HAL_UART_MspInit+0x120>)
 8002fc8:	675a      	str	r2, [r3, #116]	; 0x74
 8002fca:	4a19      	ldr	r2, [pc, #100]	; (8003030 <HAL_UART_MspInit+0x120>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_UART_MspInit+0x128>)
 8002fd2:	4a1a      	ldr	r2, [pc, #104]	; (800303c <HAL_UART_MspInit+0x12c>)
 8002fd4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_UART_MspInit+0x128>)
 8002fd8:	2210      	movs	r2, #16
 8002fda:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fdc:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_UART_MspInit+0x128>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_UART_MspInit+0x128>)
 8002fe4:	2280      	movs	r2, #128	; 0x80
 8002fe6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_UART_MspInit+0x128>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_UART_MspInit+0x128>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_UART_MspInit+0x128>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ffa:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <HAL_UART_MspInit+0x128>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003000:	480d      	ldr	r0, [pc, #52]	; (8003038 <HAL_UART_MspInit+0x128>)
 8003002:	f002 f835 	bl	8005070 <HAL_DMA_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 800300c:	f7ff fcbc 	bl	8002988 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_UART_MspInit+0x128>)
 8003014:	671a      	str	r2, [r3, #112]	; 0x70
 8003016:	4a08      	ldr	r2, [pc, #32]	; (8003038 <HAL_UART_MspInit+0x128>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800301c:	bf00      	nop
 800301e:	3728      	adds	r7, #40	; 0x28
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40004800 	.word	0x40004800
 8003028:	40021000 	.word	0x40021000
 800302c:	48000400 	.word	0x48000400
 8003030:	200007c8 	.word	0x200007c8
 8003034:	40020030 	.word	0x40020030
 8003038:	2000080c 	.word	0x2000080c
 800303c:	4002001c 	.word	0x4002001c

08003040 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08e      	sub	sp, #56	; 0x38
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003050:	4b33      	ldr	r3, [pc, #204]	; (8003120 <HAL_InitTick+0xe0>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	4a32      	ldr	r2, [pc, #200]	; (8003120 <HAL_InitTick+0xe0>)
 8003056:	f043 0302 	orr.w	r3, r3, #2
 800305a:	61d3      	str	r3, [r2, #28]
 800305c:	4b30      	ldr	r3, [pc, #192]	; (8003120 <HAL_InitTick+0xe0>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003068:	f107 0210 	add.w	r2, r7, #16
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f004 fd56 	bl	8007b24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003082:	f004 fd0b 	bl	8007a9c <HAL_RCC_GetPCLK1Freq>
 8003086:	6378      	str	r0, [r7, #52]	; 0x34
 8003088:	e004      	b.n	8003094 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800308a:	f004 fd07 	bl	8007a9c <HAL_RCC_GetPCLK1Freq>
 800308e:	4603      	mov	r3, r0
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	4a23      	ldr	r2, [pc, #140]	; (8003124 <HAL_InitTick+0xe4>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	0c9b      	lsrs	r3, r3, #18
 800309e:	3b01      	subs	r3, #1
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80030a2:	4b21      	ldr	r3, [pc, #132]	; (8003128 <HAL_InitTick+0xe8>)
 80030a4:	4a21      	ldr	r2, [pc, #132]	; (800312c <HAL_InitTick+0xec>)
 80030a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80030a8:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <HAL_InitTick+0xe8>)
 80030aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030ae:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80030b0:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <HAL_InitTick+0xe8>)
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80030b6:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <HAL_InitTick+0xe8>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030bc:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <HAL_InitTick+0xe8>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c2:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_InitTick+0xe8>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80030c8:	4817      	ldr	r0, [pc, #92]	; (8003128 <HAL_InitTick+0xe8>)
 80030ca:	f005 feb1 	bl	8008e30 <HAL_TIM_Base_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80030d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d11b      	bne.n	8003114 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80030dc:	4812      	ldr	r0, [pc, #72]	; (8003128 <HAL_InitTick+0xe8>)
 80030de:	f005 feff 	bl	8008ee0 <HAL_TIM_Base_Start_IT>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80030e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d111      	bne.n	8003114 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030f0:	201d      	movs	r0, #29
 80030f2:	f001 fdb1 	bl	8004c58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b0f      	cmp	r3, #15
 80030fa:	d808      	bhi.n	800310e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80030fc:	2200      	movs	r2, #0
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	201d      	movs	r0, #29
 8003102:	f001 fd8d 	bl	8004c20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <HAL_InitTick+0xf0>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	e002      	b.n	8003114 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003114:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003118:	4618      	mov	r0, r3
 800311a:	3738      	adds	r7, #56	; 0x38
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	431bde83 	.word	0x431bde83
 8003128:	200008e4 	.word	0x200008e4
 800312c:	40000400 	.word	0x40000400
 8003130:	20000008 	.word	0x20000008

08003134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003138:	e7fe      	b.n	8003138 <NMI_Handler+0x4>

0800313a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800313e:	e7fe      	b.n	800313e <HardFault_Handler+0x4>

08003140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003144:	e7fe      	b.n	8003144 <MemManage_Handler+0x4>

08003146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800314a:	e7fe      	b.n	800314a <BusFault_Handler+0x4>

0800314c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003150:	e7fe      	b.n	8003150 <UsageFault_Handler+0x4>

08003152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <DMA1_Channel2_IRQHandler+0x10>)
 8003166:	f002 f8a0 	bl	80052aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	2000080c 	.word	0x2000080c

08003174 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <DMA1_Channel3_IRQHandler+0x10>)
 800317a:	f002 f896 	bl	80052aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200007c8 	.word	0x200007c8

08003188 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <ADC1_2_IRQHandler+0x10>)
 800318e:	f000 fcdb 	bl	8003b48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000498 	.word	0x20000498

0800319c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder4_Pin);
 80031a0:	2040      	movs	r0, #64	; 0x40
 80031a2:	f002 fb59 	bl	8005858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encoder3_Pin);
 80031a6:	2080      	movs	r0, #128	; 0x80
 80031a8:	f002 fb56 	bl	8005858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encoder2_Pin);
 80031ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031b0:	f002 fb52 	bl	8005858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Pin);
 80031b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031b8:	f002 fb4e 	bl	8005858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}

080031c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <TIM3_IRQHandler+0x10>)
 80031c6:	f006 f9c1 	bl	800954c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200008e4 	.word	0x200008e4

080031d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <I2C1_EV_IRQHandler+0x10>)
 80031da:	f002 fbe4 	bl	80059a6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2000050c 	.word	0x2000050c

080031e8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <I2C1_ER_IRQHandler+0x10>)
 80031ee:	f002 fbf4 	bl	80059da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	2000050c 	.word	0x2000050c

080031fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <USART3_IRQHandler+0x10>)
 8003202:	f007 fc4b 	bl	800aa9c <HAL_UART_IRQHandler>
//  configASSERT( xTaskToNotifyatUARTRx != NULL );
//  vTaskNotifyGiveFromISR( xTaskToNotifyatUARTRx, &xHigherPriorityTaskWoken );
////  xTaskToNotifyatUARTRx = NULL;
//  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
  /* USER CODE END USART3_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000740 	.word	0x20000740

08003210 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003214:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003218:	f002 fb1e 	bl	8005858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}

08003220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return 1;
 8003224:	2301      	movs	r3, #1
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <_kill>:

int _kill(int pid, int sig)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800323a:	f00b fe9b 	bl	800ef74 <__errno>
 800323e:	4603      	mov	r3, r0
 8003240:	2216      	movs	r2, #22
 8003242:	601a      	str	r2, [r3, #0]
  return -1;
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <_exit>:

void _exit (int status)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003258:	f04f 31ff 	mov.w	r1, #4294967295
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ffe7 	bl	8003230 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003262:	e7fe      	b.n	8003262 <_exit+0x12>

08003264 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	e00a      	b.n	800328c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003276:	f3af 8000 	nop.w
 800327a:	4601      	mov	r1, r0
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	60ba      	str	r2, [r7, #8]
 8003282:	b2ca      	uxtb	r2, r1
 8003284:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3301      	adds	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	dbf0      	blt.n	8003276 <_read+0x12>
  }

  return len;
 8003294:	687b      	ldr	r3, [r7, #4]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	e009      	b.n	80032c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	60ba      	str	r2, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	3301      	adds	r3, #1
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	dbf1      	blt.n	80032b0 <_write+0x12>
  }
  return len;
 80032cc:	687b      	ldr	r3, [r7, #4]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <_close>:

int _close(int file)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032fe:	605a      	str	r2, [r3, #4]
  return 0;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <_isatty>:

int _isatty(int file)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003316:	2301      	movs	r3, #1
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <_sbrk+0x5c>)
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <_sbrk+0x60>)
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003354:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <_sbrk+0x64>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <_sbrk+0x64>)
 800335e:	4a12      	ldr	r2, [pc, #72]	; (80033a8 <_sbrk+0x68>)
 8003360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <_sbrk+0x64>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	429a      	cmp	r2, r3
 800336e:	d207      	bcs.n	8003380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003370:	f00b fe00 	bl	800ef74 <__errno>
 8003374:	4603      	mov	r3, r0
 8003376:	220c      	movs	r2, #12
 8003378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800337a:	f04f 33ff 	mov.w	r3, #4294967295
 800337e:	e009      	b.n	8003394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <_sbrk+0x64>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <_sbrk+0x64>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <_sbrk+0x64>)
 8003390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20010000 	.word	0x20010000
 80033a0:	00000400 	.word	0x00000400
 80033a4:	20000930 	.word	0x20000930
 80033a8:	200059f0 	.word	0x200059f0

080033ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <SystemInit+0x20>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	4a05      	ldr	r2, [pc, #20]	; (80033cc <SystemInit+0x20>)
 80033b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003408 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80033d4:	f7ff ffea 	bl	80033ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033d8:	480c      	ldr	r0, [pc, #48]	; (800340c <LoopForever+0x6>)
  ldr r1, =_edata
 80033da:	490d      	ldr	r1, [pc, #52]	; (8003410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033dc:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <LoopForever+0xe>)
  movs r3, #0
 80033de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e0:	e002      	b.n	80033e8 <LoopCopyDataInit>

080033e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033e6:	3304      	adds	r3, #4

080033e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033ec:	d3f9      	bcc.n	80033e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ee:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033f0:	4c0a      	ldr	r4, [pc, #40]	; (800341c <LoopForever+0x16>)
  movs r3, #0
 80033f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f4:	e001      	b.n	80033fa <LoopFillZerobss>

080033f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f8:	3204      	adds	r2, #4

080033fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033fc:	d3fb      	bcc.n	80033f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033fe:	f00b fdbf 	bl	800ef80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003402:	f7fd fd9f 	bl	8000f44 <main>

08003406 <LoopForever>:

LoopForever:
    b LoopForever
 8003406:	e7fe      	b.n	8003406 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003408:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800340c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003410:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003414:	0801128c 	.word	0x0801128c
  ldr r2, =_sbss
 8003418:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800341c:	200059f0 	.word	0x200059f0

08003420 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003420:	e7fe      	b.n	8003420 <ADC3_IRQHandler>
	...

08003424 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003428:	4b08      	ldr	r3, [pc, #32]	; (800344c <HAL_Init+0x28>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a07      	ldr	r2, [pc, #28]	; (800344c <HAL_Init+0x28>)
 800342e:	f043 0310 	orr.w	r3, r3, #16
 8003432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003434:	2003      	movs	r0, #3
 8003436:	f001 fbe8 	bl	8004c0a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800343a:	200f      	movs	r0, #15
 800343c:	f7ff fe00 	bl	8003040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003440:	f7ff faa8 	bl	8002994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40022000 	.word	0x40022000

08003450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_IncTick+0x20>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_IncTick+0x24>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4413      	add	r3, r2
 8003460:	4a04      	ldr	r2, [pc, #16]	; (8003474 <HAL_IncTick+0x24>)
 8003462:	6013      	str	r3, [r2, #0]
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	2000000c 	.word	0x2000000c
 8003474:	20000934 	.word	0x20000934

08003478 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return uwTick;  
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_GetTick+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000934 	.word	0x20000934

08003490 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b09a      	sub	sp, #104	; 0x68
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e1e3      	b.n	80038a0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d176      	bne.n	80035d8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d152      	bne.n	8003598 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff fa69 	bl	80029e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d13b      	bne.n	8003598 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f001 fa5f 	bl	80049e4 <ADC_Disable>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	d12f      	bne.n	8003598 <HAL_ADC_Init+0xe0>
 8003538:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800353c:	2b00      	cmp	r3, #0
 800353e:	d12b      	bne.n	8003598 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003548:	f023 0302 	bic.w	r3, r3, #2
 800354c:	f043 0202 	orr.w	r2, r3, #2
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003562:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003572:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003574:	4b92      	ldr	r3, [pc, #584]	; (80037c0 <HAL_ADC_Init+0x308>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a92      	ldr	r2, [pc, #584]	; (80037c4 <HAL_ADC_Init+0x30c>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	0c9a      	lsrs	r2, r3, #18
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800358a:	e002      	b.n	8003592 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	3b01      	subs	r3, #1
 8003590:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f9      	bne.n	800358c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80035b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b4:	d110      	bne.n	80035d8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f023 0312 	bic.w	r3, r3, #18
 80035be:	f043 0210 	orr.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 8150 	bne.w	8003886 <HAL_ADC_Init+0x3ce>
 80035e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 814b 	bne.w	8003886 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f040 8143 	bne.w	8003886 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003608:	f043 0202 	orr.w	r2, r3, #2
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003618:	d004      	beq.n	8003624 <HAL_ADC_Init+0x16c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a6a      	ldr	r2, [pc, #424]	; (80037c8 <HAL_ADC_Init+0x310>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d101      	bne.n	8003628 <HAL_ADC_Init+0x170>
 8003624:	4b69      	ldr	r3, [pc, #420]	; (80037cc <HAL_ADC_Init+0x314>)
 8003626:	e000      	b.n	800362a <HAL_ADC_Init+0x172>
 8003628:	4b69      	ldr	r3, [pc, #420]	; (80037d0 <HAL_ADC_Init+0x318>)
 800362a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003634:	d102      	bne.n	800363c <HAL_ADC_Init+0x184>
 8003636:	4b64      	ldr	r3, [pc, #400]	; (80037c8 <HAL_ADC_Init+0x310>)
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e01a      	b.n	8003672 <HAL_ADC_Init+0x1ba>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a61      	ldr	r2, [pc, #388]	; (80037c8 <HAL_ADC_Init+0x310>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d103      	bne.n	800364e <HAL_ADC_Init+0x196>
 8003646:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e011      	b.n	8003672 <HAL_ADC_Init+0x1ba>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a60      	ldr	r2, [pc, #384]	; (80037d4 <HAL_ADC_Init+0x31c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d102      	bne.n	800365e <HAL_ADC_Init+0x1a6>
 8003658:	4b5f      	ldr	r3, [pc, #380]	; (80037d8 <HAL_ADC_Init+0x320>)
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	e009      	b.n	8003672 <HAL_ADC_Init+0x1ba>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a5d      	ldr	r2, [pc, #372]	; (80037d8 <HAL_ADC_Init+0x320>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d102      	bne.n	800366e <HAL_ADC_Init+0x1b6>
 8003668:	4b5a      	ldr	r3, [pc, #360]	; (80037d4 <HAL_ADC_Init+0x31c>)
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e001      	b.n	8003672 <HAL_ADC_Init+0x1ba>
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d108      	bne.n	8003692 <HAL_ADC_Init+0x1da>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_ADC_Init+0x1da>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_ADC_Init+0x1dc>
 8003692:	2300      	movs	r3, #0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11c      	bne.n	80036d2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003698:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800369a:	2b00      	cmp	r3, #0
 800369c:	d010      	beq.n	80036c0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d107      	bne.n	80036ba <HAL_ADC_Init+0x202>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_Init+0x202>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_ADC_Init+0x204>
 80036ba:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d108      	bne.n	80036d2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80036c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7e5b      	ldrb	r3, [r3, #25]
 80036d6:	035b      	lsls	r3, r3, #13
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036dc:	2a01      	cmp	r2, #1
 80036de:	d002      	beq.n	80036e6 <HAL_ADC_Init+0x22e>
 80036e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036e4:	e000      	b.n	80036e8 <HAL_ADC_Init+0x230>
 80036e6:	2200      	movs	r2, #0
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036f8:	4313      	orrs	r3, r2
 80036fa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d11b      	bne.n	800373e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7e5b      	ldrb	r3, [r3, #25]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	3b01      	subs	r3, #1
 8003714:	045a      	lsls	r2, r3, #17
 8003716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003718:	4313      	orrs	r3, r2
 800371a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371e:	663b      	str	r3, [r7, #96]	; 0x60
 8003720:	e00d      	b.n	800373e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800372a:	f043 0220 	orr.w	r2, r3, #32
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	2b01      	cmp	r3, #1
 8003744:	d054      	beq.n	80037f0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <HAL_ADC_Init+0x31c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_ADC_Init+0x2a2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <HAL_ADC_Init+0x320>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d140      	bne.n	80037dc <HAL_ADC_Init+0x324>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003762:	d02a      	beq.n	80037ba <HAL_ADC_Init+0x302>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376c:	d022      	beq.n	80037b4 <HAL_ADC_Init+0x2fc>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003776:	d01a      	beq.n	80037ae <HAL_ADC_Init+0x2f6>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8003780:	d012      	beq.n	80037a8 <HAL_ADC_Init+0x2f0>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800378a:	d00a      	beq.n	80037a2 <HAL_ADC_Init+0x2ea>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8003794:	d002      	beq.n	800379c <HAL_ADC_Init+0x2e4>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	e023      	b.n	80037e4 <HAL_ADC_Init+0x32c>
 800379c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80037a0:	e020      	b.n	80037e4 <HAL_ADC_Init+0x32c>
 80037a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80037a6:	e01d      	b.n	80037e4 <HAL_ADC_Init+0x32c>
 80037a8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80037ac:	e01a      	b.n	80037e4 <HAL_ADC_Init+0x32c>
 80037ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037b2:	e017      	b.n	80037e4 <HAL_ADC_Init+0x32c>
 80037b4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80037b8:	e014      	b.n	80037e4 <HAL_ADC_Init+0x32c>
 80037ba:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80037be:	e011      	b.n	80037e4 <HAL_ADC_Init+0x32c>
 80037c0:	20000004 	.word	0x20000004
 80037c4:	431bde83 	.word	0x431bde83
 80037c8:	50000100 	.word	0x50000100
 80037cc:	50000300 	.word	0x50000300
 80037d0:	50000700 	.word	0x50000700
 80037d4:	50000400 	.word	0x50000400
 80037d8:	50000500 	.word	0x50000500
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037e8:	4313      	orrs	r3, r2
 80037ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037ec:	4313      	orrs	r3, r2
 80037ee:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d114      	bne.n	8003828 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800380c:	f023 0302 	bic.w	r3, r3, #2
 8003810:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7e1b      	ldrb	r3, [r3, #24]
 8003816:	039a      	lsls	r2, r3, #14
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4313      	orrs	r3, r2
 8003822:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003824:	4313      	orrs	r3, r2
 8003826:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_ADC_Init+0x3f0>)
 8003830:	4013      	ands	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003838:	430b      	orrs	r3, r1
 800383a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d10c      	bne.n	800385e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	f023 010f 	bic.w	r1, r3, #15
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	1e5a      	subs	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
 800385c:	e007      	b.n	800386e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 020f 	bic.w	r2, r2, #15
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	f023 0303 	bic.w	r3, r3, #3
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
 8003884:	e00a      	b.n	800389c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f023 0312 	bic.w	r3, r3, #18
 800388e:	f043 0210 	orr.w	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800389c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3768      	adds	r7, #104	; 0x68
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	fff0c007 	.word	0xfff0c007

080038ac <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f040 8123 	bne.w	8003b0e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_Start_IT+0x2a>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e11e      	b.n	8003b14 <HAL_ADC_Start_IT+0x268>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f001 f81c 	bl	800491c <ADC_Enable>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 810a 	bne.w	8003b04 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800390c:	d004      	beq.n	8003918 <HAL_ADC_Start_IT+0x6c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a82      	ldr	r2, [pc, #520]	; (8003b1c <HAL_ADC_Start_IT+0x270>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d106      	bne.n	8003926 <HAL_ADC_Start_IT+0x7a>
 8003918:	4b81      	ldr	r3, [pc, #516]	; (8003b20 <HAL_ADC_Start_IT+0x274>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	2b00      	cmp	r3, #0
 8003922:	d010      	beq.n	8003946 <HAL_ADC_Start_IT+0x9a>
 8003924:	e005      	b.n	8003932 <HAL_ADC_Start_IT+0x86>
 8003926:	4b7f      	ldr	r3, [pc, #508]	; (8003b24 <HAL_ADC_Start_IT+0x278>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <HAL_ADC_Start_IT+0x9a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800393a:	d004      	beq.n	8003946 <HAL_ADC_Start_IT+0x9a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a79      	ldr	r2, [pc, #484]	; (8003b28 <HAL_ADC_Start_IT+0x27c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d115      	bne.n	8003972 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d036      	beq.n	80039ce <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003968:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003970:	e02d      	b.n	80039ce <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003986:	d004      	beq.n	8003992 <HAL_ADC_Start_IT+0xe6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a63      	ldr	r2, [pc, #396]	; (8003b1c <HAL_ADC_Start_IT+0x270>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10a      	bne.n	80039a8 <HAL_ADC_Start_IT+0xfc>
 8003992:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e008      	b.n	80039ba <HAL_ADC_Start_IT+0x10e>
 80039a8:	4b5f      	ldr	r3, [pc, #380]	; (8003b28 <HAL_ADC_Start_IT+0x27c>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039da:	d106      	bne.n	80039ea <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	f023 0206 	bic.w	r2, r3, #6
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44
 80039e8:	e002      	b.n	80039f0 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	221c      	movs	r2, #28
 80039fe:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d110      	bne.n	8003a2a <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0204 	bic.w	r2, r2, #4
 8003a16:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0208 	orr.w	r2, r2, #8
 8003a26:	605a      	str	r2, [r3, #4]
          break;
 8003a28:	e008      	b.n	8003a3c <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 020c 	orr.w	r2, r2, #12
 8003a38:	605a      	str	r2, [r3, #4]
          break;
 8003a3a:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d107      	bne.n	8003a54 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0210 	bic.w	r2, r2, #16
 8003a52:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a5c:	d004      	beq.n	8003a68 <HAL_ADC_Start_IT+0x1bc>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2e      	ldr	r2, [pc, #184]	; (8003b1c <HAL_ADC_Start_IT+0x270>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d106      	bne.n	8003a76 <HAL_ADC_Start_IT+0x1ca>
 8003a68:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <HAL_ADC_Start_IT+0x274>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d03e      	beq.n	8003af2 <HAL_ADC_Start_IT+0x246>
 8003a74:	e005      	b.n	8003a82 <HAL_ADC_Start_IT+0x1d6>
 8003a76:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <HAL_ADC_Start_IT+0x278>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d037      	beq.n	8003af2 <HAL_ADC_Start_IT+0x246>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a8a:	d004      	beq.n	8003a96 <HAL_ADC_Start_IT+0x1ea>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a22      	ldr	r2, [pc, #136]	; (8003b1c <HAL_ADC_Start_IT+0x270>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d106      	bne.n	8003aa4 <HAL_ADC_Start_IT+0x1f8>
 8003a96:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <HAL_ADC_Start_IT+0x274>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	d027      	beq.n	8003af2 <HAL_ADC_Start_IT+0x246>
 8003aa2:	e005      	b.n	8003ab0 <HAL_ADC_Start_IT+0x204>
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <HAL_ADC_Start_IT+0x278>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d020      	beq.n	8003af2 <HAL_ADC_Start_IT+0x246>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab8:	d004      	beq.n	8003ac4 <HAL_ADC_Start_IT+0x218>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <HAL_ADC_Start_IT+0x270>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d106      	bne.n	8003ad2 <HAL_ADC_Start_IT+0x226>
 8003ac4:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <HAL_ADC_Start_IT+0x274>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	2b09      	cmp	r3, #9
 8003ace:	d010      	beq.n	8003af2 <HAL_ADC_Start_IT+0x246>
 8003ad0:	e005      	b.n	8003ade <HAL_ADC_Start_IT+0x232>
 8003ad2:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <HAL_ADC_Start_IT+0x278>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	2b09      	cmp	r3, #9
 8003adc:	d009      	beq.n	8003af2 <HAL_ADC_Start_IT+0x246>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ae6:	d004      	beq.n	8003af2 <HAL_ADC_Start_IT+0x246>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0e      	ldr	r2, [pc, #56]	; (8003b28 <HAL_ADC_Start_IT+0x27c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d10f      	bne.n	8003b12 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0204 	orr.w	r2, r2, #4
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	e006      	b.n	8003b12 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b0c:	e001      	b.n	8003b12 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	50000100 	.word	0x50000100
 8003b20:	50000300 	.word	0x50000300
 8003b24:	50000700 	.word	0x50000700
 8003b28:	50000400 	.word	0x50000400

08003b2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d004      	beq.n	8003b80 <HAL_ADC_IRQHandler+0x38>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80bc 	beq.w	8003d04 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80b6 	beq.w	8003d04 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb8:	d004      	beq.n	8003bc4 <HAL_ADC_IRQHandler+0x7c>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a90      	ldr	r2, [pc, #576]	; (8003e00 <HAL_ADC_IRQHandler+0x2b8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d106      	bne.n	8003bd2 <HAL_ADC_IRQHandler+0x8a>
 8003bc4:	4b8f      	ldr	r3, [pc, #572]	; (8003e04 <HAL_ADC_IRQHandler+0x2bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d03e      	beq.n	8003c4e <HAL_ADC_IRQHandler+0x106>
 8003bd0:	e005      	b.n	8003bde <HAL_ADC_IRQHandler+0x96>
 8003bd2:	4b8d      	ldr	r3, [pc, #564]	; (8003e08 <HAL_ADC_IRQHandler+0x2c0>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d037      	beq.n	8003c4e <HAL_ADC_IRQHandler+0x106>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be6:	d004      	beq.n	8003bf2 <HAL_ADC_IRQHandler+0xaa>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a84      	ldr	r2, [pc, #528]	; (8003e00 <HAL_ADC_IRQHandler+0x2b8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d106      	bne.n	8003c00 <HAL_ADC_IRQHandler+0xb8>
 8003bf2:	4b84      	ldr	r3, [pc, #528]	; (8003e04 <HAL_ADC_IRQHandler+0x2bc>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d027      	beq.n	8003c4e <HAL_ADC_IRQHandler+0x106>
 8003bfe:	e005      	b.n	8003c0c <HAL_ADC_IRQHandler+0xc4>
 8003c00:	4b81      	ldr	r3, [pc, #516]	; (8003e08 <HAL_ADC_IRQHandler+0x2c0>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	d020      	beq.n	8003c4e <HAL_ADC_IRQHandler+0x106>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c14:	d004      	beq.n	8003c20 <HAL_ADC_IRQHandler+0xd8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a79      	ldr	r2, [pc, #484]	; (8003e00 <HAL_ADC_IRQHandler+0x2b8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d106      	bne.n	8003c2e <HAL_ADC_IRQHandler+0xe6>
 8003c20:	4b78      	ldr	r3, [pc, #480]	; (8003e04 <HAL_ADC_IRQHandler+0x2bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2b09      	cmp	r3, #9
 8003c2a:	d010      	beq.n	8003c4e <HAL_ADC_IRQHandler+0x106>
 8003c2c:	e005      	b.n	8003c3a <HAL_ADC_IRQHandler+0xf2>
 8003c2e:	4b76      	ldr	r3, [pc, #472]	; (8003e08 <HAL_ADC_IRQHandler+0x2c0>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	2b09      	cmp	r3, #9
 8003c38:	d009      	beq.n	8003c4e <HAL_ADC_IRQHandler+0x106>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c42:	d004      	beq.n	8003c4e <HAL_ADC_IRQHandler+0x106>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a70      	ldr	r2, [pc, #448]	; (8003e0c <HAL_ADC_IRQHandler+0x2c4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d104      	bne.n	8003c58 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e00f      	b.n	8003c78 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c60:	d004      	beq.n	8003c6c <HAL_ADC_IRQHandler+0x124>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a66      	ldr	r2, [pc, #408]	; (8003e00 <HAL_ADC_IRQHandler+0x2b8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d102      	bne.n	8003c72 <HAL_ADC_IRQHandler+0x12a>
 8003c6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c70:	e000      	b.n	8003c74 <HAL_ADC_IRQHandler+0x12c>
 8003c72:	4b66      	ldr	r3, [pc, #408]	; (8003e0c <HAL_ADC_IRQHandler+0x2c4>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d137      	bne.n	8003cf6 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d132      	bne.n	8003cf6 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d02d      	beq.n	8003cf6 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d11a      	bne.n	8003cde <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 020c 	bic.w	r2, r2, #12
 8003cb6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d112      	bne.n	8003cf6 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
 8003cdc:	e00b      	b.n	8003cf6 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f043 0210 	orr.w	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd f90c 	bl	8000f14 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	220c      	movs	r2, #12
 8003d02:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <HAL_ADC_IRQHandler+0x1d0>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8138 	beq.w	8003f94 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8132 	beq.w	8003f94 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d44:	d004      	beq.n	8003d50 <HAL_ADC_IRQHandler+0x208>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2d      	ldr	r2, [pc, #180]	; (8003e00 <HAL_ADC_IRQHandler+0x2b8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d106      	bne.n	8003d5e <HAL_ADC_IRQHandler+0x216>
 8003d50:	4b2c      	ldr	r3, [pc, #176]	; (8003e04 <HAL_ADC_IRQHandler+0x2bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d03e      	beq.n	8003dda <HAL_ADC_IRQHandler+0x292>
 8003d5c:	e005      	b.n	8003d6a <HAL_ADC_IRQHandler+0x222>
 8003d5e:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_ADC_IRQHandler+0x2c0>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d037      	beq.n	8003dda <HAL_ADC_IRQHandler+0x292>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d72:	d004      	beq.n	8003d7e <HAL_ADC_IRQHandler+0x236>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <HAL_ADC_IRQHandler+0x2b8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d106      	bne.n	8003d8c <HAL_ADC_IRQHandler+0x244>
 8003d7e:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <HAL_ADC_IRQHandler+0x2bc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d027      	beq.n	8003dda <HAL_ADC_IRQHandler+0x292>
 8003d8a:	e005      	b.n	8003d98 <HAL_ADC_IRQHandler+0x250>
 8003d8c:	4b1e      	ldr	r3, [pc, #120]	; (8003e08 <HAL_ADC_IRQHandler+0x2c0>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	2b05      	cmp	r3, #5
 8003d96:	d020      	beq.n	8003dda <HAL_ADC_IRQHandler+0x292>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da0:	d004      	beq.n	8003dac <HAL_ADC_IRQHandler+0x264>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a16      	ldr	r2, [pc, #88]	; (8003e00 <HAL_ADC_IRQHandler+0x2b8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d106      	bne.n	8003dba <HAL_ADC_IRQHandler+0x272>
 8003dac:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <HAL_ADC_IRQHandler+0x2bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2b09      	cmp	r3, #9
 8003db6:	d010      	beq.n	8003dda <HAL_ADC_IRQHandler+0x292>
 8003db8:	e005      	b.n	8003dc6 <HAL_ADC_IRQHandler+0x27e>
 8003dba:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <HAL_ADC_IRQHandler+0x2c0>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	2b09      	cmp	r3, #9
 8003dc4:	d009      	beq.n	8003dda <HAL_ADC_IRQHandler+0x292>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dce:	d004      	beq.n	8003dda <HAL_ADC_IRQHandler+0x292>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <HAL_ADC_IRQHandler+0x2c4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d104      	bne.n	8003de4 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	e018      	b.n	8003e16 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dec:	d004      	beq.n	8003df8 <HAL_ADC_IRQHandler+0x2b0>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a03      	ldr	r2, [pc, #12]	; (8003e00 <HAL_ADC_IRQHandler+0x2b8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d10b      	bne.n	8003e10 <HAL_ADC_IRQHandler+0x2c8>
 8003df8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003dfc:	e009      	b.n	8003e12 <HAL_ADC_IRQHandler+0x2ca>
 8003dfe:	bf00      	nop
 8003e00:	50000100 	.word	0x50000100
 8003e04:	50000300 	.word	0x50000300
 8003e08:	50000700 	.word	0x50000700
 8003e0c:	50000400 	.word	0x50000400
 8003e10:	4b92      	ldr	r3, [pc, #584]	; (800405c <HAL_ADC_IRQHandler+0x514>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f040 80b0 	bne.w	8003f86 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 80a3 	bne.w	8003f86 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f040 809d 	bne.w	8003f86 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8097 	beq.w	8003f86 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e60:	d004      	beq.n	8003e6c <HAL_ADC_IRQHandler+0x324>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a7e      	ldr	r2, [pc, #504]	; (8004060 <HAL_ADC_IRQHandler+0x518>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d106      	bne.n	8003e7a <HAL_ADC_IRQHandler+0x332>
 8003e6c:	4b7d      	ldr	r3, [pc, #500]	; (8004064 <HAL_ADC_IRQHandler+0x51c>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d03e      	beq.n	8003ef6 <HAL_ADC_IRQHandler+0x3ae>
 8003e78:	e005      	b.n	8003e86 <HAL_ADC_IRQHandler+0x33e>
 8003e7a:	4b7b      	ldr	r3, [pc, #492]	; (8004068 <HAL_ADC_IRQHandler+0x520>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d037      	beq.n	8003ef6 <HAL_ADC_IRQHandler+0x3ae>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e8e:	d004      	beq.n	8003e9a <HAL_ADC_IRQHandler+0x352>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a72      	ldr	r2, [pc, #456]	; (8004060 <HAL_ADC_IRQHandler+0x518>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d106      	bne.n	8003ea8 <HAL_ADC_IRQHandler+0x360>
 8003e9a:	4b72      	ldr	r3, [pc, #456]	; (8004064 <HAL_ADC_IRQHandler+0x51c>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d027      	beq.n	8003ef6 <HAL_ADC_IRQHandler+0x3ae>
 8003ea6:	e005      	b.n	8003eb4 <HAL_ADC_IRQHandler+0x36c>
 8003ea8:	4b6f      	ldr	r3, [pc, #444]	; (8004068 <HAL_ADC_IRQHandler+0x520>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	2b06      	cmp	r3, #6
 8003eb2:	d020      	beq.n	8003ef6 <HAL_ADC_IRQHandler+0x3ae>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ebc:	d004      	beq.n	8003ec8 <HAL_ADC_IRQHandler+0x380>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a67      	ldr	r2, [pc, #412]	; (8004060 <HAL_ADC_IRQHandler+0x518>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d106      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0x38e>
 8003ec8:	4b66      	ldr	r3, [pc, #408]	; (8004064 <HAL_ADC_IRQHandler+0x51c>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2b07      	cmp	r3, #7
 8003ed2:	d010      	beq.n	8003ef6 <HAL_ADC_IRQHandler+0x3ae>
 8003ed4:	e005      	b.n	8003ee2 <HAL_ADC_IRQHandler+0x39a>
 8003ed6:	4b64      	ldr	r3, [pc, #400]	; (8004068 <HAL_ADC_IRQHandler+0x520>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2b07      	cmp	r3, #7
 8003ee0:	d009      	beq.n	8003ef6 <HAL_ADC_IRQHandler+0x3ae>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eea:	d004      	beq.n	8003ef6 <HAL_ADC_IRQHandler+0x3ae>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a5a      	ldr	r2, [pc, #360]	; (800405c <HAL_ADC_IRQHandler+0x514>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d104      	bne.n	8003f00 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	e00f      	b.n	8003f20 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f08:	d004      	beq.n	8003f14 <HAL_ADC_IRQHandler+0x3cc>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a54      	ldr	r2, [pc, #336]	; (8004060 <HAL_ADC_IRQHandler+0x518>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d102      	bne.n	8003f1a <HAL_ADC_IRQHandler+0x3d2>
 8003f14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f18:	e000      	b.n	8003f1c <HAL_ADC_IRQHandler+0x3d4>
 8003f1a:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_ADC_IRQHandler+0x514>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d12d      	bne.n	8003f86 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11a      	bne.n	8003f6e <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f46:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d112      	bne.n	8003f86 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f043 0201 	orr.w	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f6c:	e00b      	b.n	8003f86 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f043 0210 	orr.w	r2, r3, #16
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8c4 	bl	8004114 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2260      	movs	r2, #96	; 0x60
 8003f92:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d011      	beq.n	8003fc2 <HAL_ADC_IRQHandler+0x47a>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff fa6b 	bl	8003490 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2280      	movs	r2, #128	; 0x80
 8003fc0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d012      	beq.n	8003ff2 <HAL_ADC_IRQHandler+0x4aa>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8aa 	bl	800413c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ff0:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d012      	beq.n	8004022 <HAL_ADC_IRQHandler+0x4da>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f89c 	bl	8004150 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004020:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	d04f      	beq.n	80040cc <HAL_ADC_IRQHandler+0x584>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d04a      	beq.n	80040cc <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403a:	2b01      	cmp	r3, #1
 800403c:	d102      	bne.n	8004044 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 800403e:	2301      	movs	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	e02d      	b.n	80040a0 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800404c:	d004      	beq.n	8004058 <HAL_ADC_IRQHandler+0x510>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a03      	ldr	r2, [pc, #12]	; (8004060 <HAL_ADC_IRQHandler+0x518>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d109      	bne.n	800406c <HAL_ADC_IRQHandler+0x524>
 8004058:	4b02      	ldr	r3, [pc, #8]	; (8004064 <HAL_ADC_IRQHandler+0x51c>)
 800405a:	e008      	b.n	800406e <HAL_ADC_IRQHandler+0x526>
 800405c:	50000400 	.word	0x50000400
 8004060:	50000100 	.word	0x50000100
 8004064:	50000300 	.word	0x50000300
 8004068:	50000700 	.word	0x50000700
 800406c:	4b28      	ldr	r3, [pc, #160]	; (8004110 <HAL_ADC_IRQHandler+0x5c8>)
 800406e:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b01      	cmp	r3, #1
 8004088:	d10a      	bne.n	80040a0 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800408a:	2301      	movs	r3, #1
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	e007      	b.n	80040a0 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800409c:	2301      	movs	r3, #1
 800409e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d10e      	bne.n	80040c4 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff f9f0 	bl	80034a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2210      	movs	r2, #16
 80040ca:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d018      	beq.n	8004108 <HAL_ADC_IRQHandler+0x5c0>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d013      	beq.n	8004108 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f0:	f043 0208 	orr.w	r2, r3, #8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004100:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f810 	bl	8004128 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8004108:	bf00      	nop
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	50000700 	.word	0x50000700

08004114 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004164:	b480      	push	{r7}
 8004166:	b09b      	sub	sp, #108	; 0x6c
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x22>
 8004182:	2302      	movs	r3, #2
 8004184:	e2c8      	b.n	8004718 <HAL_ADC_ConfigChannel+0x5b4>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 82ac 	bne.w	80046f6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d81c      	bhi.n	80041e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4413      	add	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	461a      	mov	r2, r3
 80041ba:	231f      	movs	r3, #31
 80041bc:	4093      	lsls	r3, r2
 80041be:	43db      	mvns	r3, r3
 80041c0:	4019      	ands	r1, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	fa00 f203 	lsl.w	r2, r0, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
 80041de:	e063      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	d81e      	bhi.n	8004226 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	3b1e      	subs	r3, #30
 80041fc:	221f      	movs	r2, #31
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	4019      	ands	r1, r3
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	4413      	add	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	3b1e      	subs	r3, #30
 8004218:	fa00 f203 	lsl.w	r2, r0, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	635a      	str	r2, [r3, #52]	; 0x34
 8004224:	e040      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b0e      	cmp	r3, #14
 800422c:	d81e      	bhi.n	800426c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	3b3c      	subs	r3, #60	; 0x3c
 8004242:	221f      	movs	r2, #31
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	4019      	ands	r1, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	4413      	add	r3, r2
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	3b3c      	subs	r3, #60	; 0x3c
 800425e:	fa00 f203 	lsl.w	r2, r0, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	639a      	str	r2, [r3, #56]	; 0x38
 800426a:	e01d      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	3b5a      	subs	r3, #90	; 0x5a
 8004280:	221f      	movs	r2, #31
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	4019      	ands	r1, r3
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	3b5a      	subs	r3, #90	; 0x5a
 800429c:	fa00 f203 	lsl.w	r2, r0, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 80e5 	bne.w	8004482 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b09      	cmp	r3, #9
 80042be:	d91c      	bls.n	80042fa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6999      	ldr	r1, [r3, #24]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4613      	mov	r3, r2
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4413      	add	r3, r2
 80042d0:	3b1e      	subs	r3, #30
 80042d2:	2207      	movs	r2, #7
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	4019      	ands	r1, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	6898      	ldr	r0, [r3, #8]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4413      	add	r3, r2
 80042ea:	3b1e      	subs	r3, #30
 80042ec:	fa00 f203 	lsl.w	r2, r0, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	619a      	str	r2, [r3, #24]
 80042f8:	e019      	b.n	800432e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6959      	ldr	r1, [r3, #20]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	2207      	movs	r2, #7
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	4019      	ands	r1, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	6898      	ldr	r0, [r3, #8]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	4413      	add	r3, r2
 8004322:	fa00 f203 	lsl.w	r2, r0, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	08db      	lsrs	r3, r3, #3
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	3b01      	subs	r3, #1
 800434c:	2b03      	cmp	r3, #3
 800434e:	d84f      	bhi.n	80043f0 <HAL_ADC_ConfigChannel+0x28c>
 8004350:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <HAL_ADC_ConfigChannel+0x1f4>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	08004369 	.word	0x08004369
 800435c:	0800438b 	.word	0x0800438b
 8004360:	080043ad 	.word	0x080043ad
 8004364:	080043cf 	.word	0x080043cf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800436e:	4b99      	ldr	r3, [pc, #612]	; (80045d4 <HAL_ADC_ConfigChannel+0x470>)
 8004370:	4013      	ands	r3, r2
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	0691      	lsls	r1, r2, #26
 8004378:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800437a:	430a      	orrs	r2, r1
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004386:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004388:	e07b      	b.n	8004482 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004390:	4b90      	ldr	r3, [pc, #576]	; (80045d4 <HAL_ADC_ConfigChannel+0x470>)
 8004392:	4013      	ands	r3, r2
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	0691      	lsls	r1, r2, #26
 800439a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800439c:	430a      	orrs	r2, r1
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80043a8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80043aa:	e06a      	b.n	8004482 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043b2:	4b88      	ldr	r3, [pc, #544]	; (80045d4 <HAL_ADC_ConfigChannel+0x470>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	0691      	lsls	r1, r2, #26
 80043bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043be:	430a      	orrs	r2, r1
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80043ca:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80043cc:	e059      	b.n	8004482 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80043d4:	4b7f      	ldr	r3, [pc, #508]	; (80045d4 <HAL_ADC_ConfigChannel+0x470>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	0691      	lsls	r1, r2, #26
 80043de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043e0:	430a      	orrs	r2, r1
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80043ec:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80043ee:	e048      	b.n	8004482 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	069b      	lsls	r3, r3, #26
 8004400:	429a      	cmp	r2, r3
 8004402:	d107      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004412:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800441a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	069b      	lsls	r3, r3, #26
 8004424:	429a      	cmp	r2, r3
 8004426:	d107      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004436:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800443e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	069b      	lsls	r3, r3, #26
 8004448:	429a      	cmp	r2, r3
 800444a:	d107      	bne.n	800445c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800445a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	069b      	lsls	r3, r3, #26
 800446c:	429a      	cmp	r2, r3
 800446e:	d107      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800447e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004480:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d108      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x33e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x33e>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x340>
 80044a2:	2300      	movs	r3, #0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 8131 	bne.w	800470c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d00f      	beq.n	80044d2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2201      	movs	r2, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43da      	mvns	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	400a      	ands	r2, r1
 80044cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80044d0:	e049      	b.n	8004566 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2201      	movs	r2, #1
 80044e0:	409a      	lsls	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b09      	cmp	r3, #9
 80044f2:	d91c      	bls.n	800452e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6999      	ldr	r1, [r3, #24]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	4613      	mov	r3, r2
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	4413      	add	r3, r2
 8004504:	3b1b      	subs	r3, #27
 8004506:	2207      	movs	r2, #7
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	4019      	ands	r1, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	6898      	ldr	r0, [r3, #8]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	4413      	add	r3, r2
 800451e:	3b1b      	subs	r3, #27
 8004520:	fa00 f203 	lsl.w	r2, r0, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	619a      	str	r2, [r3, #24]
 800452c:	e01b      	b.n	8004566 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6959      	ldr	r1, [r3, #20]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	4613      	mov	r3, r2
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	4413      	add	r3, r2
 8004540:	2207      	movs	r2, #7
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	4019      	ands	r1, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6898      	ldr	r0, [r3, #8]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	4613      	mov	r3, r2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	4413      	add	r3, r2
 800455a:	fa00 f203 	lsl.w	r2, r0, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800456e:	d004      	beq.n	800457a <HAL_ADC_ConfigChannel+0x416>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <HAL_ADC_ConfigChannel+0x474>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d101      	bne.n	800457e <HAL_ADC_ConfigChannel+0x41a>
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <HAL_ADC_ConfigChannel+0x478>)
 800457c:	e000      	b.n	8004580 <HAL_ADC_ConfigChannel+0x41c>
 800457e:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <HAL_ADC_ConfigChannel+0x47c>)
 8004580:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b10      	cmp	r3, #16
 8004588:	d105      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800458a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004592:	2b00      	cmp	r3, #0
 8004594:	d015      	beq.n	80045c2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800459a:	2b11      	cmp	r3, #17
 800459c:	d105      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800459e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80045ae:	2b12      	cmp	r3, #18
 80045b0:	f040 80ac 	bne.w	800470c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80045b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f040 80a5 	bne.w	800470c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045ca:	d10b      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x480>
 80045cc:	4b02      	ldr	r3, [pc, #8]	; (80045d8 <HAL_ADC_ConfigChannel+0x474>)
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e023      	b.n	800461a <HAL_ADC_ConfigChannel+0x4b6>
 80045d2:	bf00      	nop
 80045d4:	83fff000 	.word	0x83fff000
 80045d8:	50000100 	.word	0x50000100
 80045dc:	50000300 	.word	0x50000300
 80045e0:	50000700 	.word	0x50000700
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a4e      	ldr	r2, [pc, #312]	; (8004724 <HAL_ADC_ConfigChannel+0x5c0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d103      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x492>
 80045ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	e011      	b.n	800461a <HAL_ADC_ConfigChannel+0x4b6>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a4b      	ldr	r2, [pc, #300]	; (8004728 <HAL_ADC_ConfigChannel+0x5c4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d102      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x4a2>
 8004600:	4b4a      	ldr	r3, [pc, #296]	; (800472c <HAL_ADC_ConfigChannel+0x5c8>)
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e009      	b.n	800461a <HAL_ADC_ConfigChannel+0x4b6>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a48      	ldr	r2, [pc, #288]	; (800472c <HAL_ADC_ConfigChannel+0x5c8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d102      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x4b2>
 8004610:	4b45      	ldr	r3, [pc, #276]	; (8004728 <HAL_ADC_ConfigChannel+0x5c4>)
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	e001      	b.n	800461a <HAL_ADC_ConfigChannel+0x4b6>
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	2b01      	cmp	r3, #1
 8004626:	d108      	bne.n	800463a <HAL_ADC_ConfigChannel+0x4d6>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_ADC_ConfigChannel+0x4d6>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <HAL_ADC_ConfigChannel+0x4d8>
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d150      	bne.n	80046e2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004640:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004642:	2b00      	cmp	r3, #0
 8004644:	d010      	beq.n	8004668 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d107      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x4fe>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x4fe>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <HAL_ADC_ConfigChannel+0x500>
 8004662:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004664:	2b00      	cmp	r3, #0
 8004666:	d13c      	bne.n	80046e2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b10      	cmp	r3, #16
 800466e:	d11d      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x548>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004678:	d118      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800467a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004684:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004686:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <HAL_ADC_ConfigChannel+0x5cc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2a      	ldr	r2, [pc, #168]	; (8004734 <HAL_ADC_ConfigChannel+0x5d0>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	0c9a      	lsrs	r2, r3, #18
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800469c:	e002      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f9      	bne.n	800469e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80046aa:	e02e      	b.n	800470a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b11      	cmp	r3, #17
 80046b2:	d10b      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x568>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046bc:	d106      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80046be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80046c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80046ca:	e01e      	b.n	800470a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b12      	cmp	r3, #18
 80046d2:	d11a      	bne.n	800470a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80046d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80046dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046de:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80046e0:	e013      	b.n	800470a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f043 0220 	orr.w	r2, r3, #32
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80046f4:	e00a      	b.n	800470c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004708:	e000      	b.n	800470c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800470a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004714:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004718:	4618      	mov	r0, r3
 800471a:	376c      	adds	r7, #108	; 0x6c
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	50000100 	.word	0x50000100
 8004728:	50000400 	.word	0x50000400
 800472c:	50000500 	.word	0x50000500
 8004730:	20000004 	.word	0x20000004
 8004734:	431bde83 	.word	0x431bde83

08004738 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004738:	b480      	push	{r7}
 800473a:	b099      	sub	sp, #100	; 0x64
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004750:	d102      	bne.n	8004758 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004752:	4b6d      	ldr	r3, [pc, #436]	; (8004908 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	e01a      	b.n	800478e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a6a      	ldr	r2, [pc, #424]	; (8004908 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d103      	bne.n	800476a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004762:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	e011      	b.n	800478e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a67      	ldr	r2, [pc, #412]	; (800490c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d102      	bne.n	800477a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004774:	4b66      	ldr	r3, [pc, #408]	; (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	e009      	b.n	800478e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a64      	ldr	r2, [pc, #400]	; (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d102      	bne.n	800478a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004784:	4b61      	ldr	r3, [pc, #388]	; (800490c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	e001      	b.n	800478e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0b0      	b.n	80048fa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e0a9      	b.n	80048fa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f040 808d 	bne.w	80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 8086 	bne.w	80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047d4:	d004      	beq.n	80047e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a4b      	ldr	r2, [pc, #300]	; (8004908 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d101      	bne.n	80047e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80047e0:	4b4c      	ldr	r3, [pc, #304]	; (8004914 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80047e2:	e000      	b.n	80047e6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80047e4:	4b4c      	ldr	r3, [pc, #304]	; (8004918 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80047e6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d040      	beq.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80047f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6859      	ldr	r1, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004802:	035b      	lsls	r3, r3, #13
 8004804:	430b      	orrs	r3, r1
 8004806:	431a      	orrs	r2, r3
 8004808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800480a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	2b01      	cmp	r3, #1
 8004818:	d108      	bne.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800482c:	2300      	movs	r3, #0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d15c      	bne.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b01      	cmp	r3, #1
 800483c:	d107      	bne.n	800484e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800484e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004850:	2b00      	cmp	r3, #0
 8004852:	d14b      	bne.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800485c:	f023 030f 	bic.w	r3, r3, #15
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	6811      	ldr	r1, [r2, #0]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	6892      	ldr	r2, [r2, #8]
 8004868:	430a      	orrs	r2, r1
 800486a:	431a      	orrs	r2, r3
 800486c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800486e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004870:	e03c      	b.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800487a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800487c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	2b01      	cmp	r3, #1
 800488a:	d108      	bne.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d123      	bne.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d107      	bne.n	80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80048c0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d112      	bne.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80048c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80048ce:	f023 030f 	bic.w	r3, r3, #15
 80048d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048d4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80048d6:	e009      	b.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80048ea:	e000      	b.n	80048ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80048ec:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80048f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80048fa:	4618      	mov	r0, r3
 80048fc:	3764      	adds	r7, #100	; 0x64
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	50000100 	.word	0x50000100
 800490c:	50000400 	.word	0x50000400
 8004910:	50000500 	.word	0x50000500
 8004914:	50000300 	.word	0x50000300
 8004918:	50000700 	.word	0x50000700

0800491c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d108      	bne.n	8004948 <ADC_Enable+0x2c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <ADC_Enable+0x2c>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <ADC_Enable+0x2e>
 8004948:	2300      	movs	r3, #0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d143      	bne.n	80049d6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <ADC_Enable+0xc4>)
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00d      	beq.n	8004978 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	f043 0210 	orr.w	r2, r3, #16
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496c:	f043 0201 	orr.w	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e02f      	b.n	80049d8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004988:	f7fe fd76 	bl	8003478 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800498e:	e01b      	b.n	80049c8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004990:	f7fe fd72 	bl	8003478 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d914      	bls.n	80049c8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d00d      	beq.n	80049c8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	f043 0210 	orr.w	r2, r3, #16
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049bc:	f043 0201 	orr.w	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e007      	b.n	80049d8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d1dc      	bne.n	8004990 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	8000003f 	.word	0x8000003f

080049e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d108      	bne.n	8004a10 <ADC_Disable+0x2c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <ADC_Disable+0x2c>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <ADC_Disable+0x2e>
 8004a10:	2300      	movs	r3, #0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d047      	beq.n	8004aa6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030d 	and.w	r3, r3, #13
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d10f      	bne.n	8004a44 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0202 	orr.w	r2, r2, #2
 8004a32:	609a      	str	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2203      	movs	r2, #3
 8004a3a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004a3c:	f7fe fd1c 	bl	8003478 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004a42:	e029      	b.n	8004a98 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	f043 0210 	orr.w	r2, r3, #16
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e023      	b.n	8004aa8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a60:	f7fe fd0a 	bl	8003478 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d914      	bls.n	8004a98 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d10d      	bne.n	8004a98 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	f043 0210 	orr.w	r2, r3, #16
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8c:	f043 0201 	orr.w	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e007      	b.n	8004aa8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d0dc      	beq.n	8004a60 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004acc:	4013      	ands	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ae2:	4a04      	ldr	r2, [pc, #16]	; (8004af4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	60d3      	str	r3, [r2, #12]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <__NVIC_GetPriorityGrouping+0x18>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	0a1b      	lsrs	r3, r3, #8
 8004b02:	f003 0307 	and.w	r3, r3, #7
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	e000ed00 	.word	0xe000ed00

08004b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	db0b      	blt.n	8004b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	f003 021f 	and.w	r2, r3, #31
 8004b2c:	4907      	ldr	r1, [pc, #28]	; (8004b4c <__NVIC_EnableIRQ+0x38>)
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	2001      	movs	r0, #1
 8004b36:	fa00 f202 	lsl.w	r2, r0, r2
 8004b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	e000e100 	.word	0xe000e100

08004b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	6039      	str	r1, [r7, #0]
 8004b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	db0a      	blt.n	8004b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	490c      	ldr	r1, [pc, #48]	; (8004b9c <__NVIC_SetPriority+0x4c>)
 8004b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6e:	0112      	lsls	r2, r2, #4
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	440b      	add	r3, r1
 8004b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b78:	e00a      	b.n	8004b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	4908      	ldr	r1, [pc, #32]	; (8004ba0 <__NVIC_SetPriority+0x50>)
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	3b04      	subs	r3, #4
 8004b88:	0112      	lsls	r2, r2, #4
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	761a      	strb	r2, [r3, #24]
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000e100 	.word	0xe000e100
 8004ba0:	e000ed00 	.word	0xe000ed00

08004ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f1c3 0307 	rsb	r3, r3, #7
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	bf28      	it	cs
 8004bc2:	2304      	movcs	r3, #4
 8004bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	2b06      	cmp	r3, #6
 8004bcc:	d902      	bls.n	8004bd4 <NVIC_EncodePriority+0x30>
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	3b03      	subs	r3, #3
 8004bd2:	e000      	b.n	8004bd6 <NVIC_EncodePriority+0x32>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43da      	mvns	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	401a      	ands	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bec:	f04f 31ff 	mov.w	r1, #4294967295
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf6:	43d9      	mvns	r1, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bfc:	4313      	orrs	r3, r2
         );
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3724      	adds	r7, #36	; 0x24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff ff4c 	bl	8004ab0 <__NVIC_SetPriorityGrouping>
}
 8004c18:	bf00      	nop
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c32:	f7ff ff61 	bl	8004af8 <__NVIC_GetPriorityGrouping>
 8004c36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	6978      	ldr	r0, [r7, #20]
 8004c3e:	f7ff ffb1 	bl	8004ba4 <NVIC_EncodePriority>
 8004c42:	4602      	mov	r2, r0
 8004c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff ff80 	bl	8004b50 <__NVIC_SetPriority>
}
 8004c50:	bf00      	nop
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff ff54 	bl	8004b14 <__NVIC_EnableIRQ>
}
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e054      	b.n	8004d30 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	7f5b      	ldrb	r3, [r3, #29]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fd fee8 	bl	8002a6c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	791b      	ldrb	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a22      	ldr	r2, [pc, #136]	; (8004d38 <HAL_CRC_Init+0xc4>)
 8004cb0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0218 	bic.w	r2, r2, #24
 8004cc0:	609a      	str	r2, [r3, #8]
 8004cc2:	e00c      	b.n	8004cde <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6899      	ldr	r1, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f940 	bl	8004f54 <HAL_CRCEx_Polynomial_Set>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e028      	b.n	8004d30 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	795b      	ldrb	r3, [r3, #5]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d105      	bne.n	8004cf2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295
 8004cee:	611a      	str	r2, [r3, #16]
 8004cf0:	e004      	b.n	8004cfc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6912      	ldr	r2, [r2, #16]
 8004cfa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695a      	ldr	r2, [r3, #20]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	04c11db7 	.word	0x04c11db7

08004d3c <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d006      	beq.n	8004d68 <HAL_CRC_Accumulate+0x2c>
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d829      	bhi.n	8004db2 <HAL_CRC_Accumulate+0x76>
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d019      	beq.n	8004d96 <HAL_CRC_Accumulate+0x5a>
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d01e      	beq.n	8004da4 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8004d66:	e024      	b.n	8004db2 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e00a      	b.n	8004d84 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	441a      	add	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6812      	ldr	r2, [r2, #0]
 8004d7c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	3301      	adds	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d3f0      	bcc.n	8004d6e <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	613b      	str	r3, [r7, #16]
      break;
 8004d94:	e00e      	b.n	8004db4 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f812 	bl	8004dc4 <CRC_Handle_8>
 8004da0:	6138      	str	r0, [r7, #16]
      break;
 8004da2:	e007      	b.n	8004db4 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f899 	bl	8004ee0 <CRC_Handle_16>
 8004dae:	6138      	str	r0, [r7, #16]
      break;
 8004db0:	e000      	b.n	8004db4 <HAL_CRC_Accumulate+0x78>
      break;
 8004db2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004dba:	693b      	ldr	r3, [r7, #16]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b089      	sub	sp, #36	; 0x24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	e023      	b.n	8004e1e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4413      	add	r3, r2
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	3301      	adds	r3, #1
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	440b      	add	r3, r1
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004df0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	3302      	adds	r3, #2
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	440b      	add	r3, r1
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004e00:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	3303      	adds	r3, #3
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	440b      	add	r3, r1
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004e14:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	089b      	lsrs	r3, r3, #2
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d3d6      	bcc.n	8004dd6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d04d      	beq.n	8004ece <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d107      	bne.n	8004e4c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	4413      	add	r3, r2
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d116      	bne.n	8004e84 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	b21a      	sxth	r2, r3
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	3301      	adds	r3, #1
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	440b      	add	r3, r1
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	b21b      	sxth	r3, r3
 8004e72:	4313      	orrs	r3, r2
 8004e74:	b21b      	sxth	r3, r3
 8004e76:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	8b7a      	ldrh	r2, [r7, #26]
 8004e82:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d11f      	bne.n	8004ece <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4413      	add	r3, r2
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	b21a      	sxth	r2, r3
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	440b      	add	r3, r1
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	b21b      	sxth	r3, r3
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	b21b      	sxth	r3, r3
 8004eae:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	8b7a      	ldrh	r2, [r7, #26]
 8004eba:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	3302      	adds	r3, #2
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3724      	adds	r7, #36	; 0x24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e013      	b.n	8004f1a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	4413      	add	r3, r2
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	041a      	lsls	r2, r3, #16
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	3302      	adds	r3, #2
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	440b      	add	r3, r1
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	3301      	adds	r3, #1
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d3e6      	bcc.n	8004ef2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	881a      	ldrh	r2, [r3, #0]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004f64:	231f      	movs	r3, #31
 8004f66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d102      	bne.n	8004f78 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
 8004f76:	e063      	b.n	8005040 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004f78:	bf00      	nop
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1e5a      	subs	r2, r3, #1
 8004f7e:	613a      	str	r2, [r7, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d009      	beq.n	8004f98 <HAL_CRCEx_Polynomial_Set+0x44>
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b18      	cmp	r3, #24
 8004f9c:	d846      	bhi.n	800502c <HAL_CRCEx_Polynomial_Set+0xd8>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08005033 	.word	0x08005033
 8004fa8:	0800502d 	.word	0x0800502d
 8004fac:	0800502d 	.word	0x0800502d
 8004fb0:	0800502d 	.word	0x0800502d
 8004fb4:	0800502d 	.word	0x0800502d
 8004fb8:	0800502d 	.word	0x0800502d
 8004fbc:	0800502d 	.word	0x0800502d
 8004fc0:	0800502d 	.word	0x0800502d
 8004fc4:	08005021 	.word	0x08005021
 8004fc8:	0800502d 	.word	0x0800502d
 8004fcc:	0800502d 	.word	0x0800502d
 8004fd0:	0800502d 	.word	0x0800502d
 8004fd4:	0800502d 	.word	0x0800502d
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	0800502d 	.word	0x0800502d
 8004fe0:	0800502d 	.word	0x0800502d
 8004fe4:	08005015 	.word	0x08005015
 8004fe8:	0800502d 	.word	0x0800502d
 8004fec:	0800502d 	.word	0x0800502d
 8004ff0:	0800502d 	.word	0x0800502d
 8004ff4:	0800502d 	.word	0x0800502d
 8004ff8:	0800502d 	.word	0x0800502d
 8004ffc:	0800502d 	.word	0x0800502d
 8005000:	0800502d 	.word	0x0800502d
 8005004:	08005009 	.word	0x08005009
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b06      	cmp	r3, #6
 800500c:	d913      	bls.n	8005036 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005012:	e010      	b.n	8005036 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b07      	cmp	r3, #7
 8005018:	d90f      	bls.n	800503a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800501e:	e00c      	b.n	800503a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	2b0f      	cmp	r3, #15
 8005024:	d90b      	bls.n	800503e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800502a:	e008      	b.n	800503e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	75fb      	strb	r3, [r7, #23]
        break;
 8005030:	e006      	b.n	8005040 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005032:	bf00      	nop
 8005034:	e004      	b.n	8005040 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005036:	bf00      	nop
 8005038:	e002      	b.n	8005040 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800503a:	bf00      	nop
 800503c:	e000      	b.n	8005040 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800503e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10d      	bne.n	8005062 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f023 0118 	bic.w	r1, r3, #24
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	430a      	orrs	r2, r1
 8005060:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005062:	7dfb      	ldrb	r3, [r7, #23]
}
 8005064:	4618      	mov	r0, r3
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e037      	b.n	80050f6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800509c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80050a0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80050aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f9c5 	bl	8005468 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}  
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b086      	sub	sp, #24
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_DMA_Start_IT+0x20>
 800511a:	2302      	movs	r3, #2
 800511c:	e04a      	b.n	80051b4 <HAL_DMA_Start_IT+0xb6>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800512c:	2b01      	cmp	r3, #1
 800512e:	d13a      	bne.n	80051a6 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f958 	bl	800540a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 020e 	orr.w	r2, r2, #14
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e00f      	b.n	8005194 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 020a 	orr.w	r2, r2, #10
 8005182:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0204 	bic.w	r2, r2, #4
 8005192:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e005      	b.n	80051b2 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80051ae:	2302      	movs	r3, #2
 80051b0:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
} 
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d008      	beq.n	80051e0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2204      	movs	r2, #4
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e020      	b.n	8005222 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 020e 	bic.w	r2, r2, #14
 80051ee:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005208:	2101      	movs	r1, #1
 800520a:	fa01 f202 	lsl.w	r2, r1, r2
 800520e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005240:	2b02      	cmp	r3, #2
 8005242:	d005      	beq.n	8005250 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2204      	movs	r2, #4
 8005248:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
 800524e:	e027      	b.n	80052a0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 020e 	bic.w	r2, r2, #14
 800525e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0201 	bic.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	2101      	movs	r1, #1
 800527a:	fa01 f202 	lsl.w	r2, r1, r2
 800527e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
    } 
  }
  return status;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	2204      	movs	r2, #4
 80052c8:	409a      	lsls	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d024      	beq.n	800531c <HAL_DMA_IRQHandler+0x72>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01f      	beq.n	800531c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d107      	bne.n	80052fa <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0204 	bic.w	r2, r2, #4
 80052f8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	2104      	movs	r1, #4
 8005304:	fa01 f202 	lsl.w	r2, r1, r2
 8005308:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d06a      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800531a:	e065      	b.n	80053e8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	2202      	movs	r2, #2
 8005322:	409a      	lsls	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02c      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdc>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d027      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10b      	bne.n	800535c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 020a 	bic.w	r2, r2, #10
 8005352:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005364:	2102      	movs	r1, #2
 8005366:	fa01 f202 	lsl.w	r2, r1, r2
 800536a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	2b00      	cmp	r3, #0
 800537a:	d035      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005384:	e030      	b.n	80053e8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	2208      	movs	r2, #8
 800538c:	409a      	lsls	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d028      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x13e>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d023      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 020e 	bic.w	r2, r2, #14
 80053ae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b8:	2101      	movs	r1, #1
 80053ba:	fa01 f202 	lsl.w	r2, r1, r2
 80053be:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	4798      	blx	r3
    }
  }
}  
 80053e6:	e7ff      	b.n	80053e8 <HAL_DMA_IRQHandler+0x13e>
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	607a      	str	r2, [r7, #4]
 8005416:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005420:	2101      	movs	r1, #1
 8005422:	fa01 f202 	lsl.w	r2, r1, r2
 8005426:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b10      	cmp	r3, #16
 8005436:	d108      	bne.n	800544a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005448:	e007      	b.n	800545a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	60da      	str	r2, [r3, #12]
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <DMA_CalcBaseAndBitshift+0x60>)
 8005478:	429a      	cmp	r2, r3
 800547a:	d80f      	bhi.n	800549c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <DMA_CalcBaseAndBitshift+0x64>)
 8005484:	4413      	add	r3, r2
 8005486:	4a12      	ldr	r2, [pc, #72]	; (80054d0 <DMA_CalcBaseAndBitshift+0x68>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	009a      	lsls	r2, r3, #2
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a0f      	ldr	r2, [pc, #60]	; (80054d4 <DMA_CalcBaseAndBitshift+0x6c>)
 8005498:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800549a:	e00e      	b.n	80054ba <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <DMA_CalcBaseAndBitshift+0x70>)
 80054a4:	4413      	add	r3, r2
 80054a6:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <DMA_CalcBaseAndBitshift+0x68>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	009a      	lsls	r2, r3, #2
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a09      	ldr	r2, [pc, #36]	; (80054dc <DMA_CalcBaseAndBitshift+0x74>)
 80054b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40020407 	.word	0x40020407
 80054cc:	bffdfff8 	.word	0xbffdfff8
 80054d0:	cccccccd 	.word	0xcccccccd
 80054d4:	40020000 	.word	0x40020000
 80054d8:	bffdfbf8 	.word	0xbffdfbf8
 80054dc:	40020400 	.word	0x40020400

080054e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054ee:	e160      	b.n	80057b2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	2101      	movs	r1, #1
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	fa01 f303 	lsl.w	r3, r1, r3
 80054fc:	4013      	ands	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 8152 	beq.w	80057ac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d005      	beq.n	8005520 <HAL_GPIO_Init+0x40>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d130      	bne.n	8005582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	2203      	movs	r2, #3
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4013      	ands	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005556:	2201      	movs	r2, #1
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	43db      	mvns	r3, r3
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4013      	ands	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	091b      	lsrs	r3, r3, #4
 800556c:	f003 0201 	and.w	r2, r3, #1
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	2b03      	cmp	r3, #3
 800558c:	d017      	beq.n	80055be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	2203      	movs	r2, #3
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43db      	mvns	r3, r3
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4013      	ands	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d123      	bne.n	8005612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	08da      	lsrs	r2, r3, #3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3208      	adds	r2, #8
 80055d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	220f      	movs	r2, #15
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43db      	mvns	r3, r3
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4013      	ands	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	08da      	lsrs	r2, r3, #3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3208      	adds	r2, #8
 800560c:	6939      	ldr	r1, [r7, #16]
 800560e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	2203      	movs	r2, #3
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43db      	mvns	r3, r3
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4013      	ands	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f003 0203 	and.w	r2, r3, #3
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 80ac 	beq.w	80057ac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005654:	4b5e      	ldr	r3, [pc, #376]	; (80057d0 <HAL_GPIO_Init+0x2f0>)
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	4a5d      	ldr	r2, [pc, #372]	; (80057d0 <HAL_GPIO_Init+0x2f0>)
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	6193      	str	r3, [r2, #24]
 8005660:	4b5b      	ldr	r3, [pc, #364]	; (80057d0 <HAL_GPIO_Init+0x2f0>)
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800566c:	4a59      	ldr	r2, [pc, #356]	; (80057d4 <HAL_GPIO_Init+0x2f4>)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	089b      	lsrs	r3, r3, #2
 8005672:	3302      	adds	r3, #2
 8005674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005678:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	220f      	movs	r2, #15
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005696:	d025      	beq.n	80056e4 <HAL_GPIO_Init+0x204>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a4f      	ldr	r2, [pc, #316]	; (80057d8 <HAL_GPIO_Init+0x2f8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d01f      	beq.n	80056e0 <HAL_GPIO_Init+0x200>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a4e      	ldr	r2, [pc, #312]	; (80057dc <HAL_GPIO_Init+0x2fc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d019      	beq.n	80056dc <HAL_GPIO_Init+0x1fc>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a4d      	ldr	r2, [pc, #308]	; (80057e0 <HAL_GPIO_Init+0x300>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d013      	beq.n	80056d8 <HAL_GPIO_Init+0x1f8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a4c      	ldr	r2, [pc, #304]	; (80057e4 <HAL_GPIO_Init+0x304>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00d      	beq.n	80056d4 <HAL_GPIO_Init+0x1f4>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a4b      	ldr	r2, [pc, #300]	; (80057e8 <HAL_GPIO_Init+0x308>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <HAL_GPIO_Init+0x1f0>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a4a      	ldr	r2, [pc, #296]	; (80057ec <HAL_GPIO_Init+0x30c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d101      	bne.n	80056cc <HAL_GPIO_Init+0x1ec>
 80056c8:	2306      	movs	r3, #6
 80056ca:	e00c      	b.n	80056e6 <HAL_GPIO_Init+0x206>
 80056cc:	2307      	movs	r3, #7
 80056ce:	e00a      	b.n	80056e6 <HAL_GPIO_Init+0x206>
 80056d0:	2305      	movs	r3, #5
 80056d2:	e008      	b.n	80056e6 <HAL_GPIO_Init+0x206>
 80056d4:	2304      	movs	r3, #4
 80056d6:	e006      	b.n	80056e6 <HAL_GPIO_Init+0x206>
 80056d8:	2303      	movs	r3, #3
 80056da:	e004      	b.n	80056e6 <HAL_GPIO_Init+0x206>
 80056dc:	2302      	movs	r3, #2
 80056de:	e002      	b.n	80056e6 <HAL_GPIO_Init+0x206>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <HAL_GPIO_Init+0x206>
 80056e4:	2300      	movs	r3, #0
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	f002 0203 	and.w	r2, r2, #3
 80056ec:	0092      	lsls	r2, r2, #2
 80056ee:	4093      	lsls	r3, r2
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80056f6:	4937      	ldr	r1, [pc, #220]	; (80057d4 <HAL_GPIO_Init+0x2f4>)
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	089b      	lsrs	r3, r3, #2
 80056fc:	3302      	adds	r3, #2
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005704:	4b3a      	ldr	r3, [pc, #232]	; (80057f0 <HAL_GPIO_Init+0x310>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	43db      	mvns	r3, r3
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4013      	ands	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005728:	4a31      	ldr	r2, [pc, #196]	; (80057f0 <HAL_GPIO_Init+0x310>)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800572e:	4b30      	ldr	r3, [pc, #192]	; (80057f0 <HAL_GPIO_Init+0x310>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	43db      	mvns	r3, r3
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4013      	ands	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005752:	4a27      	ldr	r2, [pc, #156]	; (80057f0 <HAL_GPIO_Init+0x310>)
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005758:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <HAL_GPIO_Init+0x310>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	43db      	mvns	r3, r3
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4013      	ands	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800577c:	4a1c      	ldr	r2, [pc, #112]	; (80057f0 <HAL_GPIO_Init+0x310>)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005782:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <HAL_GPIO_Init+0x310>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	43db      	mvns	r3, r3
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4013      	ands	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80057a6:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <HAL_GPIO_Init+0x310>)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	3301      	adds	r3, #1
 80057b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f47f ae97 	bne.w	80054f0 <HAL_GPIO_Init+0x10>
  }
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40010000 	.word	0x40010000
 80057d8:	48000400 	.word	0x48000400
 80057dc:	48000800 	.word	0x48000800
 80057e0:	48000c00 	.word	0x48000c00
 80057e4:	48001000 	.word	0x48001000
 80057e8:	48001400 	.word	0x48001400
 80057ec:	48001800 	.word	0x48001800
 80057f0:	40010400 	.word	0x40010400

080057f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	807b      	strh	r3, [r7, #2]
 8005800:	4613      	mov	r3, r2
 8005802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005804:	787b      	ldrb	r3, [r7, #1]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800580a:	887a      	ldrh	r2, [r7, #2]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005810:	e002      	b.n	8005818 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005812:	887a      	ldrh	r2, [r7, #2]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005836:	887a      	ldrh	r2, [r7, #2]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4013      	ands	r3, r2
 800583c:	041a      	lsls	r2, r3, #16
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	43d9      	mvns	r1, r3
 8005842:	887b      	ldrh	r3, [r7, #2]
 8005844:	400b      	ands	r3, r1
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005862:	4b08      	ldr	r3, [pc, #32]	; (8005884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	88fb      	ldrh	r3, [r7, #6]
 8005868:	4013      	ands	r3, r2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d006      	beq.n	800587c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800586e:	4a05      	ldr	r2, [pc, #20]	; (8005884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	4618      	mov	r0, r3
 8005878:	f7fb fa1a 	bl	8000cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 800587c:	bf00      	nop
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40010400 	.word	0x40010400

08005888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e081      	b.n	800599e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fd f8fc 	bl	8002aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2224      	movs	r2, #36	; 0x24
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d107      	bne.n	8005902 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058fe:	609a      	str	r2, [r3, #8]
 8005900:	e006      	b.n	8005910 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800590e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d104      	bne.n	8005922 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005920:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005934:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005944:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691a      	ldr	r2, [r3, #16]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69d9      	ldr	r1, [r3, #28]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d005      	beq.n	80059d2 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	68f9      	ldr	r1, [r7, #12]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
  }
}
 80059d2:	bf00      	nop
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b086      	sub	sp, #24
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00f      	beq.n	8005a1c <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	f043 0201 	orr.w	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a1a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00f      	beq.n	8005a46 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a34:	f043 0208 	orr.w	r2, r3, #8
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a44:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00f      	beq.n	8005a70 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f043 0202 	orr.w	r2, r3, #2
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 030b 	and.w	r3, r3, #11
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005a80:	68f9      	ldr	r1, [r7, #12]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fb76 	bl	8006174 <I2C_ITError>
  }
}
 8005a88:	bf00      	nop
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	70fb      	strb	r3, [r7, #3]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <I2C_Slave_ISR_IT+0x24>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e0e1      	b.n	8005cf8 <I2C_Slave_ISR_IT+0x1e8>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d008      	beq.n	8005b58 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005b50:	6939      	ldr	r1, [r7, #16]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f9b4 	bl	8005ec0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f003 0310 	and.w	r3, r3, #16
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d04b      	beq.n	8005bfa <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d046      	beq.n	8005bfa <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d128      	bne.n	8005bc8 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b28      	cmp	r3, #40	; 0x28
 8005b80:	d108      	bne.n	8005b94 <I2C_Slave_ISR_IT+0x84>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b88:	d104      	bne.n	8005b94 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005b8a:	6939      	ldr	r1, [r7, #16]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fa9d 	bl	80060cc <I2C_ITListenCplt>
 8005b92:	e031      	b.n	8005bf8 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b29      	cmp	r3, #41	; 0x29
 8005b9e:	d10e      	bne.n	8005bbe <I2C_Slave_ISR_IT+0xae>
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ba6:	d00a      	beq.n	8005bbe <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2210      	movs	r2, #16
 8005bae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fbf6 	bl	80063a2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f926 	bl	8005e08 <I2C_ITSlaveSeqCplt>
 8005bbc:	e01c      	b.n	8005bf8 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2210      	movs	r2, #16
 8005bc4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005bc6:	e08f      	b.n	8005ce8 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2210      	movs	r2, #16
 8005bce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	f043 0204 	orr.w	r2, r3, #4
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <I2C_Slave_ISR_IT+0xda>
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005be8:	d17e      	bne.n	8005ce8 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	4619      	mov	r1, r3
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fabf 	bl	8006174 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005bf6:	e077      	b.n	8005ce8 <I2C_Slave_ISR_IT+0x1d8>
 8005bf8:	e076      	b.n	8005ce8 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02f      	beq.n	8005c64 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d02a      	beq.n	8005c64 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d018      	beq.n	8005c4a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d14b      	bne.n	8005cec <I2C_Slave_ISR_IT+0x1dc>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c5a:	d047      	beq.n	8005cec <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f8d3 	bl	8005e08 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005c62:	e043      	b.n	8005cec <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005c78:	6939      	ldr	r1, [r7, #16]
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f840 	bl	8005d00 <I2C_ITAddrCplt>
 8005c80:	e035      	b.n	8005cee <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d030      	beq.n	8005cee <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d02b      	beq.n	8005cee <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d018      	beq.n	8005cd2 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	781a      	ldrb	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	851a      	strh	r2, [r3, #40]	; 0x28
 8005cd0:	e00d      	b.n	8005cee <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cd8:	d002      	beq.n	8005ce0 <I2C_Slave_ISR_IT+0x1d0>
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d106      	bne.n	8005cee <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f891 	bl	8005e08 <I2C_ITSlaveSeqCplt>
 8005ce6:	e002      	b.n	8005cee <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8005ce8:	bf00      	nop
 8005cea:	e000      	b.n	8005cee <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8005cec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d16:	2b28      	cmp	r3, #40	; 0x28
 8005d18:	d16a      	bne.n	8005df0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	0c1b      	lsrs	r3, r3, #16
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005d38:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d46:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005d54:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d138      	bne.n	8005dd0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005d5e:	897b      	ldrh	r3, [r7, #10]
 8005d60:	09db      	lsrs	r3, r3, #7
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	89bb      	ldrh	r3, [r7, #12]
 8005d66:	4053      	eors	r3, r2
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	f003 0306 	and.w	r3, r3, #6
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11c      	bne.n	8005dac <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005d72:	897b      	ldrh	r3, [r7, #10]
 8005d74:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d13b      	bne.n	8005e00 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2208      	movs	r2, #8
 8005d94:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d9e:	89ba      	ldrh	r2, [r7, #12]
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff fe87 	bl	8005ab8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005daa:	e029      	b.n	8005e00 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005dac:	893b      	ldrh	r3, [r7, #8]
 8005dae:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005db0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fb36 	bl	8006426 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005dc2:	89ba      	ldrh	r2, [r7, #12]
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fe75 	bl	8005ab8 <HAL_I2C_AddrCallback>
}
 8005dce:	e017      	b.n	8005e00 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005dd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fb26 	bl	8006426 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005de2:	89ba      	ldrh	r2, [r7, #12]
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff fe65 	bl	8005ab8 <HAL_I2C_AddrCallback>
}
 8005dee:	e007      	b.n	8005e00 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2208      	movs	r2, #8
 8005df6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d008      	beq.n	8005e3c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e00c      	b.n	8005e56 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e54:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b29      	cmp	r3, #41	; 0x29
 8005e60:	d112      	bne.n	8005e88 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2228      	movs	r2, #40	; 0x28
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2221      	movs	r2, #33	; 0x21
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e70:	2101      	movs	r1, #1
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fad7 	bl	8006426 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff fe05 	bl	8005a90 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e86:	e017      	b.n	8005eb8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b2a      	cmp	r3, #42	; 0x2a
 8005e92:	d111      	bne.n	8005eb8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2228      	movs	r2, #40	; 0x28
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2222      	movs	r2, #34	; 0x22
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fabe 	bl	8006426 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fdf6 	bl	8005aa4 <HAL_I2C_SlaveRxCpltCallback>
}
 8005eb8:	bf00      	nop
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005edc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	2b21      	cmp	r3, #33	; 0x21
 8005eea:	d002      	beq.n	8005ef2 <I2C_ITSlaveCplt+0x32>
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	2b29      	cmp	r3, #41	; 0x29
 8005ef0:	d108      	bne.n	8005f04 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005ef2:	f248 0101 	movw	r1, #32769	; 0x8001
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa95 	bl	8006426 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2221      	movs	r2, #33	; 0x21
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30
 8005f02:	e00d      	b.n	8005f20 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	2b22      	cmp	r3, #34	; 0x22
 8005f08:	d002      	beq.n	8005f10 <I2C_ITSlaveCplt+0x50>
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f0e:	d107      	bne.n	8005f20 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005f10:	f248 0102 	movw	r1, #32770	; 0x8002
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fa86 	bl	8006426 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2222      	movs	r2, #34	; 0x22
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6859      	ldr	r1, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4b62      	ldr	r3, [pc, #392]	; (80060c4 <I2C_ITSlaveCplt+0x204>)
 8005f3c:	400b      	ands	r3, r1
 8005f3e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fa2e 	bl	80063a2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d013      	beq.n	8005f78 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f5e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01f      	beq.n	8005fa8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f76:	e017      	b.n	8005fa8 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d012      	beq.n	8005fa8 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d006      	beq.n	8005fa8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d020      	beq.n	8005ff4 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f023 0304 	bic.w	r3, r3, #4
 8005fb8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d005      	beq.n	800600a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	f043 0204 	orr.w	r2, r3, #4
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601c:	2b00      	cmp	r3, #0
 800601e:	d010      	beq.n	8006042 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f8a4 	bl	8006174 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b28      	cmp	r3, #40	; 0x28
 8006036:	d141      	bne.n	80060bc <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006038:	6979      	ldr	r1, [r7, #20]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f846 	bl	80060cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006040:	e03c      	b.n	80060bc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800604a:	d014      	beq.n	8006076 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff fedb 	bl	8005e08 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1c      	ldr	r2, [pc, #112]	; (80060c8 <I2C_ITSlaveCplt+0x208>)
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff fd30 	bl	8005ad4 <HAL_I2C_ListenCpltCallback>
}
 8006074:	e022      	b.n	80060bc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b22      	cmp	r3, #34	; 0x22
 8006080:	d10e      	bne.n	80060a0 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff fd03 	bl	8005aa4 <HAL_I2C_SlaveRxCpltCallback>
}
 800609e:	e00d      	b.n	80060bc <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fcea 	bl	8005a90 <HAL_I2C_SlaveTxCpltCallback>
}
 80060bc:	bf00      	nop
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	fe00e800 	.word	0xfe00e800
 80060c8:	ffff0000 	.word	0xffff0000

080060cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a25      	ldr	r2, [pc, #148]	; (8006170 <I2C_ITListenCplt+0xa4>)
 80060da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d022      	beq.n	8006148 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d012      	beq.n	8006148 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006140:	f043 0204 	orr.w	r2, r3, #4
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006148:	f248 0103 	movw	r1, #32771	; 0x8003
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f96a 	bl	8006426 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2210      	movs	r2, #16
 8006158:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7ff fcb6 	bl	8005ad4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006168:	bf00      	nop
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	ffff0000 	.word	0xffff0000

08006174 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006184:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a6d      	ldr	r2, [pc, #436]	; (8006348 <I2C_ITError+0x1d4>)
 8006192:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	2b28      	cmp	r3, #40	; 0x28
 80061aa:	d005      	beq.n	80061b8 <I2C_ITError+0x44>
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	2b29      	cmp	r3, #41	; 0x29
 80061b0:	d002      	beq.n	80061b8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	2b2a      	cmp	r3, #42	; 0x2a
 80061b6:	d10b      	bne.n	80061d0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80061b8:	2103      	movs	r1, #3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f933 	bl	8006426 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2228      	movs	r2, #40	; 0x28
 80061c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a60      	ldr	r2, [pc, #384]	; (800634c <I2C_ITError+0x1d8>)
 80061cc:	635a      	str	r2, [r3, #52]	; 0x34
 80061ce:	e030      	b.n	8006232 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80061d0:	f248 0103 	movw	r1, #32771	; 0x8003
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f926 	bl	8006426 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f8e1 	bl	80063a2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b60      	cmp	r3, #96	; 0x60
 80061ea:	d01f      	beq.n	800622c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d114      	bne.n	800622c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b10      	cmp	r3, #16
 800620e:	d109      	bne.n	8006224 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2210      	movs	r2, #16
 8006216:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621c:	f043 0204 	orr.w	r2, r3, #4
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2220      	movs	r2, #32
 800622a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	2b00      	cmp	r3, #0
 800623e:	d039      	beq.n	80062b4 <I2C_ITError+0x140>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b11      	cmp	r3, #17
 8006244:	d002      	beq.n	800624c <I2C_ITError+0xd8>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b21      	cmp	r3, #33	; 0x21
 800624a:	d133      	bne.n	80062b4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800625a:	d107      	bne.n	800626c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800626a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff f8bd 	bl	80053f0 <HAL_DMA_GetState>
 8006276:	4603      	mov	r3, r0
 8006278:	2b01      	cmp	r3, #1
 800627a:	d017      	beq.n	80062ac <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	4a33      	ldr	r2, [pc, #204]	; (8006350 <I2C_ITError+0x1dc>)
 8006282:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	4618      	mov	r0, r3
 8006292:	f7fe ffcc 	bl	800522e <HAL_DMA_Abort_IT>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d04d      	beq.n	8006338 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062a6:	4610      	mov	r0, r2
 80062a8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062aa:	e045      	b.n	8006338 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f851 	bl	8006354 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062b2:	e041      	b.n	8006338 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d039      	beq.n	8006330 <I2C_ITError+0x1bc>
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b12      	cmp	r3, #18
 80062c0:	d002      	beq.n	80062c8 <I2C_ITError+0x154>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b22      	cmp	r3, #34	; 0x22
 80062c6:	d133      	bne.n	8006330 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d6:	d107      	bne.n	80062e8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff f87f 	bl	80053f0 <HAL_DMA_GetState>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d017      	beq.n	8006328 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fc:	4a14      	ldr	r2, [pc, #80]	; (8006350 <I2C_ITError+0x1dc>)
 80062fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630c:	4618      	mov	r0, r3
 800630e:	f7fe ff8e 	bl	800522e <HAL_DMA_Abort_IT>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d011      	beq.n	800633c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006322:	4610      	mov	r0, r2
 8006324:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006326:	e009      	b.n	800633c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f813 	bl	8006354 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800632e:	e005      	b.n	800633c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f80f 	bl	8006354 <I2C_TreatErrorCallback>
  }
}
 8006336:	e002      	b.n	800633e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006338:	bf00      	nop
 800633a:	e000      	b.n	800633e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800633c:	bf00      	nop
}
 800633e:	bf00      	nop
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	ffff0000 	.word	0xffff0000
 800634c:	08005b11 	.word	0x08005b11
 8006350:	080063eb 	.word	0x080063eb

08006354 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b60      	cmp	r3, #96	; 0x60
 8006366:	d10e      	bne.n	8006386 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7ff fbbc 	bl	8005afc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006384:	e009      	b.n	800639a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff fba7 	bl	8005ae8 <HAL_I2C_ErrorCallback>
}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d103      	bne.n	80063c0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2200      	movs	r2, #0
 80063be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d007      	beq.n	80063de <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	699a      	ldr	r2, [r3, #24]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0201 	orr.w	r2, r2, #1
 80063dc:	619a      	str	r2, [r3, #24]
  }
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	2200      	movs	r2, #0
 8006406:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006414:	2200      	movs	r2, #0
 8006416:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7ff ff9b 	bl	8006354 <I2C_TreatErrorCallback>
}
 800641e:	bf00      	nop
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006426:	b480      	push	{r7}
 8006428:	b085      	sub	sp, #20
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006436:	887b      	ldrh	r3, [r7, #2]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00f      	beq.n	8006460 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006446:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800644e:	b2db      	uxtb	r3, r3
 8006450:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006454:	2b28      	cmp	r3, #40	; 0x28
 8006456:	d003      	beq.n	8006460 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800645e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006460:	887b      	ldrh	r3, [r7, #2]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00f      	beq.n	800648a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006470:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006478:	b2db      	uxtb	r3, r3
 800647a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800647e:	2b28      	cmp	r3, #40	; 0x28
 8006480:	d003      	beq.n	800648a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006488:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800648a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800648e:	2b00      	cmp	r3, #0
 8006490:	da03      	bge.n	800649a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006498:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800649a:	887b      	ldrh	r3, [r7, #2]
 800649c:	2b10      	cmp	r3, #16
 800649e:	d103      	bne.n	80064a8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80064a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80064a8:	887b      	ldrh	r3, [r7, #2]
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d103      	bne.n	80064b6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f043 0320 	orr.w	r3, r3, #32
 80064b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80064b6:	887b      	ldrh	r3, [r7, #2]
 80064b8:	2b40      	cmp	r3, #64	; 0x40
 80064ba:	d103      	bne.n	80064c4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6819      	ldr	r1, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	43da      	mvns	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	400a      	ands	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]
}
 80064d6:	bf00      	nop
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	d138      	bne.n	800656a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006502:	2302      	movs	r3, #2
 8006504:	e032      	b.n	800656c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2224      	movs	r2, #36	; 0x24
 8006512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0201 	bic.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006534:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6819      	ldr	r1, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0201 	orr.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	e000      	b.n	800656c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800656a:	2302      	movs	r3, #2
  }
}
 800656c:	4618      	mov	r0, r3
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b20      	cmp	r3, #32
 800658c:	d139      	bne.n	8006602 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006598:	2302      	movs	r3, #2
 800659a:	e033      	b.n	8006604 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2224      	movs	r2, #36	; 0x24
 80065a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0201 	bic.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0201 	orr.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	e000      	b.n	8006604 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006602:	2302      	movs	r3, #2
  }
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006616:	af00      	add	r7, sp, #0
 8006618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800661c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006620:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006626:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	f001 b83a 	b.w	80076aa <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006636:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800663a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 816f 	beq.w	800692a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800664c:	4bb5      	ldr	r3, [pc, #724]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f003 030c 	and.w	r3, r3, #12
 8006654:	2b04      	cmp	r3, #4
 8006656:	d00c      	beq.n	8006672 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006658:	4bb2      	ldr	r3, [pc, #712]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f003 030c 	and.w	r3, r3, #12
 8006660:	2b08      	cmp	r3, #8
 8006662:	d15c      	bne.n	800671e <HAL_RCC_OscConfig+0x10e>
 8006664:	4baf      	ldr	r3, [pc, #700]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800666c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006670:	d155      	bne.n	800671e <HAL_RCC_OscConfig+0x10e>
 8006672:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006676:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800667e:	fa93 f3a3 	rbit	r3, r3
 8006682:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006686:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800668a:	fab3 f383 	clz	r3, r3
 800668e:	b2db      	uxtb	r3, r3
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	b2db      	uxtb	r3, r3
 8006694:	f043 0301 	orr.w	r3, r3, #1
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b01      	cmp	r3, #1
 800669c:	d102      	bne.n	80066a4 <HAL_RCC_OscConfig+0x94>
 800669e:	4ba1      	ldr	r3, [pc, #644]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	e015      	b.n	80066d0 <HAL_RCC_OscConfig+0xc0>
 80066a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066a8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80066b0:	fa93 f3a3 	rbit	r3, r3
 80066b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80066b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066bc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80066c0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80066c4:	fa93 f3a3 	rbit	r3, r3
 80066c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80066cc:	4b95      	ldr	r3, [pc, #596]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066d4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80066d8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80066dc:	fa92 f2a2 	rbit	r2, r2
 80066e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80066e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80066e8:	fab2 f282 	clz	r2, r2
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	f042 0220 	orr.w	r2, r2, #32
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	f002 021f 	and.w	r2, r2, #31
 80066f8:	2101      	movs	r1, #1
 80066fa:	fa01 f202 	lsl.w	r2, r1, r2
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8111 	beq.w	8006928 <HAL_RCC_OscConfig+0x318>
 8006706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800670a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f040 8108 	bne.w	8006928 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	f000 bfc6 	b.w	80076aa <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800671e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006722:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800672e:	d106      	bne.n	800673e <HAL_RCC_OscConfig+0x12e>
 8006730:	4b7c      	ldr	r3, [pc, #496]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a7b      	ldr	r2, [pc, #492]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 8006736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	e036      	b.n	80067ac <HAL_RCC_OscConfig+0x19c>
 800673e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006742:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10c      	bne.n	8006768 <HAL_RCC_OscConfig+0x158>
 800674e:	4b75      	ldr	r3, [pc, #468]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a74      	ldr	r2, [pc, #464]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 8006754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	4b72      	ldr	r3, [pc, #456]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a71      	ldr	r2, [pc, #452]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 8006760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	e021      	b.n	80067ac <HAL_RCC_OscConfig+0x19c>
 8006768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800676c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006778:	d10c      	bne.n	8006794 <HAL_RCC_OscConfig+0x184>
 800677a:	4b6a      	ldr	r3, [pc, #424]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a69      	ldr	r2, [pc, #420]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 8006780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	4b67      	ldr	r3, [pc, #412]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a66      	ldr	r2, [pc, #408]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 800678c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e00b      	b.n	80067ac <HAL_RCC_OscConfig+0x19c>
 8006794:	4b63      	ldr	r3, [pc, #396]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a62      	ldr	r2, [pc, #392]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 800679a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	4b60      	ldr	r3, [pc, #384]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a5f      	ldr	r2, [pc, #380]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 80067a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067aa:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d059      	beq.n	8006870 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067bc:	f7fc fe5c 	bl	8003478 <HAL_GetTick>
 80067c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067c4:	e00a      	b.n	80067dc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067c6:	f7fc fe57 	bl	8003478 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b64      	cmp	r3, #100	; 0x64
 80067d4:	d902      	bls.n	80067dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	f000 bf67 	b.w	80076aa <HAL_RCC_OscConfig+0x109a>
 80067dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067e0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80067e8:	fa93 f3a3 	rbit	r3, r3
 80067ec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80067f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f4:	fab3 f383 	clz	r3, r3
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	d102      	bne.n	800680e <HAL_RCC_OscConfig+0x1fe>
 8006808:	4b46      	ldr	r3, [pc, #280]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	e015      	b.n	800683a <HAL_RCC_OscConfig+0x22a>
 800680e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006812:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006816:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800681a:	fa93 f3a3 	rbit	r3, r3
 800681e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006826:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800682a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800682e:	fa93 f3a3 	rbit	r3, r3
 8006832:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006836:	4b3b      	ldr	r3, [pc, #236]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800683e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8006842:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8006846:	fa92 f2a2 	rbit	r2, r2
 800684a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800684e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006852:	fab2 f282 	clz	r2, r2
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	f042 0220 	orr.w	r2, r2, #32
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	f002 021f 	and.w	r2, r2, #31
 8006862:	2101      	movs	r1, #1
 8006864:	fa01 f202 	lsl.w	r2, r1, r2
 8006868:	4013      	ands	r3, r2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0ab      	beq.n	80067c6 <HAL_RCC_OscConfig+0x1b6>
 800686e:	e05c      	b.n	800692a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006870:	f7fc fe02 	bl	8003478 <HAL_GetTick>
 8006874:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006878:	e00a      	b.n	8006890 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800687a:	f7fc fdfd 	bl	8003478 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b64      	cmp	r3, #100	; 0x64
 8006888:	d902      	bls.n	8006890 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	f000 bf0d 	b.w	80076aa <HAL_RCC_OscConfig+0x109a>
 8006890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006894:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006898:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800689c:	fa93 f3a3 	rbit	r3, r3
 80068a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80068a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068a8:	fab3 f383 	clz	r3, r3
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f043 0301 	orr.w	r3, r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d102      	bne.n	80068c2 <HAL_RCC_OscConfig+0x2b2>
 80068bc:	4b19      	ldr	r3, [pc, #100]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	e015      	b.n	80068ee <HAL_RCC_OscConfig+0x2de>
 80068c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80068ce:	fa93 f3a3 	rbit	r3, r3
 80068d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80068d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80068de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80068e2:	fa93 f3a3 	rbit	r3, r3
 80068e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80068ea:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <HAL_RCC_OscConfig+0x314>)
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80068f2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80068f6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80068fa:	fa92 f2a2 	rbit	r2, r2
 80068fe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8006902:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006906:	fab2 f282 	clz	r2, r2
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	f042 0220 	orr.w	r2, r2, #32
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	f002 021f 	and.w	r2, r2, #31
 8006916:	2101      	movs	r1, #1
 8006918:	fa01 f202 	lsl.w	r2, r1, r2
 800691c:	4013      	ands	r3, r2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1ab      	bne.n	800687a <HAL_RCC_OscConfig+0x26a>
 8006922:	e002      	b.n	800692a <HAL_RCC_OscConfig+0x31a>
 8006924:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800692a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800692e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 817f 	beq.w	8006c3e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006940:	4ba7      	ldr	r3, [pc, #668]	; (8006be0 <HAL_RCC_OscConfig+0x5d0>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f003 030c 	and.w	r3, r3, #12
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00c      	beq.n	8006966 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800694c:	4ba4      	ldr	r3, [pc, #656]	; (8006be0 <HAL_RCC_OscConfig+0x5d0>)
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f003 030c 	and.w	r3, r3, #12
 8006954:	2b08      	cmp	r3, #8
 8006956:	d173      	bne.n	8006a40 <HAL_RCC_OscConfig+0x430>
 8006958:	4ba1      	ldr	r3, [pc, #644]	; (8006be0 <HAL_RCC_OscConfig+0x5d0>)
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006964:	d16c      	bne.n	8006a40 <HAL_RCC_OscConfig+0x430>
 8006966:	2302      	movs	r3, #2
 8006968:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800696c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8006970:	fa93 f3a3 	rbit	r3, r3
 8006974:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8006978:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800697c:	fab3 f383 	clz	r3, r3
 8006980:	b2db      	uxtb	r3, r3
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b01      	cmp	r3, #1
 800698e:	d102      	bne.n	8006996 <HAL_RCC_OscConfig+0x386>
 8006990:	4b93      	ldr	r3, [pc, #588]	; (8006be0 <HAL_RCC_OscConfig+0x5d0>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	e013      	b.n	80069be <HAL_RCC_OscConfig+0x3ae>
 8006996:	2302      	movs	r3, #2
 8006998:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800699c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80069a0:	fa93 f3a3 	rbit	r3, r3
 80069a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80069a8:	2302      	movs	r3, #2
 80069aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80069ae:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80069b2:	fa93 f3a3 	rbit	r3, r3
 80069b6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80069ba:	4b89      	ldr	r3, [pc, #548]	; (8006be0 <HAL_RCC_OscConfig+0x5d0>)
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	2202      	movs	r2, #2
 80069c0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80069c4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80069c8:	fa92 f2a2 	rbit	r2, r2
 80069cc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80069d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80069d4:	fab2 f282 	clz	r2, r2
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	f042 0220 	orr.w	r2, r2, #32
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	f002 021f 	and.w	r2, r2, #31
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f202 	lsl.w	r2, r1, r2
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <HAL_RCC_OscConfig+0x3f6>
 80069f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d002      	beq.n	8006a06 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	f000 be52 	b.w	80076aa <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a06:	4b76      	ldr	r3, [pc, #472]	; (8006be0 <HAL_RCC_OscConfig+0x5d0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	21f8      	movs	r1, #248	; 0xf8
 8006a1c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a20:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006a24:	fa91 f1a1 	rbit	r1, r1
 8006a28:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8006a2c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006a30:	fab1 f181 	clz	r1, r1
 8006a34:	b2c9      	uxtb	r1, r1
 8006a36:	408b      	lsls	r3, r1
 8006a38:	4969      	ldr	r1, [pc, #420]	; (8006be0 <HAL_RCC_OscConfig+0x5d0>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a3e:	e0fe      	b.n	8006c3e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 8088 	beq.w	8006b62 <HAL_RCC_OscConfig+0x552>
 8006a52:	2301      	movs	r3, #1
 8006a54:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a58:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006a5c:	fa93 f3a3 	rbit	r3, r3
 8006a60:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8006a64:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a68:	fab3 f383 	clz	r3, r3
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	461a      	mov	r2, r3
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7e:	f7fc fcfb 	bl	8003478 <HAL_GetTick>
 8006a82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a86:	e00a      	b.n	8006a9e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a88:	f7fc fcf6 	bl	8003478 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d902      	bls.n	8006a9e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	f000 be06 	b.w	80076aa <HAL_RCC_OscConfig+0x109a>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006aa8:	fa93 f3a3 	rbit	r3, r3
 8006aac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8006ab0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ab4:	fab3 f383 	clz	r3, r3
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	095b      	lsrs	r3, r3, #5
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d102      	bne.n	8006ace <HAL_RCC_OscConfig+0x4be>
 8006ac8:	4b45      	ldr	r3, [pc, #276]	; (8006be0 <HAL_RCC_OscConfig+0x5d0>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	e013      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e6>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006ad8:	fa93 f3a3 	rbit	r3, r3
 8006adc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006ae6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006aea:	fa93 f3a3 	rbit	r3, r3
 8006aee:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006af2:	4b3b      	ldr	r3, [pc, #236]	; (8006be0 <HAL_RCC_OscConfig+0x5d0>)
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	2202      	movs	r2, #2
 8006af8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006afc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006b00:	fa92 f2a2 	rbit	r2, r2
 8006b04:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006b08:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006b0c:	fab2 f282 	clz	r2, r2
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	f042 0220 	orr.w	r2, r2, #32
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	f002 021f 	and.w	r2, r2, #31
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0af      	beq.n	8006a88 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b28:	4b2d      	ldr	r3, [pc, #180]	; (8006be0 <HAL_RCC_OscConfig+0x5d0>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	21f8      	movs	r1, #248	; 0xf8
 8006b3e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b42:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8006b46:	fa91 f1a1 	rbit	r1, r1
 8006b4a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8006b4e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006b52:	fab1 f181 	clz	r1, r1
 8006b56:	b2c9      	uxtb	r1, r1
 8006b58:	408b      	lsls	r3, r1
 8006b5a:	4921      	ldr	r1, [pc, #132]	; (8006be0 <HAL_RCC_OscConfig+0x5d0>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	600b      	str	r3, [r1, #0]
 8006b60:	e06d      	b.n	8006c3e <HAL_RCC_OscConfig+0x62e>
 8006b62:	2301      	movs	r3, #1
 8006b64:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b68:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006b6c:	fa93 f3a3 	rbit	r3, r3
 8006b70:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8006b74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b78:	fab3 f383 	clz	r3, r3
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006b82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b8e:	f7fc fc73 	bl	8003478 <HAL_GetTick>
 8006b92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b96:	e00a      	b.n	8006bae <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b98:	f7fc fc6e 	bl	8003478 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d902      	bls.n	8006bae <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	f000 bd7e 	b.w	80076aa <HAL_RCC_OscConfig+0x109a>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bb8:	fa93 f3a3 	rbit	r3, r3
 8006bbc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8006bc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bc4:	fab3 f383 	clz	r3, r3
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f043 0301 	orr.w	r3, r3, #1
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d105      	bne.n	8006be4 <HAL_RCC_OscConfig+0x5d4>
 8006bd8:	4b01      	ldr	r3, [pc, #4]	; (8006be0 <HAL_RCC_OscConfig+0x5d0>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	e016      	b.n	8006c0c <HAL_RCC_OscConfig+0x5fc>
 8006bde:	bf00      	nop
 8006be0:	40021000 	.word	0x40021000
 8006be4:	2302      	movs	r3, #2
 8006be6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bee:	fa93 f3a3 	rbit	r3, r3
 8006bf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006bfc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006c00:	fa93 f3a3 	rbit	r3, r3
 8006c04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c08:	4bbf      	ldr	r3, [pc, #764]	; (8006f08 <HAL_RCC_OscConfig+0x8f8>)
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006c12:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006c16:	fa92 f2a2 	rbit	r2, r2
 8006c1a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8006c1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006c22:	fab2 f282 	clz	r2, r2
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	f042 0220 	orr.w	r2, r2, #32
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	f002 021f 	and.w	r2, r2, #31
 8006c32:	2101      	movs	r1, #1
 8006c34:	fa01 f202 	lsl.w	r2, r1, r2
 8006c38:	4013      	ands	r3, r2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1ac      	bne.n	8006b98 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 8113 	beq.w	8006e7a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d07c      	beq.n	8006d5e <HAL_RCC_OscConfig+0x74e>
 8006c64:	2301      	movs	r3, #1
 8006c66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c6e:	fa93 f3a3 	rbit	r3, r3
 8006c72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8006c76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c7a:	fab3 f383 	clz	r3, r3
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	4ba2      	ldr	r3, [pc, #648]	; (8006f0c <HAL_RCC_OscConfig+0x8fc>)
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c8e:	f7fc fbf3 	bl	8003478 <HAL_GetTick>
 8006c92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c96:	e00a      	b.n	8006cae <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c98:	f7fc fbee 	bl	8003478 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d902      	bls.n	8006cae <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	f000 bcfe 	b.w	80076aa <HAL_RCC_OscConfig+0x109a>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cb8:	fa93 f2a3 	rbit	r2, r3
 8006cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cc0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cce:	2202      	movs	r2, #2
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	fa93 f2a3 	rbit	r2, r3
 8006ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	fa93 f2a3 	rbit	r2, r3
 8006d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006d0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d0e:	4b7e      	ldr	r3, [pc, #504]	; (8006f08 <HAL_RCC_OscConfig+0x8f8>)
 8006d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006d1a:	2102      	movs	r1, #2
 8006d1c:	6019      	str	r1, [r3, #0]
 8006d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	fa93 f1a3 	rbit	r1, r3
 8006d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006d34:	6019      	str	r1, [r3, #0]
  return result;
 8006d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d3a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	fab3 f383 	clz	r3, r3
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	2101      	movs	r1, #1
 8006d52:	fa01 f303 	lsl.w	r3, r1, r3
 8006d56:	4013      	ands	r3, r2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d09d      	beq.n	8006c98 <HAL_RCC_OscConfig+0x688>
 8006d5c:	e08d      	b.n	8006e7a <HAL_RCC_OscConfig+0x86a>
 8006d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d66:	2201      	movs	r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	fa93 f2a3 	rbit	r2, r3
 8006d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006d80:	601a      	str	r2, [r3, #0]
  return result;
 8006d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006d8a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d8c:	fab3 f383 	clz	r3, r3
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	461a      	mov	r2, r3
 8006d94:	4b5d      	ldr	r3, [pc, #372]	; (8006f0c <HAL_RCC_OscConfig+0x8fc>)
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006da0:	f7fc fb6a 	bl	8003478 <HAL_GetTick>
 8006da4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006da8:	e00a      	b.n	8006dc0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006daa:	f7fc fb65 	bl	8003478 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d902      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	f000 bc75 	b.w	80076aa <HAL_RCC_OscConfig+0x109a>
 8006dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dc4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006dc8:	2202      	movs	r2, #2
 8006dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	fa93 f2a3 	rbit	r2, r3
 8006dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006de8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dec:	2202      	movs	r2, #2
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006df4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	fa93 f2a3 	rbit	r2, r3
 8006dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006e10:	2202      	movs	r2, #2
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	fa93 f2a3 	rbit	r2, r3
 8006e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e26:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006e2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e2c:	4b36      	ldr	r3, [pc, #216]	; (8006f08 <HAL_RCC_OscConfig+0x8f8>)
 8006e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e34:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006e38:	2102      	movs	r1, #2
 8006e3a:	6019      	str	r1, [r3, #0]
 8006e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	fa93 f1a3 	rbit	r1, r3
 8006e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e4e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006e52:	6019      	str	r1, [r3, #0]
  return result;
 8006e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	fab3 f383 	clz	r3, r3
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	2101      	movs	r1, #1
 8006e70:	fa01 f303 	lsl.w	r3, r1, r3
 8006e74:	4013      	ands	r3, r2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d197      	bne.n	8006daa <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 81a5 	beq.w	80071da <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e96:	4b1c      	ldr	r3, [pc, #112]	; (8006f08 <HAL_RCC_OscConfig+0x8f8>)
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d116      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ea2:	4b19      	ldr	r3, [pc, #100]	; (8006f08 <HAL_RCC_OscConfig+0x8f8>)
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	4a18      	ldr	r2, [pc, #96]	; (8006f08 <HAL_RCC_OscConfig+0x8f8>)
 8006ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eac:	61d3      	str	r3, [r2, #28]
 8006eae:	4b16      	ldr	r3, [pc, #88]	; (8006f08 <HAL_RCC_OscConfig+0x8f8>)
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ec4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ec8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ed0:	4b0f      	ldr	r3, [pc, #60]	; (8006f10 <HAL_RCC_OscConfig+0x900>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d121      	bne.n	8006f20 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <HAL_RCC_OscConfig+0x900>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a0b      	ldr	r2, [pc, #44]	; (8006f10 <HAL_RCC_OscConfig+0x900>)
 8006ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ee8:	f7fc fac6 	bl	8003478 <HAL_GetTick>
 8006eec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef0:	e010      	b.n	8006f14 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef2:	f7fc fac1 	bl	8003478 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b64      	cmp	r3, #100	; 0x64
 8006f00:	d908      	bls.n	8006f14 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e3d1      	b.n	80076aa <HAL_RCC_OscConfig+0x109a>
 8006f06:	bf00      	nop
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	10908120 	.word	0x10908120
 8006f10:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f14:	4b8d      	ldr	r3, [pc, #564]	; (800714c <HAL_RCC_OscConfig+0xb3c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0e8      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d106      	bne.n	8006f3e <HAL_RCC_OscConfig+0x92e>
 8006f30:	4b87      	ldr	r3, [pc, #540]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	4a86      	ldr	r2, [pc, #536]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006f36:	f043 0301 	orr.w	r3, r3, #1
 8006f3a:	6213      	str	r3, [r2, #32]
 8006f3c:	e035      	b.n	8006faa <HAL_RCC_OscConfig+0x99a>
 8006f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10c      	bne.n	8006f68 <HAL_RCC_OscConfig+0x958>
 8006f4e:	4b80      	ldr	r3, [pc, #512]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	4a7f      	ldr	r2, [pc, #508]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006f54:	f023 0301 	bic.w	r3, r3, #1
 8006f58:	6213      	str	r3, [r2, #32]
 8006f5a:	4b7d      	ldr	r3, [pc, #500]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	4a7c      	ldr	r2, [pc, #496]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006f60:	f023 0304 	bic.w	r3, r3, #4
 8006f64:	6213      	str	r3, [r2, #32]
 8006f66:	e020      	b.n	8006faa <HAL_RCC_OscConfig+0x99a>
 8006f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	2b05      	cmp	r3, #5
 8006f76:	d10c      	bne.n	8006f92 <HAL_RCC_OscConfig+0x982>
 8006f78:	4b75      	ldr	r3, [pc, #468]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	4a74      	ldr	r2, [pc, #464]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006f7e:	f043 0304 	orr.w	r3, r3, #4
 8006f82:	6213      	str	r3, [r2, #32]
 8006f84:	4b72      	ldr	r3, [pc, #456]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	4a71      	ldr	r2, [pc, #452]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006f8a:	f043 0301 	orr.w	r3, r3, #1
 8006f8e:	6213      	str	r3, [r2, #32]
 8006f90:	e00b      	b.n	8006faa <HAL_RCC_OscConfig+0x99a>
 8006f92:	4b6f      	ldr	r3, [pc, #444]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	4a6e      	ldr	r2, [pc, #440]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006f98:	f023 0301 	bic.w	r3, r3, #1
 8006f9c:	6213      	str	r3, [r2, #32]
 8006f9e:	4b6c      	ldr	r3, [pc, #432]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	4a6b      	ldr	r2, [pc, #428]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8006fa4:	f023 0304 	bic.w	r3, r3, #4
 8006fa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 8081 	beq.w	80070be <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fbc:	f7fc fa5c 	bl	8003478 <HAL_GetTick>
 8006fc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fc4:	e00b      	b.n	8006fde <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fc6:	f7fc fa57 	bl	8003478 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e365      	b.n	80076aa <HAL_RCC_OscConfig+0x109a>
 8006fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fe2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	fa93 f2a3 	rbit	r2, r3
 8006ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ffc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007006:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800700a:	2202      	movs	r2, #2
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007012:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	fa93 f2a3 	rbit	r2, r3
 800701c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007020:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007024:	601a      	str	r2, [r3, #0]
  return result;
 8007026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800702a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800702e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007030:	fab3 f383 	clz	r3, r3
 8007034:	b2db      	uxtb	r3, r3
 8007036:	095b      	lsrs	r3, r3, #5
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f043 0302 	orr.w	r3, r3, #2
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	d102      	bne.n	800704a <HAL_RCC_OscConfig+0xa3a>
 8007044:	4b42      	ldr	r3, [pc, #264]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	e013      	b.n	8007072 <HAL_RCC_OscConfig+0xa62>
 800704a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800704e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007052:	2202      	movs	r2, #2
 8007054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800705a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	fa93 f2a3 	rbit	r2, r3
 8007064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007068:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	4b38      	ldr	r3, [pc, #224]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007076:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800707a:	2102      	movs	r1, #2
 800707c:	6011      	str	r1, [r2, #0]
 800707e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007082:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	fa92 f1a2 	rbit	r1, r2
 800708c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007090:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8007094:	6011      	str	r1, [r2, #0]
  return result;
 8007096:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800709a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800709e:	6812      	ldr	r2, [r2, #0]
 80070a0:	fab2 f282 	clz	r2, r2
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	f002 021f 	and.w	r2, r2, #31
 80070b0:	2101      	movs	r1, #1
 80070b2:	fa01 f202 	lsl.w	r2, r1, r2
 80070b6:	4013      	ands	r3, r2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d084      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x9b6>
 80070bc:	e083      	b.n	80071c6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070be:	f7fc f9db 	bl	8003478 <HAL_GetTick>
 80070c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070c6:	e00b      	b.n	80070e0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c8:	f7fc f9d6 	bl	8003478 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d8:	4293      	cmp	r3, r2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e2e4      	b.n	80076aa <HAL_RCC_OscConfig+0x109a>
 80070e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070e4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80070e8:	2202      	movs	r2, #2
 80070ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	fa93 f2a3 	rbit	r2, r3
 80070fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007108:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800710c:	2202      	movs	r2, #2
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007114:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	fa93 f2a3 	rbit	r2, r3
 800711e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007122:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007126:	601a      	str	r2, [r3, #0]
  return result;
 8007128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800712c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007130:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007132:	fab3 f383 	clz	r3, r3
 8007136:	b2db      	uxtb	r3, r3
 8007138:	095b      	lsrs	r3, r3, #5
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f043 0302 	orr.w	r3, r3, #2
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d106      	bne.n	8007154 <HAL_RCC_OscConfig+0xb44>
 8007146:	4b02      	ldr	r3, [pc, #8]	; (8007150 <HAL_RCC_OscConfig+0xb40>)
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	e017      	b.n	800717c <HAL_RCC_OscConfig+0xb6c>
 800714c:	40007000 	.word	0x40007000
 8007150:	40021000 	.word	0x40021000
 8007154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007158:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800715c:	2202      	movs	r2, #2
 800715e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007164:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	fa93 f2a3 	rbit	r2, r3
 800716e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007172:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	4bb3      	ldr	r3, [pc, #716]	; (8007448 <HAL_RCC_OscConfig+0xe38>)
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007180:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007184:	2102      	movs	r1, #2
 8007186:	6011      	str	r1, [r2, #0]
 8007188:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800718c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007190:	6812      	ldr	r2, [r2, #0]
 8007192:	fa92 f1a2 	rbit	r1, r2
 8007196:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800719a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800719e:	6011      	str	r1, [r2, #0]
  return result;
 80071a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80071a4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80071a8:	6812      	ldr	r2, [r2, #0]
 80071aa:	fab2 f282 	clz	r2, r2
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	f002 021f 	and.w	r2, r2, #31
 80071ba:	2101      	movs	r1, #1
 80071bc:	fa01 f202 	lsl.w	r2, r1, r2
 80071c0:	4013      	ands	r3, r2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d180      	bne.n	80070c8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80071c6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d105      	bne.n	80071da <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071ce:	4b9e      	ldr	r3, [pc, #632]	; (8007448 <HAL_RCC_OscConfig+0xe38>)
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	4a9d      	ldr	r2, [pc, #628]	; (8007448 <HAL_RCC_OscConfig+0xe38>)
 80071d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071d8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80071de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 825e 	beq.w	80076a8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071ec:	4b96      	ldr	r3, [pc, #600]	; (8007448 <HAL_RCC_OscConfig+0xe38>)
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f003 030c 	and.w	r3, r3, #12
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	f000 821f 	beq.w	8007638 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80071fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	2b02      	cmp	r3, #2
 8007208:	f040 8170 	bne.w	80074ec <HAL_RCC_OscConfig+0xedc>
 800720c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007210:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007214:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800721a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800721e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	fa93 f2a3 	rbit	r2, r3
 8007228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800722c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007230:	601a      	str	r2, [r3, #0]
  return result;
 8007232:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007236:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800723a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800723c:	fab3 f383 	clz	r3, r3
 8007240:	b2db      	uxtb	r3, r3
 8007242:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007246:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	461a      	mov	r2, r3
 800724e:	2300      	movs	r3, #0
 8007250:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007252:	f7fc f911 	bl	8003478 <HAL_GetTick>
 8007256:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800725a:	e009      	b.n	8007270 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800725c:	f7fc f90c 	bl	8003478 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b02      	cmp	r3, #2
 800726a:	d901      	bls.n	8007270 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e21c      	b.n	80076aa <HAL_RCC_OscConfig+0x109a>
 8007270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007274:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007278:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800727c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800727e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007282:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	fa93 f2a3 	rbit	r2, r3
 800728c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007290:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007294:	601a      	str	r2, [r3, #0]
  return result;
 8007296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800729a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800729e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072a0:	fab3 f383 	clz	r3, r3
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d102      	bne.n	80072ba <HAL_RCC_OscConfig+0xcaa>
 80072b4:	4b64      	ldr	r3, [pc, #400]	; (8007448 <HAL_RCC_OscConfig+0xe38>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	e027      	b.n	800730a <HAL_RCC_OscConfig+0xcfa>
 80072ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80072c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80072c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072cc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	fa93 f2a3 	rbit	r2, r3
 80072d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072da:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80072e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072f2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	fa93 f2a3 	rbit	r2, r3
 80072fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007300:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	4b50      	ldr	r3, [pc, #320]	; (8007448 <HAL_RCC_OscConfig+0xe38>)
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800730e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007312:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007316:	6011      	str	r1, [r2, #0]
 8007318:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800731c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007320:	6812      	ldr	r2, [r2, #0]
 8007322:	fa92 f1a2 	rbit	r1, r2
 8007326:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800732a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800732e:	6011      	str	r1, [r2, #0]
  return result;
 8007330:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007334:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8007338:	6812      	ldr	r2, [r2, #0]
 800733a:	fab2 f282 	clz	r2, r2
 800733e:	b2d2      	uxtb	r2, r2
 8007340:	f042 0220 	orr.w	r2, r2, #32
 8007344:	b2d2      	uxtb	r2, r2
 8007346:	f002 021f 	and.w	r2, r2, #31
 800734a:	2101      	movs	r1, #1
 800734c:	fa01 f202 	lsl.w	r2, r1, r2
 8007350:	4013      	ands	r3, r2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d182      	bne.n	800725c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007356:	4b3c      	ldr	r3, [pc, #240]	; (8007448 <HAL_RCC_OscConfig+0xe38>)
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	f023 020f 	bic.w	r2, r3, #15
 800735e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007362:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	4937      	ldr	r1, [pc, #220]	; (8007448 <HAL_RCC_OscConfig+0xe38>)
 800736c:	4313      	orrs	r3, r2
 800736e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007370:	4b35      	ldr	r3, [pc, #212]	; (8007448 <HAL_RCC_OscConfig+0xe38>)
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8007378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800737c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6a19      	ldr	r1, [r3, #32]
 8007384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007388:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	430b      	orrs	r3, r1
 8007392:	492d      	ldr	r1, [pc, #180]	; (8007448 <HAL_RCC_OscConfig+0xe38>)
 8007394:	4313      	orrs	r3, r2
 8007396:	604b      	str	r3, [r1, #4]
 8007398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800739c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80073a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073aa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	fa93 f2a3 	rbit	r2, r3
 80073b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80073bc:	601a      	str	r2, [r3, #0]
  return result;
 80073be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073c2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80073c6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073c8:	fab3 f383 	clz	r3, r3
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80073d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	461a      	mov	r2, r3
 80073da:	2301      	movs	r3, #1
 80073dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073de:	f7fc f84b 	bl	8003478 <HAL_GetTick>
 80073e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073e6:	e009      	b.n	80073fc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073e8:	f7fc f846 	bl	8003478 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e156      	b.n	80076aa <HAL_RCC_OscConfig+0x109a>
 80073fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007400:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800740a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800740e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	fa93 f2a3 	rbit	r2, r3
 8007418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800741c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007420:	601a      	str	r2, [r3, #0]
  return result;
 8007422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007426:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800742a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800742c:	fab3 f383 	clz	r3, r3
 8007430:	b2db      	uxtb	r3, r3
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	b2db      	uxtb	r3, r3
 8007436:	f043 0301 	orr.w	r3, r3, #1
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b01      	cmp	r3, #1
 800743e:	d105      	bne.n	800744c <HAL_RCC_OscConfig+0xe3c>
 8007440:	4b01      	ldr	r3, [pc, #4]	; (8007448 <HAL_RCC_OscConfig+0xe38>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	e02a      	b.n	800749c <HAL_RCC_OscConfig+0xe8c>
 8007446:	bf00      	nop
 8007448:	40021000 	.word	0x40021000
 800744c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007450:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800745a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800745e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	fa93 f2a3 	rbit	r2, r3
 8007468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800746c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007476:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800747a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007484:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	fa93 f2a3 	rbit	r2, r3
 800748e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007492:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	4b86      	ldr	r3, [pc, #536]	; (80076b4 <HAL_RCC_OscConfig+0x10a4>)
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80074a0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80074a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80074a8:	6011      	str	r1, [r2, #0]
 80074aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80074ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80074b2:	6812      	ldr	r2, [r2, #0]
 80074b4:	fa92 f1a2 	rbit	r1, r2
 80074b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80074bc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80074c0:	6011      	str	r1, [r2, #0]
  return result;
 80074c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80074c6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	fab2 f282 	clz	r2, r2
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	f042 0220 	orr.w	r2, r2, #32
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	f002 021f 	and.w	r2, r2, #31
 80074dc:	2101      	movs	r1, #1
 80074de:	fa01 f202 	lsl.w	r2, r1, r2
 80074e2:	4013      	ands	r3, r2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f43f af7f 	beq.w	80073e8 <HAL_RCC_OscConfig+0xdd8>
 80074ea:	e0dd      	b.n	80076a8 <HAL_RCC_OscConfig+0x1098>
 80074ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074f0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80074f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074fe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	fa93 f2a3 	rbit	r2, r3
 8007508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800750c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007510:	601a      	str	r2, [r3, #0]
  return result;
 8007512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007516:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800751a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800751c:	fab3 f383 	clz	r3, r3
 8007520:	b2db      	uxtb	r3, r3
 8007522:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007526:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	461a      	mov	r2, r3
 800752e:	2300      	movs	r3, #0
 8007530:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007532:	f7fb ffa1 	bl	8003478 <HAL_GetTick>
 8007536:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800753a:	e009      	b.n	8007550 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800753c:	f7fb ff9c 	bl	8003478 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e0ac      	b.n	80076aa <HAL_RCC_OscConfig+0x109a>
 8007550:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007554:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007558:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800755c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800755e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007562:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	fa93 f2a3 	rbit	r2, r3
 800756c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007570:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007574:	601a      	str	r2, [r3, #0]
  return result;
 8007576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800757a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800757e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007580:	fab3 f383 	clz	r3, r3
 8007584:	b2db      	uxtb	r3, r3
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	b2db      	uxtb	r3, r3
 800758a:	f043 0301 	orr.w	r3, r3, #1
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d102      	bne.n	800759a <HAL_RCC_OscConfig+0xf8a>
 8007594:	4b47      	ldr	r3, [pc, #284]	; (80076b4 <HAL_RCC_OscConfig+0x10a4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	e027      	b.n	80075ea <HAL_RCC_OscConfig+0xfda>
 800759a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800759e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80075a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80075a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075ac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	fa93 f2a3 	rbit	r2, r3
 80075b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075ba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075c4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80075c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075d2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	fa93 f2a3 	rbit	r2, r3
 80075dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075e0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	4b33      	ldr	r3, [pc, #204]	; (80076b4 <HAL_RCC_OscConfig+0x10a4>)
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80075ee:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80075f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80075f6:	6011      	str	r1, [r2, #0]
 80075f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80075fc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	fa92 f1a2 	rbit	r1, r2
 8007606:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800760a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800760e:	6011      	str	r1, [r2, #0]
  return result;
 8007610:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007614:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8007618:	6812      	ldr	r2, [r2, #0]
 800761a:	fab2 f282 	clz	r2, r2
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	f042 0220 	orr.w	r2, r2, #32
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	f002 021f 	and.w	r2, r2, #31
 800762a:	2101      	movs	r1, #1
 800762c:	fa01 f202 	lsl.w	r2, r1, r2
 8007630:	4013      	ands	r3, r2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d182      	bne.n	800753c <HAL_RCC_OscConfig+0xf2c>
 8007636:	e037      	b.n	80076a8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800763c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e02e      	b.n	80076aa <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800764c:	4b19      	ldr	r3, [pc, #100]	; (80076b4 <HAL_RCC_OscConfig+0x10a4>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8007654:	4b17      	ldr	r3, [pc, #92]	; (80076b4 <HAL_RCC_OscConfig+0x10a4>)
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800765c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007660:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8007664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007668:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	429a      	cmp	r2, r3
 8007672:	d117      	bne.n	80076a4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007674:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007678:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800767c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007680:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007688:	429a      	cmp	r2, r3
 800768a:	d10b      	bne.n	80076a4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800768c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007690:	f003 020f 	and.w	r2, r3, #15
 8007694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007698:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d001      	beq.n	80076a8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e000      	b.n	80076aa <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	40021000 	.word	0x40021000

080076b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b09e      	sub	sp, #120	; 0x78
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e162      	b.n	8007996 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076d0:	4b90      	ldr	r3, [pc, #576]	; (8007914 <HAL_RCC_ClockConfig+0x25c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d910      	bls.n	8007700 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076de:	4b8d      	ldr	r3, [pc, #564]	; (8007914 <HAL_RCC_ClockConfig+0x25c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f023 0207 	bic.w	r2, r3, #7
 80076e6:	498b      	ldr	r1, [pc, #556]	; (8007914 <HAL_RCC_ClockConfig+0x25c>)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ee:	4b89      	ldr	r3, [pc, #548]	; (8007914 <HAL_RCC_ClockConfig+0x25c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d001      	beq.n	8007700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e14a      	b.n	8007996 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d008      	beq.n	800771e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800770c:	4b82      	ldr	r3, [pc, #520]	; (8007918 <HAL_RCC_ClockConfig+0x260>)
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	497f      	ldr	r1, [pc, #508]	; (8007918 <HAL_RCC_ClockConfig+0x260>)
 800771a:	4313      	orrs	r3, r2
 800771c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 80dc 	beq.w	80078e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d13c      	bne.n	80077ae <HAL_RCC_ClockConfig+0xf6>
 8007734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007738:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800773a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800773c:	fa93 f3a3 	rbit	r3, r3
 8007740:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007744:	fab3 f383 	clz	r3, r3
 8007748:	b2db      	uxtb	r3, r3
 800774a:	095b      	lsrs	r3, r3, #5
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f043 0301 	orr.w	r3, r3, #1
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b01      	cmp	r3, #1
 8007756:	d102      	bne.n	800775e <HAL_RCC_ClockConfig+0xa6>
 8007758:	4b6f      	ldr	r3, [pc, #444]	; (8007918 <HAL_RCC_ClockConfig+0x260>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	e00f      	b.n	800777e <HAL_RCC_ClockConfig+0xc6>
 800775e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007762:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007766:	fa93 f3a3 	rbit	r3, r3
 800776a:	667b      	str	r3, [r7, #100]	; 0x64
 800776c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007770:	663b      	str	r3, [r7, #96]	; 0x60
 8007772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007774:	fa93 f3a3 	rbit	r3, r3
 8007778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800777a:	4b67      	ldr	r3, [pc, #412]	; (8007918 <HAL_RCC_ClockConfig+0x260>)
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007782:	65ba      	str	r2, [r7, #88]	; 0x58
 8007784:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007786:	fa92 f2a2 	rbit	r2, r2
 800778a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800778c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800778e:	fab2 f282 	clz	r2, r2
 8007792:	b2d2      	uxtb	r2, r2
 8007794:	f042 0220 	orr.w	r2, r2, #32
 8007798:	b2d2      	uxtb	r2, r2
 800779a:	f002 021f 	and.w	r2, r2, #31
 800779e:	2101      	movs	r1, #1
 80077a0:	fa01 f202 	lsl.w	r2, r1, r2
 80077a4:	4013      	ands	r3, r2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d17b      	bne.n	80078a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e0f3      	b.n	8007996 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d13c      	bne.n	8007830 <HAL_RCC_ClockConfig+0x178>
 80077b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077be:	fa93 f3a3 	rbit	r3, r3
 80077c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80077c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077c6:	fab3 f383 	clz	r3, r3
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	095b      	lsrs	r3, r3, #5
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	f043 0301 	orr.w	r3, r3, #1
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d102      	bne.n	80077e0 <HAL_RCC_ClockConfig+0x128>
 80077da:	4b4f      	ldr	r3, [pc, #316]	; (8007918 <HAL_RCC_ClockConfig+0x260>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	e00f      	b.n	8007800 <HAL_RCC_ClockConfig+0x148>
 80077e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e8:	fa93 f3a3 	rbit	r3, r3
 80077ec:	647b      	str	r3, [r7, #68]	; 0x44
 80077ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077f2:	643b      	str	r3, [r7, #64]	; 0x40
 80077f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f6:	fa93 f3a3 	rbit	r3, r3
 80077fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077fc:	4b46      	ldr	r3, [pc, #280]	; (8007918 <HAL_RCC_ClockConfig+0x260>)
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007804:	63ba      	str	r2, [r7, #56]	; 0x38
 8007806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007808:	fa92 f2a2 	rbit	r2, r2
 800780c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800780e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007810:	fab2 f282 	clz	r2, r2
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	f042 0220 	orr.w	r2, r2, #32
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	f002 021f 	and.w	r2, r2, #31
 8007820:	2101      	movs	r1, #1
 8007822:	fa01 f202 	lsl.w	r2, r1, r2
 8007826:	4013      	ands	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d13a      	bne.n	80078a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e0b2      	b.n	8007996 <HAL_RCC_ClockConfig+0x2de>
 8007830:	2302      	movs	r3, #2
 8007832:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	fa93 f3a3 	rbit	r3, r3
 800783a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800783e:	fab3 f383 	clz	r3, r3
 8007842:	b2db      	uxtb	r3, r3
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b01      	cmp	r3, #1
 8007850:	d102      	bne.n	8007858 <HAL_RCC_ClockConfig+0x1a0>
 8007852:	4b31      	ldr	r3, [pc, #196]	; (8007918 <HAL_RCC_ClockConfig+0x260>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	e00d      	b.n	8007874 <HAL_RCC_ClockConfig+0x1bc>
 8007858:	2302      	movs	r3, #2
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	fa93 f3a3 	rbit	r3, r3
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
 8007864:	2302      	movs	r3, #2
 8007866:	623b      	str	r3, [r7, #32]
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	fa93 f3a3 	rbit	r3, r3
 800786e:	61fb      	str	r3, [r7, #28]
 8007870:	4b29      	ldr	r3, [pc, #164]	; (8007918 <HAL_RCC_ClockConfig+0x260>)
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	2202      	movs	r2, #2
 8007876:	61ba      	str	r2, [r7, #24]
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	fa92 f2a2 	rbit	r2, r2
 800787e:	617a      	str	r2, [r7, #20]
  return result;
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	fab2 f282 	clz	r2, r2
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	f042 0220 	orr.w	r2, r2, #32
 800788c:	b2d2      	uxtb	r2, r2
 800788e:	f002 021f 	and.w	r2, r2, #31
 8007892:	2101      	movs	r1, #1
 8007894:	fa01 f202 	lsl.w	r2, r1, r2
 8007898:	4013      	ands	r3, r2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e079      	b.n	8007996 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078a2:	4b1d      	ldr	r3, [pc, #116]	; (8007918 <HAL_RCC_ClockConfig+0x260>)
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f023 0203 	bic.w	r2, r3, #3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	491a      	ldr	r1, [pc, #104]	; (8007918 <HAL_RCC_ClockConfig+0x260>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078b4:	f7fb fde0 	bl	8003478 <HAL_GetTick>
 80078b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ba:	e00a      	b.n	80078d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078bc:	f7fb fddc 	bl	8003478 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e061      	b.n	8007996 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d2:	4b11      	ldr	r3, [pc, #68]	; (8007918 <HAL_RCC_ClockConfig+0x260>)
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f003 020c 	and.w	r2, r3, #12
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d1eb      	bne.n	80078bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078e4:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <HAL_RCC_ClockConfig+0x25c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0307 	and.w	r3, r3, #7
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d214      	bcs.n	800791c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078f2:	4b08      	ldr	r3, [pc, #32]	; (8007914 <HAL_RCC_ClockConfig+0x25c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f023 0207 	bic.w	r2, r3, #7
 80078fa:	4906      	ldr	r1, [pc, #24]	; (8007914 <HAL_RCC_ClockConfig+0x25c>)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	4313      	orrs	r3, r2
 8007900:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007902:	4b04      	ldr	r3, [pc, #16]	; (8007914 <HAL_RCC_ClockConfig+0x25c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	429a      	cmp	r2, r3
 800790e:	d005      	beq.n	800791c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e040      	b.n	8007996 <HAL_RCC_ClockConfig+0x2de>
 8007914:	40022000 	.word	0x40022000
 8007918:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007928:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <HAL_RCC_ClockConfig+0x2e8>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	491a      	ldr	r1, [pc, #104]	; (80079a0 <HAL_RCC_ClockConfig+0x2e8>)
 8007936:	4313      	orrs	r3, r2
 8007938:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0308 	and.w	r3, r3, #8
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007946:	4b16      	ldr	r3, [pc, #88]	; (80079a0 <HAL_RCC_ClockConfig+0x2e8>)
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	4912      	ldr	r1, [pc, #72]	; (80079a0 <HAL_RCC_ClockConfig+0x2e8>)
 8007956:	4313      	orrs	r3, r2
 8007958:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800795a:	f000 f829 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 800795e:	4601      	mov	r1, r0
 8007960:	4b0f      	ldr	r3, [pc, #60]	; (80079a0 <HAL_RCC_ClockConfig+0x2e8>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007968:	22f0      	movs	r2, #240	; 0xf0
 800796a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	fa92 f2a2 	rbit	r2, r2
 8007972:	60fa      	str	r2, [r7, #12]
  return result;
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	fab2 f282 	clz	r2, r2
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	40d3      	lsrs	r3, r2
 800797e:	4a09      	ldr	r2, [pc, #36]	; (80079a4 <HAL_RCC_ClockConfig+0x2ec>)
 8007980:	5cd3      	ldrb	r3, [r2, r3]
 8007982:	fa21 f303 	lsr.w	r3, r1, r3
 8007986:	4a08      	ldr	r2, [pc, #32]	; (80079a8 <HAL_RCC_ClockConfig+0x2f0>)
 8007988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800798a:	4b08      	ldr	r3, [pc, #32]	; (80079ac <HAL_RCC_ClockConfig+0x2f4>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f7fb fb56 	bl	8003040 <HAL_InitTick>
  
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3778      	adds	r7, #120	; 0x78
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	40021000 	.word	0x40021000
 80079a4:	08010edc 	.word	0x08010edc
 80079a8:	20000004 	.word	0x20000004
 80079ac:	20000008 	.word	0x20000008

080079b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b08b      	sub	sp, #44	; 0x2c
 80079b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	61fb      	str	r3, [r7, #28]
 80079ba:	2300      	movs	r3, #0
 80079bc:	61bb      	str	r3, [r7, #24]
 80079be:	2300      	movs	r3, #0
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
 80079c2:	2300      	movs	r3, #0
 80079c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80079ca:	4b2a      	ldr	r3, [pc, #168]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xc4>)
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	f003 030c 	and.w	r3, r3, #12
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d002      	beq.n	80079e0 <HAL_RCC_GetSysClockFreq+0x30>
 80079da:	2b08      	cmp	r3, #8
 80079dc:	d003      	beq.n	80079e6 <HAL_RCC_GetSysClockFreq+0x36>
 80079de:	e03f      	b.n	8007a60 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80079e0:	4b25      	ldr	r3, [pc, #148]	; (8007a78 <HAL_RCC_GetSysClockFreq+0xc8>)
 80079e2:	623b      	str	r3, [r7, #32]
      break;
 80079e4:	e03f      	b.n	8007a66 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80079ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80079f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	fa92 f2a2 	rbit	r2, r2
 80079f8:	607a      	str	r2, [r7, #4]
  return result;
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	fab2 f282 	clz	r2, r2
 8007a00:	b2d2      	uxtb	r2, r2
 8007a02:	40d3      	lsrs	r3, r2
 8007a04:	4a1d      	ldr	r2, [pc, #116]	; (8007a7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8007a06:	5cd3      	ldrb	r3, [r2, r3]
 8007a08:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007a0a:	4b1a      	ldr	r3, [pc, #104]	; (8007a74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0e:	f003 030f 	and.w	r3, r3, #15
 8007a12:	220f      	movs	r2, #15
 8007a14:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	fa92 f2a2 	rbit	r2, r2
 8007a1c:	60fa      	str	r2, [r7, #12]
  return result;
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	fab2 f282 	clz	r2, r2
 8007a24:	b2d2      	uxtb	r2, r2
 8007a26:	40d3      	lsrs	r3, r2
 8007a28:	4a15      	ldr	r2, [pc, #84]	; (8007a80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007a2a:	5cd3      	ldrb	r3, [r2, r3]
 8007a2c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d008      	beq.n	8007a4a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007a38:	4a0f      	ldr	r2, [pc, #60]	; (8007a78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	fb02 f303 	mul.w	r3, r2, r3
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
 8007a48:	e007      	b.n	8007a5a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007a4a:	4a0b      	ldr	r2, [pc, #44]	; (8007a78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	fb02 f303 	mul.w	r3, r2, r3
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	623b      	str	r3, [r7, #32]
      break;
 8007a5e:	e002      	b.n	8007a66 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007a62:	623b      	str	r3, [r7, #32]
      break;
 8007a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a66:	6a3b      	ldr	r3, [r7, #32]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	372c      	adds	r7, #44	; 0x2c
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	40021000 	.word	0x40021000
 8007a78:	007a1200 	.word	0x007a1200
 8007a7c:	08010ef4 	.word	0x08010ef4
 8007a80:	08010f04 	.word	0x08010f04

08007a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a88:	4b03      	ldr	r3, [pc, #12]	; (8007a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	20000004 	.word	0x20000004

08007a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007aa2:	f7ff ffef 	bl	8007a84 <HAL_RCC_GetHCLKFreq>
 8007aa6:	4601      	mov	r1, r0
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ab0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007ab4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	fa92 f2a2 	rbit	r2, r2
 8007abc:	603a      	str	r2, [r7, #0]
  return result;
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	fab2 f282 	clz	r2, r2
 8007ac4:	b2d2      	uxtb	r2, r2
 8007ac6:	40d3      	lsrs	r3, r2
 8007ac8:	4a04      	ldr	r2, [pc, #16]	; (8007adc <HAL_RCC_GetPCLK1Freq+0x40>)
 8007aca:	5cd3      	ldrb	r3, [r2, r3]
 8007acc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	40021000 	.word	0x40021000
 8007adc:	08010eec 	.word	0x08010eec

08007ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007ae6:	f7ff ffcd 	bl	8007a84 <HAL_RCC_GetHCLKFreq>
 8007aea:	4601      	mov	r1, r0
 8007aec:	4b0b      	ldr	r3, [pc, #44]	; (8007b1c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007af4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007af8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	fa92 f2a2 	rbit	r2, r2
 8007b00:	603a      	str	r2, [r7, #0]
  return result;
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	fab2 f282 	clz	r2, r2
 8007b08:	b2d2      	uxtb	r2, r2
 8007b0a:	40d3      	lsrs	r3, r2
 8007b0c:	4a04      	ldr	r2, [pc, #16]	; (8007b20 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007b0e:	5cd3      	ldrb	r3, [r2, r3]
 8007b10:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	08010eec 	.word	0x08010eec

08007b24 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	220f      	movs	r2, #15
 8007b32:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b34:	4b12      	ldr	r3, [pc, #72]	; (8007b80 <HAL_RCC_GetClockConfig+0x5c>)
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f003 0203 	and.w	r2, r3, #3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8007b40:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <HAL_RCC_GetClockConfig+0x5c>)
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8007b4c:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <HAL_RCC_GetClockConfig+0x5c>)
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007b58:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <HAL_RCC_GetClockConfig+0x5c>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	08db      	lsrs	r3, r3, #3
 8007b5e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8007b66:	4b07      	ldr	r3, [pc, #28]	; (8007b84 <HAL_RCC_GetClockConfig+0x60>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0207 	and.w	r2, r3, #7
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	601a      	str	r2, [r3, #0]
}
 8007b72:	bf00      	nop
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	40021000 	.word	0x40021000
 8007b84:	40022000 	.word	0x40022000

08007b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b092      	sub	sp, #72	; 0x48
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 80d4 	beq.w	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bac:	4b4e      	ldr	r3, [pc, #312]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10e      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bb8:	4b4b      	ldr	r3, [pc, #300]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	4a4a      	ldr	r2, [pc, #296]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc2:	61d3      	str	r3, [r2, #28]
 8007bc4:	4b48      	ldr	r3, [pc, #288]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bcc:	60bb      	str	r3, [r7, #8]
 8007bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bd6:	4b45      	ldr	r3, [pc, #276]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d118      	bne.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007be2:	4b42      	ldr	r3, [pc, #264]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a41      	ldr	r2, [pc, #260]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bee:	f7fb fc43 	bl	8003478 <HAL_GetTick>
 8007bf2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bf4:	e008      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bf6:	f7fb fc3f 	bl	8003478 <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b64      	cmp	r3, #100	; 0x64
 8007c02:	d901      	bls.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e1d6      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c08:	4b38      	ldr	r3, [pc, #224]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0f0      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c14:	4b34      	ldr	r3, [pc, #208]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 8084 	beq.w	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d07c      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c34:	4b2c      	ldr	r3, [pc, #176]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	fa93 f3a3 	rbit	r3, r3
 8007c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c4e:	fab3 f383 	clz	r3, r3
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	461a      	mov	r2, r3
 8007c56:	4b26      	ldr	r3, [pc, #152]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	2301      	movs	r3, #1
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	fa93 f3a3 	rbit	r3, r3
 8007c6e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c72:	fab3 f383 	clz	r3, r3
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4b1d      	ldr	r3, [pc, #116]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	461a      	mov	r2, r3
 8007c82:	2300      	movs	r3, #0
 8007c84:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007c86:	4a18      	ldr	r2, [pc, #96]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d04b      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c96:	f7fb fbef 	bl	8003478 <HAL_GetTick>
 8007c9a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c9c:	e00a      	b.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c9e:	f7fb fbeb 	bl	8003478 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d901      	bls.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e180      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	fa93 f3a3 	rbit	r3, r3
 8007cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	623b      	str	r3, [r7, #32]
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	fa93 f3a3 	rbit	r3, r3
 8007cca:	61fb      	str	r3, [r7, #28]
  return result;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cce:	fab3 f383 	clz	r3, r3
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	095b      	lsrs	r3, r3, #5
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	f043 0302 	orr.w	r3, r3, #2
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d108      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007ce2:	4b01      	ldr	r3, [pc, #4]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	e00d      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007ce8:	40021000 	.word	0x40021000
 8007cec:	40007000 	.word	0x40007000
 8007cf0:	10908100 	.word	0x10908100
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	fa93 f3a3 	rbit	r3, r3
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	4b9a      	ldr	r3, [pc, #616]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	2202      	movs	r2, #2
 8007d06:	613a      	str	r2, [r7, #16]
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	fa92 f2a2 	rbit	r2, r2
 8007d0e:	60fa      	str	r2, [r7, #12]
  return result;
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	fab2 f282 	clz	r2, r2
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	f002 021f 	and.w	r2, r2, #31
 8007d22:	2101      	movs	r1, #1
 8007d24:	fa01 f202 	lsl.w	r2, r1, r2
 8007d28:	4013      	ands	r3, r2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0b7      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007d2e:	4b8f      	ldr	r3, [pc, #572]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	498c      	ldr	r1, [pc, #560]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d105      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d48:	4b88      	ldr	r3, [pc, #544]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	4a87      	ldr	r2, [pc, #540]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d60:	4b82      	ldr	r3, [pc, #520]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d64:	f023 0203 	bic.w	r2, r3, #3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	497f      	ldr	r1, [pc, #508]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d008      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d7e:	4b7b      	ldr	r3, [pc, #492]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	4978      	ldr	r1, [pc, #480]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d008      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d9c:	4b73      	ldr	r3, [pc, #460]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	4970      	ldr	r1, [pc, #448]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d008      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007dba:	4b6c      	ldr	r3, [pc, #432]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbe:	f023 0210 	bic.w	r2, r3, #16
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	4969      	ldr	r1, [pc, #420]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d008      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007dd8:	4b64      	ldr	r3, [pc, #400]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de4:	4961      	ldr	r1, [pc, #388]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007df6:	4b5d      	ldr	r3, [pc, #372]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfa:	f023 0220 	bic.w	r2, r3, #32
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	495a      	ldr	r1, [pc, #360]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d008      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e14:	4b55      	ldr	r3, [pc, #340]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e18:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	4952      	ldr	r1, [pc, #328]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d008      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e32:	4b4e      	ldr	r3, [pc, #312]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	494b      	ldr	r1, [pc, #300]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0310 	and.w	r3, r3, #16
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e50:	4b46      	ldr	r3, [pc, #280]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	4943      	ldr	r1, [pc, #268]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d008      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e6e:	4b3f      	ldr	r3, [pc, #252]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	493c      	ldr	r1, [pc, #240]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d008      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007e8c:	4b37      	ldr	r3, [pc, #220]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	4934      	ldr	r1, [pc, #208]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d008      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007eaa:	4b30      	ldr	r3, [pc, #192]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb6:	492d      	ldr	r1, [pc, #180]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d008      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007ec8:	4b28      	ldr	r3, [pc, #160]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed4:	4925      	ldr	r1, [pc, #148]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d008      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007ee6:	4b21      	ldr	r3, [pc, #132]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	491e      	ldr	r1, [pc, #120]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d008      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007f04:	4b19      	ldr	r3, [pc, #100]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f10:	4916      	ldr	r1, [pc, #88]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d008      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007f22:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	490f      	ldr	r1, [pc, #60]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007f40:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f44:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4c:	4907      	ldr	r1, [pc, #28]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00c      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007f5e:	4b03      	ldr	r3, [pc, #12]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f62:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	e002      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007f6a:	bf00      	nop
 8007f6c:	40021000 	.word	0x40021000
 8007f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f72:	4913      	ldr	r1, [pc, #76]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d008      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007f84:	4b0e      	ldr	r3, [pc, #56]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f90:	490b      	ldr	r1, [pc, #44]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d008      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8007fa2:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fae:	4904      	ldr	r1, [pc, #16]	; (8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3748      	adds	r7, #72	; 0x48
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	40021000 	.word	0x40021000

08007fc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e09d      	b.n	8008112 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d108      	bne.n	8007ff0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fe6:	d009      	beq.n	8007ffc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	61da      	str	r2, [r3, #28]
 8007fee:	e005      	b.n	8007ffc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d106      	bne.n	800801c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7fa fd9c 	bl	8002b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008032:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800803c:	d902      	bls.n	8008044 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800803e:	2300      	movs	r3, #0
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	e002      	b.n	800804a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008048:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008052:	d007      	beq.n	8008064 <HAL_SPI_Init+0xa0>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800805c:	d002      	beq.n	8008064 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008074:	431a      	orrs	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	431a      	orrs	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	431a      	orrs	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800809c:	431a      	orrs	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a6:	ea42 0103 	orr.w	r1, r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	0c1b      	lsrs	r3, r3, #16
 80080c0:	f003 0204 	and.w	r2, r3, #4
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	f003 0310 	and.w	r3, r3, #16
 80080cc:	431a      	orrs	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d2:	f003 0308 	and.w	r3, r3, #8
 80080d6:	431a      	orrs	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80080e0:	ea42 0103 	orr.w	r1, r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69da      	ldr	r2, [r3, #28]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008100:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b088      	sub	sp, #32
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	60b9      	str	r1, [r7, #8]
 8008124:	603b      	str	r3, [r7, #0]
 8008126:	4613      	mov	r3, r2
 8008128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008134:	2b01      	cmp	r3, #1
 8008136:	d101      	bne.n	800813c <HAL_SPI_Transmit+0x22>
 8008138:	2302      	movs	r3, #2
 800813a:	e15f      	b.n	80083fc <HAL_SPI_Transmit+0x2e2>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008144:	f7fb f998 	bl	8003478 <HAL_GetTick>
 8008148:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800814a:	88fb      	ldrh	r3, [r7, #6]
 800814c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b01      	cmp	r3, #1
 8008158:	d002      	beq.n	8008160 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800815a:	2302      	movs	r3, #2
 800815c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800815e:	e148      	b.n	80083f2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <HAL_SPI_Transmit+0x52>
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008170:	e13f      	b.n	80083f2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2203      	movs	r2, #3
 8008176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	88fa      	ldrh	r2, [r7, #6]
 800818a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	88fa      	ldrh	r2, [r7, #6]
 8008190:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081bc:	d10f      	bne.n	80081de <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e8:	2b40      	cmp	r3, #64	; 0x40
 80081ea:	d007      	beq.n	80081fc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008204:	d94f      	bls.n	80082a6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <HAL_SPI_Transmit+0xfa>
 800820e:	8afb      	ldrh	r3, [r7, #22]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d142      	bne.n	800829a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	881a      	ldrh	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008224:	1c9a      	adds	r2, r3, #2
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800822e:	b29b      	uxth	r3, r3
 8008230:	3b01      	subs	r3, #1
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008238:	e02f      	b.n	800829a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b02      	cmp	r3, #2
 8008246:	d112      	bne.n	800826e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824c:	881a      	ldrh	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008258:	1c9a      	adds	r2, r3, #2
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008262:	b29b      	uxth	r3, r3
 8008264:	3b01      	subs	r3, #1
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800826c:	e015      	b.n	800829a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800826e:	f7fb f903 	bl	8003478 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d803      	bhi.n	8008286 <HAL_SPI_Transmit+0x16c>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008284:	d102      	bne.n	800828c <HAL_SPI_Transmit+0x172>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008298:	e0ab      	b.n	80083f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800829e:	b29b      	uxth	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1ca      	bne.n	800823a <HAL_SPI_Transmit+0x120>
 80082a4:	e080      	b.n	80083a8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <HAL_SPI_Transmit+0x19a>
 80082ae:	8afb      	ldrh	r3, [r7, #22]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d174      	bne.n	800839e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d912      	bls.n	80082e4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c2:	881a      	ldrh	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	1c9a      	adds	r2, r3, #2
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b02      	subs	r3, #2
 80082dc:	b29a      	uxth	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082e2:	e05c      	b.n	800839e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	330c      	adds	r3, #12
 80082ee:	7812      	ldrb	r2, [r2, #0]
 80082f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008300:	b29b      	uxth	r3, r3
 8008302:	3b01      	subs	r3, #1
 8008304:	b29a      	uxth	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800830a:	e048      	b.n	800839e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b02      	cmp	r3, #2
 8008318:	d12b      	bne.n	8008372 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800831e:	b29b      	uxth	r3, r3
 8008320:	2b01      	cmp	r3, #1
 8008322:	d912      	bls.n	800834a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	881a      	ldrh	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	1c9a      	adds	r2, r3, #2
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800833e:	b29b      	uxth	r3, r3
 8008340:	3b02      	subs	r3, #2
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008348:	e029      	b.n	800839e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	330c      	adds	r3, #12
 8008354:	7812      	ldrb	r2, [r2, #0]
 8008356:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008366:	b29b      	uxth	r3, r3
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008370:	e015      	b.n	800839e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008372:	f7fb f881 	bl	8003478 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d803      	bhi.n	800838a <HAL_SPI_Transmit+0x270>
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008388:	d102      	bne.n	8008390 <HAL_SPI_Transmit+0x276>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800839c:	e029      	b.n	80083f2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1b1      	bne.n	800830c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083a8:	69ba      	ldr	r2, [r7, #24]
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 fcf9 	bl	8008da4 <SPI_EndRxTxTransaction>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2220      	movs	r2, #32
 80083bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10a      	bne.n	80083dc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083c6:	2300      	movs	r3, #0
 80083c8:	613b      	str	r3, [r7, #16]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	613b      	str	r3, [r7, #16]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	613b      	str	r3, [r7, #16]
 80083da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d002      	beq.n	80083ea <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	77fb      	strb	r3, [r7, #31]
 80083e8:	e003      	b.n	80083f2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80083fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3720      	adds	r7, #32
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af02      	add	r7, sp, #8
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	4613      	mov	r3, r2
 8008412:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b01      	cmp	r3, #1
 8008422:	d002      	beq.n	800842a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8008424:	2302      	movs	r3, #2
 8008426:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008428:	e11a      	b.n	8008660 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008432:	d112      	bne.n	800845a <HAL_SPI_Receive+0x56>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10e      	bne.n	800845a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2204      	movs	r2, #4
 8008440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008444:	88fa      	ldrh	r2, [r7, #6]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	4613      	mov	r3, r2
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f000 f90e 	bl	8008672 <HAL_SPI_TransmitReceive>
 8008456:	4603      	mov	r3, r0
 8008458:	e107      	b.n	800866a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_SPI_Receive+0x64>
 8008464:	2302      	movs	r3, #2
 8008466:	e100      	b.n	800866a <HAL_SPI_Receive+0x266>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008470:	f7fb f802 	bl	8003478 <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <HAL_SPI_Receive+0x7e>
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008486:	e0eb      	b.n	8008660 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2204      	movs	r2, #4
 800848c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	88fa      	ldrh	r2, [r7, #6]
 80084a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	88fa      	ldrh	r2, [r7, #6]
 80084a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084d2:	d908      	bls.n	80084e6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084e2:	605a      	str	r2, [r3, #4]
 80084e4:	e007      	b.n	80084f6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084fe:	d10f      	bne.n	8008520 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800850e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800851e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852a:	2b40      	cmp	r3, #64	; 0x40
 800852c:	d007      	beq.n	800853e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800853c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008546:	d86f      	bhi.n	8008628 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008548:	e034      	b.n	80085b4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b01      	cmp	r3, #1
 8008556:	d117      	bne.n	8008588 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f103 020c 	add.w	r2, r3, #12
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008564:	7812      	ldrb	r2, [r2, #0]
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800857a:	b29b      	uxth	r3, r3
 800857c:	3b01      	subs	r3, #1
 800857e:	b29a      	uxth	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008586:	e015      	b.n	80085b4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008588:	f7fa ff76 	bl	8003478 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d803      	bhi.n	80085a0 <HAL_SPI_Receive+0x19c>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d102      	bne.n	80085a6 <HAL_SPI_Receive+0x1a2>
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d106      	bne.n	80085b4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80085b2:	e055      	b.n	8008660 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1c4      	bne.n	800854a <HAL_SPI_Receive+0x146>
 80085c0:	e038      	b.n	8008634 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d115      	bne.n	80085fc <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085da:	b292      	uxth	r2, r2
 80085dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e2:	1c9a      	adds	r2, r3, #2
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	3b01      	subs	r3, #1
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80085fa:	e015      	b.n	8008628 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085fc:	f7fa ff3c 	bl	8003478 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	429a      	cmp	r2, r3
 800860a:	d803      	bhi.n	8008614 <HAL_SPI_Receive+0x210>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008612:	d102      	bne.n	800861a <HAL_SPI_Receive+0x216>
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d106      	bne.n	8008628 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008626:	e01b      	b.n	8008660 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800862e:	b29b      	uxth	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1c6      	bne.n	80085c2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fb5b 	bl	8008cf4 <SPI_EndRxTransaction>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d002      	beq.n	800864a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2220      	movs	r2, #32
 8008648:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	75fb      	strb	r3, [r7, #23]
 8008656:	e003      	b.n	8008660 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b08a      	sub	sp, #40	; 0x28
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	607a      	str	r2, [r7, #4]
 800867e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008680:	2301      	movs	r3, #1
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_SPI_TransmitReceive+0x26>
 8008694:	2302      	movs	r3, #2
 8008696:	e20a      	b.n	8008aae <HAL_SPI_TransmitReceive+0x43c>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086a0:	f7fa feea 	bl	8003478 <HAL_GetTick>
 80086a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80086ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80086b4:	887b      	ldrh	r3, [r7, #2]
 80086b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80086b8:	887b      	ldrh	r3, [r7, #2]
 80086ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80086bc:	7efb      	ldrb	r3, [r7, #27]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d00e      	beq.n	80086e0 <HAL_SPI_TransmitReceive+0x6e>
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086c8:	d106      	bne.n	80086d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d102      	bne.n	80086d8 <HAL_SPI_TransmitReceive+0x66>
 80086d2:	7efb      	ldrb	r3, [r7, #27]
 80086d4:	2b04      	cmp	r3, #4
 80086d6:	d003      	beq.n	80086e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80086d8:	2302      	movs	r3, #2
 80086da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80086de:	e1e0      	b.n	8008aa2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d005      	beq.n	80086f2 <HAL_SPI_TransmitReceive+0x80>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <HAL_SPI_TransmitReceive+0x80>
 80086ec:	887b      	ldrh	r3, [r7, #2]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d103      	bne.n	80086fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80086f8:	e1d3      	b.n	8008aa2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b04      	cmp	r3, #4
 8008704:	d003      	beq.n	800870e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2205      	movs	r2, #5
 800870a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	887a      	ldrh	r2, [r7, #2]
 800871e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	887a      	ldrh	r2, [r7, #2]
 8008726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	887a      	ldrh	r2, [r7, #2]
 8008734:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	887a      	ldrh	r2, [r7, #2]
 800873a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008750:	d802      	bhi.n	8008758 <HAL_SPI_TransmitReceive+0xe6>
 8008752:	8a3b      	ldrh	r3, [r7, #16]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d908      	bls.n	800876a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008766:	605a      	str	r2, [r3, #4]
 8008768:	e007      	b.n	800877a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008778:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008784:	2b40      	cmp	r3, #64	; 0x40
 8008786:	d007      	beq.n	8008798 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008796:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80087a0:	f240 8081 	bls.w	80088a6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <HAL_SPI_TransmitReceive+0x140>
 80087ac:	8a7b      	ldrh	r3, [r7, #18]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d16d      	bne.n	800888e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	881a      	ldrh	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	1c9a      	adds	r2, r3, #2
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087d6:	e05a      	b.n	800888e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d11b      	bne.n	800881e <HAL_SPI_TransmitReceive+0x1ac>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d016      	beq.n	800881e <HAL_SPI_TransmitReceive+0x1ac>
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d113      	bne.n	800881e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	881a      	ldrh	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	1c9a      	adds	r2, r3, #2
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b01      	cmp	r3, #1
 800882a:	d11c      	bne.n	8008866 <HAL_SPI_TransmitReceive+0x1f4>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008832:	b29b      	uxth	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d016      	beq.n	8008866 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68da      	ldr	r2, [r3, #12]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	b292      	uxth	r2, r2
 8008844:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	1c9a      	adds	r2, r3, #2
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008856:	b29b      	uxth	r3, r3
 8008858:	3b01      	subs	r3, #1
 800885a:	b29a      	uxth	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008862:	2301      	movs	r3, #1
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008866:	f7fa fe07 	bl	8003478 <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008872:	429a      	cmp	r2, r3
 8008874:	d80b      	bhi.n	800888e <HAL_SPI_TransmitReceive+0x21c>
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887c:	d007      	beq.n	800888e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800888c:	e109      	b.n	8008aa2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008892:	b29b      	uxth	r3, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	d19f      	bne.n	80087d8 <HAL_SPI_TransmitReceive+0x166>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800889e:	b29b      	uxth	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d199      	bne.n	80087d8 <HAL_SPI_TransmitReceive+0x166>
 80088a4:	e0e3      	b.n	8008a6e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d003      	beq.n	80088b6 <HAL_SPI_TransmitReceive+0x244>
 80088ae:	8a7b      	ldrh	r3, [r7, #18]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	f040 80cf 	bne.w	8008a54 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d912      	bls.n	80088e6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c4:	881a      	ldrh	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d0:	1c9a      	adds	r2, r3, #2
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088da:	b29b      	uxth	r3, r3
 80088dc:	3b02      	subs	r3, #2
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088e4:	e0b6      	b.n	8008a54 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	330c      	adds	r3, #12
 80088f0:	7812      	ldrb	r2, [r2, #0]
 80088f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008902:	b29b      	uxth	r3, r3
 8008904:	3b01      	subs	r3, #1
 8008906:	b29a      	uxth	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800890c:	e0a2      	b.n	8008a54 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	2b02      	cmp	r3, #2
 800891a:	d134      	bne.n	8008986 <HAL_SPI_TransmitReceive+0x314>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008920:	b29b      	uxth	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d02f      	beq.n	8008986 <HAL_SPI_TransmitReceive+0x314>
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	2b01      	cmp	r3, #1
 800892a:	d12c      	bne.n	8008986 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008930:	b29b      	uxth	r3, r3
 8008932:	2b01      	cmp	r3, #1
 8008934:	d912      	bls.n	800895c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	881a      	ldrh	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008946:	1c9a      	adds	r2, r3, #2
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008950:	b29b      	uxth	r3, r3
 8008952:	3b02      	subs	r3, #2
 8008954:	b29a      	uxth	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	87da      	strh	r2, [r3, #62]	; 0x3e
 800895a:	e012      	b.n	8008982 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	330c      	adds	r3, #12
 8008966:	7812      	ldrb	r2, [r2, #0]
 8008968:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008978:	b29b      	uxth	r3, r3
 800897a:	3b01      	subs	r3, #1
 800897c:	b29a      	uxth	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b01      	cmp	r3, #1
 8008992:	d148      	bne.n	8008a26 <HAL_SPI_TransmitReceive+0x3b4>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800899a:	b29b      	uxth	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	d042      	beq.n	8008a26 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d923      	bls.n	80089f4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	b292      	uxth	r2, r2
 80089b8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	1c9a      	adds	r2, r3, #2
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	3b02      	subs	r3, #2
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089dc:	b29b      	uxth	r3, r3
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d81f      	bhi.n	8008a22 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	e016      	b.n	8008a22 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f103 020c 	add.w	r2, r3, #12
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a00:	7812      	ldrb	r2, [r2, #0]
 8008a02:	b2d2      	uxtb	r2, r2
 8008a04:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a22:	2301      	movs	r3, #1
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a26:	f7fa fd27 	bl	8003478 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d803      	bhi.n	8008a3e <HAL_SPI_TransmitReceive+0x3cc>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3c:	d102      	bne.n	8008a44 <HAL_SPI_TransmitReceive+0x3d2>
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d107      	bne.n	8008a54 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8008a52:	e026      	b.n	8008aa2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f47f af57 	bne.w	800890e <HAL_SPI_TransmitReceive+0x29c>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f47f af50 	bne.w	800890e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 f996 	bl	8008da4 <SPI_EndRxTxTransaction>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d005      	beq.n	8008a8a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2220      	movs	r2, #32
 8008a88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a98:	e003      	b.n	8008aa2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008aaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3728      	adds	r7, #40	; 0x28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ac8:	f7fa fcd6 	bl	8003478 <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad0:	1a9b      	subs	r3, r3, r2
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008ad8:	f7fa fcce 	bl	8003478 <HAL_GetTick>
 8008adc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ade:	4b39      	ldr	r3, [pc, #228]	; (8008bc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	015b      	lsls	r3, r3, #5
 8008ae4:	0d1b      	lsrs	r3, r3, #20
 8008ae6:	69fa      	ldr	r2, [r7, #28]
 8008ae8:	fb02 f303 	mul.w	r3, r2, r3
 8008aec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008aee:	e054      	b.n	8008b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d050      	beq.n	8008b9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008af8:	f7fa fcbe 	bl	8003478 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	69fa      	ldr	r2, [r7, #28]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d902      	bls.n	8008b0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d13d      	bne.n	8008b8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b26:	d111      	bne.n	8008b4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b30:	d004      	beq.n	8008b3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b3a:	d107      	bne.n	8008b4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b54:	d10f      	bne.n	8008b76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e017      	b.n	8008bba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	bf0c      	ite	eq
 8008baa:	2301      	moveq	r3, #1
 8008bac:	2300      	movne	r3, #0
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d19b      	bne.n	8008af0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3720      	adds	r7, #32
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20000004 	.word	0x20000004

08008bc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08a      	sub	sp, #40	; 0x28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008bda:	f7fa fc4d 	bl	8003478 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be2:	1a9b      	subs	r3, r3, r2
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	4413      	add	r3, r2
 8008be8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008bea:	f7fa fc45 	bl	8003478 <HAL_GetTick>
 8008bee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	330c      	adds	r3, #12
 8008bf6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008bf8:	4b3d      	ldr	r3, [pc, #244]	; (8008cf0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	00da      	lsls	r2, r3, #3
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	0d1b      	lsrs	r3, r3, #20
 8008c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0a:	fb02 f303 	mul.w	r3, r2, r3
 8008c0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008c10:	e060      	b.n	8008cd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008c18:	d107      	bne.n	8008c2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d104      	bne.n	8008c2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d050      	beq.n	8008cd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c32:	f7fa fc21 	bl	8003478 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d902      	bls.n	8008c48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d13d      	bne.n	8008cc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c60:	d111      	bne.n	8008c86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c6a:	d004      	beq.n	8008c76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c74:	d107      	bne.n	8008c86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c8e:	d10f      	bne.n	8008cb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e010      	b.n	8008ce6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d101      	bne.n	8008cce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689a      	ldr	r2, [r3, #8]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d196      	bne.n	8008c12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3728      	adds	r7, #40	; 0x28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20000004 	.word	0x20000004

08008cf4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d08:	d111      	bne.n	8008d2e <SPI_EndRxTransaction+0x3a>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d12:	d004      	beq.n	8008d1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d1c:	d107      	bne.n	8008d2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2200      	movs	r2, #0
 8008d36:	2180      	movs	r1, #128	; 0x80
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f7ff febd 	bl	8008ab8 <SPI_WaitFlagStateUntilTimeout>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d007      	beq.n	8008d54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d48:	f043 0220 	orr.w	r2, r3, #32
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e023      	b.n	8008d9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d5c:	d11d      	bne.n	8008d9a <SPI_EndRxTransaction+0xa6>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d66:	d004      	beq.n	8008d72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d70:	d113      	bne.n	8008d9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f7ff ff22 	bl	8008bc8 <SPI_WaitFifoStateUntilTimeout>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d007      	beq.n	8008d9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d8e:	f043 0220 	orr.w	r2, r3, #32
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e000      	b.n	8008d9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af02      	add	r7, sp, #8
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f7ff ff03 	bl	8008bc8 <SPI_WaitFifoStateUntilTimeout>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d007      	beq.n	8008dd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dcc:	f043 0220 	orr.w	r2, r3, #32
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e027      	b.n	8008e28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2200      	movs	r2, #0
 8008de0:	2180      	movs	r1, #128	; 0x80
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f7ff fe68 	bl	8008ab8 <SPI_WaitFlagStateUntilTimeout>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d007      	beq.n	8008dfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df2:	f043 0220 	orr.w	r2, r3, #32
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e014      	b.n	8008e28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f7ff fedc 	bl	8008bc8 <SPI_WaitFifoStateUntilTimeout>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d007      	beq.n	8008e26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e1a:	f043 0220 	orr.w	r2, r3, #32
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e000      	b.n	8008e28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e049      	b.n	8008ed6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d106      	bne.n	8008e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7f9 fedc 	bl	8002c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	4610      	mov	r0, r2
 8008e70:	f000 fe92 	bl	8009b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d001      	beq.n	8008ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e04f      	b.n	8008f98 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f042 0201 	orr.w	r2, r2, #1
 8008f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a23      	ldr	r2, [pc, #140]	; (8008fa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d01d      	beq.n	8008f56 <HAL_TIM_Base_Start_IT+0x76>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f22:	d018      	beq.n	8008f56 <HAL_TIM_Base_Start_IT+0x76>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a1f      	ldr	r2, [pc, #124]	; (8008fa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d013      	beq.n	8008f56 <HAL_TIM_Base_Start_IT+0x76>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a1e      	ldr	r2, [pc, #120]	; (8008fac <HAL_TIM_Base_Start_IT+0xcc>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d00e      	beq.n	8008f56 <HAL_TIM_Base_Start_IT+0x76>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a1c      	ldr	r2, [pc, #112]	; (8008fb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d009      	beq.n	8008f56 <HAL_TIM_Base_Start_IT+0x76>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a1b      	ldr	r2, [pc, #108]	; (8008fb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d004      	beq.n	8008f56 <HAL_TIM_Base_Start_IT+0x76>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a19      	ldr	r2, [pc, #100]	; (8008fb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d115      	bne.n	8008f82 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	4b17      	ldr	r3, [pc, #92]	; (8008fbc <HAL_TIM_Base_Start_IT+0xdc>)
 8008f5e:	4013      	ands	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b06      	cmp	r3, #6
 8008f66:	d015      	beq.n	8008f94 <HAL_TIM_Base_Start_IT+0xb4>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f6e:	d011      	beq.n	8008f94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0201 	orr.w	r2, r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f80:	e008      	b.n	8008f94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f042 0201 	orr.w	r2, r2, #1
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	e000      	b.n	8008f96 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	40012c00 	.word	0x40012c00
 8008fa8:	40000400 	.word	0x40000400
 8008fac:	40000800 	.word	0x40000800
 8008fb0:	40013400 	.word	0x40013400
 8008fb4:	40014000 	.word	0x40014000
 8008fb8:	40015000 	.word	0x40015000
 8008fbc:	00010007 	.word	0x00010007

08008fc0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d109      	bne.n	8008fe8 <HAL_TIM_OC_Start_IT+0x28>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	bf14      	ite	ne
 8008fe0:	2301      	movne	r3, #1
 8008fe2:	2300      	moveq	r3, #0
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	e03c      	b.n	8009062 <HAL_TIM_OC_Start_IT+0xa2>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	d109      	bne.n	8009002 <HAL_TIM_OC_Start_IT+0x42>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	bf14      	ite	ne
 8008ffa:	2301      	movne	r3, #1
 8008ffc:	2300      	moveq	r3, #0
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	e02f      	b.n	8009062 <HAL_TIM_OC_Start_IT+0xa2>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b08      	cmp	r3, #8
 8009006:	d109      	bne.n	800901c <HAL_TIM_OC_Start_IT+0x5c>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b01      	cmp	r3, #1
 8009012:	bf14      	ite	ne
 8009014:	2301      	movne	r3, #1
 8009016:	2300      	moveq	r3, #0
 8009018:	b2db      	uxtb	r3, r3
 800901a:	e022      	b.n	8009062 <HAL_TIM_OC_Start_IT+0xa2>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2b0c      	cmp	r3, #12
 8009020:	d109      	bne.n	8009036 <HAL_TIM_OC_Start_IT+0x76>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b01      	cmp	r3, #1
 800902c:	bf14      	ite	ne
 800902e:	2301      	movne	r3, #1
 8009030:	2300      	moveq	r3, #0
 8009032:	b2db      	uxtb	r3, r3
 8009034:	e015      	b.n	8009062 <HAL_TIM_OC_Start_IT+0xa2>
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b10      	cmp	r3, #16
 800903a:	d109      	bne.n	8009050 <HAL_TIM_OC_Start_IT+0x90>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b01      	cmp	r3, #1
 8009046:	bf14      	ite	ne
 8009048:	2301      	movne	r3, #1
 800904a:	2300      	moveq	r3, #0
 800904c:	b2db      	uxtb	r3, r3
 800904e:	e008      	b.n	8009062 <HAL_TIM_OC_Start_IT+0xa2>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b01      	cmp	r3, #1
 800905a:	bf14      	ite	ne
 800905c:	2301      	movne	r3, #1
 800905e:	2300      	moveq	r3, #0
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e0ec      	b.n	8009244 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d104      	bne.n	800907a <HAL_TIM_OC_Start_IT+0xba>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2202      	movs	r2, #2
 8009074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009078:	e023      	b.n	80090c2 <HAL_TIM_OC_Start_IT+0x102>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b04      	cmp	r3, #4
 800907e:	d104      	bne.n	800908a <HAL_TIM_OC_Start_IT+0xca>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009088:	e01b      	b.n	80090c2 <HAL_TIM_OC_Start_IT+0x102>
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b08      	cmp	r3, #8
 800908e:	d104      	bne.n	800909a <HAL_TIM_OC_Start_IT+0xda>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009098:	e013      	b.n	80090c2 <HAL_TIM_OC_Start_IT+0x102>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b0c      	cmp	r3, #12
 800909e:	d104      	bne.n	80090aa <HAL_TIM_OC_Start_IT+0xea>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090a8:	e00b      	b.n	80090c2 <HAL_TIM_OC_Start_IT+0x102>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b10      	cmp	r3, #16
 80090ae:	d104      	bne.n	80090ba <HAL_TIM_OC_Start_IT+0xfa>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090b8:	e003      	b.n	80090c2 <HAL_TIM_OC_Start_IT+0x102>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2202      	movs	r2, #2
 80090be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b0c      	cmp	r3, #12
 80090c6:	d841      	bhi.n	800914c <HAL_TIM_OC_Start_IT+0x18c>
 80090c8:	a201      	add	r2, pc, #4	; (adr r2, 80090d0 <HAL_TIM_OC_Start_IT+0x110>)
 80090ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ce:	bf00      	nop
 80090d0:	08009105 	.word	0x08009105
 80090d4:	0800914d 	.word	0x0800914d
 80090d8:	0800914d 	.word	0x0800914d
 80090dc:	0800914d 	.word	0x0800914d
 80090e0:	08009117 	.word	0x08009117
 80090e4:	0800914d 	.word	0x0800914d
 80090e8:	0800914d 	.word	0x0800914d
 80090ec:	0800914d 	.word	0x0800914d
 80090f0:	08009129 	.word	0x08009129
 80090f4:	0800914d 	.word	0x0800914d
 80090f8:	0800914d 	.word	0x0800914d
 80090fc:	0800914d 	.word	0x0800914d
 8009100:	0800913b 	.word	0x0800913b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68da      	ldr	r2, [r3, #12]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f042 0202 	orr.w	r2, r2, #2
 8009112:	60da      	str	r2, [r3, #12]
      break;
 8009114:	e01d      	b.n	8009152 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68da      	ldr	r2, [r3, #12]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f042 0204 	orr.w	r2, r2, #4
 8009124:	60da      	str	r2, [r3, #12]
      break;
 8009126:	e014      	b.n	8009152 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68da      	ldr	r2, [r3, #12]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0208 	orr.w	r2, r2, #8
 8009136:	60da      	str	r2, [r3, #12]
      break;
 8009138:	e00b      	b.n	8009152 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68da      	ldr	r2, [r3, #12]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0210 	orr.w	r2, r2, #16
 8009148:	60da      	str	r2, [r3, #12]
      break;
 800914a:	e002      	b.n	8009152 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	73fb      	strb	r3, [r7, #15]
      break;
 8009150:	bf00      	nop
  }

  if (status == HAL_OK)
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d174      	bne.n	8009242 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2201      	movs	r2, #1
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	4618      	mov	r0, r3
 8009162:	f001 f957 	bl	800a414 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a38      	ldr	r2, [pc, #224]	; (800924c <HAL_TIM_OC_Start_IT+0x28c>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d018      	beq.n	80091a2 <HAL_TIM_OC_Start_IT+0x1e2>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a36      	ldr	r2, [pc, #216]	; (8009250 <HAL_TIM_OC_Start_IT+0x290>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d013      	beq.n	80091a2 <HAL_TIM_OC_Start_IT+0x1e2>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a35      	ldr	r2, [pc, #212]	; (8009254 <HAL_TIM_OC_Start_IT+0x294>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d00e      	beq.n	80091a2 <HAL_TIM_OC_Start_IT+0x1e2>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a33      	ldr	r2, [pc, #204]	; (8009258 <HAL_TIM_OC_Start_IT+0x298>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d009      	beq.n	80091a2 <HAL_TIM_OC_Start_IT+0x1e2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a32      	ldr	r2, [pc, #200]	; (800925c <HAL_TIM_OC_Start_IT+0x29c>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d004      	beq.n	80091a2 <HAL_TIM_OC_Start_IT+0x1e2>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a30      	ldr	r2, [pc, #192]	; (8009260 <HAL_TIM_OC_Start_IT+0x2a0>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d101      	bne.n	80091a6 <HAL_TIM_OC_Start_IT+0x1e6>
 80091a2:	2301      	movs	r3, #1
 80091a4:	e000      	b.n	80091a8 <HAL_TIM_OC_Start_IT+0x1e8>
 80091a6:	2300      	movs	r3, #0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d007      	beq.n	80091bc <HAL_TIM_OC_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091ba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a22      	ldr	r2, [pc, #136]	; (800924c <HAL_TIM_OC_Start_IT+0x28c>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d01d      	beq.n	8009202 <HAL_TIM_OC_Start_IT+0x242>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ce:	d018      	beq.n	8009202 <HAL_TIM_OC_Start_IT+0x242>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a23      	ldr	r2, [pc, #140]	; (8009264 <HAL_TIM_OC_Start_IT+0x2a4>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d013      	beq.n	8009202 <HAL_TIM_OC_Start_IT+0x242>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a22      	ldr	r2, [pc, #136]	; (8009268 <HAL_TIM_OC_Start_IT+0x2a8>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00e      	beq.n	8009202 <HAL_TIM_OC_Start_IT+0x242>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a19      	ldr	r2, [pc, #100]	; (8009250 <HAL_TIM_OC_Start_IT+0x290>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d009      	beq.n	8009202 <HAL_TIM_OC_Start_IT+0x242>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a18      	ldr	r2, [pc, #96]	; (8009254 <HAL_TIM_OC_Start_IT+0x294>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d004      	beq.n	8009202 <HAL_TIM_OC_Start_IT+0x242>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a18      	ldr	r2, [pc, #96]	; (8009260 <HAL_TIM_OC_Start_IT+0x2a0>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d115      	bne.n	800922e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	4b18      	ldr	r3, [pc, #96]	; (800926c <HAL_TIM_OC_Start_IT+0x2ac>)
 800920a:	4013      	ands	r3, r2
 800920c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b06      	cmp	r3, #6
 8009212:	d015      	beq.n	8009240 <HAL_TIM_OC_Start_IT+0x280>
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800921a:	d011      	beq.n	8009240 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 0201 	orr.w	r2, r2, #1
 800922a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800922c:	e008      	b.n	8009240 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f042 0201 	orr.w	r2, r2, #1
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	e000      	b.n	8009242 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009240:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009242:	7bfb      	ldrb	r3, [r7, #15]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	40012c00 	.word	0x40012c00
 8009250:	40013400 	.word	0x40013400
 8009254:	40014000 	.word	0x40014000
 8009258:	40014400 	.word	0x40014400
 800925c:	40014800 	.word	0x40014800
 8009260:	40015000 	.word	0x40015000
 8009264:	40000400 	.word	0x40000400
 8009268:	40000800 	.word	0x40000800
 800926c:	00010007 	.word	0x00010007

08009270 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e049      	b.n	8009316 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d106      	bne.n	800929c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f841 	bl	800931e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2202      	movs	r2, #2
 80092a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3304      	adds	r3, #4
 80092ac:	4619      	mov	r1, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	f000 fc72 	bl	8009b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800931e:	b480      	push	{r7}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009326:	bf00      	nop
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
	...

08009334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d109      	bne.n	8009358 <HAL_TIM_PWM_Start+0x24>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b01      	cmp	r3, #1
 800934e:	bf14      	ite	ne
 8009350:	2301      	movne	r3, #1
 8009352:	2300      	moveq	r3, #0
 8009354:	b2db      	uxtb	r3, r3
 8009356:	e03c      	b.n	80093d2 <HAL_TIM_PWM_Start+0x9e>
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	2b04      	cmp	r3, #4
 800935c:	d109      	bne.n	8009372 <HAL_TIM_PWM_Start+0x3e>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b01      	cmp	r3, #1
 8009368:	bf14      	ite	ne
 800936a:	2301      	movne	r3, #1
 800936c:	2300      	moveq	r3, #0
 800936e:	b2db      	uxtb	r3, r3
 8009370:	e02f      	b.n	80093d2 <HAL_TIM_PWM_Start+0x9e>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b08      	cmp	r3, #8
 8009376:	d109      	bne.n	800938c <HAL_TIM_PWM_Start+0x58>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b01      	cmp	r3, #1
 8009382:	bf14      	ite	ne
 8009384:	2301      	movne	r3, #1
 8009386:	2300      	moveq	r3, #0
 8009388:	b2db      	uxtb	r3, r3
 800938a:	e022      	b.n	80093d2 <HAL_TIM_PWM_Start+0x9e>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2b0c      	cmp	r3, #12
 8009390:	d109      	bne.n	80093a6 <HAL_TIM_PWM_Start+0x72>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009398:	b2db      	uxtb	r3, r3
 800939a:	2b01      	cmp	r3, #1
 800939c:	bf14      	ite	ne
 800939e:	2301      	movne	r3, #1
 80093a0:	2300      	moveq	r3, #0
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	e015      	b.n	80093d2 <HAL_TIM_PWM_Start+0x9e>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b10      	cmp	r3, #16
 80093aa:	d109      	bne.n	80093c0 <HAL_TIM_PWM_Start+0x8c>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	bf14      	ite	ne
 80093b8:	2301      	movne	r3, #1
 80093ba:	2300      	moveq	r3, #0
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	e008      	b.n	80093d2 <HAL_TIM_PWM_Start+0x9e>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	bf14      	ite	ne
 80093cc:	2301      	movne	r3, #1
 80093ce:	2300      	moveq	r3, #0
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e0a1      	b.n	800951e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d104      	bne.n	80093ea <HAL_TIM_PWM_Start+0xb6>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093e8:	e023      	b.n	8009432 <HAL_TIM_PWM_Start+0xfe>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	d104      	bne.n	80093fa <HAL_TIM_PWM_Start+0xc6>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2202      	movs	r2, #2
 80093f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093f8:	e01b      	b.n	8009432 <HAL_TIM_PWM_Start+0xfe>
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d104      	bne.n	800940a <HAL_TIM_PWM_Start+0xd6>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009408:	e013      	b.n	8009432 <HAL_TIM_PWM_Start+0xfe>
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b0c      	cmp	r3, #12
 800940e:	d104      	bne.n	800941a <HAL_TIM_PWM_Start+0xe6>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2202      	movs	r2, #2
 8009414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009418:	e00b      	b.n	8009432 <HAL_TIM_PWM_Start+0xfe>
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	2b10      	cmp	r3, #16
 800941e:	d104      	bne.n	800942a <HAL_TIM_PWM_Start+0xf6>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2202      	movs	r2, #2
 8009424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009428:	e003      	b.n	8009432 <HAL_TIM_PWM_Start+0xfe>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2202      	movs	r2, #2
 800942e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2201      	movs	r2, #1
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	4618      	mov	r0, r3
 800943c:	f000 ffea 	bl	800a414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a38      	ldr	r2, [pc, #224]	; (8009528 <HAL_TIM_PWM_Start+0x1f4>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d018      	beq.n	800947c <HAL_TIM_PWM_Start+0x148>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a37      	ldr	r2, [pc, #220]	; (800952c <HAL_TIM_PWM_Start+0x1f8>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d013      	beq.n	800947c <HAL_TIM_PWM_Start+0x148>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a35      	ldr	r2, [pc, #212]	; (8009530 <HAL_TIM_PWM_Start+0x1fc>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d00e      	beq.n	800947c <HAL_TIM_PWM_Start+0x148>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a34      	ldr	r2, [pc, #208]	; (8009534 <HAL_TIM_PWM_Start+0x200>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d009      	beq.n	800947c <HAL_TIM_PWM_Start+0x148>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a32      	ldr	r2, [pc, #200]	; (8009538 <HAL_TIM_PWM_Start+0x204>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d004      	beq.n	800947c <HAL_TIM_PWM_Start+0x148>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a31      	ldr	r2, [pc, #196]	; (800953c <HAL_TIM_PWM_Start+0x208>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d101      	bne.n	8009480 <HAL_TIM_PWM_Start+0x14c>
 800947c:	2301      	movs	r3, #1
 800947e:	e000      	b.n	8009482 <HAL_TIM_PWM_Start+0x14e>
 8009480:	2300      	movs	r3, #0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d007      	beq.n	8009496 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009494:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a23      	ldr	r2, [pc, #140]	; (8009528 <HAL_TIM_PWM_Start+0x1f4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d01d      	beq.n	80094dc <HAL_TIM_PWM_Start+0x1a8>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a8:	d018      	beq.n	80094dc <HAL_TIM_PWM_Start+0x1a8>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a24      	ldr	r2, [pc, #144]	; (8009540 <HAL_TIM_PWM_Start+0x20c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d013      	beq.n	80094dc <HAL_TIM_PWM_Start+0x1a8>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a22      	ldr	r2, [pc, #136]	; (8009544 <HAL_TIM_PWM_Start+0x210>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d00e      	beq.n	80094dc <HAL_TIM_PWM_Start+0x1a8>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a1a      	ldr	r2, [pc, #104]	; (800952c <HAL_TIM_PWM_Start+0x1f8>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d009      	beq.n	80094dc <HAL_TIM_PWM_Start+0x1a8>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a18      	ldr	r2, [pc, #96]	; (8009530 <HAL_TIM_PWM_Start+0x1fc>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d004      	beq.n	80094dc <HAL_TIM_PWM_Start+0x1a8>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a19      	ldr	r2, [pc, #100]	; (800953c <HAL_TIM_PWM_Start+0x208>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d115      	bne.n	8009508 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689a      	ldr	r2, [r3, #8]
 80094e2:	4b19      	ldr	r3, [pc, #100]	; (8009548 <HAL_TIM_PWM_Start+0x214>)
 80094e4:	4013      	ands	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b06      	cmp	r3, #6
 80094ec:	d015      	beq.n	800951a <HAL_TIM_PWM_Start+0x1e6>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094f4:	d011      	beq.n	800951a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f042 0201 	orr.w	r2, r2, #1
 8009504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009506:	e008      	b.n	800951a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f042 0201 	orr.w	r2, r2, #1
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	e000      	b.n	800951c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800951a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	40012c00 	.word	0x40012c00
 800952c:	40013400 	.word	0x40013400
 8009530:	40014000 	.word	0x40014000
 8009534:	40014400 	.word	0x40014400
 8009538:	40014800 	.word	0x40014800
 800953c:	40015000 	.word	0x40015000
 8009540:	40000400 	.word	0x40000400
 8009544:	40000800 	.word	0x40000800
 8009548:	00010007 	.word	0x00010007

0800954c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	f003 0302 	and.w	r3, r3, #2
 800955e:	2b02      	cmp	r3, #2
 8009560:	d122      	bne.n	80095a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b02      	cmp	r3, #2
 800956e:	d11b      	bne.n	80095a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f06f 0202 	mvn.w	r2, #2
 8009578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fae3 	bl	8009b5a <HAL_TIM_IC_CaptureCallback>
 8009594:	e005      	b.n	80095a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fad5 	bl	8009b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fae6 	bl	8009b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	f003 0304 	and.w	r3, r3, #4
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d122      	bne.n	80095fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b04      	cmp	r3, #4
 80095c2:	d11b      	bne.n	80095fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f06f 0204 	mvn.w	r2, #4
 80095cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2202      	movs	r2, #2
 80095d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fab9 	bl	8009b5a <HAL_TIM_IC_CaptureCallback>
 80095e8:	e005      	b.n	80095f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 faab 	bl	8009b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fabc 	bl	8009b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	f003 0308 	and.w	r3, r3, #8
 8009606:	2b08      	cmp	r3, #8
 8009608:	d122      	bne.n	8009650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f003 0308 	and.w	r3, r3, #8
 8009614:	2b08      	cmp	r3, #8
 8009616:	d11b      	bne.n	8009650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f06f 0208 	mvn.w	r2, #8
 8009620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2204      	movs	r2, #4
 8009626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	f003 0303 	and.w	r3, r3, #3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fa8f 	bl	8009b5a <HAL_TIM_IC_CaptureCallback>
 800963c:	e005      	b.n	800964a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fa81 	bl	8009b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fa92 	bl	8009b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	f003 0310 	and.w	r3, r3, #16
 800965a:	2b10      	cmp	r3, #16
 800965c:	d122      	bne.n	80096a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f003 0310 	and.w	r3, r3, #16
 8009668:	2b10      	cmp	r3, #16
 800966a:	d11b      	bne.n	80096a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f06f 0210 	mvn.w	r2, #16
 8009674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2208      	movs	r2, #8
 800967a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009686:	2b00      	cmp	r3, #0
 8009688:	d003      	beq.n	8009692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fa65 	bl	8009b5a <HAL_TIM_IC_CaptureCallback>
 8009690:	e005      	b.n	800969e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fa57 	bl	8009b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fa68 	bl	8009b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d10e      	bne.n	80096d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d107      	bne.n	80096d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f06f 0201 	mvn.w	r2, #1
 80096c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7f9 f94a 	bl	8002964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096da:	2b80      	cmp	r3, #128	; 0x80
 80096dc:	d10e      	bne.n	80096fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e8:	2b80      	cmp	r3, #128	; 0x80
 80096ea:	d107      	bne.n	80096fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80096f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 f888 	bl	800a80c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800970a:	d10e      	bne.n	800972a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009716:	2b80      	cmp	r3, #128	; 0x80
 8009718:	d107      	bne.n	800972a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f001 f87b 	bl	800a820 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009734:	2b40      	cmp	r3, #64	; 0x40
 8009736:	d10e      	bne.n	8009756 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009742:	2b40      	cmp	r3, #64	; 0x40
 8009744:	d107      	bne.n	8009756 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800974e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fa16 	bl	8009b82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	f003 0320 	and.w	r3, r3, #32
 8009760:	2b20      	cmp	r3, #32
 8009762:	d10e      	bne.n	8009782 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	f003 0320 	and.w	r3, r3, #32
 800976e:	2b20      	cmp	r3, #32
 8009770:	d107      	bne.n	8009782 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f06f 0220 	mvn.w	r2, #32
 800977a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 f83b 	bl	800a7f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009782:	bf00      	nop
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d101      	bne.n	80097aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80097a6:	2302      	movs	r3, #2
 80097a8:	e0ff      	b.n	80099aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b14      	cmp	r3, #20
 80097b6:	f200 80f0 	bhi.w	800999a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80097ba:	a201      	add	r2, pc, #4	; (adr r2, 80097c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80097bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c0:	08009815 	.word	0x08009815
 80097c4:	0800999b 	.word	0x0800999b
 80097c8:	0800999b 	.word	0x0800999b
 80097cc:	0800999b 	.word	0x0800999b
 80097d0:	08009855 	.word	0x08009855
 80097d4:	0800999b 	.word	0x0800999b
 80097d8:	0800999b 	.word	0x0800999b
 80097dc:	0800999b 	.word	0x0800999b
 80097e0:	08009897 	.word	0x08009897
 80097e4:	0800999b 	.word	0x0800999b
 80097e8:	0800999b 	.word	0x0800999b
 80097ec:	0800999b 	.word	0x0800999b
 80097f0:	080098d7 	.word	0x080098d7
 80097f4:	0800999b 	.word	0x0800999b
 80097f8:	0800999b 	.word	0x0800999b
 80097fc:	0800999b 	.word	0x0800999b
 8009800:	08009919 	.word	0x08009919
 8009804:	0800999b 	.word	0x0800999b
 8009808:	0800999b 	.word	0x0800999b
 800980c:	0800999b 	.word	0x0800999b
 8009810:	08009959 	.word	0x08009959
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68b9      	ldr	r1, [r7, #8]
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fa5a 	bl	8009cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	699a      	ldr	r2, [r3, #24]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f042 0208 	orr.w	r2, r2, #8
 800982e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	699a      	ldr	r2, [r3, #24]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 0204 	bic.w	r2, r2, #4
 800983e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6999      	ldr	r1, [r3, #24]
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	691a      	ldr	r2, [r3, #16]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	430a      	orrs	r2, r1
 8009850:	619a      	str	r2, [r3, #24]
      break;
 8009852:	e0a5      	b.n	80099a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68b9      	ldr	r1, [r7, #8]
 800985a:	4618      	mov	r0, r3
 800985c:	f000 fad4 	bl	8009e08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	699a      	ldr	r2, [r3, #24]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800986e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	699a      	ldr	r2, [r3, #24]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800987e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6999      	ldr	r1, [r3, #24]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	021a      	lsls	r2, r3, #8
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	430a      	orrs	r2, r1
 8009892:	619a      	str	r2, [r3, #24]
      break;
 8009894:	e084      	b.n	80099a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68b9      	ldr	r1, [r7, #8]
 800989c:	4618      	mov	r0, r3
 800989e:	f000 fb47 	bl	8009f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	69da      	ldr	r2, [r3, #28]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f042 0208 	orr.w	r2, r2, #8
 80098b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	69da      	ldr	r2, [r3, #28]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f022 0204 	bic.w	r2, r2, #4
 80098c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	69d9      	ldr	r1, [r3, #28]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	691a      	ldr	r2, [r3, #16]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	430a      	orrs	r2, r1
 80098d2:	61da      	str	r2, [r3, #28]
      break;
 80098d4:	e064      	b.n	80099a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68b9      	ldr	r1, [r7, #8]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 fbb9 	bl	800a054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	69da      	ldr	r2, [r3, #28]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	69da      	ldr	r2, [r3, #28]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	69d9      	ldr	r1, [r3, #28]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	021a      	lsls	r2, r3, #8
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	61da      	str	r2, [r3, #28]
      break;
 8009916:	e043      	b.n	80099a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68b9      	ldr	r1, [r7, #8]
 800991e:	4618      	mov	r0, r3
 8009920:	f000 fc08 	bl	800a134 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0208 	orr.w	r2, r2, #8
 8009932:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 0204 	bic.w	r2, r2, #4
 8009942:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	691a      	ldr	r2, [r3, #16]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	430a      	orrs	r2, r1
 8009954:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009956:	e023      	b.n	80099a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68b9      	ldr	r1, [r7, #8]
 800995e:	4618      	mov	r0, r3
 8009960:	f000 fc52 	bl	800a208 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009972:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	021a      	lsls	r2, r3, #8
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009998:	e002      	b.n	80099a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	75fb      	strb	r3, [r7, #23]
      break;
 800999e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3718      	adds	r7, #24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop

080099b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d101      	bne.n	80099d0 <HAL_TIM_ConfigClockSource+0x1c>
 80099cc:	2302      	movs	r3, #2
 80099ce:	e0b6      	b.n	8009b3e <HAL_TIM_ConfigClockSource+0x18a>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2202      	movs	r2, #2
 80099dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80099f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a0c:	d03e      	beq.n	8009a8c <HAL_TIM_ConfigClockSource+0xd8>
 8009a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a12:	f200 8087 	bhi.w	8009b24 <HAL_TIM_ConfigClockSource+0x170>
 8009a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a1a:	f000 8086 	beq.w	8009b2a <HAL_TIM_ConfigClockSource+0x176>
 8009a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a22:	d87f      	bhi.n	8009b24 <HAL_TIM_ConfigClockSource+0x170>
 8009a24:	2b70      	cmp	r3, #112	; 0x70
 8009a26:	d01a      	beq.n	8009a5e <HAL_TIM_ConfigClockSource+0xaa>
 8009a28:	2b70      	cmp	r3, #112	; 0x70
 8009a2a:	d87b      	bhi.n	8009b24 <HAL_TIM_ConfigClockSource+0x170>
 8009a2c:	2b60      	cmp	r3, #96	; 0x60
 8009a2e:	d050      	beq.n	8009ad2 <HAL_TIM_ConfigClockSource+0x11e>
 8009a30:	2b60      	cmp	r3, #96	; 0x60
 8009a32:	d877      	bhi.n	8009b24 <HAL_TIM_ConfigClockSource+0x170>
 8009a34:	2b50      	cmp	r3, #80	; 0x50
 8009a36:	d03c      	beq.n	8009ab2 <HAL_TIM_ConfigClockSource+0xfe>
 8009a38:	2b50      	cmp	r3, #80	; 0x50
 8009a3a:	d873      	bhi.n	8009b24 <HAL_TIM_ConfigClockSource+0x170>
 8009a3c:	2b40      	cmp	r3, #64	; 0x40
 8009a3e:	d058      	beq.n	8009af2 <HAL_TIM_ConfigClockSource+0x13e>
 8009a40:	2b40      	cmp	r3, #64	; 0x40
 8009a42:	d86f      	bhi.n	8009b24 <HAL_TIM_ConfigClockSource+0x170>
 8009a44:	2b30      	cmp	r3, #48	; 0x30
 8009a46:	d064      	beq.n	8009b12 <HAL_TIM_ConfigClockSource+0x15e>
 8009a48:	2b30      	cmp	r3, #48	; 0x30
 8009a4a:	d86b      	bhi.n	8009b24 <HAL_TIM_ConfigClockSource+0x170>
 8009a4c:	2b20      	cmp	r3, #32
 8009a4e:	d060      	beq.n	8009b12 <HAL_TIM_ConfigClockSource+0x15e>
 8009a50:	2b20      	cmp	r3, #32
 8009a52:	d867      	bhi.n	8009b24 <HAL_TIM_ConfigClockSource+0x170>
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d05c      	beq.n	8009b12 <HAL_TIM_ConfigClockSource+0x15e>
 8009a58:	2b10      	cmp	r3, #16
 8009a5a:	d05a      	beq.n	8009b12 <HAL_TIM_ConfigClockSource+0x15e>
 8009a5c:	e062      	b.n	8009b24 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a6e:	f000 fcb1 	bl	800a3d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	609a      	str	r2, [r3, #8]
      break;
 8009a8a:	e04f      	b.n	8009b2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a9c:	f000 fc9a 	bl	800a3d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689a      	ldr	r2, [r3, #8]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009aae:	609a      	str	r2, [r3, #8]
      break;
 8009ab0:	e03c      	b.n	8009b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f000 fc0e 	bl	800a2e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2150      	movs	r1, #80	; 0x50
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fc67 	bl	800a39e <TIM_ITRx_SetConfig>
      break;
 8009ad0:	e02c      	b.n	8009b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f000 fc2d 	bl	800a33e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2160      	movs	r1, #96	; 0x60
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fc57 	bl	800a39e <TIM_ITRx_SetConfig>
      break;
 8009af0:	e01c      	b.n	8009b2c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009afe:	461a      	mov	r2, r3
 8009b00:	f000 fbee 	bl	800a2e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2140      	movs	r1, #64	; 0x40
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fc47 	bl	800a39e <TIM_ITRx_SetConfig>
      break;
 8009b10:	e00c      	b.n	8009b2c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	f000 fc3e 	bl	800a39e <TIM_ITRx_SetConfig>
      break;
 8009b22:	e003      	b.n	8009b2c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	73fb      	strb	r3, [r7, #15]
      break;
 8009b28:	e000      	b.n	8009b2c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b083      	sub	sp, #12
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b4e:	bf00      	nop
 8009b50:	370c      	adds	r7, #12
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b083      	sub	sp, #12
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b62:	bf00      	nop
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b083      	sub	sp, #12
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b76:	bf00      	nop
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b083      	sub	sp, #12
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b8a:	bf00      	nop
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
	...

08009b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a42      	ldr	r2, [pc, #264]	; (8009cb4 <TIM_Base_SetConfig+0x11c>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d013      	beq.n	8009bd8 <TIM_Base_SetConfig+0x40>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb6:	d00f      	beq.n	8009bd8 <TIM_Base_SetConfig+0x40>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a3f      	ldr	r2, [pc, #252]	; (8009cb8 <TIM_Base_SetConfig+0x120>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d00b      	beq.n	8009bd8 <TIM_Base_SetConfig+0x40>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a3e      	ldr	r2, [pc, #248]	; (8009cbc <TIM_Base_SetConfig+0x124>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d007      	beq.n	8009bd8 <TIM_Base_SetConfig+0x40>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a3d      	ldr	r2, [pc, #244]	; (8009cc0 <TIM_Base_SetConfig+0x128>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d003      	beq.n	8009bd8 <TIM_Base_SetConfig+0x40>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a3c      	ldr	r2, [pc, #240]	; (8009cc4 <TIM_Base_SetConfig+0x12c>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d108      	bne.n	8009bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a31      	ldr	r2, [pc, #196]	; (8009cb4 <TIM_Base_SetConfig+0x11c>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d01f      	beq.n	8009c32 <TIM_Base_SetConfig+0x9a>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bf8:	d01b      	beq.n	8009c32 <TIM_Base_SetConfig+0x9a>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a2e      	ldr	r2, [pc, #184]	; (8009cb8 <TIM_Base_SetConfig+0x120>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d017      	beq.n	8009c32 <TIM_Base_SetConfig+0x9a>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a2d      	ldr	r2, [pc, #180]	; (8009cbc <TIM_Base_SetConfig+0x124>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d013      	beq.n	8009c32 <TIM_Base_SetConfig+0x9a>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a2c      	ldr	r2, [pc, #176]	; (8009cc0 <TIM_Base_SetConfig+0x128>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d00f      	beq.n	8009c32 <TIM_Base_SetConfig+0x9a>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a2c      	ldr	r2, [pc, #176]	; (8009cc8 <TIM_Base_SetConfig+0x130>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d00b      	beq.n	8009c32 <TIM_Base_SetConfig+0x9a>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a2b      	ldr	r2, [pc, #172]	; (8009ccc <TIM_Base_SetConfig+0x134>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d007      	beq.n	8009c32 <TIM_Base_SetConfig+0x9a>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a2a      	ldr	r2, [pc, #168]	; (8009cd0 <TIM_Base_SetConfig+0x138>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d003      	beq.n	8009c32 <TIM_Base_SetConfig+0x9a>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a25      	ldr	r2, [pc, #148]	; (8009cc4 <TIM_Base_SetConfig+0x12c>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d108      	bne.n	8009c44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	689a      	ldr	r2, [r3, #8]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a12      	ldr	r2, [pc, #72]	; (8009cb4 <TIM_Base_SetConfig+0x11c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d013      	beq.n	8009c98 <TIM_Base_SetConfig+0x100>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a13      	ldr	r2, [pc, #76]	; (8009cc0 <TIM_Base_SetConfig+0x128>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d00f      	beq.n	8009c98 <TIM_Base_SetConfig+0x100>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a13      	ldr	r2, [pc, #76]	; (8009cc8 <TIM_Base_SetConfig+0x130>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d00b      	beq.n	8009c98 <TIM_Base_SetConfig+0x100>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a12      	ldr	r2, [pc, #72]	; (8009ccc <TIM_Base_SetConfig+0x134>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d007      	beq.n	8009c98 <TIM_Base_SetConfig+0x100>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a11      	ldr	r2, [pc, #68]	; (8009cd0 <TIM_Base_SetConfig+0x138>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d003      	beq.n	8009c98 <TIM_Base_SetConfig+0x100>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a0c      	ldr	r2, [pc, #48]	; (8009cc4 <TIM_Base_SetConfig+0x12c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d103      	bne.n	8009ca0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	691a      	ldr	r2, [r3, #16]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	615a      	str	r2, [r3, #20]
}
 8009ca6:	bf00      	nop
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	40012c00 	.word	0x40012c00
 8009cb8:	40000400 	.word	0x40000400
 8009cbc:	40000800 	.word	0x40000800
 8009cc0:	40013400 	.word	0x40013400
 8009cc4:	40015000 	.word	0x40015000
 8009cc8:	40014000 	.word	0x40014000
 8009ccc:	40014400 	.word	0x40014400
 8009cd0:	40014800 	.word	0x40014800

08009cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b087      	sub	sp, #28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	f023 0201 	bic.w	r2, r3, #1
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f023 0303 	bic.w	r3, r3, #3
 8009d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f023 0302 	bic.w	r3, r3, #2
 8009d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a30      	ldr	r2, [pc, #192]	; (8009df0 <TIM_OC1_SetConfig+0x11c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d013      	beq.n	8009d5c <TIM_OC1_SetConfig+0x88>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a2f      	ldr	r2, [pc, #188]	; (8009df4 <TIM_OC1_SetConfig+0x120>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00f      	beq.n	8009d5c <TIM_OC1_SetConfig+0x88>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a2e      	ldr	r2, [pc, #184]	; (8009df8 <TIM_OC1_SetConfig+0x124>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d00b      	beq.n	8009d5c <TIM_OC1_SetConfig+0x88>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a2d      	ldr	r2, [pc, #180]	; (8009dfc <TIM_OC1_SetConfig+0x128>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d007      	beq.n	8009d5c <TIM_OC1_SetConfig+0x88>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a2c      	ldr	r2, [pc, #176]	; (8009e00 <TIM_OC1_SetConfig+0x12c>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d003      	beq.n	8009d5c <TIM_OC1_SetConfig+0x88>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a2b      	ldr	r2, [pc, #172]	; (8009e04 <TIM_OC1_SetConfig+0x130>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d10c      	bne.n	8009d76 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	f023 0308 	bic.w	r3, r3, #8
 8009d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f023 0304 	bic.w	r3, r3, #4
 8009d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a1d      	ldr	r2, [pc, #116]	; (8009df0 <TIM_OC1_SetConfig+0x11c>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d013      	beq.n	8009da6 <TIM_OC1_SetConfig+0xd2>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a1c      	ldr	r2, [pc, #112]	; (8009df4 <TIM_OC1_SetConfig+0x120>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d00f      	beq.n	8009da6 <TIM_OC1_SetConfig+0xd2>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a1b      	ldr	r2, [pc, #108]	; (8009df8 <TIM_OC1_SetConfig+0x124>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d00b      	beq.n	8009da6 <TIM_OC1_SetConfig+0xd2>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a1a      	ldr	r2, [pc, #104]	; (8009dfc <TIM_OC1_SetConfig+0x128>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d007      	beq.n	8009da6 <TIM_OC1_SetConfig+0xd2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a19      	ldr	r2, [pc, #100]	; (8009e00 <TIM_OC1_SetConfig+0x12c>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d003      	beq.n	8009da6 <TIM_OC1_SetConfig+0xd2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a18      	ldr	r2, [pc, #96]	; (8009e04 <TIM_OC1_SetConfig+0x130>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d111      	bne.n	8009dca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	621a      	str	r2, [r3, #32]
}
 8009de4:	bf00      	nop
 8009de6:	371c      	adds	r7, #28
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	40012c00 	.word	0x40012c00
 8009df4:	40013400 	.word	0x40013400
 8009df8:	40014000 	.word	0x40014000
 8009dfc:	40014400 	.word	0x40014400
 8009e00:	40014800 	.word	0x40014800
 8009e04:	40015000 	.word	0x40015000

08009e08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b087      	sub	sp, #28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	f023 0210 	bic.w	r2, r3, #16
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	021b      	lsls	r3, r3, #8
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f023 0320 	bic.w	r3, r3, #32
 8009e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a2c      	ldr	r2, [pc, #176]	; (8009f18 <TIM_OC2_SetConfig+0x110>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d007      	beq.n	8009e7c <TIM_OC2_SetConfig+0x74>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a2b      	ldr	r2, [pc, #172]	; (8009f1c <TIM_OC2_SetConfig+0x114>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d003      	beq.n	8009e7c <TIM_OC2_SetConfig+0x74>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a2a      	ldr	r2, [pc, #168]	; (8009f20 <TIM_OC2_SetConfig+0x118>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d10d      	bne.n	8009e98 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	011b      	lsls	r3, r3, #4
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a1f      	ldr	r2, [pc, #124]	; (8009f18 <TIM_OC2_SetConfig+0x110>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d013      	beq.n	8009ec8 <TIM_OC2_SetConfig+0xc0>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a1e      	ldr	r2, [pc, #120]	; (8009f1c <TIM_OC2_SetConfig+0x114>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d00f      	beq.n	8009ec8 <TIM_OC2_SetConfig+0xc0>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a1e      	ldr	r2, [pc, #120]	; (8009f24 <TIM_OC2_SetConfig+0x11c>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d00b      	beq.n	8009ec8 <TIM_OC2_SetConfig+0xc0>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a1d      	ldr	r2, [pc, #116]	; (8009f28 <TIM_OC2_SetConfig+0x120>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d007      	beq.n	8009ec8 <TIM_OC2_SetConfig+0xc0>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a1c      	ldr	r2, [pc, #112]	; (8009f2c <TIM_OC2_SetConfig+0x124>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d003      	beq.n	8009ec8 <TIM_OC2_SetConfig+0xc0>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a17      	ldr	r2, [pc, #92]	; (8009f20 <TIM_OC2_SetConfig+0x118>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d113      	bne.n	8009ef0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ece:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ed6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	685a      	ldr	r2, [r3, #4]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	621a      	str	r2, [r3, #32]
}
 8009f0a:	bf00      	nop
 8009f0c:	371c      	adds	r7, #28
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	40012c00 	.word	0x40012c00
 8009f1c:	40013400 	.word	0x40013400
 8009f20:	40015000 	.word	0x40015000
 8009f24:	40014000 	.word	0x40014000
 8009f28:	40014400 	.word	0x40014400
 8009f2c:	40014800 	.word	0x40014800

08009f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b087      	sub	sp, #28
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a1b      	ldr	r3, [r3, #32]
 8009f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f023 0303 	bic.w	r3, r3, #3
 8009f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	021b      	lsls	r3, r3, #8
 8009f84:	697a      	ldr	r2, [r7, #20]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a2b      	ldr	r2, [pc, #172]	; (800a03c <TIM_OC3_SetConfig+0x10c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d007      	beq.n	8009fa2 <TIM_OC3_SetConfig+0x72>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a2a      	ldr	r2, [pc, #168]	; (800a040 <TIM_OC3_SetConfig+0x110>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d003      	beq.n	8009fa2 <TIM_OC3_SetConfig+0x72>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a29      	ldr	r2, [pc, #164]	; (800a044 <TIM_OC3_SetConfig+0x114>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d10d      	bne.n	8009fbe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	021b      	lsls	r3, r3, #8
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fbc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a1e      	ldr	r2, [pc, #120]	; (800a03c <TIM_OC3_SetConfig+0x10c>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d013      	beq.n	8009fee <TIM_OC3_SetConfig+0xbe>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a1d      	ldr	r2, [pc, #116]	; (800a040 <TIM_OC3_SetConfig+0x110>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d00f      	beq.n	8009fee <TIM_OC3_SetConfig+0xbe>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a1d      	ldr	r2, [pc, #116]	; (800a048 <TIM_OC3_SetConfig+0x118>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d00b      	beq.n	8009fee <TIM_OC3_SetConfig+0xbe>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a1c      	ldr	r2, [pc, #112]	; (800a04c <TIM_OC3_SetConfig+0x11c>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d007      	beq.n	8009fee <TIM_OC3_SetConfig+0xbe>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a1b      	ldr	r2, [pc, #108]	; (800a050 <TIM_OC3_SetConfig+0x120>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d003      	beq.n	8009fee <TIM_OC3_SetConfig+0xbe>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a16      	ldr	r2, [pc, #88]	; (800a044 <TIM_OC3_SetConfig+0x114>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d113      	bne.n	800a016 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	4313      	orrs	r3, r2
 800a008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	011b      	lsls	r3, r3, #4
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	4313      	orrs	r3, r2
 800a014:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	685a      	ldr	r2, [r3, #4]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	621a      	str	r2, [r3, #32]
}
 800a030:	bf00      	nop
 800a032:	371c      	adds	r7, #28
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	40012c00 	.word	0x40012c00
 800a040:	40013400 	.word	0x40013400
 800a044:	40015000 	.word	0x40015000
 800a048:	40014000 	.word	0x40014000
 800a04c:	40014400 	.word	0x40014400
 800a050:	40014800 	.word	0x40014800

0800a054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	021b      	lsls	r3, r3, #8
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	4313      	orrs	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	031b      	lsls	r3, r3, #12
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a1a      	ldr	r2, [pc, #104]	; (800a11c <TIM_OC4_SetConfig+0xc8>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d013      	beq.n	800a0e0 <TIM_OC4_SetConfig+0x8c>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a19      	ldr	r2, [pc, #100]	; (800a120 <TIM_OC4_SetConfig+0xcc>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d00f      	beq.n	800a0e0 <TIM_OC4_SetConfig+0x8c>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a18      	ldr	r2, [pc, #96]	; (800a124 <TIM_OC4_SetConfig+0xd0>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d00b      	beq.n	800a0e0 <TIM_OC4_SetConfig+0x8c>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a17      	ldr	r2, [pc, #92]	; (800a128 <TIM_OC4_SetConfig+0xd4>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d007      	beq.n	800a0e0 <TIM_OC4_SetConfig+0x8c>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a16      	ldr	r2, [pc, #88]	; (800a12c <TIM_OC4_SetConfig+0xd8>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d003      	beq.n	800a0e0 <TIM_OC4_SetConfig+0x8c>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a15      	ldr	r2, [pc, #84]	; (800a130 <TIM_OC4_SetConfig+0xdc>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d109      	bne.n	800a0f4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	019b      	lsls	r3, r3, #6
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	685a      	ldr	r2, [r3, #4]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	621a      	str	r2, [r3, #32]
}
 800a10e:	bf00      	nop
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	40012c00 	.word	0x40012c00
 800a120:	40013400 	.word	0x40013400
 800a124:	40014000 	.word	0x40014000
 800a128:	40014400 	.word	0x40014400
 800a12c:	40014800 	.word	0x40014800
 800a130:	40015000 	.word	0x40015000

0800a134 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a134:	b480      	push	{r7}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	041b      	lsls	r3, r3, #16
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	4313      	orrs	r3, r2
 800a184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a19      	ldr	r2, [pc, #100]	; (800a1f0 <TIM_OC5_SetConfig+0xbc>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d013      	beq.n	800a1b6 <TIM_OC5_SetConfig+0x82>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a18      	ldr	r2, [pc, #96]	; (800a1f4 <TIM_OC5_SetConfig+0xc0>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d00f      	beq.n	800a1b6 <TIM_OC5_SetConfig+0x82>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a17      	ldr	r2, [pc, #92]	; (800a1f8 <TIM_OC5_SetConfig+0xc4>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d00b      	beq.n	800a1b6 <TIM_OC5_SetConfig+0x82>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a16      	ldr	r2, [pc, #88]	; (800a1fc <TIM_OC5_SetConfig+0xc8>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d007      	beq.n	800a1b6 <TIM_OC5_SetConfig+0x82>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a15      	ldr	r2, [pc, #84]	; (800a200 <TIM_OC5_SetConfig+0xcc>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d003      	beq.n	800a1b6 <TIM_OC5_SetConfig+0x82>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a14      	ldr	r2, [pc, #80]	; (800a204 <TIM_OC5_SetConfig+0xd0>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d109      	bne.n	800a1ca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	685a      	ldr	r2, [r3, #4]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	621a      	str	r2, [r3, #32]
}
 800a1e4:	bf00      	nop
 800a1e6:	371c      	adds	r7, #28
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	40012c00 	.word	0x40012c00
 800a1f4:	40013400 	.word	0x40013400
 800a1f8:	40014000 	.word	0x40014000
 800a1fc:	40014400 	.word	0x40014400
 800a200:	40014800 	.word	0x40014800
 800a204:	40015000 	.word	0x40015000

0800a208 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a23a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	021b      	lsls	r3, r3, #8
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	4313      	orrs	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a24e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	051b      	lsls	r3, r3, #20
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	4313      	orrs	r3, r2
 800a25a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a1a      	ldr	r2, [pc, #104]	; (800a2c8 <TIM_OC6_SetConfig+0xc0>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d013      	beq.n	800a28c <TIM_OC6_SetConfig+0x84>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a19      	ldr	r2, [pc, #100]	; (800a2cc <TIM_OC6_SetConfig+0xc4>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d00f      	beq.n	800a28c <TIM_OC6_SetConfig+0x84>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a18      	ldr	r2, [pc, #96]	; (800a2d0 <TIM_OC6_SetConfig+0xc8>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d00b      	beq.n	800a28c <TIM_OC6_SetConfig+0x84>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a17      	ldr	r2, [pc, #92]	; (800a2d4 <TIM_OC6_SetConfig+0xcc>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d007      	beq.n	800a28c <TIM_OC6_SetConfig+0x84>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a16      	ldr	r2, [pc, #88]	; (800a2d8 <TIM_OC6_SetConfig+0xd0>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d003      	beq.n	800a28c <TIM_OC6_SetConfig+0x84>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a15      	ldr	r2, [pc, #84]	; (800a2dc <TIM_OC6_SetConfig+0xd4>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d109      	bne.n	800a2a0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a292:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	029b      	lsls	r3, r3, #10
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	621a      	str	r2, [r3, #32]
}
 800a2ba:	bf00      	nop
 800a2bc:	371c      	adds	r7, #28
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	40012c00 	.word	0x40012c00
 800a2cc:	40013400 	.word	0x40013400
 800a2d0:	40014000 	.word	0x40014000
 800a2d4:	40014400 	.word	0x40014400
 800a2d8:	40014800 	.word	0x40014800
 800a2dc:	40015000 	.word	0x40015000

0800a2e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6a1b      	ldr	r3, [r3, #32]
 800a2f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	f023 0201 	bic.w	r2, r3, #1
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a30a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	011b      	lsls	r3, r3, #4
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	4313      	orrs	r3, r2
 800a314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f023 030a 	bic.w	r3, r3, #10
 800a31c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	4313      	orrs	r3, r2
 800a324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	621a      	str	r2, [r3, #32]
}
 800a332:	bf00      	nop
 800a334:	371c      	adds	r7, #28
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a33e:	b480      	push	{r7}
 800a340:	b087      	sub	sp, #28
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	f023 0210 	bic.w	r2, r3, #16
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	031b      	lsls	r3, r3, #12
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	4313      	orrs	r3, r2
 800a372:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a37a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	011b      	lsls	r3, r3, #4
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	4313      	orrs	r3, r2
 800a384:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	621a      	str	r2, [r3, #32]
}
 800a392:	bf00      	nop
 800a394:	371c      	adds	r7, #28
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b085      	sub	sp, #20
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	f043 0307 	orr.w	r3, r3, #7
 800a3c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	609a      	str	r2, [r3, #8]
}
 800a3c8:	bf00      	nop
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
 800a3e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	021a      	lsls	r2, r3, #8
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	609a      	str	r2, [r3, #8]
}
 800a408:	bf00      	nop
 800a40a:	371c      	adds	r7, #28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f003 031f 	and.w	r3, r3, #31
 800a426:	2201      	movs	r2, #1
 800a428:	fa02 f303 	lsl.w	r3, r2, r3
 800a42c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6a1a      	ldr	r2, [r3, #32]
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	43db      	mvns	r3, r3
 800a436:	401a      	ands	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6a1a      	ldr	r2, [r3, #32]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f003 031f 	and.w	r3, r3, #31
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	fa01 f303 	lsl.w	r3, r1, r3
 800a44c:	431a      	orrs	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	621a      	str	r2, [r3, #32]
}
 800a452:	bf00      	nop
 800a454:	371c      	adds	r7, #28
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
	...

0800a460 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d109      	bne.n	800a484 <HAL_TIMEx_PWMN_Start+0x24>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b01      	cmp	r3, #1
 800a47a:	bf14      	ite	ne
 800a47c:	2301      	movne	r3, #1
 800a47e:	2300      	moveq	r3, #0
 800a480:	b2db      	uxtb	r3, r3
 800a482:	e022      	b.n	800a4ca <HAL_TIMEx_PWMN_Start+0x6a>
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	2b04      	cmp	r3, #4
 800a488:	d109      	bne.n	800a49e <HAL_TIMEx_PWMN_Start+0x3e>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a490:	b2db      	uxtb	r3, r3
 800a492:	2b01      	cmp	r3, #1
 800a494:	bf14      	ite	ne
 800a496:	2301      	movne	r3, #1
 800a498:	2300      	moveq	r3, #0
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	e015      	b.n	800a4ca <HAL_TIMEx_PWMN_Start+0x6a>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b08      	cmp	r3, #8
 800a4a2:	d109      	bne.n	800a4b8 <HAL_TIMEx_PWMN_Start+0x58>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	bf14      	ite	ne
 800a4b0:	2301      	movne	r3, #1
 800a4b2:	2300      	moveq	r3, #0
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	e008      	b.n	800a4ca <HAL_TIMEx_PWMN_Start+0x6a>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	bf14      	ite	ne
 800a4c4:	2301      	movne	r3, #1
 800a4c6:	2300      	moveq	r3, #0
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e06e      	b.n	800a5b0 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d104      	bne.n	800a4e2 <HAL_TIMEx_PWMN_Start+0x82>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4e0:	e013      	b.n	800a50a <HAL_TIMEx_PWMN_Start+0xaa>
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d104      	bne.n	800a4f2 <HAL_TIMEx_PWMN_Start+0x92>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4f0:	e00b      	b.n	800a50a <HAL_TIMEx_PWMN_Start+0xaa>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b08      	cmp	r3, #8
 800a4f6:	d104      	bne.n	800a502 <HAL_TIMEx_PWMN_Start+0xa2>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a500:	e003      	b.n	800a50a <HAL_TIMEx_PWMN_Start+0xaa>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2202      	movs	r2, #2
 800a506:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2204      	movs	r2, #4
 800a510:	6839      	ldr	r1, [r7, #0]
 800a512:	4618      	mov	r0, r3
 800a514:	f000 f98e 	bl	800a834 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a526:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a22      	ldr	r2, [pc, #136]	; (800a5b8 <HAL_TIMEx_PWMN_Start+0x158>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d01d      	beq.n	800a56e <HAL_TIMEx_PWMN_Start+0x10e>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a53a:	d018      	beq.n	800a56e <HAL_TIMEx_PWMN_Start+0x10e>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a1e      	ldr	r2, [pc, #120]	; (800a5bc <HAL_TIMEx_PWMN_Start+0x15c>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d013      	beq.n	800a56e <HAL_TIMEx_PWMN_Start+0x10e>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a1d      	ldr	r2, [pc, #116]	; (800a5c0 <HAL_TIMEx_PWMN_Start+0x160>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d00e      	beq.n	800a56e <HAL_TIMEx_PWMN_Start+0x10e>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a1b      	ldr	r2, [pc, #108]	; (800a5c4 <HAL_TIMEx_PWMN_Start+0x164>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d009      	beq.n	800a56e <HAL_TIMEx_PWMN_Start+0x10e>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a1a      	ldr	r2, [pc, #104]	; (800a5c8 <HAL_TIMEx_PWMN_Start+0x168>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d004      	beq.n	800a56e <HAL_TIMEx_PWMN_Start+0x10e>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a18      	ldr	r2, [pc, #96]	; (800a5cc <HAL_TIMEx_PWMN_Start+0x16c>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d115      	bne.n	800a59a <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	689a      	ldr	r2, [r3, #8]
 800a574:	4b16      	ldr	r3, [pc, #88]	; (800a5d0 <HAL_TIMEx_PWMN_Start+0x170>)
 800a576:	4013      	ands	r3, r2
 800a578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2b06      	cmp	r3, #6
 800a57e:	d015      	beq.n	800a5ac <HAL_TIMEx_PWMN_Start+0x14c>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a586:	d011      	beq.n	800a5ac <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f042 0201 	orr.w	r2, r2, #1
 800a596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a598:	e008      	b.n	800a5ac <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f042 0201 	orr.w	r2, r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	e000      	b.n	800a5ae <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	40012c00 	.word	0x40012c00
 800a5bc:	40000400 	.word	0x40000400
 800a5c0:	40000800 	.word	0x40000800
 800a5c4:	40013400 	.word	0x40013400
 800a5c8:	40014000 	.word	0x40014000
 800a5cc:	40015000 	.word	0x40015000
 800a5d0:	00010007 	.word	0x00010007

0800a5d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d101      	bne.n	800a5ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	e06d      	b.n	800a6c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a30      	ldr	r2, [pc, #192]	; (800a6d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d009      	beq.n	800a62a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a2f      	ldr	r2, [pc, #188]	; (800a6d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d004      	beq.n	800a62a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a2d      	ldr	r2, [pc, #180]	; (800a6dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d108      	bne.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a630:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a1e      	ldr	r2, [pc, #120]	; (800a6d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d01d      	beq.n	800a69c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a668:	d018      	beq.n	800a69c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a1c      	ldr	r2, [pc, #112]	; (800a6e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d013      	beq.n	800a69c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a1a      	ldr	r2, [pc, #104]	; (800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d00e      	beq.n	800a69c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a15      	ldr	r2, [pc, #84]	; (800a6d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d009      	beq.n	800a69c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a16      	ldr	r2, [pc, #88]	; (800a6e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d004      	beq.n	800a69c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a11      	ldr	r2, [pc, #68]	; (800a6dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d10c      	bne.n	800a6b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3714      	adds	r7, #20
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	40012c00 	.word	0x40012c00
 800a6d8:	40013400 	.word	0x40013400
 800a6dc:	40015000 	.word	0x40015000
 800a6e0:	40000400 	.word	0x40000400
 800a6e4:	40000800 	.word	0x40000800
 800a6e8:	40014000 	.word	0x40014000

0800a6ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a700:	2b01      	cmp	r3, #1
 800a702:	d101      	bne.n	800a708 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a704:	2302      	movs	r3, #2
 800a706:	e06a      	b.n	800a7de <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	4313      	orrs	r3, r2
 800a72a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	4313      	orrs	r3, r2
 800a738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4313      	orrs	r3, r2
 800a746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	4313      	orrs	r3, r2
 800a754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	695b      	ldr	r3, [r3, #20]
 800a760:	4313      	orrs	r3, r2
 800a762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76e:	4313      	orrs	r3, r2
 800a770:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	041b      	lsls	r3, r3, #16
 800a77e:	4313      	orrs	r3, r2
 800a780:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a19      	ldr	r2, [pc, #100]	; (800a7ec <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d009      	beq.n	800a7a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a17      	ldr	r2, [pc, #92]	; (800a7f0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d004      	beq.n	800a7a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a16      	ldr	r2, [pc, #88]	; (800a7f4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d115      	bne.n	800a7cc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7aa:	051b      	lsls	r3, r3, #20
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	6a1b      	ldr	r3, [r3, #32]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	40012c00 	.word	0x40012c00
 800a7f0:	40013400 	.word	0x40013400
 800a7f4:	40015000 	.word	0x40015000

0800a7f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	f003 031f 	and.w	r3, r3, #31
 800a846:	2204      	movs	r2, #4
 800a848:	fa02 f303 	lsl.w	r3, r2, r3
 800a84c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6a1a      	ldr	r2, [r3, #32]
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	43db      	mvns	r3, r3
 800a856:	401a      	ands	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6a1a      	ldr	r2, [r3, #32]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	f003 031f 	and.w	r3, r3, #31
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	fa01 f303 	lsl.w	r3, r1, r3
 800a86c:	431a      	orrs	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	621a      	str	r2, [r3, #32]
}
 800a872:	bf00      	nop
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d101      	bne.n	800a890 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	e040      	b.n	800a912 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a894:	2b00      	cmp	r3, #0
 800a896:	d106      	bne.n	800a8a6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f7f8 fb35 	bl	8002f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2224      	movs	r2, #36	; 0x24
 800a8aa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 0201 	bic.w	r2, r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fc07 	bl	800b0d0 <UART_SetConfig>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d101      	bne.n	800a8cc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e022      	b.n	800a912 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fdcf 	bl	800b478 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	689a      	ldr	r2, [r3, #8]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f042 0201 	orr.w	r2, r2, #1
 800a908:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fe56 	bl	800b5bc <UART_CheckIdleState>
 800a910:	4603      	mov	r3, r0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
	...

0800a91c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b08a      	sub	sp, #40	; 0x28
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	4613      	mov	r3, r2
 800a928:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a92e:	2b20      	cmp	r3, #32
 800a930:	d165      	bne.n	800a9fe <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <HAL_UART_Transmit_DMA+0x22>
 800a938:	88fb      	ldrh	r3, [r7, #6]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e05e      	b.n	800aa00 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	88fa      	ldrh	r2, [r7, #6]
 800a94c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	88fa      	ldrh	r2, [r7, #6]
 800a954:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2221      	movs	r2, #33	; 0x21
 800a964:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d027      	beq.n	800a9be <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a972:	4a25      	ldr	r2, [pc, #148]	; (800aa08 <HAL_UART_Transmit_DMA+0xec>)
 800a974:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a97a:	4a24      	ldr	r2, [pc, #144]	; (800aa0c <HAL_UART_Transmit_DMA+0xf0>)
 800a97c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a982:	4a23      	ldr	r2, [pc, #140]	; (800aa10 <HAL_UART_Transmit_DMA+0xf4>)
 800a984:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a98a:	2200      	movs	r2, #0
 800a98c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a996:	4619      	mov	r1, r3
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3328      	adds	r3, #40	; 0x28
 800a99e:	461a      	mov	r2, r3
 800a9a0:	88fb      	ldrh	r3, [r7, #6]
 800a9a2:	f7fa fbac 	bl	80050fe <HAL_DMA_Start_IT>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d008      	beq.n	800a9be <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2210      	movs	r2, #16
 800a9b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e020      	b.n	800aa00 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2240      	movs	r2, #64	; 0x40
 800a9c4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3308      	adds	r3, #8
 800a9cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	e853 3f00 	ldrex	r3, [r3]
 800a9d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	3308      	adds	r3, #8
 800a9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e6:	623a      	str	r2, [r7, #32]
 800a9e8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ea:	69f9      	ldr	r1, [r7, #28]
 800a9ec:	6a3a      	ldr	r2, [r7, #32]
 800a9ee:	e841 2300 	strex	r3, r2, [r1]
 800a9f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1e5      	bne.n	800a9c6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	e000      	b.n	800aa00 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800a9fe:	2302      	movs	r3, #2
  }
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3728      	adds	r7, #40	; 0x28
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	0800ba31 	.word	0x0800ba31
 800aa0c:	0800bac5 	.word	0x0800bac5
 800aa10:	0800bc45 	.word	0x0800bc45

0800aa14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b08a      	sub	sp, #40	; 0x28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa28:	2b20      	cmp	r3, #32
 800aa2a:	d132      	bne.n	800aa92 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d002      	beq.n	800aa38 <HAL_UART_Receive_DMA+0x24>
 800aa32:	88fb      	ldrh	r3, [r7, #6]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e02b      	b.n	800aa94 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d018      	beq.n	800aa82 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	e853 3f00 	ldrex	r3, [r3]
 800aa5c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aa64:	627b      	str	r3, [r7, #36]	; 0x24
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	623b      	str	r3, [r7, #32]
 800aa70:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa72:	69f9      	ldr	r1, [r7, #28]
 800aa74:	6a3a      	ldr	r2, [r7, #32]
 800aa76:	e841 2300 	strex	r3, r2, [r1]
 800aa7a:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1e6      	bne.n	800aa50 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aa82:	88fb      	ldrh	r3, [r7, #6]
 800aa84:	461a      	mov	r2, r3
 800aa86:	68b9      	ldr	r1, [r7, #8]
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f000 fea7 	bl	800b7dc <UART_Start_Receive_DMA>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	e000      	b.n	800aa94 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800aa92:	2302      	movs	r3, #2
  }
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3728      	adds	r7, #40	; 0x28
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b0ba      	sub	sp, #232	; 0xe8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aac2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aac6:	f640 030f 	movw	r3, #2063	; 0x80f
 800aaca:	4013      	ands	r3, r2
 800aacc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d115      	bne.n	800ab04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aadc:	f003 0320 	and.w	r3, r3, #32
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00f      	beq.n	800ab04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aae8:	f003 0320 	and.w	r3, r3, #32
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d009      	beq.n	800ab04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 82ab 	beq.w	800b050 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	4798      	blx	r3
      }
      return;
 800ab02:	e2a5      	b.n	800b050 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 8117 	beq.w	800ad3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ab0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d106      	bne.n	800ab28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ab1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ab1e:	4b85      	ldr	r3, [pc, #532]	; (800ad34 <HAL_UART_IRQHandler+0x298>)
 800ab20:	4013      	ands	r3, r2
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f000 810a 	beq.w	800ad3c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d011      	beq.n	800ab58 <HAL_UART_IRQHandler+0xbc>
 800ab34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2201      	movs	r2, #1
 800ab46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab4e:	f043 0201 	orr.w	r2, r3, #1
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d011      	beq.n	800ab88 <HAL_UART_IRQHandler+0xec>
 800ab64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab68:	f003 0301 	and.w	r3, r3, #1
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00b      	beq.n	800ab88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2202      	movs	r2, #2
 800ab76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab7e:	f043 0204 	orr.w	r2, r3, #4
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab8c:	f003 0304 	and.w	r3, r3, #4
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d011      	beq.n	800abb8 <HAL_UART_IRQHandler+0x11c>
 800ab94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00b      	beq.n	800abb8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2204      	movs	r2, #4
 800aba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abae:	f043 0202 	orr.w	r2, r3, #2
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800abb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abbc:	f003 0308 	and.w	r3, r3, #8
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d017      	beq.n	800abf4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800abc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abc8:	f003 0320 	and.w	r3, r3, #32
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d105      	bne.n	800abdc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800abd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abd4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00b      	beq.n	800abf4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2208      	movs	r2, #8
 800abe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abea:	f043 0208 	orr.w	r2, r3, #8
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800abf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d012      	beq.n	800ac26 <HAL_UART_IRQHandler+0x18a>
 800ac00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00c      	beq.n	800ac26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac1c:	f043 0220 	orr.w	r2, r3, #32
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 8211 	beq.w	800b054 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ac32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac36:	f003 0320 	and.w	r3, r3, #32
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00d      	beq.n	800ac5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ac3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac42:	f003 0320 	and.w	r3, r3, #32
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d007      	beq.n	800ac5a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac6e:	2b40      	cmp	r3, #64	; 0x40
 800ac70:	d005      	beq.n	800ac7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d04f      	beq.n	800ad1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fe72 	bl	800b968 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac8e:	2b40      	cmp	r3, #64	; 0x40
 800ac90:	d141      	bne.n	800ad16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3308      	adds	r3, #8
 800ac98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aca0:	e853 3f00 	ldrex	r3, [r3]
 800aca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800acac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	3308      	adds	r3, #8
 800acba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800acbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800acc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800acca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800acce:	e841 2300 	strex	r3, r2, [r1]
 800acd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800acd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1d9      	bne.n	800ac92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d013      	beq.n	800ad0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acea:	4a13      	ldr	r2, [pc, #76]	; (800ad38 <HAL_UART_IRQHandler+0x29c>)
 800acec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fa fa9b 	bl	800522e <HAL_DMA_Abort_IT>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d017      	beq.n	800ad2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad0c:	e00f      	b.n	800ad2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f9c8 	bl	800b0a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad14:	e00b      	b.n	800ad2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f9c4 	bl	800b0a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad1c:	e007      	b.n	800ad2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f9c0 	bl	800b0a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800ad2c:	e192      	b.n	800b054 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad2e:	bf00      	nop
    return;
 800ad30:	e190      	b.n	800b054 <HAL_UART_IRQHandler+0x5b8>
 800ad32:	bf00      	nop
 800ad34:	04000120 	.word	0x04000120
 800ad38:	0800bcc3 	.word	0x0800bcc3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	f040 814b 	bne.w	800afdc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4a:	f003 0310 	and.w	r3, r3, #16
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f000 8144 	beq.w	800afdc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad58:	f003 0310 	and.w	r3, r3, #16
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 813d 	beq.w	800afdc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2210      	movs	r2, #16
 800ad68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad74:	2b40      	cmp	r3, #64	; 0x40
 800ad76:	f040 80b5 	bne.w	800aee4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 8164 	beq.w	800b058 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ad96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	f080 815c 	bcs.w	800b058 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ada6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	2b20      	cmp	r3, #32
 800adb2:	f000 8086 	beq.w	800aec2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800adc2:	e853 3f00 	ldrex	r3, [r3]
 800adc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800adca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800add2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ade0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ade4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800adec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800adf0:	e841 2300 	strex	r3, r2, [r1]
 800adf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800adf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1da      	bne.n	800adb6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3308      	adds	r3, #8
 800ae06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae0a:	e853 3f00 	ldrex	r3, [r3]
 800ae0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae12:	f023 0301 	bic.w	r3, r3, #1
 800ae16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	3308      	adds	r3, #8
 800ae20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ae24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ae2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ae30:	e841 2300 	strex	r3, r2, [r1]
 800ae34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ae36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e1      	bne.n	800ae00 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3308      	adds	r3, #8
 800ae42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae46:	e853 3f00 	ldrex	r3, [r3]
 800ae4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ae4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ae60:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ae62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ae66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ae68:	e841 2300 	strex	r3, r2, [r1]
 800ae6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ae6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1e3      	bne.n	800ae3c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2220      	movs	r2, #32
 800ae78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae8a:	e853 3f00 	ldrex	r3, [r3]
 800ae8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ae90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae92:	f023 0310 	bic.w	r3, r3, #16
 800ae96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aea4:	65bb      	str	r3, [r7, #88]	; 0x58
 800aea6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aeaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aeac:	e841 2300 	strex	r3, r2, [r1]
 800aeb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aeb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1e4      	bne.n	800ae82 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fa f97d 	bl	80051bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2202      	movs	r2, #2
 800aec6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	4619      	mov	r1, r3
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f8eb 	bl	800b0b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aee2:	e0b9      	b.n	800b058 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aefe:	b29b      	uxth	r3, r3
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 80ab 	beq.w	800b05c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800af06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 80a6 	beq.w	800b05c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af18:	e853 3f00 	ldrex	r3, [r3]
 800af1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	461a      	mov	r2, r3
 800af2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af32:	647b      	str	r3, [r7, #68]	; 0x44
 800af34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af3a:	e841 2300 	strex	r3, r2, [r1]
 800af3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1e4      	bne.n	800af10 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	3308      	adds	r3, #8
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	e853 3f00 	ldrex	r3, [r3]
 800af54:	623b      	str	r3, [r7, #32]
   return(result);
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	f023 0301 	bic.w	r3, r3, #1
 800af5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	3308      	adds	r3, #8
 800af66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800af6a:	633a      	str	r2, [r7, #48]	; 0x30
 800af6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af72:	e841 2300 	strex	r3, r2, [r1]
 800af76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1e3      	bne.n	800af46 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2220      	movs	r2, #32
 800af82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	e853 3f00 	ldrex	r3, [r3]
 800af9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f023 0310 	bic.w	r3, r3, #16
 800afa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	461a      	mov	r2, r3
 800afb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800afb4:	61fb      	str	r3, [r7, #28]
 800afb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb8:	69b9      	ldr	r1, [r7, #24]
 800afba:	69fa      	ldr	r2, [r7, #28]
 800afbc:	e841 2300 	strex	r3, r2, [r1]
 800afc0:	617b      	str	r3, [r7, #20]
   return(result);
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1e4      	bne.n	800af92 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2202      	movs	r2, #2
 800afcc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800afce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f86f 	bl	800b0b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800afda:	e03f      	b.n	800b05c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800afdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00e      	beq.n	800b006 <HAL_UART_IRQHandler+0x56a>
 800afe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d008      	beq.n	800b006 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800affc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fe9f 	bl	800bd42 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b004:	e02d      	b.n	800b062 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b00a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00e      	beq.n	800b030 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d008      	beq.n	800b030 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b022:	2b00      	cmp	r3, #0
 800b024:	d01c      	beq.n	800b060 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
    }
    return;
 800b02e:	e017      	b.n	800b060 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d012      	beq.n	800b062 <HAL_UART_IRQHandler+0x5c6>
 800b03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00c      	beq.n	800b062 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fe50 	bl	800bcee <UART_EndTransmit_IT>
    return;
 800b04e:	e008      	b.n	800b062 <HAL_UART_IRQHandler+0x5c6>
      return;
 800b050:	bf00      	nop
 800b052:	e006      	b.n	800b062 <HAL_UART_IRQHandler+0x5c6>
    return;
 800b054:	bf00      	nop
 800b056:	e004      	b.n	800b062 <HAL_UART_IRQHandler+0x5c6>
      return;
 800b058:	bf00      	nop
 800b05a:	e002      	b.n	800b062 <HAL_UART_IRQHandler+0x5c6>
      return;
 800b05c:	bf00      	nop
 800b05e:	e000      	b.n	800b062 <HAL_UART_IRQHandler+0x5c6>
    return;
 800b060:	bf00      	nop
  }

}
 800b062:	37e8      	adds	r7, #232	; 0xe8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b0ac:	bf00      	nop
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	689a      	ldr	r2, [r3, #8]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	431a      	orrs	r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	431a      	orrs	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	69db      	ldr	r3, [r3, #28]
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	4b92      	ldr	r3, [pc, #584]	; (800b344 <UART_SetConfig+0x274>)
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	6812      	ldr	r2, [r2, #0]
 800b102:	6979      	ldr	r1, [r7, #20]
 800b104:	430b      	orrs	r3, r1
 800b106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68da      	ldr	r2, [r3, #12]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	430a      	orrs	r2, r1
 800b11c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	699b      	ldr	r3, [r3, #24]
 800b122:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a1b      	ldr	r3, [r3, #32]
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	430a      	orrs	r2, r1
 800b140:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a80      	ldr	r2, [pc, #512]	; (800b348 <UART_SetConfig+0x278>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d120      	bne.n	800b18e <UART_SetConfig+0xbe>
 800b14c:	4b7f      	ldr	r3, [pc, #508]	; (800b34c <UART_SetConfig+0x27c>)
 800b14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b150:	f003 0303 	and.w	r3, r3, #3
 800b154:	2b03      	cmp	r3, #3
 800b156:	d817      	bhi.n	800b188 <UART_SetConfig+0xb8>
 800b158:	a201      	add	r2, pc, #4	; (adr r2, 800b160 <UART_SetConfig+0x90>)
 800b15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15e:	bf00      	nop
 800b160:	0800b171 	.word	0x0800b171
 800b164:	0800b17d 	.word	0x0800b17d
 800b168:	0800b183 	.word	0x0800b183
 800b16c:	0800b177 	.word	0x0800b177
 800b170:	2301      	movs	r3, #1
 800b172:	77fb      	strb	r3, [r7, #31]
 800b174:	e0b5      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b176:	2302      	movs	r3, #2
 800b178:	77fb      	strb	r3, [r7, #31]
 800b17a:	e0b2      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b17c:	2304      	movs	r3, #4
 800b17e:	77fb      	strb	r3, [r7, #31]
 800b180:	e0af      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b182:	2308      	movs	r3, #8
 800b184:	77fb      	strb	r3, [r7, #31]
 800b186:	e0ac      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b188:	2310      	movs	r3, #16
 800b18a:	77fb      	strb	r3, [r7, #31]
 800b18c:	e0a9      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a6f      	ldr	r2, [pc, #444]	; (800b350 <UART_SetConfig+0x280>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d124      	bne.n	800b1e2 <UART_SetConfig+0x112>
 800b198:	4b6c      	ldr	r3, [pc, #432]	; (800b34c <UART_SetConfig+0x27c>)
 800b19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b1a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1a4:	d011      	beq.n	800b1ca <UART_SetConfig+0xfa>
 800b1a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1aa:	d817      	bhi.n	800b1dc <UART_SetConfig+0x10c>
 800b1ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1b0:	d011      	beq.n	800b1d6 <UART_SetConfig+0x106>
 800b1b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1b6:	d811      	bhi.n	800b1dc <UART_SetConfig+0x10c>
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <UART_SetConfig+0xf4>
 800b1bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1c0:	d006      	beq.n	800b1d0 <UART_SetConfig+0x100>
 800b1c2:	e00b      	b.n	800b1dc <UART_SetConfig+0x10c>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	77fb      	strb	r3, [r7, #31]
 800b1c8:	e08b      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b1ca:	2302      	movs	r3, #2
 800b1cc:	77fb      	strb	r3, [r7, #31]
 800b1ce:	e088      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b1d0:	2304      	movs	r3, #4
 800b1d2:	77fb      	strb	r3, [r7, #31]
 800b1d4:	e085      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b1d6:	2308      	movs	r3, #8
 800b1d8:	77fb      	strb	r3, [r7, #31]
 800b1da:	e082      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b1dc:	2310      	movs	r3, #16
 800b1de:	77fb      	strb	r3, [r7, #31]
 800b1e0:	e07f      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a5b      	ldr	r2, [pc, #364]	; (800b354 <UART_SetConfig+0x284>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d124      	bne.n	800b236 <UART_SetConfig+0x166>
 800b1ec:	4b57      	ldr	r3, [pc, #348]	; (800b34c <UART_SetConfig+0x27c>)
 800b1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b1f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b1f8:	d011      	beq.n	800b21e <UART_SetConfig+0x14e>
 800b1fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b1fe:	d817      	bhi.n	800b230 <UART_SetConfig+0x160>
 800b200:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b204:	d011      	beq.n	800b22a <UART_SetConfig+0x15a>
 800b206:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b20a:	d811      	bhi.n	800b230 <UART_SetConfig+0x160>
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <UART_SetConfig+0x148>
 800b210:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b214:	d006      	beq.n	800b224 <UART_SetConfig+0x154>
 800b216:	e00b      	b.n	800b230 <UART_SetConfig+0x160>
 800b218:	2300      	movs	r3, #0
 800b21a:	77fb      	strb	r3, [r7, #31]
 800b21c:	e061      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b21e:	2302      	movs	r3, #2
 800b220:	77fb      	strb	r3, [r7, #31]
 800b222:	e05e      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b224:	2304      	movs	r3, #4
 800b226:	77fb      	strb	r3, [r7, #31]
 800b228:	e05b      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b22a:	2308      	movs	r3, #8
 800b22c:	77fb      	strb	r3, [r7, #31]
 800b22e:	e058      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b230:	2310      	movs	r3, #16
 800b232:	77fb      	strb	r3, [r7, #31]
 800b234:	e055      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a47      	ldr	r2, [pc, #284]	; (800b358 <UART_SetConfig+0x288>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d124      	bne.n	800b28a <UART_SetConfig+0x1ba>
 800b240:	4b42      	ldr	r3, [pc, #264]	; (800b34c <UART_SetConfig+0x27c>)
 800b242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b244:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b248:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b24c:	d011      	beq.n	800b272 <UART_SetConfig+0x1a2>
 800b24e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b252:	d817      	bhi.n	800b284 <UART_SetConfig+0x1b4>
 800b254:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b258:	d011      	beq.n	800b27e <UART_SetConfig+0x1ae>
 800b25a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b25e:	d811      	bhi.n	800b284 <UART_SetConfig+0x1b4>
 800b260:	2b00      	cmp	r3, #0
 800b262:	d003      	beq.n	800b26c <UART_SetConfig+0x19c>
 800b264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b268:	d006      	beq.n	800b278 <UART_SetConfig+0x1a8>
 800b26a:	e00b      	b.n	800b284 <UART_SetConfig+0x1b4>
 800b26c:	2300      	movs	r3, #0
 800b26e:	77fb      	strb	r3, [r7, #31]
 800b270:	e037      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b272:	2302      	movs	r3, #2
 800b274:	77fb      	strb	r3, [r7, #31]
 800b276:	e034      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b278:	2304      	movs	r3, #4
 800b27a:	77fb      	strb	r3, [r7, #31]
 800b27c:	e031      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b27e:	2308      	movs	r3, #8
 800b280:	77fb      	strb	r3, [r7, #31]
 800b282:	e02e      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b284:	2310      	movs	r3, #16
 800b286:	77fb      	strb	r3, [r7, #31]
 800b288:	e02b      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a33      	ldr	r2, [pc, #204]	; (800b35c <UART_SetConfig+0x28c>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d124      	bne.n	800b2de <UART_SetConfig+0x20e>
 800b294:	4b2d      	ldr	r3, [pc, #180]	; (800b34c <UART_SetConfig+0x27c>)
 800b296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b298:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b29c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b2a0:	d011      	beq.n	800b2c6 <UART_SetConfig+0x1f6>
 800b2a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b2a6:	d817      	bhi.n	800b2d8 <UART_SetConfig+0x208>
 800b2a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2ac:	d011      	beq.n	800b2d2 <UART_SetConfig+0x202>
 800b2ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2b2:	d811      	bhi.n	800b2d8 <UART_SetConfig+0x208>
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d003      	beq.n	800b2c0 <UART_SetConfig+0x1f0>
 800b2b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2bc:	d006      	beq.n	800b2cc <UART_SetConfig+0x1fc>
 800b2be:	e00b      	b.n	800b2d8 <UART_SetConfig+0x208>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	77fb      	strb	r3, [r7, #31]
 800b2c4:	e00d      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b2c6:	2302      	movs	r3, #2
 800b2c8:	77fb      	strb	r3, [r7, #31]
 800b2ca:	e00a      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b2cc:	2304      	movs	r3, #4
 800b2ce:	77fb      	strb	r3, [r7, #31]
 800b2d0:	e007      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b2d2:	2308      	movs	r3, #8
 800b2d4:	77fb      	strb	r3, [r7, #31]
 800b2d6:	e004      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b2d8:	2310      	movs	r3, #16
 800b2da:	77fb      	strb	r3, [r7, #31]
 800b2dc:	e001      	b.n	800b2e2 <UART_SetConfig+0x212>
 800b2de:	2310      	movs	r3, #16
 800b2e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2ea:	d16b      	bne.n	800b3c4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800b2ec:	7ffb      	ldrb	r3, [r7, #31]
 800b2ee:	2b08      	cmp	r3, #8
 800b2f0:	d838      	bhi.n	800b364 <UART_SetConfig+0x294>
 800b2f2:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <UART_SetConfig+0x228>)
 800b2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f8:	0800b31d 	.word	0x0800b31d
 800b2fc:	0800b325 	.word	0x0800b325
 800b300:	0800b32d 	.word	0x0800b32d
 800b304:	0800b365 	.word	0x0800b365
 800b308:	0800b333 	.word	0x0800b333
 800b30c:	0800b365 	.word	0x0800b365
 800b310:	0800b365 	.word	0x0800b365
 800b314:	0800b365 	.word	0x0800b365
 800b318:	0800b33b 	.word	0x0800b33b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b31c:	f7fc fbbe 	bl	8007a9c <HAL_RCC_GetPCLK1Freq>
 800b320:	61b8      	str	r0, [r7, #24]
        break;
 800b322:	e024      	b.n	800b36e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b324:	f7fc fbdc 	bl	8007ae0 <HAL_RCC_GetPCLK2Freq>
 800b328:	61b8      	str	r0, [r7, #24]
        break;
 800b32a:	e020      	b.n	800b36e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b32c:	4b0c      	ldr	r3, [pc, #48]	; (800b360 <UART_SetConfig+0x290>)
 800b32e:	61bb      	str	r3, [r7, #24]
        break;
 800b330:	e01d      	b.n	800b36e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b332:	f7fc fb3d 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 800b336:	61b8      	str	r0, [r7, #24]
        break;
 800b338:	e019      	b.n	800b36e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b33a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b33e:	61bb      	str	r3, [r7, #24]
        break;
 800b340:	e015      	b.n	800b36e <UART_SetConfig+0x29e>
 800b342:	bf00      	nop
 800b344:	efff69f3 	.word	0xefff69f3
 800b348:	40013800 	.word	0x40013800
 800b34c:	40021000 	.word	0x40021000
 800b350:	40004400 	.word	0x40004400
 800b354:	40004800 	.word	0x40004800
 800b358:	40004c00 	.word	0x40004c00
 800b35c:	40005000 	.word	0x40005000
 800b360:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800b364:	2300      	movs	r3, #0
 800b366:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	77bb      	strb	r3, [r7, #30]
        break;
 800b36c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d073      	beq.n	800b45c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	005a      	lsls	r2, r3, #1
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	085b      	lsrs	r3, r3, #1
 800b37e:	441a      	add	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	fbb2 f3f3 	udiv	r3, r2, r3
 800b388:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2b0f      	cmp	r3, #15
 800b38e:	d916      	bls.n	800b3be <UART_SetConfig+0x2ee>
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b396:	d212      	bcs.n	800b3be <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	f023 030f 	bic.w	r3, r3, #15
 800b3a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	085b      	lsrs	r3, r3, #1
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	f003 0307 	and.w	r3, r3, #7
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	89fb      	ldrh	r3, [r7, #14]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	89fa      	ldrh	r2, [r7, #14]
 800b3ba:	60da      	str	r2, [r3, #12]
 800b3bc:	e04e      	b.n	800b45c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	77bb      	strb	r3, [r7, #30]
 800b3c2:	e04b      	b.n	800b45c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3c4:	7ffb      	ldrb	r3, [r7, #31]
 800b3c6:	2b08      	cmp	r3, #8
 800b3c8:	d827      	bhi.n	800b41a <UART_SetConfig+0x34a>
 800b3ca:	a201      	add	r2, pc, #4	; (adr r2, 800b3d0 <UART_SetConfig+0x300>)
 800b3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d0:	0800b3f5 	.word	0x0800b3f5
 800b3d4:	0800b3fd 	.word	0x0800b3fd
 800b3d8:	0800b405 	.word	0x0800b405
 800b3dc:	0800b41b 	.word	0x0800b41b
 800b3e0:	0800b40b 	.word	0x0800b40b
 800b3e4:	0800b41b 	.word	0x0800b41b
 800b3e8:	0800b41b 	.word	0x0800b41b
 800b3ec:	0800b41b 	.word	0x0800b41b
 800b3f0:	0800b413 	.word	0x0800b413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3f4:	f7fc fb52 	bl	8007a9c <HAL_RCC_GetPCLK1Freq>
 800b3f8:	61b8      	str	r0, [r7, #24]
        break;
 800b3fa:	e013      	b.n	800b424 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3fc:	f7fc fb70 	bl	8007ae0 <HAL_RCC_GetPCLK2Freq>
 800b400:	61b8      	str	r0, [r7, #24]
        break;
 800b402:	e00f      	b.n	800b424 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b404:	4b1b      	ldr	r3, [pc, #108]	; (800b474 <UART_SetConfig+0x3a4>)
 800b406:	61bb      	str	r3, [r7, #24]
        break;
 800b408:	e00c      	b.n	800b424 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b40a:	f7fc fad1 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 800b40e:	61b8      	str	r0, [r7, #24]
        break;
 800b410:	e008      	b.n	800b424 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b416:	61bb      	str	r3, [r7, #24]
        break;
 800b418:	e004      	b.n	800b424 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800b41a:	2300      	movs	r3, #0
 800b41c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
 800b420:	77bb      	strb	r3, [r7, #30]
        break;
 800b422:	bf00      	nop
    }

    if (pclk != 0U)
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d018      	beq.n	800b45c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	085a      	lsrs	r2, r3, #1
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	441a      	add	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	fbb2 f3f3 	udiv	r3, r2, r3
 800b43c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	2b0f      	cmp	r3, #15
 800b442:	d909      	bls.n	800b458 <UART_SetConfig+0x388>
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b44a:	d205      	bcs.n	800b458 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	b29a      	uxth	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	60da      	str	r2, [r3, #12]
 800b456:	e001      	b.n	800b45c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b468:	7fbb      	ldrb	r3, [r7, #30]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3720      	adds	r7, #32
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	007a1200 	.word	0x007a1200

0800b478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00a      	beq.n	800b4a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a6:	f003 0302 	and.w	r3, r3, #2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00a      	beq.n	800b4c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	430a      	orrs	r2, r1
 800b4c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c8:	f003 0304 	and.w	r3, r3, #4
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00a      	beq.n	800b4e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ea:	f003 0308 	and.w	r3, r3, #8
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00a      	beq.n	800b508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	430a      	orrs	r2, r1
 800b506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50c:	f003 0310 	and.w	r3, r3, #16
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00a      	beq.n	800b52a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	430a      	orrs	r2, r1
 800b528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	f003 0320 	and.w	r3, r3, #32
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00a      	beq.n	800b54c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	430a      	orrs	r2, r1
 800b54a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b554:	2b00      	cmp	r3, #0
 800b556:	d01a      	beq.n	800b58e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	430a      	orrs	r2, r1
 800b56c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b576:	d10a      	bne.n	800b58e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	430a      	orrs	r2, r1
 800b58c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00a      	beq.n	800b5b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	430a      	orrs	r2, r1
 800b5ae:	605a      	str	r2, [r3, #4]
  }
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b098      	sub	sp, #96	; 0x60
 800b5c0:	af02      	add	r7, sp, #8
 800b5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5cc:	f7f7 ff54 	bl	8003478 <HAL_GetTick>
 800b5d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0308 	and.w	r3, r3, #8
 800b5dc:	2b08      	cmp	r3, #8
 800b5de:	d12e      	bne.n	800b63e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f88c 	bl	800b70c <UART_WaitOnFlagUntilTimeout>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d021      	beq.n	800b63e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b602:	e853 3f00 	ldrex	r3, [r3]
 800b606:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b60e:	653b      	str	r3, [r7, #80]	; 0x50
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	461a      	mov	r2, r3
 800b616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b618:	647b      	str	r3, [r7, #68]	; 0x44
 800b61a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b61e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b620:	e841 2300 	strex	r3, r2, [r1]
 800b624:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1e6      	bne.n	800b5fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2220      	movs	r2, #32
 800b630:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e062      	b.n	800b704 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0304 	and.w	r3, r3, #4
 800b648:	2b04      	cmp	r3, #4
 800b64a:	d149      	bne.n	800b6e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b64c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b654:	2200      	movs	r2, #0
 800b656:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f856 	bl	800b70c <UART_WaitOnFlagUntilTimeout>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d03c      	beq.n	800b6e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	e853 3f00 	ldrex	r3, [r3]
 800b672:	623b      	str	r3, [r7, #32]
   return(result);
 800b674:	6a3b      	ldr	r3, [r7, #32]
 800b676:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b67a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b684:	633b      	str	r3, [r7, #48]	; 0x30
 800b686:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b68a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b68c:	e841 2300 	strex	r3, r2, [r1]
 800b690:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e6      	bne.n	800b666 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3308      	adds	r3, #8
 800b69e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	e853 3f00 	ldrex	r3, [r3]
 800b6a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f023 0301 	bic.w	r3, r3, #1
 800b6ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6b8:	61fa      	str	r2, [r7, #28]
 800b6ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6bc:	69b9      	ldr	r1, [r7, #24]
 800b6be:	69fa      	ldr	r2, [r7, #28]
 800b6c0:	e841 2300 	strex	r3, r2, [r1]
 800b6c4:	617b      	str	r3, [r7, #20]
   return(result);
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1e5      	bne.n	800b698 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	e011      	b.n	800b704 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2220      	movs	r2, #32
 800b6e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2220      	movs	r2, #32
 800b6ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3758      	adds	r7, #88	; 0x58
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	603b      	str	r3, [r7, #0]
 800b718:	4613      	mov	r3, r2
 800b71a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b71c:	e049      	b.n	800b7b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b724:	d045      	beq.n	800b7b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b726:	f7f7 fea7 	bl	8003478 <HAL_GetTick>
 800b72a:	4602      	mov	r2, r0
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	69ba      	ldr	r2, [r7, #24]
 800b732:	429a      	cmp	r2, r3
 800b734:	d302      	bcc.n	800b73c <UART_WaitOnFlagUntilTimeout+0x30>
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d101      	bne.n	800b740 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e048      	b.n	800b7d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 0304 	and.w	r3, r3, #4
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d031      	beq.n	800b7b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	69db      	ldr	r3, [r3, #28]
 800b754:	f003 0308 	and.w	r3, r3, #8
 800b758:	2b08      	cmp	r3, #8
 800b75a:	d110      	bne.n	800b77e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2208      	movs	r2, #8
 800b762:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f000 f8ff 	bl	800b968 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2208      	movs	r2, #8
 800b76e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e029      	b.n	800b7d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	69db      	ldr	r3, [r3, #28]
 800b784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b78c:	d111      	bne.n	800b7b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f000 f8e5 	bl	800b968 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2220      	movs	r2, #32
 800b7a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e00f      	b.n	800b7d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	69da      	ldr	r2, [r3, #28]
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4013      	ands	r3, r2
 800b7bc:	68ba      	ldr	r2, [r7, #8]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	bf0c      	ite	eq
 800b7c2:	2301      	moveq	r3, #1
 800b7c4:	2300      	movne	r3, #0
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d0a6      	beq.n	800b71e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
	...

0800b7dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b096      	sub	sp, #88	; 0x58
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	88fa      	ldrh	r2, [r7, #6]
 800b7f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2222      	movs	r2, #34	; 0x22
 800b804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d028      	beq.n	800b862 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b814:	4a3e      	ldr	r2, [pc, #248]	; (800b910 <UART_Start_Receive_DMA+0x134>)
 800b816:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b81c:	4a3d      	ldr	r2, [pc, #244]	; (800b914 <UART_Start_Receive_DMA+0x138>)
 800b81e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b824:	4a3c      	ldr	r2, [pc, #240]	; (800b918 <UART_Start_Receive_DMA+0x13c>)
 800b826:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b82c:	2200      	movs	r2, #0
 800b82e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3324      	adds	r3, #36	; 0x24
 800b83a:	4619      	mov	r1, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b840:	461a      	mov	r2, r3
 800b842:	88fb      	ldrh	r3, [r7, #6]
 800b844:	f7f9 fc5b 	bl	80050fe <HAL_DMA_Start_IT>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d009      	beq.n	800b862 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2210      	movs	r2, #16
 800b852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2220      	movs	r2, #32
 800b85a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e051      	b.n	800b906 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d018      	beq.n	800b89c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b872:	e853 3f00 	ldrex	r3, [r3]
 800b876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b87e:	657b      	str	r3, [r7, #84]	; 0x54
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	461a      	mov	r2, r3
 800b886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b888:	64bb      	str	r3, [r7, #72]	; 0x48
 800b88a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b88e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b890:	e841 2300 	strex	r3, r2, [r1]
 800b894:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e6      	bne.n	800b86a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	e853 3f00 	ldrex	r3, [r3]
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	f043 0301 	orr.w	r3, r3, #1
 800b8b2:	653b      	str	r3, [r7, #80]	; 0x50
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	3308      	adds	r3, #8
 800b8ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8bc:	637a      	str	r2, [r7, #52]	; 0x34
 800b8be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8c4:	e841 2300 	strex	r3, r2, [r1]
 800b8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1e5      	bne.n	800b89c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	3308      	adds	r3, #8
 800b8d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	e853 3f00 	ldrex	r3, [r3]
 800b8de:	613b      	str	r3, [r7, #16]
   return(result);
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	3308      	adds	r3, #8
 800b8ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8f0:	623a      	str	r2, [r7, #32]
 800b8f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f4:	69f9      	ldr	r1, [r7, #28]
 800b8f6:	6a3a      	ldr	r2, [r7, #32]
 800b8f8:	e841 2300 	strex	r3, r2, [r1]
 800b8fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1e5      	bne.n	800b8d0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3758      	adds	r7, #88	; 0x58
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	0800bae1 	.word	0x0800bae1
 800b914:	0800bc07 	.word	0x0800bc07
 800b918:	0800bc45 	.word	0x0800bc45

0800b91c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b089      	sub	sp, #36	; 0x24
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	e853 3f00 	ldrex	r3, [r3]
 800b930:	60bb      	str	r3, [r7, #8]
   return(result);
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b938:	61fb      	str	r3, [r7, #28]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	461a      	mov	r2, r3
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	61bb      	str	r3, [r7, #24]
 800b944:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b946:	6979      	ldr	r1, [r7, #20]
 800b948:	69ba      	ldr	r2, [r7, #24]
 800b94a:	e841 2300 	strex	r3, r2, [r1]
 800b94e:	613b      	str	r3, [r7, #16]
   return(result);
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1e6      	bne.n	800b924 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2220      	movs	r2, #32
 800b95a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b95c:	bf00      	nop
 800b95e:	3724      	adds	r7, #36	; 0x24
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b968:	b480      	push	{r7}
 800b96a:	b095      	sub	sp, #84	; 0x54
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b978:	e853 3f00 	ldrex	r3, [r3]
 800b97c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b984:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b98e:	643b      	str	r3, [r7, #64]	; 0x40
 800b990:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b992:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b994:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b996:	e841 2300 	strex	r3, r2, [r1]
 800b99a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1e6      	bne.n	800b970 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3308      	adds	r3, #8
 800b9a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9aa:	6a3b      	ldr	r3, [r7, #32]
 800b9ac:	e853 3f00 	ldrex	r3, [r3]
 800b9b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	f023 0301 	bic.w	r3, r3, #1
 800b9b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	3308      	adds	r3, #8
 800b9c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9ca:	e841 2300 	strex	r3, r2, [r1]
 800b9ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1e5      	bne.n	800b9a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d118      	bne.n	800ba10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	e853 3f00 	ldrex	r3, [r3]
 800b9ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	f023 0310 	bic.w	r3, r3, #16
 800b9f2:	647b      	str	r3, [r7, #68]	; 0x44
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9fc:	61bb      	str	r3, [r7, #24]
 800b9fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba00:	6979      	ldr	r1, [r7, #20]
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	e841 2300 	strex	r3, r2, [r1]
 800ba08:	613b      	str	r3, [r7, #16]
   return(result);
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1e6      	bne.n	800b9de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2220      	movs	r2, #32
 800ba14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ba24:	bf00      	nop
 800ba26:	3754      	adds	r7, #84	; 0x54
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b090      	sub	sp, #64	; 0x40
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	2b20      	cmp	r3, #32
 800ba44:	d037      	beq.n	800bab6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800ba46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	3308      	adds	r3, #8
 800ba54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	e853 3f00 	ldrex	r3, [r3]
 800ba5c:	623b      	str	r3, [r7, #32]
   return(result);
 800ba5e:	6a3b      	ldr	r3, [r7, #32]
 800ba60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba64:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	3308      	adds	r3, #8
 800ba6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba6e:	633a      	str	r2, [r7, #48]	; 0x30
 800ba70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba76:	e841 2300 	strex	r3, r2, [r1]
 800ba7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e5      	bne.n	800ba4e <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	e853 3f00 	ldrex	r3, [r3]
 800ba8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba96:	637b      	str	r3, [r7, #52]	; 0x34
 800ba98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa0:	61fb      	str	r3, [r7, #28]
 800baa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa4:	69b9      	ldr	r1, [r7, #24]
 800baa6:	69fa      	ldr	r2, [r7, #28]
 800baa8:	e841 2300 	strex	r3, r2, [r1]
 800baac:	617b      	str	r3, [r7, #20]
   return(result);
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1e6      	bne.n	800ba82 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bab4:	e002      	b.n	800babc <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800bab6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bab8:	f7ff fad6 	bl	800b068 <HAL_UART_TxCpltCallback>
}
 800babc:	bf00      	nop
 800babe:	3740      	adds	r7, #64	; 0x40
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7ff fad2 	bl	800b07c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bad8:	bf00      	nop
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b09c      	sub	sp, #112	; 0x70
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baec:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	2b20      	cmp	r3, #32
 800baf4:	d071      	beq.n	800bbda <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800baf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baf8:	2200      	movs	r2, #0
 800bafa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bafe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb06:	e853 3f00 	ldrex	r3, [r3]
 800bb0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb12:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb24:	e841 2300 	strex	r3, r2, [r1]
 800bb28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1e6      	bne.n	800bafe <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	3308      	adds	r3, #8
 800bb36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3a:	e853 3f00 	ldrex	r3, [r3]
 800bb3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb42:	f023 0301 	bic.w	r3, r3, #1
 800bb46:	667b      	str	r3, [r7, #100]	; 0x64
 800bb48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	3308      	adds	r3, #8
 800bb4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb50:	647a      	str	r2, [r7, #68]	; 0x44
 800bb52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb58:	e841 2300 	strex	r3, r2, [r1]
 800bb5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1e5      	bne.n	800bb30 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	3308      	adds	r3, #8
 800bb6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6e:	e853 3f00 	ldrex	r3, [r3]
 800bb72:	623b      	str	r3, [r7, #32]
   return(result);
 800bb74:	6a3b      	ldr	r3, [r7, #32]
 800bb76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb7a:	663b      	str	r3, [r7, #96]	; 0x60
 800bb7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	3308      	adds	r3, #8
 800bb82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb84:	633a      	str	r2, [r7, #48]	; 0x30
 800bb86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb8c:	e841 2300 	strex	r3, r2, [r1]
 800bb90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1e5      	bne.n	800bb64 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d118      	bne.n	800bbda <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	e853 3f00 	ldrex	r3, [r3]
 800bbb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f023 0310 	bic.w	r3, r3, #16
 800bbbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbc6:	61fb      	str	r3, [r7, #28]
 800bbc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbca:	69b9      	ldr	r1, [r7, #24]
 800bbcc:	69fa      	ldr	r2, [r7, #28]
 800bbce:	e841 2300 	strex	r3, r2, [r1]
 800bbd2:	617b      	str	r3, [r7, #20]
   return(result);
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1e6      	bne.n	800bba8 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbdc:	2200      	movs	r2, #0
 800bbde:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d107      	bne.n	800bbf8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bbe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bbf2:	f7ff fa61 	bl	800b0b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbf6:	e002      	b.n	800bbfe <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800bbf8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bbfa:	f7f5 f847 	bl	8000c8c <HAL_UART_RxCpltCallback>
}
 800bbfe:	bf00      	nop
 800bc00:	3770      	adds	r7, #112	; 0x70
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc12:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2201      	movs	r2, #1
 800bc18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d109      	bne.n	800bc36 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bc28:	085b      	lsrs	r3, r3, #1
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7ff fa42 	bl	800b0b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc34:	e002      	b.n	800bc3c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f7ff fa2a 	bl	800b090 <HAL_UART_RxHalfCpltCallback>
}
 800bc3c:	bf00      	nop
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc56:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc5e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc6a:	2b80      	cmp	r3, #128	; 0x80
 800bc6c:	d109      	bne.n	800bc82 <UART_DMAError+0x3e>
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	2b21      	cmp	r3, #33	; 0x21
 800bc72:	d106      	bne.n	800bc82 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800bc7c:	6978      	ldr	r0, [r7, #20]
 800bc7e:	f7ff fe4d 	bl	800b91c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc8c:	2b40      	cmp	r3, #64	; 0x40
 800bc8e:	d109      	bne.n	800bca4 <UART_DMAError+0x60>
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2b22      	cmp	r3, #34	; 0x22
 800bc94:	d106      	bne.n	800bca4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800bc9e:	6978      	ldr	r0, [r7, #20]
 800bca0:	f7ff fe62 	bl	800b968 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcaa:	f043 0210 	orr.w	r2, r3, #16
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcb4:	6978      	ldr	r0, [r7, #20]
 800bcb6:	f7ff f9f5 	bl	800b0a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcba:	bf00      	nop
 800bcbc:	3718      	adds	r7, #24
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b084      	sub	sp, #16
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f7ff f9df 	bl	800b0a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bce6:	bf00      	nop
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b088      	sub	sp, #32
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	e853 3f00 	ldrex	r3, [r3]
 800bd02:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd0a:	61fb      	str	r3, [r7, #28]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	461a      	mov	r2, r3
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	61bb      	str	r3, [r7, #24]
 800bd16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd18:	6979      	ldr	r1, [r7, #20]
 800bd1a:	69ba      	ldr	r2, [r7, #24]
 800bd1c:	e841 2300 	strex	r3, r2, [r1]
 800bd20:	613b      	str	r3, [r7, #16]
   return(result);
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1e6      	bne.n	800bcf6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2220      	movs	r2, #32
 800bd2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7ff f997 	bl	800b068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd3a:	bf00      	nop
 800bd3c:	3720      	adds	r7, #32
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b083      	sub	sp, #12
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd4a:	bf00      	nop
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b085      	sub	sp, #20
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bd60:	2300      	movs	r3, #0
 800bd62:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bd64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd68:	2b84      	cmp	r3, #132	; 0x84
 800bd6a:	d005      	beq.n	800bd78 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bd6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	4413      	add	r3, r2
 800bd74:	3303      	adds	r3, #3
 800bd76:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bd78:	68fb      	ldr	r3, [r7, #12]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bd8a:	f001 f895 	bl	800ceb8 <vTaskStartScheduler>
  
  return osOK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd96:	b089      	sub	sp, #36	; 0x24
 800bd98:	af04      	add	r7, sp, #16
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	695b      	ldr	r3, [r3, #20]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d020      	beq.n	800bde8 <osThreadCreate+0x54>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d01c      	beq.n	800bde8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	685c      	ldr	r4, [r3, #4]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	691e      	ldr	r6, [r3, #16]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff ffc8 	bl	800bd56 <makeFreeRtosPriority>
 800bdc6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bdd0:	9202      	str	r2, [sp, #8]
 800bdd2:	9301      	str	r3, [sp, #4]
 800bdd4:	9100      	str	r1, [sp, #0]
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	4632      	mov	r2, r6
 800bdda:	4629      	mov	r1, r5
 800bddc:	4620      	mov	r0, r4
 800bdde:	f000 fe95 	bl	800cb0c <xTaskCreateStatic>
 800bde2:	4603      	mov	r3, r0
 800bde4:	60fb      	str	r3, [r7, #12]
 800bde6:	e01c      	b.n	800be22 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685c      	ldr	r4, [r3, #4]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bdf4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7ff ffaa 	bl	800bd56 <makeFreeRtosPriority>
 800be02:	4602      	mov	r2, r0
 800be04:	f107 030c 	add.w	r3, r7, #12
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	9200      	str	r2, [sp, #0]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	4632      	mov	r2, r6
 800be10:	4629      	mov	r1, r5
 800be12:	4620      	mov	r0, r4
 800be14:	f000 fed6 	bl	800cbc4 <xTaskCreate>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d001      	beq.n	800be22 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800be1e:	2300      	movs	r3, #0
 800be20:	e000      	b.n	800be24 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800be22:	68fb      	ldr	r3, [r7, #12]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be2c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d001      	beq.n	800be42 <osDelay+0x16>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	e000      	b.n	800be44 <osDelay+0x18>
 800be42:	2301      	movs	r3, #1
 800be44:	4618      	mov	r0, r3
 800be46:	f001 f803 	bl	800ce50 <vTaskDelay>
  
  return osOK;
 800be4a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af02      	add	r7, sp, #8
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00f      	beq.n	800be86 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d10a      	bne.n	800be82 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	2203      	movs	r2, #3
 800be72:	9200      	str	r2, [sp, #0]
 800be74:	2200      	movs	r2, #0
 800be76:	2100      	movs	r1, #0
 800be78:	2001      	movs	r0, #1
 800be7a:	f000 f961 	bl	800c140 <xQueueGenericCreateStatic>
 800be7e:	4603      	mov	r3, r0
 800be80:	e016      	b.n	800beb0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800be82:	2300      	movs	r3, #0
 800be84:	e014      	b.n	800beb0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d110      	bne.n	800beae <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800be8c:	2203      	movs	r2, #3
 800be8e:	2100      	movs	r1, #0
 800be90:	2001      	movs	r0, #1
 800be92:	f000 f9cc 	bl	800c22e <xQueueGenericCreate>
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d005      	beq.n	800beaa <osSemaphoreCreate+0x56>
 800be9e:	2300      	movs	r3, #0
 800bea0:	2200      	movs	r2, #0
 800bea2:	2100      	movs	r1, #0
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f000 fa1f 	bl	800c2e8 <xQueueGenericSend>
      return sema;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	e000      	b.n	800beb0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800beae:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800beb8:	b590      	push	{r4, r7, lr}
 800beba:	b085      	sub	sp, #20
 800bebc:	af02      	add	r7, sp, #8
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d011      	beq.n	800beee <osMessageCreate+0x36>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00d      	beq.n	800beee <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6859      	ldr	r1, [r3, #4]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	689a      	ldr	r2, [r3, #8]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	2400      	movs	r4, #0
 800bee4:	9400      	str	r4, [sp, #0]
 800bee6:	f000 f92b 	bl	800c140 <xQueueGenericCreateStatic>
 800beea:	4603      	mov	r3, r0
 800beec:	e008      	b.n	800bf00 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6818      	ldr	r0, [r3, #0]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	4619      	mov	r1, r3
 800befa:	f000 f998 	bl	800c22e <xQueueGenericCreate>
 800befe:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd90      	pop	{r4, r7, pc}

0800bf08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f103 0208 	add.w	r2, r3, #8
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f103 0208 	add.w	r2, r3, #8
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f103 0208 	add.w	r2, r3, #8
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf56:	bf00      	nop
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf62:	b480      	push	{r7}
 800bf64:	b085      	sub	sp, #20
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	689a      	ldr	r2, [r3, #8]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	683a      	ldr	r2, [r7, #0]
 800bf8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	1c5a      	adds	r2, r3, #1
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	601a      	str	r2, [r3, #0]
}
 800bf9e:	bf00      	nop
 800bfa0:	3714      	adds	r7, #20
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr

0800bfaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b085      	sub	sp, #20
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
 800bfb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc0:	d103      	bne.n	800bfca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	60fb      	str	r3, [r7, #12]
 800bfc8:	e00c      	b.n	800bfe4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	3308      	adds	r3, #8
 800bfce:	60fb      	str	r3, [r7, #12]
 800bfd0:	e002      	b.n	800bfd8 <vListInsert+0x2e>
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d2f6      	bcs.n	800bfd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	685a      	ldr	r2, [r3, #4]
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	683a      	ldr	r2, [r7, #0]
 800bff2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	601a      	str	r2, [r3, #0]
}
 800c010:	bf00      	nop
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	6892      	ldr	r2, [r2, #8]
 800c032:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	6852      	ldr	r2, [r2, #4]
 800c03c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	429a      	cmp	r2, r3
 800c046:	d103      	bne.n	800c050 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	689a      	ldr	r2, [r3, #8]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	1e5a      	subs	r2, r3, #1
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d10a      	bne.n	800c09a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c088:	f383 8811 	msr	BASEPRI, r3
 800c08c:	f3bf 8f6f 	isb	sy
 800c090:	f3bf 8f4f 	dsb	sy
 800c094:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c096:	bf00      	nop
 800c098:	e7fe      	b.n	800c098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c09a:	f001 fe9b 	bl	800ddd4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0a6:	68f9      	ldr	r1, [r7, #12]
 800c0a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c0aa:	fb01 f303 	mul.w	r3, r1, r3
 800c0ae:	441a      	add	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	68f9      	ldr	r1, [r7, #12]
 800c0ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c0d0:	fb01 f303 	mul.w	r3, r1, r3
 800c0d4:	441a      	add	r2, r3
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	22ff      	movs	r2, #255	; 0xff
 800c0de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	22ff      	movs	r2, #255	; 0xff
 800c0e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d114      	bne.n	800c11a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d01a      	beq.n	800c12e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	3310      	adds	r3, #16
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f001 f933 	bl	800d368 <xTaskRemoveFromEventList>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d012      	beq.n	800c12e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c108:	4b0c      	ldr	r3, [pc, #48]	; (800c13c <xQueueGenericReset+0xcc>)
 800c10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	e009      	b.n	800c12e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	3310      	adds	r3, #16
 800c11e:	4618      	mov	r0, r3
 800c120:	f7ff fef2 	bl	800bf08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	3324      	adds	r3, #36	; 0x24
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff feed 	bl	800bf08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c12e:	f001 fe81 	bl	800de34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c132:	2301      	movs	r3, #1
}
 800c134:	4618      	mov	r0, r3
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	e000ed04 	.word	0xe000ed04

0800c140 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c140:	b580      	push	{r7, lr}
 800c142:	b08e      	sub	sp, #56	; 0x38
 800c144:	af02      	add	r7, sp, #8
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
 800c14c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10a      	bne.n	800c16a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c166:	bf00      	nop
 800c168:	e7fe      	b.n	800c168 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10a      	bne.n	800c186 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d002      	beq.n	800c192 <xQueueGenericCreateStatic+0x52>
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d001      	beq.n	800c196 <xQueueGenericCreateStatic+0x56>
 800c192:	2301      	movs	r3, #1
 800c194:	e000      	b.n	800c198 <xQueueGenericCreateStatic+0x58>
 800c196:	2300      	movs	r3, #0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10a      	bne.n	800c1b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	623b      	str	r3, [r7, #32]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d102      	bne.n	800c1be <xQueueGenericCreateStatic+0x7e>
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <xQueueGenericCreateStatic+0x82>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e000      	b.n	800c1c4 <xQueueGenericCreateStatic+0x84>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10a      	bne.n	800c1de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1cc:	f383 8811 	msr	BASEPRI, r3
 800c1d0:	f3bf 8f6f 	isb	sy
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	61fb      	str	r3, [r7, #28]
}
 800c1da:	bf00      	nop
 800c1dc:	e7fe      	b.n	800c1dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c1de:	2348      	movs	r3, #72	; 0x48
 800c1e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	2b48      	cmp	r3, #72	; 0x48
 800c1e6:	d00a      	beq.n	800c1fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ec:	f383 8811 	msr	BASEPRI, r3
 800c1f0:	f3bf 8f6f 	isb	sy
 800c1f4:	f3bf 8f4f 	dsb	sy
 800c1f8:	61bb      	str	r3, [r7, #24]
}
 800c1fa:	bf00      	nop
 800c1fc:	e7fe      	b.n	800c1fc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00d      	beq.n	800c224 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c210:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	4613      	mov	r3, r2
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	68b9      	ldr	r1, [r7, #8]
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f000 f843 	bl	800c2aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c226:	4618      	mov	r0, r3
 800c228:	3730      	adds	r7, #48	; 0x30
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b08a      	sub	sp, #40	; 0x28
 800c232:	af02      	add	r7, sp, #8
 800c234:	60f8      	str	r0, [r7, #12]
 800c236:	60b9      	str	r1, [r7, #8]
 800c238:	4613      	mov	r3, r2
 800c23a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10a      	bne.n	800c258 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	613b      	str	r3, [r7, #16]
}
 800c254:	bf00      	nop
 800c256:	e7fe      	b.n	800c256 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d102      	bne.n	800c264 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c25e:	2300      	movs	r3, #0
 800c260:	61fb      	str	r3, [r7, #28]
 800c262:	e004      	b.n	800c26e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	fb02 f303 	mul.w	r3, r2, r3
 800c26c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	3348      	adds	r3, #72	; 0x48
 800c272:	4618      	mov	r0, r3
 800c274:	f001 fe90 	bl	800df98 <pvPortMalloc>
 800c278:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00f      	beq.n	800c2a0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	3348      	adds	r3, #72	; 0x48
 800c284:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	2200      	movs	r2, #0
 800c28a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c28e:	79fa      	ldrb	r2, [r7, #7]
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	9300      	str	r3, [sp, #0]
 800c294:	4613      	mov	r3, r2
 800c296:	697a      	ldr	r2, [r7, #20]
 800c298:	68b9      	ldr	r1, [r7, #8]
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	f000 f805 	bl	800c2aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800c2a0:	69bb      	ldr	r3, [r7, #24]
	}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3720      	adds	r7, #32
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b084      	sub	sp, #16
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	60f8      	str	r0, [r7, #12]
 800c2b2:	60b9      	str	r1, [r7, #8]
 800c2b4:	607a      	str	r2, [r7, #4]
 800c2b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d103      	bne.n	800c2c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	69ba      	ldr	r2, [r7, #24]
 800c2c2:	601a      	str	r2, [r3, #0]
 800c2c4:	e002      	b.n	800c2cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2d8:	2101      	movs	r1, #1
 800c2da:	69b8      	ldr	r0, [r7, #24]
 800c2dc:	f7ff fec8 	bl	800c070 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c2e0:	bf00      	nop
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b08e      	sub	sp, #56	; 0x38
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
 800c2f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10a      	bne.n	800c31a <xQueueGenericSend+0x32>
	__asm volatile
 800c304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c308:	f383 8811 	msr	BASEPRI, r3
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c316:	bf00      	nop
 800c318:	e7fe      	b.n	800c318 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d103      	bne.n	800c328 <xQueueGenericSend+0x40>
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <xQueueGenericSend+0x44>
 800c328:	2301      	movs	r3, #1
 800c32a:	e000      	b.n	800c32e <xQueueGenericSend+0x46>
 800c32c:	2300      	movs	r3, #0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10a      	bne.n	800c348 <xQueueGenericSend+0x60>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c344:	bf00      	nop
 800c346:	e7fe      	b.n	800c346 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	d103      	bne.n	800c356 <xQueueGenericSend+0x6e>
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c352:	2b01      	cmp	r3, #1
 800c354:	d101      	bne.n	800c35a <xQueueGenericSend+0x72>
 800c356:	2301      	movs	r3, #1
 800c358:	e000      	b.n	800c35c <xQueueGenericSend+0x74>
 800c35a:	2300      	movs	r3, #0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d10a      	bne.n	800c376 <xQueueGenericSend+0x8e>
	__asm volatile
 800c360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c364:	f383 8811 	msr	BASEPRI, r3
 800c368:	f3bf 8f6f 	isb	sy
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	623b      	str	r3, [r7, #32]
}
 800c372:	bf00      	nop
 800c374:	e7fe      	b.n	800c374 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c376:	f001 f9bd 	bl	800d6f4 <xTaskGetSchedulerState>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d102      	bne.n	800c386 <xQueueGenericSend+0x9e>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <xQueueGenericSend+0xa2>
 800c386:	2301      	movs	r3, #1
 800c388:	e000      	b.n	800c38c <xQueueGenericSend+0xa4>
 800c38a:	2300      	movs	r3, #0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d10a      	bne.n	800c3a6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c394:	f383 8811 	msr	BASEPRI, r3
 800c398:	f3bf 8f6f 	isb	sy
 800c39c:	f3bf 8f4f 	dsb	sy
 800c3a0:	61fb      	str	r3, [r7, #28]
}
 800c3a2:	bf00      	nop
 800c3a4:	e7fe      	b.n	800c3a4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3a6:	f001 fd15 	bl	800ddd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d302      	bcc.n	800c3bc <xQueueGenericSend+0xd4>
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d129      	bne.n	800c410 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3bc:	683a      	ldr	r2, [r7, #0]
 800c3be:	68b9      	ldr	r1, [r7, #8]
 800c3c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3c2:	f000 fa93 	bl	800c8ec <prvCopyDataToQueue>
 800c3c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d010      	beq.n	800c3f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	3324      	adds	r3, #36	; 0x24
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 ffc7 	bl	800d368 <xTaskRemoveFromEventList>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d013      	beq.n	800c408 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c3e0:	4b3f      	ldr	r3, [pc, #252]	; (800c4e0 <xQueueGenericSend+0x1f8>)
 800c3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e6:	601a      	str	r2, [r3, #0]
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	e00a      	b.n	800c408 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d007      	beq.n	800c408 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c3f8:	4b39      	ldr	r3, [pc, #228]	; (800c4e0 <xQueueGenericSend+0x1f8>)
 800c3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3fe:	601a      	str	r2, [r3, #0]
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c408:	f001 fd14 	bl	800de34 <vPortExitCritical>
				return pdPASS;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e063      	b.n	800c4d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d103      	bne.n	800c41e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c416:	f001 fd0d 	bl	800de34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c41a:	2300      	movs	r3, #0
 800c41c:	e05c      	b.n	800c4d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c420:	2b00      	cmp	r3, #0
 800c422:	d106      	bne.n	800c432 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c424:	f107 0314 	add.w	r3, r7, #20
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 ffff 	bl	800d42c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c42e:	2301      	movs	r3, #1
 800c430:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c432:	f001 fcff 	bl	800de34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c436:	f000 fda9 	bl	800cf8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c43a:	f001 fccb 	bl	800ddd4 <vPortEnterCritical>
 800c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c444:	b25b      	sxtb	r3, r3
 800c446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c44a:	d103      	bne.n	800c454 <xQueueGenericSend+0x16c>
 800c44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c45a:	b25b      	sxtb	r3, r3
 800c45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c460:	d103      	bne.n	800c46a <xQueueGenericSend+0x182>
 800c462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c464:	2200      	movs	r2, #0
 800c466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c46a:	f001 fce3 	bl	800de34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c46e:	1d3a      	adds	r2, r7, #4
 800c470:	f107 0314 	add.w	r3, r7, #20
 800c474:	4611      	mov	r1, r2
 800c476:	4618      	mov	r0, r3
 800c478:	f000 ffee 	bl	800d458 <xTaskCheckForTimeOut>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d124      	bne.n	800c4cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c484:	f000 fb2a 	bl	800cadc <prvIsQueueFull>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d018      	beq.n	800c4c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c490:	3310      	adds	r3, #16
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	4611      	mov	r1, r2
 800c496:	4618      	mov	r0, r3
 800c498:	f000 ff42 	bl	800d320 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c49c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c49e:	f000 fab5 	bl	800ca0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c4a2:	f000 fd81 	bl	800cfa8 <xTaskResumeAll>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f47f af7c 	bne.w	800c3a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c4ae:	4b0c      	ldr	r3, [pc, #48]	; (800c4e0 <xQueueGenericSend+0x1f8>)
 800c4b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	e772      	b.n	800c3a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c4c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4c2:	f000 faa3 	bl	800ca0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4c6:	f000 fd6f 	bl	800cfa8 <xTaskResumeAll>
 800c4ca:	e76c      	b.n	800c3a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4ce:	f000 fa9d 	bl	800ca0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4d2:	f000 fd69 	bl	800cfa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4d6:	2300      	movs	r3, #0
		}
	}
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3738      	adds	r7, #56	; 0x38
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	e000ed04 	.word	0xe000ed04

0800c4e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b08c      	sub	sp, #48	; 0x30
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d10a      	bne.n	800c514 <xQueueReceive+0x30>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	623b      	str	r3, [r7, #32]
}
 800c510:	bf00      	nop
 800c512:	e7fe      	b.n	800c512 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d103      	bne.n	800c522 <xQueueReceive+0x3e>
 800c51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d101      	bne.n	800c526 <xQueueReceive+0x42>
 800c522:	2301      	movs	r3, #1
 800c524:	e000      	b.n	800c528 <xQueueReceive+0x44>
 800c526:	2300      	movs	r3, #0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10a      	bne.n	800c542 <xQueueReceive+0x5e>
	__asm volatile
 800c52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	61fb      	str	r3, [r7, #28]
}
 800c53e:	bf00      	nop
 800c540:	e7fe      	b.n	800c540 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c542:	f001 f8d7 	bl	800d6f4 <xTaskGetSchedulerState>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d102      	bne.n	800c552 <xQueueReceive+0x6e>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <xQueueReceive+0x72>
 800c552:	2301      	movs	r3, #1
 800c554:	e000      	b.n	800c558 <xQueueReceive+0x74>
 800c556:	2300      	movs	r3, #0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10a      	bne.n	800c572 <xQueueReceive+0x8e>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c560:	f383 8811 	msr	BASEPRI, r3
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	61bb      	str	r3, [r7, #24]
}
 800c56e:	bf00      	nop
 800c570:	e7fe      	b.n	800c570 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c572:	f001 fc2f 	bl	800ddd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c57a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d01f      	beq.n	800c5c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c582:	68b9      	ldr	r1, [r7, #8]
 800c584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c586:	f000 fa1b 	bl	800c9c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58c:	1e5a      	subs	r2, r3, #1
 800c58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c590:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00f      	beq.n	800c5ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59c:	3310      	adds	r3, #16
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f000 fee2 	bl	800d368 <xTaskRemoveFromEventList>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d007      	beq.n	800c5ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5aa:	4b3d      	ldr	r3, [pc, #244]	; (800c6a0 <xQueueReceive+0x1bc>)
 800c5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b0:	601a      	str	r2, [r3, #0]
 800c5b2:	f3bf 8f4f 	dsb	sy
 800c5b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5ba:	f001 fc3b 	bl	800de34 <vPortExitCritical>
				return pdPASS;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e069      	b.n	800c696 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d103      	bne.n	800c5d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5c8:	f001 fc34 	bl	800de34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	e062      	b.n	800c696 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d106      	bne.n	800c5e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5d6:	f107 0310 	add.w	r3, r7, #16
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 ff26 	bl	800d42c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5e4:	f001 fc26 	bl	800de34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5e8:	f000 fcd0 	bl	800cf8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5ec:	f001 fbf2 	bl	800ddd4 <vPortEnterCritical>
 800c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5f6:	b25b      	sxtb	r3, r3
 800c5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5fc:	d103      	bne.n	800c606 <xQueueReceive+0x122>
 800c5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c600:	2200      	movs	r2, #0
 800c602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c608:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c60c:	b25b      	sxtb	r3, r3
 800c60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c612:	d103      	bne.n	800c61c <xQueueReceive+0x138>
 800c614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c616:	2200      	movs	r2, #0
 800c618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c61c:	f001 fc0a 	bl	800de34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c620:	1d3a      	adds	r2, r7, #4
 800c622:	f107 0310 	add.w	r3, r7, #16
 800c626:	4611      	mov	r1, r2
 800c628:	4618      	mov	r0, r3
 800c62a:	f000 ff15 	bl	800d458 <xTaskCheckForTimeOut>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d123      	bne.n	800c67c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c636:	f000 fa3b 	bl	800cab0 <prvIsQueueEmpty>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d017      	beq.n	800c670 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c642:	3324      	adds	r3, #36	; 0x24
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	4611      	mov	r1, r2
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 fe69 	bl	800d320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c64e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c650:	f000 f9dc 	bl	800ca0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c654:	f000 fca8 	bl	800cfa8 <xTaskResumeAll>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d189      	bne.n	800c572 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c65e:	4b10      	ldr	r3, [pc, #64]	; (800c6a0 <xQueueReceive+0x1bc>)
 800c660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	e780      	b.n	800c572 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c672:	f000 f9cb 	bl	800ca0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c676:	f000 fc97 	bl	800cfa8 <xTaskResumeAll>
 800c67a:	e77a      	b.n	800c572 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c67c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c67e:	f000 f9c5 	bl	800ca0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c682:	f000 fc91 	bl	800cfa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c688:	f000 fa12 	bl	800cab0 <prvIsQueueEmpty>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f43f af6f 	beq.w	800c572 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c694:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c696:	4618      	mov	r0, r3
 800c698:	3730      	adds	r7, #48	; 0x30
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	e000ed04 	.word	0xe000ed04

0800c6a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b08e      	sub	sp, #56	; 0x38
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d10a      	bne.n	800c6d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c4:	f383 8811 	msr	BASEPRI, r3
 800c6c8:	f3bf 8f6f 	isb	sy
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	623b      	str	r3, [r7, #32]
}
 800c6d2:	bf00      	nop
 800c6d4:	e7fe      	b.n	800c6d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00a      	beq.n	800c6f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	61fb      	str	r3, [r7, #28]
}
 800c6f0:	bf00      	nop
 800c6f2:	e7fe      	b.n	800c6f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6f4:	f000 fffe 	bl	800d6f4 <xTaskGetSchedulerState>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d102      	bne.n	800c704 <xQueueSemaphoreTake+0x60>
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d101      	bne.n	800c708 <xQueueSemaphoreTake+0x64>
 800c704:	2301      	movs	r3, #1
 800c706:	e000      	b.n	800c70a <xQueueSemaphoreTake+0x66>
 800c708:	2300      	movs	r3, #0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d10a      	bne.n	800c724 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c712:	f383 8811 	msr	BASEPRI, r3
 800c716:	f3bf 8f6f 	isb	sy
 800c71a:	f3bf 8f4f 	dsb	sy
 800c71e:	61bb      	str	r3, [r7, #24]
}
 800c720:	bf00      	nop
 800c722:	e7fe      	b.n	800c722 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c724:	f001 fb56 	bl	800ddd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c72c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c730:	2b00      	cmp	r3, #0
 800c732:	d024      	beq.n	800c77e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	1e5a      	subs	r2, r3, #1
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d104      	bne.n	800c74e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800c744:	f001 f9a0 	bl	800da88 <pvTaskIncrementMutexHeldCount>
 800c748:	4602      	mov	r2, r0
 800c74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00f      	beq.n	800c776 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c758:	3310      	adds	r3, #16
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 fe04 	bl	800d368 <xTaskRemoveFromEventList>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d007      	beq.n	800c776 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c766:	4b54      	ldr	r3, [pc, #336]	; (800c8b8 <xQueueSemaphoreTake+0x214>)
 800c768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c76c:	601a      	str	r2, [r3, #0]
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c776:	f001 fb5d 	bl	800de34 <vPortExitCritical>
				return pdPASS;
 800c77a:	2301      	movs	r3, #1
 800c77c:	e097      	b.n	800c8ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d111      	bne.n	800c7a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00a      	beq.n	800c7a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78e:	f383 8811 	msr	BASEPRI, r3
 800c792:	f3bf 8f6f 	isb	sy
 800c796:	f3bf 8f4f 	dsb	sy
 800c79a:	617b      	str	r3, [r7, #20]
}
 800c79c:	bf00      	nop
 800c79e:	e7fe      	b.n	800c79e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c7a0:	f001 fb48 	bl	800de34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	e082      	b.n	800c8ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d106      	bne.n	800c7bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7ae:	f107 030c 	add.w	r3, r7, #12
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 fe3a 	bl	800d42c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7bc:	f001 fb3a 	bl	800de34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7c0:	f000 fbe4 	bl	800cf8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7c4:	f001 fb06 	bl	800ddd4 <vPortEnterCritical>
 800c7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7ce:	b25b      	sxtb	r3, r3
 800c7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d4:	d103      	bne.n	800c7de <xQueueSemaphoreTake+0x13a>
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7e4:	b25b      	sxtb	r3, r3
 800c7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ea:	d103      	bne.n	800c7f4 <xQueueSemaphoreTake+0x150>
 800c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7f4:	f001 fb1e 	bl	800de34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7f8:	463a      	mov	r2, r7
 800c7fa:	f107 030c 	add.w	r3, r7, #12
 800c7fe:	4611      	mov	r1, r2
 800c800:	4618      	mov	r0, r3
 800c802:	f000 fe29 	bl	800d458 <xTaskCheckForTimeOut>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d132      	bne.n	800c872 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c80c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c80e:	f000 f94f 	bl	800cab0 <prvIsQueueEmpty>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d026      	beq.n	800c866 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d109      	bne.n	800c834 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c820:	f001 fad8 	bl	800ddd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800c824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	4618      	mov	r0, r3
 800c82a:	f000 ff81 	bl	800d730 <xTaskPriorityInherit>
 800c82e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c830:	f001 fb00 	bl	800de34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c836:	3324      	adds	r3, #36	; 0x24
 800c838:	683a      	ldr	r2, [r7, #0]
 800c83a:	4611      	mov	r1, r2
 800c83c:	4618      	mov	r0, r3
 800c83e:	f000 fd6f 	bl	800d320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c844:	f000 f8e2 	bl	800ca0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c848:	f000 fbae 	bl	800cfa8 <xTaskResumeAll>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f47f af68 	bne.w	800c724 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c854:	4b18      	ldr	r3, [pc, #96]	; (800c8b8 <xQueueSemaphoreTake+0x214>)
 800c856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c85a:	601a      	str	r2, [r3, #0]
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	e75e      	b.n	800c724 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c868:	f000 f8d0 	bl	800ca0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c86c:	f000 fb9c 	bl	800cfa8 <xTaskResumeAll>
 800c870:	e758      	b.n	800c724 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c874:	f000 f8ca 	bl	800ca0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c878:	f000 fb96 	bl	800cfa8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c87c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c87e:	f000 f917 	bl	800cab0 <prvIsQueueEmpty>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	f43f af4d 	beq.w	800c724 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00d      	beq.n	800c8ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c890:	f001 faa0 	bl	800ddd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c896:	f000 f811 	bl	800c8bc <prvGetDisinheritPriorityAfterTimeout>
 800c89a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800c89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f001 f850 	bl	800d948 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c8a8:	f001 fac4 	bl	800de34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c8ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3738      	adds	r7, #56	; 0x38
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	e000ed04 	.word	0xe000ed04

0800c8bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c8bc:	b480      	push	{r7}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d006      	beq.n	800c8da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f1c3 0307 	rsb	r3, r3, #7
 800c8d6:	60fb      	str	r3, [r7, #12]
 800c8d8:	e001      	b.n	800c8de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c8de:	68fb      	ldr	r3, [r7, #12]
	}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3714      	adds	r7, #20
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c900:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10d      	bne.n	800c926 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d14d      	bne.n	800c9ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	4618      	mov	r0, r3
 800c918:	f000 ff90 	bl	800d83c <xTaskPriorityDisinherit>
 800c91c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	605a      	str	r2, [r3, #4]
 800c924:	e043      	b.n	800c9ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d119      	bne.n	800c960 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6898      	ldr	r0, [r3, #8]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c934:	461a      	mov	r2, r3
 800c936:	68b9      	ldr	r1, [r7, #8]
 800c938:	f002 fb49 	bl	800efce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	689a      	ldr	r2, [r3, #8]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c944:	441a      	add	r2, r3
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	689a      	ldr	r2, [r3, #8]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	429a      	cmp	r2, r3
 800c954:	d32b      	bcc.n	800c9ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	609a      	str	r2, [r3, #8]
 800c95e:	e026      	b.n	800c9ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	68d8      	ldr	r0, [r3, #12]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c968:	461a      	mov	r2, r3
 800c96a:	68b9      	ldr	r1, [r7, #8]
 800c96c:	f002 fb2f 	bl	800efce <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	68da      	ldr	r2, [r3, #12]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c978:	425b      	negs	r3, r3
 800c97a:	441a      	add	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	68da      	ldr	r2, [r3, #12]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d207      	bcs.n	800c99c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	685a      	ldr	r2, [r3, #4]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c994:	425b      	negs	r3, r3
 800c996:	441a      	add	r2, r3
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b02      	cmp	r3, #2
 800c9a0:	d105      	bne.n	800c9ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	1c5a      	adds	r2, r3, #1
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c9b6:	697b      	ldr	r3, [r7, #20]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3718      	adds	r7, #24
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d018      	beq.n	800ca04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	68da      	ldr	r2, [r3, #12]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9da:	441a      	add	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	68da      	ldr	r2, [r3, #12]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d303      	bcc.n	800c9f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	68d9      	ldr	r1, [r3, #12]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	6838      	ldr	r0, [r7, #0]
 800ca00:	f002 fae5 	bl	800efce <memcpy>
	}
}
 800ca04:	bf00      	nop
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca14:	f001 f9de 	bl	800ddd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca20:	e011      	b.n	800ca46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d012      	beq.n	800ca50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	3324      	adds	r3, #36	; 0x24
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fc9a 	bl	800d368 <xTaskRemoveFromEventList>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d001      	beq.n	800ca3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca3a:	f000 fd6f 	bl	800d51c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
 800ca40:	3b01      	subs	r3, #1
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	dce9      	bgt.n	800ca22 <prvUnlockQueue+0x16>
 800ca4e:	e000      	b.n	800ca52 <prvUnlockQueue+0x46>
					break;
 800ca50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	22ff      	movs	r2, #255	; 0xff
 800ca56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ca5a:	f001 f9eb 	bl	800de34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca5e:	f001 f9b9 	bl	800ddd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca6a:	e011      	b.n	800ca90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d012      	beq.n	800ca9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	3310      	adds	r3, #16
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 fc75 	bl	800d368 <xTaskRemoveFromEventList>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d001      	beq.n	800ca88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca84:	f000 fd4a 	bl	800d51c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca88:	7bbb      	ldrb	r3, [r7, #14]
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	dce9      	bgt.n	800ca6c <prvUnlockQueue+0x60>
 800ca98:	e000      	b.n	800ca9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	22ff      	movs	r2, #255	; 0xff
 800caa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800caa4:	f001 f9c6 	bl	800de34 <vPortExitCritical>
}
 800caa8:	bf00      	nop
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cab8:	f001 f98c 	bl	800ddd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d102      	bne.n	800caca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cac4:	2301      	movs	r3, #1
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	e001      	b.n	800cace <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800caca:	2300      	movs	r3, #0
 800cacc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cace:	f001 f9b1 	bl	800de34 <vPortExitCritical>

	return xReturn;
 800cad2:	68fb      	ldr	r3, [r7, #12]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cae4:	f001 f976 	bl	800ddd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d102      	bne.n	800cafa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800caf4:	2301      	movs	r3, #1
 800caf6:	60fb      	str	r3, [r7, #12]
 800caf8:	e001      	b.n	800cafe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cafa:	2300      	movs	r3, #0
 800cafc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cafe:	f001 f999 	bl	800de34 <vPortExitCritical>

	return xReturn;
 800cb02:	68fb      	ldr	r3, [r7, #12]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b08e      	sub	sp, #56	; 0x38
 800cb10:	af04      	add	r7, sp, #16
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d10a      	bne.n	800cb36 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb24:	f383 8811 	msr	BASEPRI, r3
 800cb28:	f3bf 8f6f 	isb	sy
 800cb2c:	f3bf 8f4f 	dsb	sy
 800cb30:	623b      	str	r3, [r7, #32]
}
 800cb32:	bf00      	nop
 800cb34:	e7fe      	b.n	800cb34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10a      	bne.n	800cb52 <xTaskCreateStatic+0x46>
	__asm volatile
 800cb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb40:	f383 8811 	msr	BASEPRI, r3
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	61fb      	str	r3, [r7, #28]
}
 800cb4e:	bf00      	nop
 800cb50:	e7fe      	b.n	800cb50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb52:	23a0      	movs	r3, #160	; 0xa0
 800cb54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	2ba0      	cmp	r3, #160	; 0xa0
 800cb5a:	d00a      	beq.n	800cb72 <xTaskCreateStatic+0x66>
	__asm volatile
 800cb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	61bb      	str	r3, [r7, #24]
}
 800cb6e:	bf00      	nop
 800cb70:	e7fe      	b.n	800cb70 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d01e      	beq.n	800cbb6 <xTaskCreateStatic+0xaa>
 800cb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d01b      	beq.n	800cbb6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb80:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb86:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb90:	2300      	movs	r3, #0
 800cb92:	9303      	str	r3, [sp, #12]
 800cb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb96:	9302      	str	r3, [sp, #8]
 800cb98:	f107 0314 	add.w	r3, r7, #20
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	68b9      	ldr	r1, [r7, #8]
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f000 f851 	bl	800cc50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbb0:	f000 f8e4 	bl	800cd7c <prvAddNewTaskToReadyList>
 800cbb4:	e001      	b.n	800cbba <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cbba:	697b      	ldr	r3, [r7, #20]
	}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3728      	adds	r7, #40	; 0x28
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b08c      	sub	sp, #48	; 0x30
 800cbc8:	af04      	add	r7, sp, #16
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	603b      	str	r3, [r7, #0]
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbd4:	88fb      	ldrh	r3, [r7, #6]
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f001 f9dd 	bl	800df98 <pvPortMalloc>
 800cbde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00e      	beq.n	800cc04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800cbe6:	20a0      	movs	r0, #160	; 0xa0
 800cbe8:	f001 f9d6 	bl	800df98 <pvPortMalloc>
 800cbec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d003      	beq.n	800cbfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	631a      	str	r2, [r3, #48]	; 0x30
 800cbfa:	e005      	b.n	800cc08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cbfc:	6978      	ldr	r0, [r7, #20]
 800cbfe:	f001 fa8f 	bl	800e120 <vPortFree>
 800cc02:	e001      	b.n	800cc08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc04:	2300      	movs	r3, #0
 800cc06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d017      	beq.n	800cc3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc16:	88fa      	ldrh	r2, [r7, #6]
 800cc18:	2300      	movs	r3, #0
 800cc1a:	9303      	str	r3, [sp, #12]
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	9302      	str	r3, [sp, #8]
 800cc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc22:	9301      	str	r3, [sp, #4]
 800cc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc26:	9300      	str	r3, [sp, #0]
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	68b9      	ldr	r1, [r7, #8]
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f000 f80f 	bl	800cc50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc32:	69f8      	ldr	r0, [r7, #28]
 800cc34:	f000 f8a2 	bl	800cd7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	61bb      	str	r3, [r7, #24]
 800cc3c:	e002      	b.n	800cc44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc3e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc44:	69bb      	ldr	r3, [r7, #24]
	}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3720      	adds	r7, #32
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
	...

0800cc50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b088      	sub	sp, #32
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	607a      	str	r2, [r7, #4]
 800cc5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800cc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	f023 0307 	bic.w	r3, r3, #7
 800cc76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	f003 0307 	and.w	r3, r3, #7
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00a      	beq.n	800cc98 <prvInitialiseNewTask+0x48>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	617b      	str	r3, [r7, #20]
}
 800cc94:	bf00      	nop
 800cc96:	e7fe      	b.n	800cc96 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc98:	2300      	movs	r3, #0
 800cc9a:	61fb      	str	r3, [r7, #28]
 800cc9c:	e012      	b.n	800ccc4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc9e:	68ba      	ldr	r2, [r7, #8]
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	4413      	add	r3, r2
 800cca4:	7819      	ldrb	r1, [r3, #0]
 800cca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	4413      	add	r3, r2
 800ccac:	3334      	adds	r3, #52	; 0x34
 800ccae:	460a      	mov	r2, r1
 800ccb0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d006      	beq.n	800cccc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	61fb      	str	r3, [r7, #28]
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	2b0f      	cmp	r3, #15
 800ccc8:	d9e9      	bls.n	800cc9e <prvInitialiseNewTask+0x4e>
 800ccca:	e000      	b.n	800ccce <prvInitialiseNewTask+0x7e>
		{
			break;
 800cccc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ccd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd8:	2b06      	cmp	r3, #6
 800ccda:	d901      	bls.n	800cce0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ccdc:	2306      	movs	r3, #6
 800ccde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cce4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	2200      	movs	r2, #0
 800ccf0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7ff f926 	bl	800bf48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	3318      	adds	r3, #24
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7ff f921 	bl	800bf48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0e:	f1c3 0207 	rsb	r2, r3, #7
 800cd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd26:	2200      	movs	r2, #0
 800cd28:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2e:	334c      	adds	r3, #76	; 0x4c
 800cd30:	224c      	movs	r2, #76	; 0x4c
 800cd32:	2100      	movs	r1, #0
 800cd34:	4618      	mov	r0, r3
 800cd36:	f002 f874 	bl	800ee22 <memset>
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3c:	4a0c      	ldr	r2, [pc, #48]	; (800cd70 <prvInitialiseNewTask+0x120>)
 800cd3e:	651a      	str	r2, [r3, #80]	; 0x50
 800cd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd42:	4a0c      	ldr	r2, [pc, #48]	; (800cd74 <prvInitialiseNewTask+0x124>)
 800cd44:	655a      	str	r2, [r3, #84]	; 0x54
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	4a0b      	ldr	r2, [pc, #44]	; (800cd78 <prvInitialiseNewTask+0x128>)
 800cd4a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd4c:	683a      	ldr	r2, [r7, #0]
 800cd4e:	68f9      	ldr	r1, [r7, #12]
 800cd50:	69b8      	ldr	r0, [r7, #24]
 800cd52:	f000 ff13 	bl	800db7c <pxPortInitialiseStack>
 800cd56:	4602      	mov	r2, r0
 800cd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800cd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d002      	beq.n	800cd68 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd68:	bf00      	nop
 800cd6a:	3720      	adds	r7, #32
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	200058a4 	.word	0x200058a4
 800cd74:	2000590c 	.word	0x2000590c
 800cd78:	20005974 	.word	0x20005974

0800cd7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd84:	f001 f826 	bl	800ddd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd88:	4b2a      	ldr	r3, [pc, #168]	; (800ce34 <prvAddNewTaskToReadyList+0xb8>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	4a29      	ldr	r2, [pc, #164]	; (800ce34 <prvAddNewTaskToReadyList+0xb8>)
 800cd90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd92:	4b29      	ldr	r3, [pc, #164]	; (800ce38 <prvAddNewTaskToReadyList+0xbc>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d109      	bne.n	800cdae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd9a:	4a27      	ldr	r2, [pc, #156]	; (800ce38 <prvAddNewTaskToReadyList+0xbc>)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cda0:	4b24      	ldr	r3, [pc, #144]	; (800ce34 <prvAddNewTaskToReadyList+0xb8>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d110      	bne.n	800cdca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cda8:	f000 fbdc 	bl	800d564 <prvInitialiseTaskLists>
 800cdac:	e00d      	b.n	800cdca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cdae:	4b23      	ldr	r3, [pc, #140]	; (800ce3c <prvAddNewTaskToReadyList+0xc0>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d109      	bne.n	800cdca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdb6:	4b20      	ldr	r3, [pc, #128]	; (800ce38 <prvAddNewTaskToReadyList+0xbc>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d802      	bhi.n	800cdca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cdc4:	4a1c      	ldr	r2, [pc, #112]	; (800ce38 <prvAddNewTaskToReadyList+0xbc>)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cdca:	4b1d      	ldr	r3, [pc, #116]	; (800ce40 <prvAddNewTaskToReadyList+0xc4>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	4a1b      	ldr	r2, [pc, #108]	; (800ce40 <prvAddNewTaskToReadyList+0xc4>)
 800cdd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd8:	2201      	movs	r2, #1
 800cdda:	409a      	lsls	r2, r3
 800cddc:	4b19      	ldr	r3, [pc, #100]	; (800ce44 <prvAddNewTaskToReadyList+0xc8>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	4a18      	ldr	r2, [pc, #96]	; (800ce44 <prvAddNewTaskToReadyList+0xc8>)
 800cde4:	6013      	str	r3, [r2, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdea:	4613      	mov	r3, r2
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	4413      	add	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4a15      	ldr	r2, [pc, #84]	; (800ce48 <prvAddNewTaskToReadyList+0xcc>)
 800cdf4:	441a      	add	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	f7ff f8b0 	bl	800bf62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce02:	f001 f817 	bl	800de34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce06:	4b0d      	ldr	r3, [pc, #52]	; (800ce3c <prvAddNewTaskToReadyList+0xc0>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00e      	beq.n	800ce2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce0e:	4b0a      	ldr	r3, [pc, #40]	; (800ce38 <prvAddNewTaskToReadyList+0xbc>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d207      	bcs.n	800ce2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce1c:	4b0b      	ldr	r3, [pc, #44]	; (800ce4c <prvAddNewTaskToReadyList+0xd0>)
 800ce1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce2c:	bf00      	nop
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	20000a38 	.word	0x20000a38
 800ce38:	20000938 	.word	0x20000938
 800ce3c:	20000a44 	.word	0x20000a44
 800ce40:	20000a54 	.word	0x20000a54
 800ce44:	20000a40 	.word	0x20000a40
 800ce48:	2000093c 	.word	0x2000093c
 800ce4c:	e000ed04 	.word	0xe000ed04

0800ce50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d017      	beq.n	800ce92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce62:	4b13      	ldr	r3, [pc, #76]	; (800ceb0 <vTaskDelay+0x60>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00a      	beq.n	800ce80 <vTaskDelay+0x30>
	__asm volatile
 800ce6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	60bb      	str	r3, [r7, #8]
}
 800ce7c:	bf00      	nop
 800ce7e:	e7fe      	b.n	800ce7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ce80:	f000 f884 	bl	800cf8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce84:	2100      	movs	r1, #0
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 fe12 	bl	800dab0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce8c:	f000 f88c 	bl	800cfa8 <xTaskResumeAll>
 800ce90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d107      	bne.n	800cea8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ce98:	4b06      	ldr	r3, [pc, #24]	; (800ceb4 <vTaskDelay+0x64>)
 800ce9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce9e:	601a      	str	r2, [r3, #0]
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cea8:	bf00      	nop
 800ceaa:	3710      	adds	r7, #16
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	20000a60 	.word	0x20000a60
 800ceb4:	e000ed04 	.word	0xe000ed04

0800ceb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08a      	sub	sp, #40	; 0x28
 800cebc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cebe:	2300      	movs	r3, #0
 800cec0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cec2:	2300      	movs	r3, #0
 800cec4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cec6:	463a      	mov	r2, r7
 800cec8:	1d39      	adds	r1, r7, #4
 800ceca:	f107 0308 	add.w	r3, r7, #8
 800cece:	4618      	mov	r0, r3
 800ced0:	f7f3 fec2 	bl	8000c58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	9202      	str	r2, [sp, #8]
 800cedc:	9301      	str	r3, [sp, #4]
 800cede:	2300      	movs	r3, #0
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	2300      	movs	r3, #0
 800cee4:	460a      	mov	r2, r1
 800cee6:	4921      	ldr	r1, [pc, #132]	; (800cf6c <vTaskStartScheduler+0xb4>)
 800cee8:	4821      	ldr	r0, [pc, #132]	; (800cf70 <vTaskStartScheduler+0xb8>)
 800ceea:	f7ff fe0f 	bl	800cb0c <xTaskCreateStatic>
 800ceee:	4603      	mov	r3, r0
 800cef0:	4a20      	ldr	r2, [pc, #128]	; (800cf74 <vTaskStartScheduler+0xbc>)
 800cef2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cef4:	4b1f      	ldr	r3, [pc, #124]	; (800cf74 <vTaskStartScheduler+0xbc>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cefc:	2301      	movs	r3, #1
 800cefe:	617b      	str	r3, [r7, #20]
 800cf00:	e001      	b.n	800cf06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf02:	2300      	movs	r3, #0
 800cf04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d11b      	bne.n	800cf44 <vTaskStartScheduler+0x8c>
	__asm volatile
 800cf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf10:	f383 8811 	msr	BASEPRI, r3
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	f3bf 8f4f 	dsb	sy
 800cf1c:	613b      	str	r3, [r7, #16]
}
 800cf1e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf20:	4b15      	ldr	r3, [pc, #84]	; (800cf78 <vTaskStartScheduler+0xc0>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	334c      	adds	r3, #76	; 0x4c
 800cf26:	4a15      	ldr	r2, [pc, #84]	; (800cf7c <vTaskStartScheduler+0xc4>)
 800cf28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf2a:	4b15      	ldr	r3, [pc, #84]	; (800cf80 <vTaskStartScheduler+0xc8>)
 800cf2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf32:	4b14      	ldr	r3, [pc, #80]	; (800cf84 <vTaskStartScheduler+0xcc>)
 800cf34:	2201      	movs	r2, #1
 800cf36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800cf38:	4b13      	ldr	r3, [pc, #76]	; (800cf88 <vTaskStartScheduler+0xd0>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf3e:	f000 fea7 	bl	800dc90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf42:	e00e      	b.n	800cf62 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf4a:	d10a      	bne.n	800cf62 <vTaskStartScheduler+0xaa>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	60fb      	str	r3, [r7, #12]
}
 800cf5e:	bf00      	nop
 800cf60:	e7fe      	b.n	800cf60 <vTaskStartScheduler+0xa8>
}
 800cf62:	bf00      	nop
 800cf64:	3718      	adds	r7, #24
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	08010ed4 	.word	0x08010ed4
 800cf70:	0800d535 	.word	0x0800d535
 800cf74:	20000a5c 	.word	0x20000a5c
 800cf78:	20000938 	.word	0x20000938
 800cf7c:	2000006c 	.word	0x2000006c
 800cf80:	20000a58 	.word	0x20000a58
 800cf84:	20000a44 	.word	0x20000a44
 800cf88:	20000a3c 	.word	0x20000a3c

0800cf8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cf90:	4b04      	ldr	r3, [pc, #16]	; (800cfa4 <vTaskSuspendAll+0x18>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	3301      	adds	r3, #1
 800cf96:	4a03      	ldr	r2, [pc, #12]	; (800cfa4 <vTaskSuspendAll+0x18>)
 800cf98:	6013      	str	r3, [r2, #0]
}
 800cf9a:	bf00      	nop
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	20000a60 	.word	0x20000a60

0800cfa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cfb6:	4b41      	ldr	r3, [pc, #260]	; (800d0bc <xTaskResumeAll+0x114>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10a      	bne.n	800cfd4 <xTaskResumeAll+0x2c>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	603b      	str	r3, [r7, #0]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cfd4:	f000 fefe 	bl	800ddd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cfd8:	4b38      	ldr	r3, [pc, #224]	; (800d0bc <xTaskResumeAll+0x114>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	4a37      	ldr	r2, [pc, #220]	; (800d0bc <xTaskResumeAll+0x114>)
 800cfe0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfe2:	4b36      	ldr	r3, [pc, #216]	; (800d0bc <xTaskResumeAll+0x114>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d161      	bne.n	800d0ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cfea:	4b35      	ldr	r3, [pc, #212]	; (800d0c0 <xTaskResumeAll+0x118>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d05d      	beq.n	800d0ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cff2:	e02e      	b.n	800d052 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800cff4:	4b33      	ldr	r3, [pc, #204]	; (800d0c4 <xTaskResumeAll+0x11c>)
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	3318      	adds	r3, #24
 800d000:	4618      	mov	r0, r3
 800d002:	f7ff f80b 	bl	800c01c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	3304      	adds	r3, #4
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7ff f806 	bl	800c01c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d014:	2201      	movs	r2, #1
 800d016:	409a      	lsls	r2, r3
 800d018:	4b2b      	ldr	r3, [pc, #172]	; (800d0c8 <xTaskResumeAll+0x120>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4313      	orrs	r3, r2
 800d01e:	4a2a      	ldr	r2, [pc, #168]	; (800d0c8 <xTaskResumeAll+0x120>)
 800d020:	6013      	str	r3, [r2, #0]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d026:	4613      	mov	r3, r2
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	4413      	add	r3, r2
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4a27      	ldr	r2, [pc, #156]	; (800d0cc <xTaskResumeAll+0x124>)
 800d030:	441a      	add	r2, r3
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	3304      	adds	r3, #4
 800d036:	4619      	mov	r1, r3
 800d038:	4610      	mov	r0, r2
 800d03a:	f7fe ff92 	bl	800bf62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d042:	4b23      	ldr	r3, [pc, #140]	; (800d0d0 <xTaskResumeAll+0x128>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d048:	429a      	cmp	r2, r3
 800d04a:	d302      	bcc.n	800d052 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d04c:	4b21      	ldr	r3, [pc, #132]	; (800d0d4 <xTaskResumeAll+0x12c>)
 800d04e:	2201      	movs	r2, #1
 800d050:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d052:	4b1c      	ldr	r3, [pc, #112]	; (800d0c4 <xTaskResumeAll+0x11c>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1cc      	bne.n	800cff4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d001      	beq.n	800d064 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d060:	f000 fb22 	bl	800d6a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d064:	4b1c      	ldr	r3, [pc, #112]	; (800d0d8 <xTaskResumeAll+0x130>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d010      	beq.n	800d092 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d070:	f000 f836 	bl	800d0e0 <xTaskIncrementTick>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d002      	beq.n	800d080 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d07a:	4b16      	ldr	r3, [pc, #88]	; (800d0d4 <xTaskResumeAll+0x12c>)
 800d07c:	2201      	movs	r2, #1
 800d07e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	3b01      	subs	r3, #1
 800d084:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1f1      	bne.n	800d070 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d08c:	4b12      	ldr	r3, [pc, #72]	; (800d0d8 <xTaskResumeAll+0x130>)
 800d08e:	2200      	movs	r2, #0
 800d090:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d092:	4b10      	ldr	r3, [pc, #64]	; (800d0d4 <xTaskResumeAll+0x12c>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d009      	beq.n	800d0ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d09a:	2301      	movs	r3, #1
 800d09c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d09e:	4b0f      	ldr	r3, [pc, #60]	; (800d0dc <xTaskResumeAll+0x134>)
 800d0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0a4:	601a      	str	r2, [r3, #0]
 800d0a6:	f3bf 8f4f 	dsb	sy
 800d0aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0ae:	f000 fec1 	bl	800de34 <vPortExitCritical>

	return xAlreadyYielded;
 800d0b2:	68bb      	ldr	r3, [r7, #8]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	20000a60 	.word	0x20000a60
 800d0c0:	20000a38 	.word	0x20000a38
 800d0c4:	200009f8 	.word	0x200009f8
 800d0c8:	20000a40 	.word	0x20000a40
 800d0cc:	2000093c 	.word	0x2000093c
 800d0d0:	20000938 	.word	0x20000938
 800d0d4:	20000a4c 	.word	0x20000a4c
 800d0d8:	20000a48 	.word	0x20000a48
 800d0dc:	e000ed04 	.word	0xe000ed04

0800d0e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b086      	sub	sp, #24
 800d0e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0ea:	4b51      	ldr	r3, [pc, #324]	; (800d230 <xTaskIncrementTick+0x150>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f040 808d 	bne.w	800d20e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d0f4:	4b4f      	ldr	r3, [pc, #316]	; (800d234 <xTaskIncrementTick+0x154>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d0fc:	4a4d      	ldr	r2, [pc, #308]	; (800d234 <xTaskIncrementTick+0x154>)
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d120      	bne.n	800d14a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d108:	4b4b      	ldr	r3, [pc, #300]	; (800d238 <xTaskIncrementTick+0x158>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d00a      	beq.n	800d128 <xTaskIncrementTick+0x48>
	__asm volatile
 800d112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d116:	f383 8811 	msr	BASEPRI, r3
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	603b      	str	r3, [r7, #0]
}
 800d124:	bf00      	nop
 800d126:	e7fe      	b.n	800d126 <xTaskIncrementTick+0x46>
 800d128:	4b43      	ldr	r3, [pc, #268]	; (800d238 <xTaskIncrementTick+0x158>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	60fb      	str	r3, [r7, #12]
 800d12e:	4b43      	ldr	r3, [pc, #268]	; (800d23c <xTaskIncrementTick+0x15c>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a41      	ldr	r2, [pc, #260]	; (800d238 <xTaskIncrementTick+0x158>)
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	4a41      	ldr	r2, [pc, #260]	; (800d23c <xTaskIncrementTick+0x15c>)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6013      	str	r3, [r2, #0]
 800d13c:	4b40      	ldr	r3, [pc, #256]	; (800d240 <xTaskIncrementTick+0x160>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	3301      	adds	r3, #1
 800d142:	4a3f      	ldr	r2, [pc, #252]	; (800d240 <xTaskIncrementTick+0x160>)
 800d144:	6013      	str	r3, [r2, #0]
 800d146:	f000 faaf 	bl	800d6a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d14a:	4b3e      	ldr	r3, [pc, #248]	; (800d244 <xTaskIncrementTick+0x164>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	693a      	ldr	r2, [r7, #16]
 800d150:	429a      	cmp	r2, r3
 800d152:	d34d      	bcc.n	800d1f0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d154:	4b38      	ldr	r3, [pc, #224]	; (800d238 <xTaskIncrementTick+0x158>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <xTaskIncrementTick+0x82>
 800d15e:	2301      	movs	r3, #1
 800d160:	e000      	b.n	800d164 <xTaskIncrementTick+0x84>
 800d162:	2300      	movs	r3, #0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d004      	beq.n	800d172 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d168:	4b36      	ldr	r3, [pc, #216]	; (800d244 <xTaskIncrementTick+0x164>)
 800d16a:	f04f 32ff 	mov.w	r2, #4294967295
 800d16e:	601a      	str	r2, [r3, #0]
					break;
 800d170:	e03e      	b.n	800d1f0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d172:	4b31      	ldr	r3, [pc, #196]	; (800d238 <xTaskIncrementTick+0x158>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d182:	693a      	ldr	r2, [r7, #16]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	429a      	cmp	r2, r3
 800d188:	d203      	bcs.n	800d192 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d18a:	4a2e      	ldr	r2, [pc, #184]	; (800d244 <xTaskIncrementTick+0x164>)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6013      	str	r3, [r2, #0]
						break;
 800d190:	e02e      	b.n	800d1f0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	3304      	adds	r3, #4
 800d196:	4618      	mov	r0, r3
 800d198:	f7fe ff40 	bl	800c01c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d004      	beq.n	800d1ae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	3318      	adds	r3, #24
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7fe ff37 	bl	800c01c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	409a      	lsls	r2, r3
 800d1b6:	4b24      	ldr	r3, [pc, #144]	; (800d248 <xTaskIncrementTick+0x168>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	4a22      	ldr	r2, [pc, #136]	; (800d248 <xTaskIncrementTick+0x168>)
 800d1be:	6013      	str	r3, [r2, #0]
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	4413      	add	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4a1f      	ldr	r2, [pc, #124]	; (800d24c <xTaskIncrementTick+0x16c>)
 800d1ce:	441a      	add	r2, r3
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	3304      	adds	r3, #4
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	f7fe fec3 	bl	800bf62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e0:	4b1b      	ldr	r3, [pc, #108]	; (800d250 <xTaskIncrementTick+0x170>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d3b4      	bcc.n	800d154 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1ee:	e7b1      	b.n	800d154 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d1f0:	4b17      	ldr	r3, [pc, #92]	; (800d250 <xTaskIncrementTick+0x170>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f6:	4915      	ldr	r1, [pc, #84]	; (800d24c <xTaskIncrementTick+0x16c>)
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	4413      	add	r3, r2
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	440b      	add	r3, r1
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d907      	bls.n	800d218 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800d208:	2301      	movs	r3, #1
 800d20a:	617b      	str	r3, [r7, #20]
 800d20c:	e004      	b.n	800d218 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d20e:	4b11      	ldr	r3, [pc, #68]	; (800d254 <xTaskIncrementTick+0x174>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	3301      	adds	r3, #1
 800d214:	4a0f      	ldr	r2, [pc, #60]	; (800d254 <xTaskIncrementTick+0x174>)
 800d216:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d218:	4b0f      	ldr	r3, [pc, #60]	; (800d258 <xTaskIncrementTick+0x178>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d001      	beq.n	800d224 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800d220:	2301      	movs	r3, #1
 800d222:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d224:	697b      	ldr	r3, [r7, #20]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3718      	adds	r7, #24
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	20000a60 	.word	0x20000a60
 800d234:	20000a3c 	.word	0x20000a3c
 800d238:	200009f0 	.word	0x200009f0
 800d23c:	200009f4 	.word	0x200009f4
 800d240:	20000a50 	.word	0x20000a50
 800d244:	20000a58 	.word	0x20000a58
 800d248:	20000a40 	.word	0x20000a40
 800d24c:	2000093c 	.word	0x2000093c
 800d250:	20000938 	.word	0x20000938
 800d254:	20000a48 	.word	0x20000a48
 800d258:	20000a4c 	.word	0x20000a4c

0800d25c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d25c:	b480      	push	{r7}
 800d25e:	b087      	sub	sp, #28
 800d260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d262:	4b29      	ldr	r3, [pc, #164]	; (800d308 <vTaskSwitchContext+0xac>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d003      	beq.n	800d272 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d26a:	4b28      	ldr	r3, [pc, #160]	; (800d30c <vTaskSwitchContext+0xb0>)
 800d26c:	2201      	movs	r2, #1
 800d26e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d270:	e044      	b.n	800d2fc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800d272:	4b26      	ldr	r3, [pc, #152]	; (800d30c <vTaskSwitchContext+0xb0>)
 800d274:	2200      	movs	r2, #0
 800d276:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d278:	4b25      	ldr	r3, [pc, #148]	; (800d310 <vTaskSwitchContext+0xb4>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	fab3 f383 	clz	r3, r3
 800d284:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d286:	7afb      	ldrb	r3, [r7, #11]
 800d288:	f1c3 031f 	rsb	r3, r3, #31
 800d28c:	617b      	str	r3, [r7, #20]
 800d28e:	4921      	ldr	r1, [pc, #132]	; (800d314 <vTaskSwitchContext+0xb8>)
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	4613      	mov	r3, r2
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	4413      	add	r3, r2
 800d298:	009b      	lsls	r3, r3, #2
 800d29a:	440b      	add	r3, r1
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10a      	bne.n	800d2b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	607b      	str	r3, [r7, #4]
}
 800d2b4:	bf00      	nop
 800d2b6:	e7fe      	b.n	800d2b6 <vTaskSwitchContext+0x5a>
 800d2b8:	697a      	ldr	r2, [r7, #20]
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4413      	add	r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4a14      	ldr	r2, [pc, #80]	; (800d314 <vTaskSwitchContext+0xb8>)
 800d2c4:	4413      	add	r3, r2
 800d2c6:	613b      	str	r3, [r7, #16]
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	685a      	ldr	r2, [r3, #4]
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	605a      	str	r2, [r3, #4]
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	685a      	ldr	r2, [r3, #4]
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	3308      	adds	r3, #8
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d104      	bne.n	800d2e8 <vTaskSwitchContext+0x8c>
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	685a      	ldr	r2, [r3, #4]
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	605a      	str	r2, [r3, #4]
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	4a0a      	ldr	r2, [pc, #40]	; (800d318 <vTaskSwitchContext+0xbc>)
 800d2f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2f2:	4b09      	ldr	r3, [pc, #36]	; (800d318 <vTaskSwitchContext+0xbc>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	334c      	adds	r3, #76	; 0x4c
 800d2f8:	4a08      	ldr	r2, [pc, #32]	; (800d31c <vTaskSwitchContext+0xc0>)
 800d2fa:	6013      	str	r3, [r2, #0]
}
 800d2fc:	bf00      	nop
 800d2fe:	371c      	adds	r7, #28
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr
 800d308:	20000a60 	.word	0x20000a60
 800d30c:	20000a4c 	.word	0x20000a4c
 800d310:	20000a40 	.word	0x20000a40
 800d314:	2000093c 	.word	0x2000093c
 800d318:	20000938 	.word	0x20000938
 800d31c:	2000006c 	.word	0x2000006c

0800d320 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d10a      	bne.n	800d346 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	60fb      	str	r3, [r7, #12]
}
 800d342:	bf00      	nop
 800d344:	e7fe      	b.n	800d344 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d346:	4b07      	ldr	r3, [pc, #28]	; (800d364 <vTaskPlaceOnEventList+0x44>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	3318      	adds	r3, #24
 800d34c:	4619      	mov	r1, r3
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7fe fe2b 	bl	800bfaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d354:	2101      	movs	r1, #1
 800d356:	6838      	ldr	r0, [r7, #0]
 800d358:	f000 fbaa 	bl	800dab0 <prvAddCurrentTaskToDelayedList>
}
 800d35c:	bf00      	nop
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	20000938 	.word	0x20000938

0800d368 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10a      	bne.n	800d394 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	60fb      	str	r3, [r7, #12]
}
 800d390:	bf00      	nop
 800d392:	e7fe      	b.n	800d392 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	3318      	adds	r3, #24
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fe fe3f 	bl	800c01c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d39e:	4b1d      	ldr	r3, [pc, #116]	; (800d414 <xTaskRemoveFromEventList+0xac>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d11c      	bne.n	800d3e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fe fe36 	bl	800c01c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	409a      	lsls	r2, r3
 800d3b8:	4b17      	ldr	r3, [pc, #92]	; (800d418 <xTaskRemoveFromEventList+0xb0>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	4a16      	ldr	r2, [pc, #88]	; (800d418 <xTaskRemoveFromEventList+0xb0>)
 800d3c0:	6013      	str	r3, [r2, #0]
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	4a13      	ldr	r2, [pc, #76]	; (800d41c <xTaskRemoveFromEventList+0xb4>)
 800d3d0:	441a      	add	r2, r3
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	4610      	mov	r0, r2
 800d3da:	f7fe fdc2 	bl	800bf62 <vListInsertEnd>
 800d3de:	e005      	b.n	800d3ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	3318      	adds	r3, #24
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	480e      	ldr	r0, [pc, #56]	; (800d420 <xTaskRemoveFromEventList+0xb8>)
 800d3e8:	f7fe fdbb 	bl	800bf62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f0:	4b0c      	ldr	r3, [pc, #48]	; (800d424 <xTaskRemoveFromEventList+0xbc>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d905      	bls.n	800d406 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d3fe:	4b0a      	ldr	r3, [pc, #40]	; (800d428 <xTaskRemoveFromEventList+0xc0>)
 800d400:	2201      	movs	r2, #1
 800d402:	601a      	str	r2, [r3, #0]
 800d404:	e001      	b.n	800d40a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d406:	2300      	movs	r3, #0
 800d408:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800d40a:	697b      	ldr	r3, [r7, #20]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3718      	adds	r7, #24
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	20000a60 	.word	0x20000a60
 800d418:	20000a40 	.word	0x20000a40
 800d41c:	2000093c 	.word	0x2000093c
 800d420:	200009f8 	.word	0x200009f8
 800d424:	20000938 	.word	0x20000938
 800d428:	20000a4c 	.word	0x20000a4c

0800d42c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d434:	4b06      	ldr	r3, [pc, #24]	; (800d450 <vTaskInternalSetTimeOutState+0x24>)
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d43c:	4b05      	ldr	r3, [pc, #20]	; (800d454 <vTaskInternalSetTimeOutState+0x28>)
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	605a      	str	r2, [r3, #4]
}
 800d444:	bf00      	nop
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	20000a50 	.word	0x20000a50
 800d454:	20000a3c 	.word	0x20000a3c

0800d458 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b088      	sub	sp, #32
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10a      	bne.n	800d47e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	613b      	str	r3, [r7, #16]
}
 800d47a:	bf00      	nop
 800d47c:	e7fe      	b.n	800d47c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d10a      	bne.n	800d49a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d488:	f383 8811 	msr	BASEPRI, r3
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	60fb      	str	r3, [r7, #12]
}
 800d496:	bf00      	nop
 800d498:	e7fe      	b.n	800d498 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d49a:	f000 fc9b 	bl	800ddd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d49e:	4b1d      	ldr	r3, [pc, #116]	; (800d514 <xTaskCheckForTimeOut+0xbc>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	69ba      	ldr	r2, [r7, #24]
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4b6:	d102      	bne.n	800d4be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	61fb      	str	r3, [r7, #28]
 800d4bc:	e023      	b.n	800d506 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	4b15      	ldr	r3, [pc, #84]	; (800d518 <xTaskCheckForTimeOut+0xc0>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d007      	beq.n	800d4da <xTaskCheckForTimeOut+0x82>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	69ba      	ldr	r2, [r7, #24]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d302      	bcc.n	800d4da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	61fb      	str	r3, [r7, #28]
 800d4d8:	e015      	b.n	800d506 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	697a      	ldr	r2, [r7, #20]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d20b      	bcs.n	800d4fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	1ad2      	subs	r2, r2, r3
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7ff ff9b 	bl	800d42c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	61fb      	str	r3, [r7, #28]
 800d4fa:	e004      	b.n	800d506 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	2200      	movs	r2, #0
 800d500:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d502:	2301      	movs	r3, #1
 800d504:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d506:	f000 fc95 	bl	800de34 <vPortExitCritical>

	return xReturn;
 800d50a:	69fb      	ldr	r3, [r7, #28]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3720      	adds	r7, #32
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	20000a3c 	.word	0x20000a3c
 800d518:	20000a50 	.word	0x20000a50

0800d51c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d51c:	b480      	push	{r7}
 800d51e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d520:	4b03      	ldr	r3, [pc, #12]	; (800d530 <vTaskMissedYield+0x14>)
 800d522:	2201      	movs	r2, #1
 800d524:	601a      	str	r2, [r3, #0]
}
 800d526:	bf00      	nop
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr
 800d530:	20000a4c 	.word	0x20000a4c

0800d534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d53c:	f000 f852 	bl	800d5e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d540:	4b06      	ldr	r3, [pc, #24]	; (800d55c <prvIdleTask+0x28>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d9f9      	bls.n	800d53c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d548:	4b05      	ldr	r3, [pc, #20]	; (800d560 <prvIdleTask+0x2c>)
 800d54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d558:	e7f0      	b.n	800d53c <prvIdleTask+0x8>
 800d55a:	bf00      	nop
 800d55c:	2000093c 	.word	0x2000093c
 800d560:	e000ed04 	.word	0xe000ed04

0800d564 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d56a:	2300      	movs	r3, #0
 800d56c:	607b      	str	r3, [r7, #4]
 800d56e:	e00c      	b.n	800d58a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	4613      	mov	r3, r2
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	4413      	add	r3, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4a12      	ldr	r2, [pc, #72]	; (800d5c4 <prvInitialiseTaskLists+0x60>)
 800d57c:	4413      	add	r3, r2
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fe fcc2 	bl	800bf08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	3301      	adds	r3, #1
 800d588:	607b      	str	r3, [r7, #4]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b06      	cmp	r3, #6
 800d58e:	d9ef      	bls.n	800d570 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d590:	480d      	ldr	r0, [pc, #52]	; (800d5c8 <prvInitialiseTaskLists+0x64>)
 800d592:	f7fe fcb9 	bl	800bf08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d596:	480d      	ldr	r0, [pc, #52]	; (800d5cc <prvInitialiseTaskLists+0x68>)
 800d598:	f7fe fcb6 	bl	800bf08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d59c:	480c      	ldr	r0, [pc, #48]	; (800d5d0 <prvInitialiseTaskLists+0x6c>)
 800d59e:	f7fe fcb3 	bl	800bf08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5a2:	480c      	ldr	r0, [pc, #48]	; (800d5d4 <prvInitialiseTaskLists+0x70>)
 800d5a4:	f7fe fcb0 	bl	800bf08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5a8:	480b      	ldr	r0, [pc, #44]	; (800d5d8 <prvInitialiseTaskLists+0x74>)
 800d5aa:	f7fe fcad 	bl	800bf08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5ae:	4b0b      	ldr	r3, [pc, #44]	; (800d5dc <prvInitialiseTaskLists+0x78>)
 800d5b0:	4a05      	ldr	r2, [pc, #20]	; (800d5c8 <prvInitialiseTaskLists+0x64>)
 800d5b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5b4:	4b0a      	ldr	r3, [pc, #40]	; (800d5e0 <prvInitialiseTaskLists+0x7c>)
 800d5b6:	4a05      	ldr	r2, [pc, #20]	; (800d5cc <prvInitialiseTaskLists+0x68>)
 800d5b8:	601a      	str	r2, [r3, #0]
}
 800d5ba:	bf00      	nop
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	2000093c 	.word	0x2000093c
 800d5c8:	200009c8 	.word	0x200009c8
 800d5cc:	200009dc 	.word	0x200009dc
 800d5d0:	200009f8 	.word	0x200009f8
 800d5d4:	20000a0c 	.word	0x20000a0c
 800d5d8:	20000a24 	.word	0x20000a24
 800d5dc:	200009f0 	.word	0x200009f0
 800d5e0:	200009f4 	.word	0x200009f4

0800d5e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5ea:	e019      	b.n	800d620 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d5ec:	f000 fbf2 	bl	800ddd4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d5f0:	4b10      	ldr	r3, [pc, #64]	; (800d634 <prvCheckTasksWaitingTermination+0x50>)
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7fe fd0d 	bl	800c01c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d602:	4b0d      	ldr	r3, [pc, #52]	; (800d638 <prvCheckTasksWaitingTermination+0x54>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	3b01      	subs	r3, #1
 800d608:	4a0b      	ldr	r2, [pc, #44]	; (800d638 <prvCheckTasksWaitingTermination+0x54>)
 800d60a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d60c:	4b0b      	ldr	r3, [pc, #44]	; (800d63c <prvCheckTasksWaitingTermination+0x58>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	3b01      	subs	r3, #1
 800d612:	4a0a      	ldr	r2, [pc, #40]	; (800d63c <prvCheckTasksWaitingTermination+0x58>)
 800d614:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d616:	f000 fc0d 	bl	800de34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 f810 	bl	800d640 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d620:	4b06      	ldr	r3, [pc, #24]	; (800d63c <prvCheckTasksWaitingTermination+0x58>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1e1      	bne.n	800d5ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d628:	bf00      	nop
 800d62a:	bf00      	nop
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	20000a0c 	.word	0x20000a0c
 800d638:	20000a38 	.word	0x20000a38
 800d63c:	20000a20 	.word	0x20000a20

0800d640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	334c      	adds	r3, #76	; 0x4c
 800d64c:	4618      	mov	r0, r3
 800d64e:	f001 fc05 	bl	800ee5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d108      	bne.n	800d66e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d660:	4618      	mov	r0, r3
 800d662:	f000 fd5d 	bl	800e120 <vPortFree>
				vPortFree( pxTCB );
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fd5a 	bl	800e120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d66c:	e018      	b.n	800d6a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d674:	2b01      	cmp	r3, #1
 800d676:	d103      	bne.n	800d680 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 fd51 	bl	800e120 <vPortFree>
	}
 800d67e:	e00f      	b.n	800d6a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d686:	2b02      	cmp	r3, #2
 800d688:	d00a      	beq.n	800d6a0 <prvDeleteTCB+0x60>
	__asm volatile
 800d68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68e:	f383 8811 	msr	BASEPRI, r3
 800d692:	f3bf 8f6f 	isb	sy
 800d696:	f3bf 8f4f 	dsb	sy
 800d69a:	60fb      	str	r3, [r7, #12]
}
 800d69c:	bf00      	nop
 800d69e:	e7fe      	b.n	800d69e <prvDeleteTCB+0x5e>
	}
 800d6a0:	bf00      	nop
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6ae:	4b0f      	ldr	r3, [pc, #60]	; (800d6ec <prvResetNextTaskUnblockTime+0x44>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d101      	bne.n	800d6bc <prvResetNextTaskUnblockTime+0x14>
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	e000      	b.n	800d6be <prvResetNextTaskUnblockTime+0x16>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d004      	beq.n	800d6cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6c2:	4b0b      	ldr	r3, [pc, #44]	; (800d6f0 <prvResetNextTaskUnblockTime+0x48>)
 800d6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6ca:	e008      	b.n	800d6de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d6cc:	4b07      	ldr	r3, [pc, #28]	; (800d6ec <prvResetNextTaskUnblockTime+0x44>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	4a05      	ldr	r2, [pc, #20]	; (800d6f0 <prvResetNextTaskUnblockTime+0x48>)
 800d6dc:	6013      	str	r3, [r2, #0]
}
 800d6de:	bf00      	nop
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	200009f0 	.word	0x200009f0
 800d6f0:	20000a58 	.word	0x20000a58

0800d6f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d6fa:	4b0b      	ldr	r3, [pc, #44]	; (800d728 <xTaskGetSchedulerState+0x34>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d102      	bne.n	800d708 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d702:	2301      	movs	r3, #1
 800d704:	607b      	str	r3, [r7, #4]
 800d706:	e008      	b.n	800d71a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d708:	4b08      	ldr	r3, [pc, #32]	; (800d72c <xTaskGetSchedulerState+0x38>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d102      	bne.n	800d716 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d710:	2302      	movs	r3, #2
 800d712:	607b      	str	r3, [r7, #4]
 800d714:	e001      	b.n	800d71a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d716:	2300      	movs	r3, #0
 800d718:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d71a:	687b      	ldr	r3, [r7, #4]
	}
 800d71c:	4618      	mov	r0, r3
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr
 800d728:	20000a44 	.word	0x20000a44
 800d72c:	20000a60 	.word	0x20000a60

0800d730 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d73c:	2300      	movs	r3, #0
 800d73e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d06e      	beq.n	800d824 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d74a:	4b39      	ldr	r3, [pc, #228]	; (800d830 <xTaskPriorityInherit+0x100>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d750:	429a      	cmp	r2, r3
 800d752:	d25e      	bcs.n	800d812 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	699b      	ldr	r3, [r3, #24]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	db06      	blt.n	800d76a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d75c:	4b34      	ldr	r3, [pc, #208]	; (800d830 <xTaskPriorityInherit+0x100>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d762:	f1c3 0207 	rsb	r2, r3, #7
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	6959      	ldr	r1, [r3, #20]
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d772:	4613      	mov	r3, r2
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	4413      	add	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	4a2e      	ldr	r2, [pc, #184]	; (800d834 <xTaskPriorityInherit+0x104>)
 800d77c:	4413      	add	r3, r2
 800d77e:	4299      	cmp	r1, r3
 800d780:	d101      	bne.n	800d786 <xTaskPriorityInherit+0x56>
 800d782:	2301      	movs	r3, #1
 800d784:	e000      	b.n	800d788 <xTaskPriorityInherit+0x58>
 800d786:	2300      	movs	r3, #0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d03a      	beq.n	800d802 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	3304      	adds	r3, #4
 800d790:	4618      	mov	r0, r3
 800d792:	f7fe fc43 	bl	800c01c <uxListRemove>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d115      	bne.n	800d7c8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a0:	4924      	ldr	r1, [pc, #144]	; (800d834 <xTaskPriorityInherit+0x104>)
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	4413      	add	r3, r2
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	440b      	add	r3, r1
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d10a      	bne.n	800d7c8 <xTaskPriorityInherit+0x98>
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7bc:	43da      	mvns	r2, r3
 800d7be:	4b1e      	ldr	r3, [pc, #120]	; (800d838 <xTaskPriorityInherit+0x108>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4013      	ands	r3, r2
 800d7c4:	4a1c      	ldr	r2, [pc, #112]	; (800d838 <xTaskPriorityInherit+0x108>)
 800d7c6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d7c8:	4b19      	ldr	r3, [pc, #100]	; (800d830 <xTaskPriorityInherit+0x100>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	409a      	lsls	r2, r3
 800d7da:	4b17      	ldr	r3, [pc, #92]	; (800d838 <xTaskPriorityInherit+0x108>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	4a15      	ldr	r2, [pc, #84]	; (800d838 <xTaskPriorityInherit+0x108>)
 800d7e2:	6013      	str	r3, [r2, #0]
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	4413      	add	r3, r2
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4a10      	ldr	r2, [pc, #64]	; (800d834 <xTaskPriorityInherit+0x104>)
 800d7f2:	441a      	add	r2, r3
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	f7fe fbb1 	bl	800bf62 <vListInsertEnd>
 800d800:	e004      	b.n	800d80c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d802:	4b0b      	ldr	r3, [pc, #44]	; (800d830 <xTaskPriorityInherit+0x100>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d80c:	2301      	movs	r3, #1
 800d80e:	60fb      	str	r3, [r7, #12]
 800d810:	e008      	b.n	800d824 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d816:	4b06      	ldr	r3, [pc, #24]	; (800d830 <xTaskPriorityInherit+0x100>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d201      	bcs.n	800d824 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d820:	2301      	movs	r3, #1
 800d822:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d824:	68fb      	ldr	r3, [r7, #12]
	}
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	20000938 	.word	0x20000938
 800d834:	2000093c 	.word	0x2000093c
 800d838:	20000a40 	.word	0x20000a40

0800d83c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b086      	sub	sp, #24
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d848:	2300      	movs	r3, #0
 800d84a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d06e      	beq.n	800d930 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d852:	4b3a      	ldr	r3, [pc, #232]	; (800d93c <xTaskPriorityDisinherit+0x100>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	693a      	ldr	r2, [r7, #16]
 800d858:	429a      	cmp	r2, r3
 800d85a:	d00a      	beq.n	800d872 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	60fb      	str	r3, [r7, #12]
}
 800d86e:	bf00      	nop
 800d870:	e7fe      	b.n	800d870 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d876:	2b00      	cmp	r3, #0
 800d878:	d10a      	bne.n	800d890 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87e:	f383 8811 	msr	BASEPRI, r3
 800d882:	f3bf 8f6f 	isb	sy
 800d886:	f3bf 8f4f 	dsb	sy
 800d88a:	60bb      	str	r3, [r7, #8]
}
 800d88c:	bf00      	nop
 800d88e:	e7fe      	b.n	800d88e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d894:	1e5a      	subs	r2, r3, #1
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d044      	beq.n	800d930 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d140      	bne.n	800d930 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	3304      	adds	r3, #4
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7fe fbb2 	bl	800c01c <uxListRemove>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d115      	bne.n	800d8ea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c2:	491f      	ldr	r1, [pc, #124]	; (800d940 <xTaskPriorityDisinherit+0x104>)
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	4413      	add	r3, r2
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	440b      	add	r3, r1
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d10a      	bne.n	800d8ea <xTaskPriorityDisinherit+0xae>
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d8:	2201      	movs	r2, #1
 800d8da:	fa02 f303 	lsl.w	r3, r2, r3
 800d8de:	43da      	mvns	r2, r3
 800d8e0:	4b18      	ldr	r3, [pc, #96]	; (800d944 <xTaskPriorityDisinherit+0x108>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	4a17      	ldr	r2, [pc, #92]	; (800d944 <xTaskPriorityDisinherit+0x108>)
 800d8e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f6:	f1c3 0207 	rsb	r2, r3, #7
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d902:	2201      	movs	r2, #1
 800d904:	409a      	lsls	r2, r3
 800d906:	4b0f      	ldr	r3, [pc, #60]	; (800d944 <xTaskPriorityDisinherit+0x108>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	4a0d      	ldr	r2, [pc, #52]	; (800d944 <xTaskPriorityDisinherit+0x108>)
 800d90e:	6013      	str	r3, [r2, #0]
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d914:	4613      	mov	r3, r2
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	4413      	add	r3, r2
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4a08      	ldr	r2, [pc, #32]	; (800d940 <xTaskPriorityDisinherit+0x104>)
 800d91e:	441a      	add	r2, r3
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	3304      	adds	r3, #4
 800d924:	4619      	mov	r1, r3
 800d926:	4610      	mov	r0, r2
 800d928:	f7fe fb1b 	bl	800bf62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d92c:	2301      	movs	r3, #1
 800d92e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d930:	697b      	ldr	r3, [r7, #20]
	}
 800d932:	4618      	mov	r0, r3
 800d934:	3718      	adds	r7, #24
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	20000938 	.word	0x20000938
 800d940:	2000093c 	.word	0x2000093c
 800d944:	20000a40 	.word	0x20000a40

0800d948 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b088      	sub	sp, #32
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d956:	2301      	movs	r3, #1
 800d958:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f000 8088 	beq.w	800da72 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10a      	bne.n	800d980 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	60fb      	str	r3, [r7, #12]
}
 800d97c:	bf00      	nop
 800d97e:	e7fe      	b.n	800d97e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d984:	683a      	ldr	r2, [r7, #0]
 800d986:	429a      	cmp	r2, r3
 800d988:	d902      	bls.n	800d990 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	61fb      	str	r3, [r7, #28]
 800d98e:	e002      	b.n	800d996 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d994:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99a:	69fa      	ldr	r2, [r7, #28]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d068      	beq.n	800da72 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9a4:	697a      	ldr	r2, [r7, #20]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d163      	bne.n	800da72 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d9aa:	4b34      	ldr	r3, [pc, #208]	; (800da7c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	69ba      	ldr	r2, [r7, #24]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d10a      	bne.n	800d9ca <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800d9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b8:	f383 8811 	msr	BASEPRI, r3
 800d9bc:	f3bf 8f6f 	isb	sy
 800d9c0:	f3bf 8f4f 	dsb	sy
 800d9c4:	60bb      	str	r3, [r7, #8]
}
 800d9c6:	bf00      	nop
 800d9c8:	e7fe      	b.n	800d9c8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ce:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	69fa      	ldr	r2, [r7, #28]
 800d9d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d9d6:	69bb      	ldr	r3, [r7, #24]
 800d9d8:	699b      	ldr	r3, [r3, #24]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	db04      	blt.n	800d9e8 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	f1c3 0207 	rsb	r2, r3, #7
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	6959      	ldr	r1, [r3, #20]
 800d9ec:	693a      	ldr	r2, [r7, #16]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	4413      	add	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	4a22      	ldr	r2, [pc, #136]	; (800da80 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d9f8:	4413      	add	r3, r2
 800d9fa:	4299      	cmp	r1, r3
 800d9fc:	d101      	bne.n	800da02 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800d9fe:	2301      	movs	r3, #1
 800da00:	e000      	b.n	800da04 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800da02:	2300      	movs	r3, #0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d034      	beq.n	800da72 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	3304      	adds	r3, #4
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7fe fb05 	bl	800c01c <uxListRemove>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d115      	bne.n	800da44 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da1c:	4918      	ldr	r1, [pc, #96]	; (800da80 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800da1e:	4613      	mov	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	4413      	add	r3, r2
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	440b      	add	r3, r1
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d10a      	bne.n	800da44 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da32:	2201      	movs	r2, #1
 800da34:	fa02 f303 	lsl.w	r3, r2, r3
 800da38:	43da      	mvns	r2, r3
 800da3a:	4b12      	ldr	r3, [pc, #72]	; (800da84 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4013      	ands	r3, r2
 800da40:	4a10      	ldr	r2, [pc, #64]	; (800da84 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800da42:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da48:	2201      	movs	r2, #1
 800da4a:	409a      	lsls	r2, r3
 800da4c:	4b0d      	ldr	r3, [pc, #52]	; (800da84 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4313      	orrs	r3, r2
 800da52:	4a0c      	ldr	r2, [pc, #48]	; (800da84 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800da54:	6013      	str	r3, [r2, #0]
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da5a:	4613      	mov	r3, r2
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	4413      	add	r3, r2
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	4a07      	ldr	r2, [pc, #28]	; (800da80 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800da64:	441a      	add	r2, r3
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	3304      	adds	r3, #4
 800da6a:	4619      	mov	r1, r3
 800da6c:	4610      	mov	r0, r2
 800da6e:	f7fe fa78 	bl	800bf62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da72:	bf00      	nop
 800da74:	3720      	adds	r7, #32
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	20000938 	.word	0x20000938
 800da80:	2000093c 	.word	0x2000093c
 800da84:	20000a40 	.word	0x20000a40

0800da88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800da88:	b480      	push	{r7}
 800da8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800da8c:	4b07      	ldr	r3, [pc, #28]	; (800daac <pvTaskIncrementMutexHeldCount+0x24>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d004      	beq.n	800da9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800da94:	4b05      	ldr	r3, [pc, #20]	; (800daac <pvTaskIncrementMutexHeldCount+0x24>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da9a:	3201      	adds	r2, #1
 800da9c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800da9e:	4b03      	ldr	r3, [pc, #12]	; (800daac <pvTaskIncrementMutexHeldCount+0x24>)
 800daa0:	681b      	ldr	r3, [r3, #0]
	}
 800daa2:	4618      	mov	r0, r3
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr
 800daac:	20000938 	.word	0x20000938

0800dab0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800daba:	4b29      	ldr	r3, [pc, #164]	; (800db60 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dac0:	4b28      	ldr	r3, [pc, #160]	; (800db64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	3304      	adds	r3, #4
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fe faa8 	bl	800c01c <uxListRemove>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d10b      	bne.n	800daea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800dad2:	4b24      	ldr	r3, [pc, #144]	; (800db64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad8:	2201      	movs	r2, #1
 800dada:	fa02 f303 	lsl.w	r3, r2, r3
 800dade:	43da      	mvns	r2, r3
 800dae0:	4b21      	ldr	r3, [pc, #132]	; (800db68 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4013      	ands	r3, r2
 800dae6:	4a20      	ldr	r2, [pc, #128]	; (800db68 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dae8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf0:	d10a      	bne.n	800db08 <prvAddCurrentTaskToDelayedList+0x58>
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d007      	beq.n	800db08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800daf8:	4b1a      	ldr	r3, [pc, #104]	; (800db64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	3304      	adds	r3, #4
 800dafe:	4619      	mov	r1, r3
 800db00:	481a      	ldr	r0, [pc, #104]	; (800db6c <prvAddCurrentTaskToDelayedList+0xbc>)
 800db02:	f7fe fa2e 	bl	800bf62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db06:	e026      	b.n	800db56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4413      	add	r3, r2
 800db0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db10:	4b14      	ldr	r3, [pc, #80]	; (800db64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	68ba      	ldr	r2, [r7, #8]
 800db16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d209      	bcs.n	800db34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db20:	4b13      	ldr	r3, [pc, #76]	; (800db70 <prvAddCurrentTaskToDelayedList+0xc0>)
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	4b0f      	ldr	r3, [pc, #60]	; (800db64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	3304      	adds	r3, #4
 800db2a:	4619      	mov	r1, r3
 800db2c:	4610      	mov	r0, r2
 800db2e:	f7fe fa3c 	bl	800bfaa <vListInsert>
}
 800db32:	e010      	b.n	800db56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db34:	4b0f      	ldr	r3, [pc, #60]	; (800db74 <prvAddCurrentTaskToDelayedList+0xc4>)
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	4b0a      	ldr	r3, [pc, #40]	; (800db64 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	3304      	adds	r3, #4
 800db3e:	4619      	mov	r1, r3
 800db40:	4610      	mov	r0, r2
 800db42:	f7fe fa32 	bl	800bfaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db46:	4b0c      	ldr	r3, [pc, #48]	; (800db78 <prvAddCurrentTaskToDelayedList+0xc8>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d202      	bcs.n	800db56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800db50:	4a09      	ldr	r2, [pc, #36]	; (800db78 <prvAddCurrentTaskToDelayedList+0xc8>)
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	6013      	str	r3, [r2, #0]
}
 800db56:	bf00      	nop
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	20000a3c 	.word	0x20000a3c
 800db64:	20000938 	.word	0x20000938
 800db68:	20000a40 	.word	0x20000a40
 800db6c:	20000a24 	.word	0x20000a24
 800db70:	200009f4 	.word	0x200009f4
 800db74:	200009f0 	.word	0x200009f0
 800db78:	20000a58 	.word	0x20000a58

0800db7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800db7c:	b480      	push	{r7}
 800db7e:	b085      	sub	sp, #20
 800db80:	af00      	add	r7, sp, #0
 800db82:	60f8      	str	r0, [r7, #12]
 800db84:	60b9      	str	r1, [r7, #8]
 800db86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	3b04      	subs	r3, #4
 800db8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800db94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	3b04      	subs	r3, #4
 800db9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	f023 0201 	bic.w	r2, r3, #1
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	3b04      	subs	r3, #4
 800dbaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dbac:	4a0c      	ldr	r2, [pc, #48]	; (800dbe0 <pxPortInitialiseStack+0x64>)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	3b14      	subs	r3, #20
 800dbb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	3b04      	subs	r3, #4
 800dbc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f06f 0202 	mvn.w	r2, #2
 800dbca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	3b20      	subs	r3, #32
 800dbd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3714      	adds	r7, #20
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr
 800dbe0:	0800dbe5 	.word	0x0800dbe5

0800dbe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b085      	sub	sp, #20
 800dbe8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dbee:	4b12      	ldr	r3, [pc, #72]	; (800dc38 <prvTaskExitError+0x54>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf6:	d00a      	beq.n	800dc0e <prvTaskExitError+0x2a>
	__asm volatile
 800dbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfc:	f383 8811 	msr	BASEPRI, r3
 800dc00:	f3bf 8f6f 	isb	sy
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	60fb      	str	r3, [r7, #12]
}
 800dc0a:	bf00      	nop
 800dc0c:	e7fe      	b.n	800dc0c <prvTaskExitError+0x28>
	__asm volatile
 800dc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	60bb      	str	r3, [r7, #8]
}
 800dc20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc22:	bf00      	nop
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d0fc      	beq.n	800dc24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc2a:	bf00      	nop
 800dc2c:	bf00      	nop
 800dc2e:	3714      	adds	r7, #20
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr
 800dc38:	20000010 	.word	0x20000010
 800dc3c:	00000000 	.word	0x00000000

0800dc40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc40:	4b07      	ldr	r3, [pc, #28]	; (800dc60 <pxCurrentTCBConst2>)
 800dc42:	6819      	ldr	r1, [r3, #0]
 800dc44:	6808      	ldr	r0, [r1, #0]
 800dc46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4a:	f380 8809 	msr	PSP, r0
 800dc4e:	f3bf 8f6f 	isb	sy
 800dc52:	f04f 0000 	mov.w	r0, #0
 800dc56:	f380 8811 	msr	BASEPRI, r0
 800dc5a:	4770      	bx	lr
 800dc5c:	f3af 8000 	nop.w

0800dc60 <pxCurrentTCBConst2>:
 800dc60:	20000938 	.word	0x20000938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc64:	bf00      	nop
 800dc66:	bf00      	nop

0800dc68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc68:	4808      	ldr	r0, [pc, #32]	; (800dc8c <prvPortStartFirstTask+0x24>)
 800dc6a:	6800      	ldr	r0, [r0, #0]
 800dc6c:	6800      	ldr	r0, [r0, #0]
 800dc6e:	f380 8808 	msr	MSP, r0
 800dc72:	f04f 0000 	mov.w	r0, #0
 800dc76:	f380 8814 	msr	CONTROL, r0
 800dc7a:	b662      	cpsie	i
 800dc7c:	b661      	cpsie	f
 800dc7e:	f3bf 8f4f 	dsb	sy
 800dc82:	f3bf 8f6f 	isb	sy
 800dc86:	df00      	svc	0
 800dc88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dc8a:	bf00      	nop
 800dc8c:	e000ed08 	.word	0xe000ed08

0800dc90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dc96:	4b46      	ldr	r3, [pc, #280]	; (800ddb0 <xPortStartScheduler+0x120>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a46      	ldr	r2, [pc, #280]	; (800ddb4 <xPortStartScheduler+0x124>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d10a      	bne.n	800dcb6 <xPortStartScheduler+0x26>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	613b      	str	r3, [r7, #16]
}
 800dcb2:	bf00      	nop
 800dcb4:	e7fe      	b.n	800dcb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dcb6:	4b3e      	ldr	r3, [pc, #248]	; (800ddb0 <xPortStartScheduler+0x120>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a3f      	ldr	r2, [pc, #252]	; (800ddb8 <xPortStartScheduler+0x128>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d10a      	bne.n	800dcd6 <xPortStartScheduler+0x46>
	__asm volatile
 800dcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc4:	f383 8811 	msr	BASEPRI, r3
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	60fb      	str	r3, [r7, #12]
}
 800dcd2:	bf00      	nop
 800dcd4:	e7fe      	b.n	800dcd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dcd6:	4b39      	ldr	r3, [pc, #228]	; (800ddbc <xPortStartScheduler+0x12c>)
 800dcd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	22ff      	movs	r2, #255	; 0xff
 800dce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dcf0:	78fb      	ldrb	r3, [r7, #3]
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dcf8:	b2da      	uxtb	r2, r3
 800dcfa:	4b31      	ldr	r3, [pc, #196]	; (800ddc0 <xPortStartScheduler+0x130>)
 800dcfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dcfe:	4b31      	ldr	r3, [pc, #196]	; (800ddc4 <xPortStartScheduler+0x134>)
 800dd00:	2207      	movs	r2, #7
 800dd02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd04:	e009      	b.n	800dd1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dd06:	4b2f      	ldr	r3, [pc, #188]	; (800ddc4 <xPortStartScheduler+0x134>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	3b01      	subs	r3, #1
 800dd0c:	4a2d      	ldr	r2, [pc, #180]	; (800ddc4 <xPortStartScheduler+0x134>)
 800dd0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd10:	78fb      	ldrb	r3, [r7, #3]
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	005b      	lsls	r3, r3, #1
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd1a:	78fb      	ldrb	r3, [r7, #3]
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd22:	2b80      	cmp	r3, #128	; 0x80
 800dd24:	d0ef      	beq.n	800dd06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd26:	4b27      	ldr	r3, [pc, #156]	; (800ddc4 <xPortStartScheduler+0x134>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f1c3 0307 	rsb	r3, r3, #7
 800dd2e:	2b04      	cmp	r3, #4
 800dd30:	d00a      	beq.n	800dd48 <xPortStartScheduler+0xb8>
	__asm volatile
 800dd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd36:	f383 8811 	msr	BASEPRI, r3
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	f3bf 8f4f 	dsb	sy
 800dd42:	60bb      	str	r3, [r7, #8]
}
 800dd44:	bf00      	nop
 800dd46:	e7fe      	b.n	800dd46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd48:	4b1e      	ldr	r3, [pc, #120]	; (800ddc4 <xPortStartScheduler+0x134>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	021b      	lsls	r3, r3, #8
 800dd4e:	4a1d      	ldr	r2, [pc, #116]	; (800ddc4 <xPortStartScheduler+0x134>)
 800dd50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd52:	4b1c      	ldr	r3, [pc, #112]	; (800ddc4 <xPortStartScheduler+0x134>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dd5a:	4a1a      	ldr	r2, [pc, #104]	; (800ddc4 <xPortStartScheduler+0x134>)
 800dd5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dd66:	4b18      	ldr	r3, [pc, #96]	; (800ddc8 <xPortStartScheduler+0x138>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a17      	ldr	r2, [pc, #92]	; (800ddc8 <xPortStartScheduler+0x138>)
 800dd6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dd70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd72:	4b15      	ldr	r3, [pc, #84]	; (800ddc8 <xPortStartScheduler+0x138>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4a14      	ldr	r2, [pc, #80]	; (800ddc8 <xPortStartScheduler+0x138>)
 800dd78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dd7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd7e:	f000 f8dd 	bl	800df3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd82:	4b12      	ldr	r3, [pc, #72]	; (800ddcc <xPortStartScheduler+0x13c>)
 800dd84:	2200      	movs	r2, #0
 800dd86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dd88:	f000 f8fc 	bl	800df84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dd8c:	4b10      	ldr	r3, [pc, #64]	; (800ddd0 <xPortStartScheduler+0x140>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a0f      	ldr	r2, [pc, #60]	; (800ddd0 <xPortStartScheduler+0x140>)
 800dd92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dd96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd98:	f7ff ff66 	bl	800dc68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd9c:	f7ff fa5e 	bl	800d25c <vTaskSwitchContext>
	prvTaskExitError();
 800dda0:	f7ff ff20 	bl	800dbe4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3718      	adds	r7, #24
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	e000ed00 	.word	0xe000ed00
 800ddb4:	410fc271 	.word	0x410fc271
 800ddb8:	410fc270 	.word	0x410fc270
 800ddbc:	e000e400 	.word	0xe000e400
 800ddc0:	20000a64 	.word	0x20000a64
 800ddc4:	20000a68 	.word	0x20000a68
 800ddc8:	e000ed20 	.word	0xe000ed20
 800ddcc:	20000010 	.word	0x20000010
 800ddd0:	e000ef34 	.word	0xe000ef34

0800ddd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
	__asm volatile
 800ddda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddde:	f383 8811 	msr	BASEPRI, r3
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	607b      	str	r3, [r7, #4]
}
 800ddec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ddee:	4b0f      	ldr	r3, [pc, #60]	; (800de2c <vPortEnterCritical+0x58>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	4a0d      	ldr	r2, [pc, #52]	; (800de2c <vPortEnterCritical+0x58>)
 800ddf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ddf8:	4b0c      	ldr	r3, [pc, #48]	; (800de2c <vPortEnterCritical+0x58>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d10f      	bne.n	800de20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de00:	4b0b      	ldr	r3, [pc, #44]	; (800de30 <vPortEnterCritical+0x5c>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	b2db      	uxtb	r3, r3
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00a      	beq.n	800de20 <vPortEnterCritical+0x4c>
	__asm volatile
 800de0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	603b      	str	r3, [r7, #0]
}
 800de1c:	bf00      	nop
 800de1e:	e7fe      	b.n	800de1e <vPortEnterCritical+0x4a>
	}
}
 800de20:	bf00      	nop
 800de22:	370c      	adds	r7, #12
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr
 800de2c:	20000010 	.word	0x20000010
 800de30:	e000ed04 	.word	0xe000ed04

0800de34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de3a:	4b12      	ldr	r3, [pc, #72]	; (800de84 <vPortExitCritical+0x50>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10a      	bne.n	800de58 <vPortExitCritical+0x24>
	__asm volatile
 800de42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de46:	f383 8811 	msr	BASEPRI, r3
 800de4a:	f3bf 8f6f 	isb	sy
 800de4e:	f3bf 8f4f 	dsb	sy
 800de52:	607b      	str	r3, [r7, #4]
}
 800de54:	bf00      	nop
 800de56:	e7fe      	b.n	800de56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800de58:	4b0a      	ldr	r3, [pc, #40]	; (800de84 <vPortExitCritical+0x50>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	3b01      	subs	r3, #1
 800de5e:	4a09      	ldr	r2, [pc, #36]	; (800de84 <vPortExitCritical+0x50>)
 800de60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de62:	4b08      	ldr	r3, [pc, #32]	; (800de84 <vPortExitCritical+0x50>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d105      	bne.n	800de76 <vPortExitCritical+0x42>
 800de6a:	2300      	movs	r3, #0
 800de6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800de74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de76:	bf00      	nop
 800de78:	370c      	adds	r7, #12
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop
 800de84:	20000010 	.word	0x20000010
	...

0800de90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de90:	f3ef 8009 	mrs	r0, PSP
 800de94:	f3bf 8f6f 	isb	sy
 800de98:	4b15      	ldr	r3, [pc, #84]	; (800def0 <pxCurrentTCBConst>)
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	f01e 0f10 	tst.w	lr, #16
 800dea0:	bf08      	it	eq
 800dea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deaa:	6010      	str	r0, [r2, #0]
 800deac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800deb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800deb4:	f380 8811 	msr	BASEPRI, r0
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	f3bf 8f6f 	isb	sy
 800dec0:	f7ff f9cc 	bl	800d25c <vTaskSwitchContext>
 800dec4:	f04f 0000 	mov.w	r0, #0
 800dec8:	f380 8811 	msr	BASEPRI, r0
 800decc:	bc09      	pop	{r0, r3}
 800dece:	6819      	ldr	r1, [r3, #0]
 800ded0:	6808      	ldr	r0, [r1, #0]
 800ded2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded6:	f01e 0f10 	tst.w	lr, #16
 800deda:	bf08      	it	eq
 800dedc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dee0:	f380 8809 	msr	PSP, r0
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	4770      	bx	lr
 800deea:	bf00      	nop
 800deec:	f3af 8000 	nop.w

0800def0 <pxCurrentTCBConst>:
 800def0:	20000938 	.word	0x20000938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800def4:	bf00      	nop
 800def6:	bf00      	nop

0800def8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	607b      	str	r3, [r7, #4]
}
 800df10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df12:	f7ff f8e5 	bl	800d0e0 <xTaskIncrementTick>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d003      	beq.n	800df24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df1c:	4b06      	ldr	r3, [pc, #24]	; (800df38 <SysTick_Handler+0x40>)
 800df1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df22:	601a      	str	r2, [r3, #0]
 800df24:	2300      	movs	r3, #0
 800df26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	f383 8811 	msr	BASEPRI, r3
}
 800df2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df30:	bf00      	nop
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	e000ed04 	.word	0xe000ed04

0800df3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df3c:	b480      	push	{r7}
 800df3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df40:	4b0b      	ldr	r3, [pc, #44]	; (800df70 <vPortSetupTimerInterrupt+0x34>)
 800df42:	2200      	movs	r2, #0
 800df44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df46:	4b0b      	ldr	r3, [pc, #44]	; (800df74 <vPortSetupTimerInterrupt+0x38>)
 800df48:	2200      	movs	r2, #0
 800df4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df4c:	4b0a      	ldr	r3, [pc, #40]	; (800df78 <vPortSetupTimerInterrupt+0x3c>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a0a      	ldr	r2, [pc, #40]	; (800df7c <vPortSetupTimerInterrupt+0x40>)
 800df52:	fba2 2303 	umull	r2, r3, r2, r3
 800df56:	099b      	lsrs	r3, r3, #6
 800df58:	4a09      	ldr	r2, [pc, #36]	; (800df80 <vPortSetupTimerInterrupt+0x44>)
 800df5a:	3b01      	subs	r3, #1
 800df5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df5e:	4b04      	ldr	r3, [pc, #16]	; (800df70 <vPortSetupTimerInterrupt+0x34>)
 800df60:	2207      	movs	r2, #7
 800df62:	601a      	str	r2, [r3, #0]
}
 800df64:	bf00      	nop
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	e000e010 	.word	0xe000e010
 800df74:	e000e018 	.word	0xe000e018
 800df78:	20000004 	.word	0x20000004
 800df7c:	10624dd3 	.word	0x10624dd3
 800df80:	e000e014 	.word	0xe000e014

0800df84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800df94 <vPortEnableVFP+0x10>
 800df88:	6801      	ldr	r1, [r0, #0]
 800df8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800df8e:	6001      	str	r1, [r0, #0]
 800df90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800df92:	bf00      	nop
 800df94:	e000ed88 	.word	0xe000ed88

0800df98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b08a      	sub	sp, #40	; 0x28
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dfa4:	f7fe fff2 	bl	800cf8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dfa8:	4b58      	ldr	r3, [pc, #352]	; (800e10c <pvPortMalloc+0x174>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d101      	bne.n	800dfb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dfb0:	f000 f910 	bl	800e1d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dfb4:	4b56      	ldr	r3, [pc, #344]	; (800e110 <pvPortMalloc+0x178>)
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4013      	ands	r3, r2
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	f040 808e 	bne.w	800e0de <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d01d      	beq.n	800e004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dfc8:	2208      	movs	r2, #8
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	4413      	add	r3, r2
 800dfce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f003 0307 	and.w	r3, r3, #7
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d014      	beq.n	800e004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f023 0307 	bic.w	r3, r3, #7
 800dfe0:	3308      	adds	r3, #8
 800dfe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f003 0307 	and.w	r3, r3, #7
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00a      	beq.n	800e004 <pvPortMalloc+0x6c>
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	617b      	str	r3, [r7, #20]
}
 800e000:	bf00      	nop
 800e002:	e7fe      	b.n	800e002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d069      	beq.n	800e0de <pvPortMalloc+0x146>
 800e00a:	4b42      	ldr	r3, [pc, #264]	; (800e114 <pvPortMalloc+0x17c>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	429a      	cmp	r2, r3
 800e012:	d864      	bhi.n	800e0de <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e014:	4b40      	ldr	r3, [pc, #256]	; (800e118 <pvPortMalloc+0x180>)
 800e016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e018:	4b3f      	ldr	r3, [pc, #252]	; (800e118 <pvPortMalloc+0x180>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e01e:	e004      	b.n	800e02a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	429a      	cmp	r2, r3
 800e032:	d903      	bls.n	800e03c <pvPortMalloc+0xa4>
 800e034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d1f1      	bne.n	800e020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e03c:	4b33      	ldr	r3, [pc, #204]	; (800e10c <pvPortMalloc+0x174>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e042:	429a      	cmp	r2, r3
 800e044:	d04b      	beq.n	800e0de <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e046:	6a3b      	ldr	r3, [r7, #32]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2208      	movs	r2, #8
 800e04c:	4413      	add	r3, r2
 800e04e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	6a3b      	ldr	r3, [r7, #32]
 800e056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05a:	685a      	ldr	r2, [r3, #4]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	1ad2      	subs	r2, r2, r3
 800e060:	2308      	movs	r3, #8
 800e062:	005b      	lsls	r3, r3, #1
 800e064:	429a      	cmp	r2, r3
 800e066:	d91f      	bls.n	800e0a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4413      	add	r3, r2
 800e06e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	f003 0307 	and.w	r3, r3, #7
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00a      	beq.n	800e090 <pvPortMalloc+0xf8>
	__asm volatile
 800e07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07e:	f383 8811 	msr	BASEPRI, r3
 800e082:	f3bf 8f6f 	isb	sy
 800e086:	f3bf 8f4f 	dsb	sy
 800e08a:	613b      	str	r3, [r7, #16]
}
 800e08c:	bf00      	nop
 800e08e:	e7fe      	b.n	800e08e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e092:	685a      	ldr	r2, [r3, #4]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	1ad2      	subs	r2, r2, r3
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e0a2:	69b8      	ldr	r0, [r7, #24]
 800e0a4:	f000 f8f8 	bl	800e298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e0a8:	4b1a      	ldr	r3, [pc, #104]	; (800e114 <pvPortMalloc+0x17c>)
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	4a18      	ldr	r2, [pc, #96]	; (800e114 <pvPortMalloc+0x17c>)
 800e0b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e0b6:	4b17      	ldr	r3, [pc, #92]	; (800e114 <pvPortMalloc+0x17c>)
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	4b18      	ldr	r3, [pc, #96]	; (800e11c <pvPortMalloc+0x184>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d203      	bcs.n	800e0ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e0c2:	4b14      	ldr	r3, [pc, #80]	; (800e114 <pvPortMalloc+0x17c>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a15      	ldr	r2, [pc, #84]	; (800e11c <pvPortMalloc+0x184>)
 800e0c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0cc:	685a      	ldr	r2, [r3, #4]
 800e0ce:	4b10      	ldr	r3, [pc, #64]	; (800e110 <pvPortMalloc+0x178>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	431a      	orrs	r2, r3
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0da:	2200      	movs	r2, #0
 800e0dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e0de:	f7fe ff63 	bl	800cfa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	f003 0307 	and.w	r3, r3, #7
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00a      	beq.n	800e102 <pvPortMalloc+0x16a>
	__asm volatile
 800e0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f0:	f383 8811 	msr	BASEPRI, r3
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	f3bf 8f4f 	dsb	sy
 800e0fc:	60fb      	str	r3, [r7, #12]
}
 800e0fe:	bf00      	nop
 800e100:	e7fe      	b.n	800e100 <pvPortMalloc+0x168>
	return pvReturn;
 800e102:	69fb      	ldr	r3, [r7, #28]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3728      	adds	r7, #40	; 0x28
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	20005894 	.word	0x20005894
 800e110:	200058a0 	.word	0x200058a0
 800e114:	20005898 	.word	0x20005898
 800e118:	2000588c 	.word	0x2000588c
 800e11c:	2000589c 	.word	0x2000589c

0800e120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b086      	sub	sp, #24
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d048      	beq.n	800e1c4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e132:	2308      	movs	r3, #8
 800e134:	425b      	negs	r3, r3
 800e136:	697a      	ldr	r2, [r7, #20]
 800e138:	4413      	add	r3, r2
 800e13a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	685a      	ldr	r2, [r3, #4]
 800e144:	4b21      	ldr	r3, [pc, #132]	; (800e1cc <vPortFree+0xac>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4013      	ands	r3, r2
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d10a      	bne.n	800e164 <vPortFree+0x44>
	__asm volatile
 800e14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e152:	f383 8811 	msr	BASEPRI, r3
 800e156:	f3bf 8f6f 	isb	sy
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	60fb      	str	r3, [r7, #12]
}
 800e160:	bf00      	nop
 800e162:	e7fe      	b.n	800e162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d00a      	beq.n	800e182 <vPortFree+0x62>
	__asm volatile
 800e16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e170:	f383 8811 	msr	BASEPRI, r3
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	60bb      	str	r3, [r7, #8]
}
 800e17e:	bf00      	nop
 800e180:	e7fe      	b.n	800e180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	685a      	ldr	r2, [r3, #4]
 800e186:	4b11      	ldr	r3, [pc, #68]	; (800e1cc <vPortFree+0xac>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4013      	ands	r3, r2
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d019      	beq.n	800e1c4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d115      	bne.n	800e1c4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	685a      	ldr	r2, [r3, #4]
 800e19c:	4b0b      	ldr	r3, [pc, #44]	; (800e1cc <vPortFree+0xac>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	43db      	mvns	r3, r3
 800e1a2:	401a      	ands	r2, r3
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e1a8:	f7fe fef0 	bl	800cf8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	4b07      	ldr	r3, [pc, #28]	; (800e1d0 <vPortFree+0xb0>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	4a06      	ldr	r2, [pc, #24]	; (800e1d0 <vPortFree+0xb0>)
 800e1b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e1ba:	6938      	ldr	r0, [r7, #16]
 800e1bc:	f000 f86c 	bl	800e298 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e1c0:	f7fe fef2 	bl	800cfa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e1c4:	bf00      	nop
 800e1c6:	3718      	adds	r7, #24
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	200058a0 	.word	0x200058a0
 800e1d0:	20005898 	.word	0x20005898

0800e1d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e1da:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e1de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e1e0:	4b27      	ldr	r3, [pc, #156]	; (800e280 <prvHeapInit+0xac>)
 800e1e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f003 0307 	and.w	r3, r3, #7
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d00c      	beq.n	800e208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	3307      	adds	r3, #7
 800e1f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f023 0307 	bic.w	r3, r3, #7
 800e1fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	4a1f      	ldr	r2, [pc, #124]	; (800e280 <prvHeapInit+0xac>)
 800e204:	4413      	add	r3, r2
 800e206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e20c:	4a1d      	ldr	r2, [pc, #116]	; (800e284 <prvHeapInit+0xb0>)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e212:	4b1c      	ldr	r3, [pc, #112]	; (800e284 <prvHeapInit+0xb0>)
 800e214:	2200      	movs	r2, #0
 800e216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	68ba      	ldr	r2, [r7, #8]
 800e21c:	4413      	add	r3, r2
 800e21e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e220:	2208      	movs	r2, #8
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	1a9b      	subs	r3, r3, r2
 800e226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f023 0307 	bic.w	r3, r3, #7
 800e22e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	4a15      	ldr	r2, [pc, #84]	; (800e288 <prvHeapInit+0xb4>)
 800e234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e236:	4b14      	ldr	r3, [pc, #80]	; (800e288 <prvHeapInit+0xb4>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2200      	movs	r2, #0
 800e23c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e23e:	4b12      	ldr	r3, [pc, #72]	; (800e288 <prvHeapInit+0xb4>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2200      	movs	r2, #0
 800e244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	1ad2      	subs	r2, r2, r3
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e254:	4b0c      	ldr	r3, [pc, #48]	; (800e288 <prvHeapInit+0xb4>)
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	4a0a      	ldr	r2, [pc, #40]	; (800e28c <prvHeapInit+0xb8>)
 800e262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	4a09      	ldr	r2, [pc, #36]	; (800e290 <prvHeapInit+0xbc>)
 800e26a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e26c:	4b09      	ldr	r3, [pc, #36]	; (800e294 <prvHeapInit+0xc0>)
 800e26e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e272:	601a      	str	r2, [r3, #0]
}
 800e274:	bf00      	nop
 800e276:	3714      	adds	r7, #20
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr
 800e280:	20000a6c 	.word	0x20000a6c
 800e284:	2000588c 	.word	0x2000588c
 800e288:	20005894 	.word	0x20005894
 800e28c:	2000589c 	.word	0x2000589c
 800e290:	20005898 	.word	0x20005898
 800e294:	200058a0 	.word	0x200058a0

0800e298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e298:	b480      	push	{r7}
 800e29a:	b085      	sub	sp, #20
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e2a0:	4b28      	ldr	r3, [pc, #160]	; (800e344 <prvInsertBlockIntoFreeList+0xac>)
 800e2a2:	60fb      	str	r3, [r7, #12]
 800e2a4:	e002      	b.n	800e2ac <prvInsertBlockIntoFreeList+0x14>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	60fb      	str	r3, [r7, #12]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d8f7      	bhi.n	800e2a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	68ba      	ldr	r2, [r7, #8]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d108      	bne.n	800e2da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	685a      	ldr	r2, [r3, #4]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	441a      	add	r2, r3
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	68ba      	ldr	r2, [r7, #8]
 800e2e4:	441a      	add	r2, r3
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d118      	bne.n	800e320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	4b15      	ldr	r3, [pc, #84]	; (800e348 <prvInsertBlockIntoFreeList+0xb0>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d00d      	beq.n	800e316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	685a      	ldr	r2, [r3, #4]
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	441a      	add	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	601a      	str	r2, [r3, #0]
 800e314:	e008      	b.n	800e328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e316:	4b0c      	ldr	r3, [pc, #48]	; (800e348 <prvInsertBlockIntoFreeList+0xb0>)
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	601a      	str	r2, [r3, #0]
 800e31e:	e003      	b.n	800e328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e328:	68fa      	ldr	r2, [r7, #12]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d002      	beq.n	800e336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e336:	bf00      	nop
 800e338:	3714      	adds	r7, #20
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop
 800e344:	2000588c 	.word	0x2000588c
 800e348:	20005894 	.word	0x20005894

0800e34c <__cvt>:
 800e34c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e350:	ec55 4b10 	vmov	r4, r5, d0
 800e354:	2d00      	cmp	r5, #0
 800e356:	460e      	mov	r6, r1
 800e358:	4619      	mov	r1, r3
 800e35a:	462b      	mov	r3, r5
 800e35c:	bfbb      	ittet	lt
 800e35e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e362:	461d      	movlt	r5, r3
 800e364:	2300      	movge	r3, #0
 800e366:	232d      	movlt	r3, #45	; 0x2d
 800e368:	700b      	strb	r3, [r1, #0]
 800e36a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e36c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e370:	4691      	mov	r9, r2
 800e372:	f023 0820 	bic.w	r8, r3, #32
 800e376:	bfbc      	itt	lt
 800e378:	4622      	movlt	r2, r4
 800e37a:	4614      	movlt	r4, r2
 800e37c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e380:	d005      	beq.n	800e38e <__cvt+0x42>
 800e382:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e386:	d100      	bne.n	800e38a <__cvt+0x3e>
 800e388:	3601      	adds	r6, #1
 800e38a:	2102      	movs	r1, #2
 800e38c:	e000      	b.n	800e390 <__cvt+0x44>
 800e38e:	2103      	movs	r1, #3
 800e390:	ab03      	add	r3, sp, #12
 800e392:	9301      	str	r3, [sp, #4]
 800e394:	ab02      	add	r3, sp, #8
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	ec45 4b10 	vmov	d0, r4, r5
 800e39c:	4653      	mov	r3, sl
 800e39e:	4632      	mov	r2, r6
 800e3a0:	f000 feae 	bl	800f100 <_dtoa_r>
 800e3a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e3a8:	4607      	mov	r7, r0
 800e3aa:	d102      	bne.n	800e3b2 <__cvt+0x66>
 800e3ac:	f019 0f01 	tst.w	r9, #1
 800e3b0:	d022      	beq.n	800e3f8 <__cvt+0xac>
 800e3b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e3b6:	eb07 0906 	add.w	r9, r7, r6
 800e3ba:	d110      	bne.n	800e3de <__cvt+0x92>
 800e3bc:	783b      	ldrb	r3, [r7, #0]
 800e3be:	2b30      	cmp	r3, #48	; 0x30
 800e3c0:	d10a      	bne.n	800e3d8 <__cvt+0x8c>
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	f7f2 fb85 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3ce:	b918      	cbnz	r0, 800e3d8 <__cvt+0x8c>
 800e3d0:	f1c6 0601 	rsb	r6, r6, #1
 800e3d4:	f8ca 6000 	str.w	r6, [sl]
 800e3d8:	f8da 3000 	ldr.w	r3, [sl]
 800e3dc:	4499      	add	r9, r3
 800e3de:	2200      	movs	r2, #0
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	f7f2 fb77 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3ea:	b108      	cbz	r0, 800e3f0 <__cvt+0xa4>
 800e3ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3f0:	2230      	movs	r2, #48	; 0x30
 800e3f2:	9b03      	ldr	r3, [sp, #12]
 800e3f4:	454b      	cmp	r3, r9
 800e3f6:	d307      	bcc.n	800e408 <__cvt+0xbc>
 800e3f8:	9b03      	ldr	r3, [sp, #12]
 800e3fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3fc:	1bdb      	subs	r3, r3, r7
 800e3fe:	4638      	mov	r0, r7
 800e400:	6013      	str	r3, [r2, #0]
 800e402:	b004      	add	sp, #16
 800e404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e408:	1c59      	adds	r1, r3, #1
 800e40a:	9103      	str	r1, [sp, #12]
 800e40c:	701a      	strb	r2, [r3, #0]
 800e40e:	e7f0      	b.n	800e3f2 <__cvt+0xa6>

0800e410 <__exponent>:
 800e410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e412:	4603      	mov	r3, r0
 800e414:	2900      	cmp	r1, #0
 800e416:	bfb8      	it	lt
 800e418:	4249      	neglt	r1, r1
 800e41a:	f803 2b02 	strb.w	r2, [r3], #2
 800e41e:	bfb4      	ite	lt
 800e420:	222d      	movlt	r2, #45	; 0x2d
 800e422:	222b      	movge	r2, #43	; 0x2b
 800e424:	2909      	cmp	r1, #9
 800e426:	7042      	strb	r2, [r0, #1]
 800e428:	dd2a      	ble.n	800e480 <__exponent+0x70>
 800e42a:	f10d 0207 	add.w	r2, sp, #7
 800e42e:	4617      	mov	r7, r2
 800e430:	260a      	movs	r6, #10
 800e432:	4694      	mov	ip, r2
 800e434:	fb91 f5f6 	sdiv	r5, r1, r6
 800e438:	fb06 1415 	mls	r4, r6, r5, r1
 800e43c:	3430      	adds	r4, #48	; 0x30
 800e43e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e442:	460c      	mov	r4, r1
 800e444:	2c63      	cmp	r4, #99	; 0x63
 800e446:	f102 32ff 	add.w	r2, r2, #4294967295
 800e44a:	4629      	mov	r1, r5
 800e44c:	dcf1      	bgt.n	800e432 <__exponent+0x22>
 800e44e:	3130      	adds	r1, #48	; 0x30
 800e450:	f1ac 0402 	sub.w	r4, ip, #2
 800e454:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e458:	1c41      	adds	r1, r0, #1
 800e45a:	4622      	mov	r2, r4
 800e45c:	42ba      	cmp	r2, r7
 800e45e:	d30a      	bcc.n	800e476 <__exponent+0x66>
 800e460:	f10d 0209 	add.w	r2, sp, #9
 800e464:	eba2 020c 	sub.w	r2, r2, ip
 800e468:	42bc      	cmp	r4, r7
 800e46a:	bf88      	it	hi
 800e46c:	2200      	movhi	r2, #0
 800e46e:	4413      	add	r3, r2
 800e470:	1a18      	subs	r0, r3, r0
 800e472:	b003      	add	sp, #12
 800e474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e476:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e47a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e47e:	e7ed      	b.n	800e45c <__exponent+0x4c>
 800e480:	2330      	movs	r3, #48	; 0x30
 800e482:	3130      	adds	r1, #48	; 0x30
 800e484:	7083      	strb	r3, [r0, #2]
 800e486:	70c1      	strb	r1, [r0, #3]
 800e488:	1d03      	adds	r3, r0, #4
 800e48a:	e7f1      	b.n	800e470 <__exponent+0x60>

0800e48c <_printf_float>:
 800e48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e490:	ed2d 8b02 	vpush	{d8}
 800e494:	b08d      	sub	sp, #52	; 0x34
 800e496:	460c      	mov	r4, r1
 800e498:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e49c:	4616      	mov	r6, r2
 800e49e:	461f      	mov	r7, r3
 800e4a0:	4605      	mov	r5, r0
 800e4a2:	f000 fcc7 	bl	800ee34 <_localeconv_r>
 800e4a6:	f8d0 a000 	ldr.w	sl, [r0]
 800e4aa:	4650      	mov	r0, sl
 800e4ac:	f7f1 fee8 	bl	8000280 <strlen>
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	930a      	str	r3, [sp, #40]	; 0x28
 800e4b4:	6823      	ldr	r3, [r4, #0]
 800e4b6:	9305      	str	r3, [sp, #20]
 800e4b8:	f8d8 3000 	ldr.w	r3, [r8]
 800e4bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e4c0:	3307      	adds	r3, #7
 800e4c2:	f023 0307 	bic.w	r3, r3, #7
 800e4c6:	f103 0208 	add.w	r2, r3, #8
 800e4ca:	f8c8 2000 	str.w	r2, [r8]
 800e4ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e4d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4d6:	9307      	str	r3, [sp, #28]
 800e4d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e4dc:	ee08 0a10 	vmov	s16, r0
 800e4e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e4e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4e8:	4b9e      	ldr	r3, [pc, #632]	; (800e764 <_printf_float+0x2d8>)
 800e4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ee:	f7f2 fb25 	bl	8000b3c <__aeabi_dcmpun>
 800e4f2:	bb88      	cbnz	r0, 800e558 <_printf_float+0xcc>
 800e4f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4f8:	4b9a      	ldr	r3, [pc, #616]	; (800e764 <_printf_float+0x2d8>)
 800e4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e4fe:	f7f2 faff 	bl	8000b00 <__aeabi_dcmple>
 800e502:	bb48      	cbnz	r0, 800e558 <_printf_float+0xcc>
 800e504:	2200      	movs	r2, #0
 800e506:	2300      	movs	r3, #0
 800e508:	4640      	mov	r0, r8
 800e50a:	4649      	mov	r1, r9
 800e50c:	f7f2 faee 	bl	8000aec <__aeabi_dcmplt>
 800e510:	b110      	cbz	r0, 800e518 <_printf_float+0x8c>
 800e512:	232d      	movs	r3, #45	; 0x2d
 800e514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e518:	4a93      	ldr	r2, [pc, #588]	; (800e768 <_printf_float+0x2dc>)
 800e51a:	4b94      	ldr	r3, [pc, #592]	; (800e76c <_printf_float+0x2e0>)
 800e51c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e520:	bf94      	ite	ls
 800e522:	4690      	movls	r8, r2
 800e524:	4698      	movhi	r8, r3
 800e526:	2303      	movs	r3, #3
 800e528:	6123      	str	r3, [r4, #16]
 800e52a:	9b05      	ldr	r3, [sp, #20]
 800e52c:	f023 0304 	bic.w	r3, r3, #4
 800e530:	6023      	str	r3, [r4, #0]
 800e532:	f04f 0900 	mov.w	r9, #0
 800e536:	9700      	str	r7, [sp, #0]
 800e538:	4633      	mov	r3, r6
 800e53a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e53c:	4621      	mov	r1, r4
 800e53e:	4628      	mov	r0, r5
 800e540:	f000 f9da 	bl	800e8f8 <_printf_common>
 800e544:	3001      	adds	r0, #1
 800e546:	f040 8090 	bne.w	800e66a <_printf_float+0x1de>
 800e54a:	f04f 30ff 	mov.w	r0, #4294967295
 800e54e:	b00d      	add	sp, #52	; 0x34
 800e550:	ecbd 8b02 	vpop	{d8}
 800e554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e558:	4642      	mov	r2, r8
 800e55a:	464b      	mov	r3, r9
 800e55c:	4640      	mov	r0, r8
 800e55e:	4649      	mov	r1, r9
 800e560:	f7f2 faec 	bl	8000b3c <__aeabi_dcmpun>
 800e564:	b140      	cbz	r0, 800e578 <_printf_float+0xec>
 800e566:	464b      	mov	r3, r9
 800e568:	2b00      	cmp	r3, #0
 800e56a:	bfbc      	itt	lt
 800e56c:	232d      	movlt	r3, #45	; 0x2d
 800e56e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e572:	4a7f      	ldr	r2, [pc, #508]	; (800e770 <_printf_float+0x2e4>)
 800e574:	4b7f      	ldr	r3, [pc, #508]	; (800e774 <_printf_float+0x2e8>)
 800e576:	e7d1      	b.n	800e51c <_printf_float+0x90>
 800e578:	6863      	ldr	r3, [r4, #4]
 800e57a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e57e:	9206      	str	r2, [sp, #24]
 800e580:	1c5a      	adds	r2, r3, #1
 800e582:	d13f      	bne.n	800e604 <_printf_float+0x178>
 800e584:	2306      	movs	r3, #6
 800e586:	6063      	str	r3, [r4, #4]
 800e588:	9b05      	ldr	r3, [sp, #20]
 800e58a:	6861      	ldr	r1, [r4, #4]
 800e58c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e590:	2300      	movs	r3, #0
 800e592:	9303      	str	r3, [sp, #12]
 800e594:	ab0a      	add	r3, sp, #40	; 0x28
 800e596:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e59a:	ab09      	add	r3, sp, #36	; 0x24
 800e59c:	ec49 8b10 	vmov	d0, r8, r9
 800e5a0:	9300      	str	r3, [sp, #0]
 800e5a2:	6022      	str	r2, [r4, #0]
 800e5a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	f7ff fecf 	bl	800e34c <__cvt>
 800e5ae:	9b06      	ldr	r3, [sp, #24]
 800e5b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e5b2:	2b47      	cmp	r3, #71	; 0x47
 800e5b4:	4680      	mov	r8, r0
 800e5b6:	d108      	bne.n	800e5ca <_printf_float+0x13e>
 800e5b8:	1cc8      	adds	r0, r1, #3
 800e5ba:	db02      	blt.n	800e5c2 <_printf_float+0x136>
 800e5bc:	6863      	ldr	r3, [r4, #4]
 800e5be:	4299      	cmp	r1, r3
 800e5c0:	dd41      	ble.n	800e646 <_printf_float+0x1ba>
 800e5c2:	f1ab 0302 	sub.w	r3, fp, #2
 800e5c6:	fa5f fb83 	uxtb.w	fp, r3
 800e5ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e5ce:	d820      	bhi.n	800e612 <_printf_float+0x186>
 800e5d0:	3901      	subs	r1, #1
 800e5d2:	465a      	mov	r2, fp
 800e5d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e5d8:	9109      	str	r1, [sp, #36]	; 0x24
 800e5da:	f7ff ff19 	bl	800e410 <__exponent>
 800e5de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5e0:	1813      	adds	r3, r2, r0
 800e5e2:	2a01      	cmp	r2, #1
 800e5e4:	4681      	mov	r9, r0
 800e5e6:	6123      	str	r3, [r4, #16]
 800e5e8:	dc02      	bgt.n	800e5f0 <_printf_float+0x164>
 800e5ea:	6822      	ldr	r2, [r4, #0]
 800e5ec:	07d2      	lsls	r2, r2, #31
 800e5ee:	d501      	bpl.n	800e5f4 <_printf_float+0x168>
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	6123      	str	r3, [r4, #16]
 800e5f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d09c      	beq.n	800e536 <_printf_float+0xaa>
 800e5fc:	232d      	movs	r3, #45	; 0x2d
 800e5fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e602:	e798      	b.n	800e536 <_printf_float+0xaa>
 800e604:	9a06      	ldr	r2, [sp, #24]
 800e606:	2a47      	cmp	r2, #71	; 0x47
 800e608:	d1be      	bne.n	800e588 <_printf_float+0xfc>
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1bc      	bne.n	800e588 <_printf_float+0xfc>
 800e60e:	2301      	movs	r3, #1
 800e610:	e7b9      	b.n	800e586 <_printf_float+0xfa>
 800e612:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e616:	d118      	bne.n	800e64a <_printf_float+0x1be>
 800e618:	2900      	cmp	r1, #0
 800e61a:	6863      	ldr	r3, [r4, #4]
 800e61c:	dd0b      	ble.n	800e636 <_printf_float+0x1aa>
 800e61e:	6121      	str	r1, [r4, #16]
 800e620:	b913      	cbnz	r3, 800e628 <_printf_float+0x19c>
 800e622:	6822      	ldr	r2, [r4, #0]
 800e624:	07d0      	lsls	r0, r2, #31
 800e626:	d502      	bpl.n	800e62e <_printf_float+0x1a2>
 800e628:	3301      	adds	r3, #1
 800e62a:	440b      	add	r3, r1
 800e62c:	6123      	str	r3, [r4, #16]
 800e62e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e630:	f04f 0900 	mov.w	r9, #0
 800e634:	e7de      	b.n	800e5f4 <_printf_float+0x168>
 800e636:	b913      	cbnz	r3, 800e63e <_printf_float+0x1b2>
 800e638:	6822      	ldr	r2, [r4, #0]
 800e63a:	07d2      	lsls	r2, r2, #31
 800e63c:	d501      	bpl.n	800e642 <_printf_float+0x1b6>
 800e63e:	3302      	adds	r3, #2
 800e640:	e7f4      	b.n	800e62c <_printf_float+0x1a0>
 800e642:	2301      	movs	r3, #1
 800e644:	e7f2      	b.n	800e62c <_printf_float+0x1a0>
 800e646:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e64a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e64c:	4299      	cmp	r1, r3
 800e64e:	db05      	blt.n	800e65c <_printf_float+0x1d0>
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	6121      	str	r1, [r4, #16]
 800e654:	07d8      	lsls	r0, r3, #31
 800e656:	d5ea      	bpl.n	800e62e <_printf_float+0x1a2>
 800e658:	1c4b      	adds	r3, r1, #1
 800e65a:	e7e7      	b.n	800e62c <_printf_float+0x1a0>
 800e65c:	2900      	cmp	r1, #0
 800e65e:	bfd4      	ite	le
 800e660:	f1c1 0202 	rsble	r2, r1, #2
 800e664:	2201      	movgt	r2, #1
 800e666:	4413      	add	r3, r2
 800e668:	e7e0      	b.n	800e62c <_printf_float+0x1a0>
 800e66a:	6823      	ldr	r3, [r4, #0]
 800e66c:	055a      	lsls	r2, r3, #21
 800e66e:	d407      	bmi.n	800e680 <_printf_float+0x1f4>
 800e670:	6923      	ldr	r3, [r4, #16]
 800e672:	4642      	mov	r2, r8
 800e674:	4631      	mov	r1, r6
 800e676:	4628      	mov	r0, r5
 800e678:	47b8      	blx	r7
 800e67a:	3001      	adds	r0, #1
 800e67c:	d12c      	bne.n	800e6d8 <_printf_float+0x24c>
 800e67e:	e764      	b.n	800e54a <_printf_float+0xbe>
 800e680:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e684:	f240 80e0 	bls.w	800e848 <_printf_float+0x3bc>
 800e688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e68c:	2200      	movs	r2, #0
 800e68e:	2300      	movs	r3, #0
 800e690:	f7f2 fa22 	bl	8000ad8 <__aeabi_dcmpeq>
 800e694:	2800      	cmp	r0, #0
 800e696:	d034      	beq.n	800e702 <_printf_float+0x276>
 800e698:	4a37      	ldr	r2, [pc, #220]	; (800e778 <_printf_float+0x2ec>)
 800e69a:	2301      	movs	r3, #1
 800e69c:	4631      	mov	r1, r6
 800e69e:	4628      	mov	r0, r5
 800e6a0:	47b8      	blx	r7
 800e6a2:	3001      	adds	r0, #1
 800e6a4:	f43f af51 	beq.w	800e54a <_printf_float+0xbe>
 800e6a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	db02      	blt.n	800e6b6 <_printf_float+0x22a>
 800e6b0:	6823      	ldr	r3, [r4, #0]
 800e6b2:	07d8      	lsls	r0, r3, #31
 800e6b4:	d510      	bpl.n	800e6d8 <_printf_float+0x24c>
 800e6b6:	ee18 3a10 	vmov	r3, s16
 800e6ba:	4652      	mov	r2, sl
 800e6bc:	4631      	mov	r1, r6
 800e6be:	4628      	mov	r0, r5
 800e6c0:	47b8      	blx	r7
 800e6c2:	3001      	adds	r0, #1
 800e6c4:	f43f af41 	beq.w	800e54a <_printf_float+0xbe>
 800e6c8:	f04f 0800 	mov.w	r8, #0
 800e6cc:	f104 091a 	add.w	r9, r4, #26
 800e6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	4543      	cmp	r3, r8
 800e6d6:	dc09      	bgt.n	800e6ec <_printf_float+0x260>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	079b      	lsls	r3, r3, #30
 800e6dc:	f100 8107 	bmi.w	800e8ee <_printf_float+0x462>
 800e6e0:	68e0      	ldr	r0, [r4, #12]
 800e6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6e4:	4298      	cmp	r0, r3
 800e6e6:	bfb8      	it	lt
 800e6e8:	4618      	movlt	r0, r3
 800e6ea:	e730      	b.n	800e54e <_printf_float+0xc2>
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	464a      	mov	r2, r9
 800e6f0:	4631      	mov	r1, r6
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	47b8      	blx	r7
 800e6f6:	3001      	adds	r0, #1
 800e6f8:	f43f af27 	beq.w	800e54a <_printf_float+0xbe>
 800e6fc:	f108 0801 	add.w	r8, r8, #1
 800e700:	e7e6      	b.n	800e6d0 <_printf_float+0x244>
 800e702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e704:	2b00      	cmp	r3, #0
 800e706:	dc39      	bgt.n	800e77c <_printf_float+0x2f0>
 800e708:	4a1b      	ldr	r2, [pc, #108]	; (800e778 <_printf_float+0x2ec>)
 800e70a:	2301      	movs	r3, #1
 800e70c:	4631      	mov	r1, r6
 800e70e:	4628      	mov	r0, r5
 800e710:	47b8      	blx	r7
 800e712:	3001      	adds	r0, #1
 800e714:	f43f af19 	beq.w	800e54a <_printf_float+0xbe>
 800e718:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e71c:	4313      	orrs	r3, r2
 800e71e:	d102      	bne.n	800e726 <_printf_float+0x29a>
 800e720:	6823      	ldr	r3, [r4, #0]
 800e722:	07d9      	lsls	r1, r3, #31
 800e724:	d5d8      	bpl.n	800e6d8 <_printf_float+0x24c>
 800e726:	ee18 3a10 	vmov	r3, s16
 800e72a:	4652      	mov	r2, sl
 800e72c:	4631      	mov	r1, r6
 800e72e:	4628      	mov	r0, r5
 800e730:	47b8      	blx	r7
 800e732:	3001      	adds	r0, #1
 800e734:	f43f af09 	beq.w	800e54a <_printf_float+0xbe>
 800e738:	f04f 0900 	mov.w	r9, #0
 800e73c:	f104 0a1a 	add.w	sl, r4, #26
 800e740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e742:	425b      	negs	r3, r3
 800e744:	454b      	cmp	r3, r9
 800e746:	dc01      	bgt.n	800e74c <_printf_float+0x2c0>
 800e748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e74a:	e792      	b.n	800e672 <_printf_float+0x1e6>
 800e74c:	2301      	movs	r3, #1
 800e74e:	4652      	mov	r2, sl
 800e750:	4631      	mov	r1, r6
 800e752:	4628      	mov	r0, r5
 800e754:	47b8      	blx	r7
 800e756:	3001      	adds	r0, #1
 800e758:	f43f aef7 	beq.w	800e54a <_printf_float+0xbe>
 800e75c:	f109 0901 	add.w	r9, r9, #1
 800e760:	e7ee      	b.n	800e740 <_printf_float+0x2b4>
 800e762:	bf00      	nop
 800e764:	7fefffff 	.word	0x7fefffff
 800e768:	08010f14 	.word	0x08010f14
 800e76c:	08010f18 	.word	0x08010f18
 800e770:	08010f1c 	.word	0x08010f1c
 800e774:	08010f20 	.word	0x08010f20
 800e778:	08010f24 	.word	0x08010f24
 800e77c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e77e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e780:	429a      	cmp	r2, r3
 800e782:	bfa8      	it	ge
 800e784:	461a      	movge	r2, r3
 800e786:	2a00      	cmp	r2, #0
 800e788:	4691      	mov	r9, r2
 800e78a:	dc37      	bgt.n	800e7fc <_printf_float+0x370>
 800e78c:	f04f 0b00 	mov.w	fp, #0
 800e790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e794:	f104 021a 	add.w	r2, r4, #26
 800e798:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e79a:	9305      	str	r3, [sp, #20]
 800e79c:	eba3 0309 	sub.w	r3, r3, r9
 800e7a0:	455b      	cmp	r3, fp
 800e7a2:	dc33      	bgt.n	800e80c <_printf_float+0x380>
 800e7a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	db3b      	blt.n	800e824 <_printf_float+0x398>
 800e7ac:	6823      	ldr	r3, [r4, #0]
 800e7ae:	07da      	lsls	r2, r3, #31
 800e7b0:	d438      	bmi.n	800e824 <_printf_float+0x398>
 800e7b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e7b6:	eba2 0903 	sub.w	r9, r2, r3
 800e7ba:	9b05      	ldr	r3, [sp, #20]
 800e7bc:	1ad2      	subs	r2, r2, r3
 800e7be:	4591      	cmp	r9, r2
 800e7c0:	bfa8      	it	ge
 800e7c2:	4691      	movge	r9, r2
 800e7c4:	f1b9 0f00 	cmp.w	r9, #0
 800e7c8:	dc35      	bgt.n	800e836 <_printf_float+0x3aa>
 800e7ca:	f04f 0800 	mov.w	r8, #0
 800e7ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7d2:	f104 0a1a 	add.w	sl, r4, #26
 800e7d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7da:	1a9b      	subs	r3, r3, r2
 800e7dc:	eba3 0309 	sub.w	r3, r3, r9
 800e7e0:	4543      	cmp	r3, r8
 800e7e2:	f77f af79 	ble.w	800e6d8 <_printf_float+0x24c>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	4652      	mov	r2, sl
 800e7ea:	4631      	mov	r1, r6
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	47b8      	blx	r7
 800e7f0:	3001      	adds	r0, #1
 800e7f2:	f43f aeaa 	beq.w	800e54a <_printf_float+0xbe>
 800e7f6:	f108 0801 	add.w	r8, r8, #1
 800e7fa:	e7ec      	b.n	800e7d6 <_printf_float+0x34a>
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	4631      	mov	r1, r6
 800e800:	4642      	mov	r2, r8
 800e802:	4628      	mov	r0, r5
 800e804:	47b8      	blx	r7
 800e806:	3001      	adds	r0, #1
 800e808:	d1c0      	bne.n	800e78c <_printf_float+0x300>
 800e80a:	e69e      	b.n	800e54a <_printf_float+0xbe>
 800e80c:	2301      	movs	r3, #1
 800e80e:	4631      	mov	r1, r6
 800e810:	4628      	mov	r0, r5
 800e812:	9205      	str	r2, [sp, #20]
 800e814:	47b8      	blx	r7
 800e816:	3001      	adds	r0, #1
 800e818:	f43f ae97 	beq.w	800e54a <_printf_float+0xbe>
 800e81c:	9a05      	ldr	r2, [sp, #20]
 800e81e:	f10b 0b01 	add.w	fp, fp, #1
 800e822:	e7b9      	b.n	800e798 <_printf_float+0x30c>
 800e824:	ee18 3a10 	vmov	r3, s16
 800e828:	4652      	mov	r2, sl
 800e82a:	4631      	mov	r1, r6
 800e82c:	4628      	mov	r0, r5
 800e82e:	47b8      	blx	r7
 800e830:	3001      	adds	r0, #1
 800e832:	d1be      	bne.n	800e7b2 <_printf_float+0x326>
 800e834:	e689      	b.n	800e54a <_printf_float+0xbe>
 800e836:	9a05      	ldr	r2, [sp, #20]
 800e838:	464b      	mov	r3, r9
 800e83a:	4442      	add	r2, r8
 800e83c:	4631      	mov	r1, r6
 800e83e:	4628      	mov	r0, r5
 800e840:	47b8      	blx	r7
 800e842:	3001      	adds	r0, #1
 800e844:	d1c1      	bne.n	800e7ca <_printf_float+0x33e>
 800e846:	e680      	b.n	800e54a <_printf_float+0xbe>
 800e848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e84a:	2a01      	cmp	r2, #1
 800e84c:	dc01      	bgt.n	800e852 <_printf_float+0x3c6>
 800e84e:	07db      	lsls	r3, r3, #31
 800e850:	d53a      	bpl.n	800e8c8 <_printf_float+0x43c>
 800e852:	2301      	movs	r3, #1
 800e854:	4642      	mov	r2, r8
 800e856:	4631      	mov	r1, r6
 800e858:	4628      	mov	r0, r5
 800e85a:	47b8      	blx	r7
 800e85c:	3001      	adds	r0, #1
 800e85e:	f43f ae74 	beq.w	800e54a <_printf_float+0xbe>
 800e862:	ee18 3a10 	vmov	r3, s16
 800e866:	4652      	mov	r2, sl
 800e868:	4631      	mov	r1, r6
 800e86a:	4628      	mov	r0, r5
 800e86c:	47b8      	blx	r7
 800e86e:	3001      	adds	r0, #1
 800e870:	f43f ae6b 	beq.w	800e54a <_printf_float+0xbe>
 800e874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e878:	2200      	movs	r2, #0
 800e87a:	2300      	movs	r3, #0
 800e87c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e880:	f7f2 f92a 	bl	8000ad8 <__aeabi_dcmpeq>
 800e884:	b9d8      	cbnz	r0, 800e8be <_printf_float+0x432>
 800e886:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e88a:	f108 0201 	add.w	r2, r8, #1
 800e88e:	4631      	mov	r1, r6
 800e890:	4628      	mov	r0, r5
 800e892:	47b8      	blx	r7
 800e894:	3001      	adds	r0, #1
 800e896:	d10e      	bne.n	800e8b6 <_printf_float+0x42a>
 800e898:	e657      	b.n	800e54a <_printf_float+0xbe>
 800e89a:	2301      	movs	r3, #1
 800e89c:	4652      	mov	r2, sl
 800e89e:	4631      	mov	r1, r6
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	47b8      	blx	r7
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	f43f ae50 	beq.w	800e54a <_printf_float+0xbe>
 800e8aa:	f108 0801 	add.w	r8, r8, #1
 800e8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	4543      	cmp	r3, r8
 800e8b4:	dcf1      	bgt.n	800e89a <_printf_float+0x40e>
 800e8b6:	464b      	mov	r3, r9
 800e8b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e8bc:	e6da      	b.n	800e674 <_printf_float+0x1e8>
 800e8be:	f04f 0800 	mov.w	r8, #0
 800e8c2:	f104 0a1a 	add.w	sl, r4, #26
 800e8c6:	e7f2      	b.n	800e8ae <_printf_float+0x422>
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	4642      	mov	r2, r8
 800e8cc:	e7df      	b.n	800e88e <_printf_float+0x402>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	464a      	mov	r2, r9
 800e8d2:	4631      	mov	r1, r6
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	47b8      	blx	r7
 800e8d8:	3001      	adds	r0, #1
 800e8da:	f43f ae36 	beq.w	800e54a <_printf_float+0xbe>
 800e8de:	f108 0801 	add.w	r8, r8, #1
 800e8e2:	68e3      	ldr	r3, [r4, #12]
 800e8e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8e6:	1a5b      	subs	r3, r3, r1
 800e8e8:	4543      	cmp	r3, r8
 800e8ea:	dcf0      	bgt.n	800e8ce <_printf_float+0x442>
 800e8ec:	e6f8      	b.n	800e6e0 <_printf_float+0x254>
 800e8ee:	f04f 0800 	mov.w	r8, #0
 800e8f2:	f104 0919 	add.w	r9, r4, #25
 800e8f6:	e7f4      	b.n	800e8e2 <_printf_float+0x456>

0800e8f8 <_printf_common>:
 800e8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8fc:	4616      	mov	r6, r2
 800e8fe:	4699      	mov	r9, r3
 800e900:	688a      	ldr	r2, [r1, #8]
 800e902:	690b      	ldr	r3, [r1, #16]
 800e904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e908:	4293      	cmp	r3, r2
 800e90a:	bfb8      	it	lt
 800e90c:	4613      	movlt	r3, r2
 800e90e:	6033      	str	r3, [r6, #0]
 800e910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e914:	4607      	mov	r7, r0
 800e916:	460c      	mov	r4, r1
 800e918:	b10a      	cbz	r2, 800e91e <_printf_common+0x26>
 800e91a:	3301      	adds	r3, #1
 800e91c:	6033      	str	r3, [r6, #0]
 800e91e:	6823      	ldr	r3, [r4, #0]
 800e920:	0699      	lsls	r1, r3, #26
 800e922:	bf42      	ittt	mi
 800e924:	6833      	ldrmi	r3, [r6, #0]
 800e926:	3302      	addmi	r3, #2
 800e928:	6033      	strmi	r3, [r6, #0]
 800e92a:	6825      	ldr	r5, [r4, #0]
 800e92c:	f015 0506 	ands.w	r5, r5, #6
 800e930:	d106      	bne.n	800e940 <_printf_common+0x48>
 800e932:	f104 0a19 	add.w	sl, r4, #25
 800e936:	68e3      	ldr	r3, [r4, #12]
 800e938:	6832      	ldr	r2, [r6, #0]
 800e93a:	1a9b      	subs	r3, r3, r2
 800e93c:	42ab      	cmp	r3, r5
 800e93e:	dc26      	bgt.n	800e98e <_printf_common+0x96>
 800e940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e944:	1e13      	subs	r3, r2, #0
 800e946:	6822      	ldr	r2, [r4, #0]
 800e948:	bf18      	it	ne
 800e94a:	2301      	movne	r3, #1
 800e94c:	0692      	lsls	r2, r2, #26
 800e94e:	d42b      	bmi.n	800e9a8 <_printf_common+0xb0>
 800e950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e954:	4649      	mov	r1, r9
 800e956:	4638      	mov	r0, r7
 800e958:	47c0      	blx	r8
 800e95a:	3001      	adds	r0, #1
 800e95c:	d01e      	beq.n	800e99c <_printf_common+0xa4>
 800e95e:	6823      	ldr	r3, [r4, #0]
 800e960:	6922      	ldr	r2, [r4, #16]
 800e962:	f003 0306 	and.w	r3, r3, #6
 800e966:	2b04      	cmp	r3, #4
 800e968:	bf02      	ittt	eq
 800e96a:	68e5      	ldreq	r5, [r4, #12]
 800e96c:	6833      	ldreq	r3, [r6, #0]
 800e96e:	1aed      	subeq	r5, r5, r3
 800e970:	68a3      	ldr	r3, [r4, #8]
 800e972:	bf0c      	ite	eq
 800e974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e978:	2500      	movne	r5, #0
 800e97a:	4293      	cmp	r3, r2
 800e97c:	bfc4      	itt	gt
 800e97e:	1a9b      	subgt	r3, r3, r2
 800e980:	18ed      	addgt	r5, r5, r3
 800e982:	2600      	movs	r6, #0
 800e984:	341a      	adds	r4, #26
 800e986:	42b5      	cmp	r5, r6
 800e988:	d11a      	bne.n	800e9c0 <_printf_common+0xc8>
 800e98a:	2000      	movs	r0, #0
 800e98c:	e008      	b.n	800e9a0 <_printf_common+0xa8>
 800e98e:	2301      	movs	r3, #1
 800e990:	4652      	mov	r2, sl
 800e992:	4649      	mov	r1, r9
 800e994:	4638      	mov	r0, r7
 800e996:	47c0      	blx	r8
 800e998:	3001      	adds	r0, #1
 800e99a:	d103      	bne.n	800e9a4 <_printf_common+0xac>
 800e99c:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a4:	3501      	adds	r5, #1
 800e9a6:	e7c6      	b.n	800e936 <_printf_common+0x3e>
 800e9a8:	18e1      	adds	r1, r4, r3
 800e9aa:	1c5a      	adds	r2, r3, #1
 800e9ac:	2030      	movs	r0, #48	; 0x30
 800e9ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e9b2:	4422      	add	r2, r4
 800e9b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e9bc:	3302      	adds	r3, #2
 800e9be:	e7c7      	b.n	800e950 <_printf_common+0x58>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	4622      	mov	r2, r4
 800e9c4:	4649      	mov	r1, r9
 800e9c6:	4638      	mov	r0, r7
 800e9c8:	47c0      	blx	r8
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	d0e6      	beq.n	800e99c <_printf_common+0xa4>
 800e9ce:	3601      	adds	r6, #1
 800e9d0:	e7d9      	b.n	800e986 <_printf_common+0x8e>
	...

0800e9d4 <_printf_i>:
 800e9d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9d8:	7e0f      	ldrb	r7, [r1, #24]
 800e9da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e9dc:	2f78      	cmp	r7, #120	; 0x78
 800e9de:	4691      	mov	r9, r2
 800e9e0:	4680      	mov	r8, r0
 800e9e2:	460c      	mov	r4, r1
 800e9e4:	469a      	mov	sl, r3
 800e9e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e9ea:	d807      	bhi.n	800e9fc <_printf_i+0x28>
 800e9ec:	2f62      	cmp	r7, #98	; 0x62
 800e9ee:	d80a      	bhi.n	800ea06 <_printf_i+0x32>
 800e9f0:	2f00      	cmp	r7, #0
 800e9f2:	f000 80d4 	beq.w	800eb9e <_printf_i+0x1ca>
 800e9f6:	2f58      	cmp	r7, #88	; 0x58
 800e9f8:	f000 80c0 	beq.w	800eb7c <_printf_i+0x1a8>
 800e9fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea04:	e03a      	b.n	800ea7c <_printf_i+0xa8>
 800ea06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea0a:	2b15      	cmp	r3, #21
 800ea0c:	d8f6      	bhi.n	800e9fc <_printf_i+0x28>
 800ea0e:	a101      	add	r1, pc, #4	; (adr r1, 800ea14 <_printf_i+0x40>)
 800ea10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea14:	0800ea6d 	.word	0x0800ea6d
 800ea18:	0800ea81 	.word	0x0800ea81
 800ea1c:	0800e9fd 	.word	0x0800e9fd
 800ea20:	0800e9fd 	.word	0x0800e9fd
 800ea24:	0800e9fd 	.word	0x0800e9fd
 800ea28:	0800e9fd 	.word	0x0800e9fd
 800ea2c:	0800ea81 	.word	0x0800ea81
 800ea30:	0800e9fd 	.word	0x0800e9fd
 800ea34:	0800e9fd 	.word	0x0800e9fd
 800ea38:	0800e9fd 	.word	0x0800e9fd
 800ea3c:	0800e9fd 	.word	0x0800e9fd
 800ea40:	0800eb85 	.word	0x0800eb85
 800ea44:	0800eaad 	.word	0x0800eaad
 800ea48:	0800eb3f 	.word	0x0800eb3f
 800ea4c:	0800e9fd 	.word	0x0800e9fd
 800ea50:	0800e9fd 	.word	0x0800e9fd
 800ea54:	0800eba7 	.word	0x0800eba7
 800ea58:	0800e9fd 	.word	0x0800e9fd
 800ea5c:	0800eaad 	.word	0x0800eaad
 800ea60:	0800e9fd 	.word	0x0800e9fd
 800ea64:	0800e9fd 	.word	0x0800e9fd
 800ea68:	0800eb47 	.word	0x0800eb47
 800ea6c:	682b      	ldr	r3, [r5, #0]
 800ea6e:	1d1a      	adds	r2, r3, #4
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	602a      	str	r2, [r5, #0]
 800ea74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e09f      	b.n	800ebc0 <_printf_i+0x1ec>
 800ea80:	6820      	ldr	r0, [r4, #0]
 800ea82:	682b      	ldr	r3, [r5, #0]
 800ea84:	0607      	lsls	r7, r0, #24
 800ea86:	f103 0104 	add.w	r1, r3, #4
 800ea8a:	6029      	str	r1, [r5, #0]
 800ea8c:	d501      	bpl.n	800ea92 <_printf_i+0xbe>
 800ea8e:	681e      	ldr	r6, [r3, #0]
 800ea90:	e003      	b.n	800ea9a <_printf_i+0xc6>
 800ea92:	0646      	lsls	r6, r0, #25
 800ea94:	d5fb      	bpl.n	800ea8e <_printf_i+0xba>
 800ea96:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ea9a:	2e00      	cmp	r6, #0
 800ea9c:	da03      	bge.n	800eaa6 <_printf_i+0xd2>
 800ea9e:	232d      	movs	r3, #45	; 0x2d
 800eaa0:	4276      	negs	r6, r6
 800eaa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eaa6:	485a      	ldr	r0, [pc, #360]	; (800ec10 <_printf_i+0x23c>)
 800eaa8:	230a      	movs	r3, #10
 800eaaa:	e012      	b.n	800ead2 <_printf_i+0xfe>
 800eaac:	682b      	ldr	r3, [r5, #0]
 800eaae:	6820      	ldr	r0, [r4, #0]
 800eab0:	1d19      	adds	r1, r3, #4
 800eab2:	6029      	str	r1, [r5, #0]
 800eab4:	0605      	lsls	r5, r0, #24
 800eab6:	d501      	bpl.n	800eabc <_printf_i+0xe8>
 800eab8:	681e      	ldr	r6, [r3, #0]
 800eaba:	e002      	b.n	800eac2 <_printf_i+0xee>
 800eabc:	0641      	lsls	r1, r0, #25
 800eabe:	d5fb      	bpl.n	800eab8 <_printf_i+0xe4>
 800eac0:	881e      	ldrh	r6, [r3, #0]
 800eac2:	4853      	ldr	r0, [pc, #332]	; (800ec10 <_printf_i+0x23c>)
 800eac4:	2f6f      	cmp	r7, #111	; 0x6f
 800eac6:	bf0c      	ite	eq
 800eac8:	2308      	moveq	r3, #8
 800eaca:	230a      	movne	r3, #10
 800eacc:	2100      	movs	r1, #0
 800eace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ead2:	6865      	ldr	r5, [r4, #4]
 800ead4:	60a5      	str	r5, [r4, #8]
 800ead6:	2d00      	cmp	r5, #0
 800ead8:	bfa2      	ittt	ge
 800eada:	6821      	ldrge	r1, [r4, #0]
 800eadc:	f021 0104 	bicge.w	r1, r1, #4
 800eae0:	6021      	strge	r1, [r4, #0]
 800eae2:	b90e      	cbnz	r6, 800eae8 <_printf_i+0x114>
 800eae4:	2d00      	cmp	r5, #0
 800eae6:	d04b      	beq.n	800eb80 <_printf_i+0x1ac>
 800eae8:	4615      	mov	r5, r2
 800eaea:	fbb6 f1f3 	udiv	r1, r6, r3
 800eaee:	fb03 6711 	mls	r7, r3, r1, r6
 800eaf2:	5dc7      	ldrb	r7, [r0, r7]
 800eaf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eaf8:	4637      	mov	r7, r6
 800eafa:	42bb      	cmp	r3, r7
 800eafc:	460e      	mov	r6, r1
 800eafe:	d9f4      	bls.n	800eaea <_printf_i+0x116>
 800eb00:	2b08      	cmp	r3, #8
 800eb02:	d10b      	bne.n	800eb1c <_printf_i+0x148>
 800eb04:	6823      	ldr	r3, [r4, #0]
 800eb06:	07de      	lsls	r6, r3, #31
 800eb08:	d508      	bpl.n	800eb1c <_printf_i+0x148>
 800eb0a:	6923      	ldr	r3, [r4, #16]
 800eb0c:	6861      	ldr	r1, [r4, #4]
 800eb0e:	4299      	cmp	r1, r3
 800eb10:	bfde      	ittt	le
 800eb12:	2330      	movle	r3, #48	; 0x30
 800eb14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb18:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eb1c:	1b52      	subs	r2, r2, r5
 800eb1e:	6122      	str	r2, [r4, #16]
 800eb20:	f8cd a000 	str.w	sl, [sp]
 800eb24:	464b      	mov	r3, r9
 800eb26:	aa03      	add	r2, sp, #12
 800eb28:	4621      	mov	r1, r4
 800eb2a:	4640      	mov	r0, r8
 800eb2c:	f7ff fee4 	bl	800e8f8 <_printf_common>
 800eb30:	3001      	adds	r0, #1
 800eb32:	d14a      	bne.n	800ebca <_printf_i+0x1f6>
 800eb34:	f04f 30ff 	mov.w	r0, #4294967295
 800eb38:	b004      	add	sp, #16
 800eb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb3e:	6823      	ldr	r3, [r4, #0]
 800eb40:	f043 0320 	orr.w	r3, r3, #32
 800eb44:	6023      	str	r3, [r4, #0]
 800eb46:	4833      	ldr	r0, [pc, #204]	; (800ec14 <_printf_i+0x240>)
 800eb48:	2778      	movs	r7, #120	; 0x78
 800eb4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	6829      	ldr	r1, [r5, #0]
 800eb52:	061f      	lsls	r7, r3, #24
 800eb54:	f851 6b04 	ldr.w	r6, [r1], #4
 800eb58:	d402      	bmi.n	800eb60 <_printf_i+0x18c>
 800eb5a:	065f      	lsls	r7, r3, #25
 800eb5c:	bf48      	it	mi
 800eb5e:	b2b6      	uxthmi	r6, r6
 800eb60:	07df      	lsls	r7, r3, #31
 800eb62:	bf48      	it	mi
 800eb64:	f043 0320 	orrmi.w	r3, r3, #32
 800eb68:	6029      	str	r1, [r5, #0]
 800eb6a:	bf48      	it	mi
 800eb6c:	6023      	strmi	r3, [r4, #0]
 800eb6e:	b91e      	cbnz	r6, 800eb78 <_printf_i+0x1a4>
 800eb70:	6823      	ldr	r3, [r4, #0]
 800eb72:	f023 0320 	bic.w	r3, r3, #32
 800eb76:	6023      	str	r3, [r4, #0]
 800eb78:	2310      	movs	r3, #16
 800eb7a:	e7a7      	b.n	800eacc <_printf_i+0xf8>
 800eb7c:	4824      	ldr	r0, [pc, #144]	; (800ec10 <_printf_i+0x23c>)
 800eb7e:	e7e4      	b.n	800eb4a <_printf_i+0x176>
 800eb80:	4615      	mov	r5, r2
 800eb82:	e7bd      	b.n	800eb00 <_printf_i+0x12c>
 800eb84:	682b      	ldr	r3, [r5, #0]
 800eb86:	6826      	ldr	r6, [r4, #0]
 800eb88:	6961      	ldr	r1, [r4, #20]
 800eb8a:	1d18      	adds	r0, r3, #4
 800eb8c:	6028      	str	r0, [r5, #0]
 800eb8e:	0635      	lsls	r5, r6, #24
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	d501      	bpl.n	800eb98 <_printf_i+0x1c4>
 800eb94:	6019      	str	r1, [r3, #0]
 800eb96:	e002      	b.n	800eb9e <_printf_i+0x1ca>
 800eb98:	0670      	lsls	r0, r6, #25
 800eb9a:	d5fb      	bpl.n	800eb94 <_printf_i+0x1c0>
 800eb9c:	8019      	strh	r1, [r3, #0]
 800eb9e:	2300      	movs	r3, #0
 800eba0:	6123      	str	r3, [r4, #16]
 800eba2:	4615      	mov	r5, r2
 800eba4:	e7bc      	b.n	800eb20 <_printf_i+0x14c>
 800eba6:	682b      	ldr	r3, [r5, #0]
 800eba8:	1d1a      	adds	r2, r3, #4
 800ebaa:	602a      	str	r2, [r5, #0]
 800ebac:	681d      	ldr	r5, [r3, #0]
 800ebae:	6862      	ldr	r2, [r4, #4]
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	f7f1 fb14 	bl	80001e0 <memchr>
 800ebb8:	b108      	cbz	r0, 800ebbe <_printf_i+0x1ea>
 800ebba:	1b40      	subs	r0, r0, r5
 800ebbc:	6060      	str	r0, [r4, #4]
 800ebbe:	6863      	ldr	r3, [r4, #4]
 800ebc0:	6123      	str	r3, [r4, #16]
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebc8:	e7aa      	b.n	800eb20 <_printf_i+0x14c>
 800ebca:	6923      	ldr	r3, [r4, #16]
 800ebcc:	462a      	mov	r2, r5
 800ebce:	4649      	mov	r1, r9
 800ebd0:	4640      	mov	r0, r8
 800ebd2:	47d0      	blx	sl
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	d0ad      	beq.n	800eb34 <_printf_i+0x160>
 800ebd8:	6823      	ldr	r3, [r4, #0]
 800ebda:	079b      	lsls	r3, r3, #30
 800ebdc:	d413      	bmi.n	800ec06 <_printf_i+0x232>
 800ebde:	68e0      	ldr	r0, [r4, #12]
 800ebe0:	9b03      	ldr	r3, [sp, #12]
 800ebe2:	4298      	cmp	r0, r3
 800ebe4:	bfb8      	it	lt
 800ebe6:	4618      	movlt	r0, r3
 800ebe8:	e7a6      	b.n	800eb38 <_printf_i+0x164>
 800ebea:	2301      	movs	r3, #1
 800ebec:	4632      	mov	r2, r6
 800ebee:	4649      	mov	r1, r9
 800ebf0:	4640      	mov	r0, r8
 800ebf2:	47d0      	blx	sl
 800ebf4:	3001      	adds	r0, #1
 800ebf6:	d09d      	beq.n	800eb34 <_printf_i+0x160>
 800ebf8:	3501      	adds	r5, #1
 800ebfa:	68e3      	ldr	r3, [r4, #12]
 800ebfc:	9903      	ldr	r1, [sp, #12]
 800ebfe:	1a5b      	subs	r3, r3, r1
 800ec00:	42ab      	cmp	r3, r5
 800ec02:	dcf2      	bgt.n	800ebea <_printf_i+0x216>
 800ec04:	e7eb      	b.n	800ebde <_printf_i+0x20a>
 800ec06:	2500      	movs	r5, #0
 800ec08:	f104 0619 	add.w	r6, r4, #25
 800ec0c:	e7f5      	b.n	800ebfa <_printf_i+0x226>
 800ec0e:	bf00      	nop
 800ec10:	08010f26 	.word	0x08010f26
 800ec14:	08010f37 	.word	0x08010f37

0800ec18 <std>:
 800ec18:	2300      	movs	r3, #0
 800ec1a:	b510      	push	{r4, lr}
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	e9c0 3300 	strd	r3, r3, [r0]
 800ec22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec26:	6083      	str	r3, [r0, #8]
 800ec28:	8181      	strh	r1, [r0, #12]
 800ec2a:	6643      	str	r3, [r0, #100]	; 0x64
 800ec2c:	81c2      	strh	r2, [r0, #14]
 800ec2e:	6183      	str	r3, [r0, #24]
 800ec30:	4619      	mov	r1, r3
 800ec32:	2208      	movs	r2, #8
 800ec34:	305c      	adds	r0, #92	; 0x5c
 800ec36:	f000 f8f4 	bl	800ee22 <memset>
 800ec3a:	4b0d      	ldr	r3, [pc, #52]	; (800ec70 <std+0x58>)
 800ec3c:	6263      	str	r3, [r4, #36]	; 0x24
 800ec3e:	4b0d      	ldr	r3, [pc, #52]	; (800ec74 <std+0x5c>)
 800ec40:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec42:	4b0d      	ldr	r3, [pc, #52]	; (800ec78 <std+0x60>)
 800ec44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec46:	4b0d      	ldr	r3, [pc, #52]	; (800ec7c <std+0x64>)
 800ec48:	6323      	str	r3, [r4, #48]	; 0x30
 800ec4a:	4b0d      	ldr	r3, [pc, #52]	; (800ec80 <std+0x68>)
 800ec4c:	6224      	str	r4, [r4, #32]
 800ec4e:	429c      	cmp	r4, r3
 800ec50:	d006      	beq.n	800ec60 <std+0x48>
 800ec52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ec56:	4294      	cmp	r4, r2
 800ec58:	d002      	beq.n	800ec60 <std+0x48>
 800ec5a:	33d0      	adds	r3, #208	; 0xd0
 800ec5c:	429c      	cmp	r4, r3
 800ec5e:	d105      	bne.n	800ec6c <std+0x54>
 800ec60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec68:	f000 b9ae 	b.w	800efc8 <__retarget_lock_init_recursive>
 800ec6c:	bd10      	pop	{r4, pc}
 800ec6e:	bf00      	nop
 800ec70:	0800ed9d 	.word	0x0800ed9d
 800ec74:	0800edbf 	.word	0x0800edbf
 800ec78:	0800edf7 	.word	0x0800edf7
 800ec7c:	0800ee1b 	.word	0x0800ee1b
 800ec80:	200058a4 	.word	0x200058a4

0800ec84 <stdio_exit_handler>:
 800ec84:	4a02      	ldr	r2, [pc, #8]	; (800ec90 <stdio_exit_handler+0xc>)
 800ec86:	4903      	ldr	r1, [pc, #12]	; (800ec94 <stdio_exit_handler+0x10>)
 800ec88:	4803      	ldr	r0, [pc, #12]	; (800ec98 <stdio_exit_handler+0x14>)
 800ec8a:	f000 b869 	b.w	800ed60 <_fwalk_sglue>
 800ec8e:	bf00      	nop
 800ec90:	20000014 	.word	0x20000014
 800ec94:	080106e9 	.word	0x080106e9
 800ec98:	20000020 	.word	0x20000020

0800ec9c <cleanup_stdio>:
 800ec9c:	6841      	ldr	r1, [r0, #4]
 800ec9e:	4b0c      	ldr	r3, [pc, #48]	; (800ecd0 <cleanup_stdio+0x34>)
 800eca0:	4299      	cmp	r1, r3
 800eca2:	b510      	push	{r4, lr}
 800eca4:	4604      	mov	r4, r0
 800eca6:	d001      	beq.n	800ecac <cleanup_stdio+0x10>
 800eca8:	f001 fd1e 	bl	80106e8 <_fflush_r>
 800ecac:	68a1      	ldr	r1, [r4, #8]
 800ecae:	4b09      	ldr	r3, [pc, #36]	; (800ecd4 <cleanup_stdio+0x38>)
 800ecb0:	4299      	cmp	r1, r3
 800ecb2:	d002      	beq.n	800ecba <cleanup_stdio+0x1e>
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	f001 fd17 	bl	80106e8 <_fflush_r>
 800ecba:	68e1      	ldr	r1, [r4, #12]
 800ecbc:	4b06      	ldr	r3, [pc, #24]	; (800ecd8 <cleanup_stdio+0x3c>)
 800ecbe:	4299      	cmp	r1, r3
 800ecc0:	d004      	beq.n	800eccc <cleanup_stdio+0x30>
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecc8:	f001 bd0e 	b.w	80106e8 <_fflush_r>
 800eccc:	bd10      	pop	{r4, pc}
 800ecce:	bf00      	nop
 800ecd0:	200058a4 	.word	0x200058a4
 800ecd4:	2000590c 	.word	0x2000590c
 800ecd8:	20005974 	.word	0x20005974

0800ecdc <global_stdio_init.part.0>:
 800ecdc:	b510      	push	{r4, lr}
 800ecde:	4b0b      	ldr	r3, [pc, #44]	; (800ed0c <global_stdio_init.part.0+0x30>)
 800ece0:	4c0b      	ldr	r4, [pc, #44]	; (800ed10 <global_stdio_init.part.0+0x34>)
 800ece2:	4a0c      	ldr	r2, [pc, #48]	; (800ed14 <global_stdio_init.part.0+0x38>)
 800ece4:	601a      	str	r2, [r3, #0]
 800ece6:	4620      	mov	r0, r4
 800ece8:	2200      	movs	r2, #0
 800ecea:	2104      	movs	r1, #4
 800ecec:	f7ff ff94 	bl	800ec18 <std>
 800ecf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	2109      	movs	r1, #9
 800ecf8:	f7ff ff8e 	bl	800ec18 <std>
 800ecfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ed00:	2202      	movs	r2, #2
 800ed02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed06:	2112      	movs	r1, #18
 800ed08:	f7ff bf86 	b.w	800ec18 <std>
 800ed0c:	200059dc 	.word	0x200059dc
 800ed10:	200058a4 	.word	0x200058a4
 800ed14:	0800ec85 	.word	0x0800ec85

0800ed18 <__sfp_lock_acquire>:
 800ed18:	4801      	ldr	r0, [pc, #4]	; (800ed20 <__sfp_lock_acquire+0x8>)
 800ed1a:	f000 b956 	b.w	800efca <__retarget_lock_acquire_recursive>
 800ed1e:	bf00      	nop
 800ed20:	200059e5 	.word	0x200059e5

0800ed24 <__sfp_lock_release>:
 800ed24:	4801      	ldr	r0, [pc, #4]	; (800ed2c <__sfp_lock_release+0x8>)
 800ed26:	f000 b951 	b.w	800efcc <__retarget_lock_release_recursive>
 800ed2a:	bf00      	nop
 800ed2c:	200059e5 	.word	0x200059e5

0800ed30 <__sinit>:
 800ed30:	b510      	push	{r4, lr}
 800ed32:	4604      	mov	r4, r0
 800ed34:	f7ff fff0 	bl	800ed18 <__sfp_lock_acquire>
 800ed38:	6a23      	ldr	r3, [r4, #32]
 800ed3a:	b11b      	cbz	r3, 800ed44 <__sinit+0x14>
 800ed3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed40:	f7ff bff0 	b.w	800ed24 <__sfp_lock_release>
 800ed44:	4b04      	ldr	r3, [pc, #16]	; (800ed58 <__sinit+0x28>)
 800ed46:	6223      	str	r3, [r4, #32]
 800ed48:	4b04      	ldr	r3, [pc, #16]	; (800ed5c <__sinit+0x2c>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d1f5      	bne.n	800ed3c <__sinit+0xc>
 800ed50:	f7ff ffc4 	bl	800ecdc <global_stdio_init.part.0>
 800ed54:	e7f2      	b.n	800ed3c <__sinit+0xc>
 800ed56:	bf00      	nop
 800ed58:	0800ec9d 	.word	0x0800ec9d
 800ed5c:	200059dc 	.word	0x200059dc

0800ed60 <_fwalk_sglue>:
 800ed60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed64:	4607      	mov	r7, r0
 800ed66:	4688      	mov	r8, r1
 800ed68:	4614      	mov	r4, r2
 800ed6a:	2600      	movs	r6, #0
 800ed6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed70:	f1b9 0901 	subs.w	r9, r9, #1
 800ed74:	d505      	bpl.n	800ed82 <_fwalk_sglue+0x22>
 800ed76:	6824      	ldr	r4, [r4, #0]
 800ed78:	2c00      	cmp	r4, #0
 800ed7a:	d1f7      	bne.n	800ed6c <_fwalk_sglue+0xc>
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed82:	89ab      	ldrh	r3, [r5, #12]
 800ed84:	2b01      	cmp	r3, #1
 800ed86:	d907      	bls.n	800ed98 <_fwalk_sglue+0x38>
 800ed88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	d003      	beq.n	800ed98 <_fwalk_sglue+0x38>
 800ed90:	4629      	mov	r1, r5
 800ed92:	4638      	mov	r0, r7
 800ed94:	47c0      	blx	r8
 800ed96:	4306      	orrs	r6, r0
 800ed98:	3568      	adds	r5, #104	; 0x68
 800ed9a:	e7e9      	b.n	800ed70 <_fwalk_sglue+0x10>

0800ed9c <__sread>:
 800ed9c:	b510      	push	{r4, lr}
 800ed9e:	460c      	mov	r4, r1
 800eda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eda4:	f000 f8c2 	bl	800ef2c <_read_r>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	bfab      	itete	ge
 800edac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800edae:	89a3      	ldrhlt	r3, [r4, #12]
 800edb0:	181b      	addge	r3, r3, r0
 800edb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800edb6:	bfac      	ite	ge
 800edb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800edba:	81a3      	strhlt	r3, [r4, #12]
 800edbc:	bd10      	pop	{r4, pc}

0800edbe <__swrite>:
 800edbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc2:	461f      	mov	r7, r3
 800edc4:	898b      	ldrh	r3, [r1, #12]
 800edc6:	05db      	lsls	r3, r3, #23
 800edc8:	4605      	mov	r5, r0
 800edca:	460c      	mov	r4, r1
 800edcc:	4616      	mov	r6, r2
 800edce:	d505      	bpl.n	800eddc <__swrite+0x1e>
 800edd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edd4:	2302      	movs	r3, #2
 800edd6:	2200      	movs	r2, #0
 800edd8:	f000 f896 	bl	800ef08 <_lseek_r>
 800eddc:	89a3      	ldrh	r3, [r4, #12]
 800edde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ede2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ede6:	81a3      	strh	r3, [r4, #12]
 800ede8:	4632      	mov	r2, r6
 800edea:	463b      	mov	r3, r7
 800edec:	4628      	mov	r0, r5
 800edee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edf2:	f000 b8ad 	b.w	800ef50 <_write_r>

0800edf6 <__sseek>:
 800edf6:	b510      	push	{r4, lr}
 800edf8:	460c      	mov	r4, r1
 800edfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edfe:	f000 f883 	bl	800ef08 <_lseek_r>
 800ee02:	1c43      	adds	r3, r0, #1
 800ee04:	89a3      	ldrh	r3, [r4, #12]
 800ee06:	bf15      	itete	ne
 800ee08:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee12:	81a3      	strheq	r3, [r4, #12]
 800ee14:	bf18      	it	ne
 800ee16:	81a3      	strhne	r3, [r4, #12]
 800ee18:	bd10      	pop	{r4, pc}

0800ee1a <__sclose>:
 800ee1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee1e:	f000 b80d 	b.w	800ee3c <_close_r>

0800ee22 <memset>:
 800ee22:	4402      	add	r2, r0
 800ee24:	4603      	mov	r3, r0
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d100      	bne.n	800ee2c <memset+0xa>
 800ee2a:	4770      	bx	lr
 800ee2c:	f803 1b01 	strb.w	r1, [r3], #1
 800ee30:	e7f9      	b.n	800ee26 <memset+0x4>
	...

0800ee34 <_localeconv_r>:
 800ee34:	4800      	ldr	r0, [pc, #0]	; (800ee38 <_localeconv_r+0x4>)
 800ee36:	4770      	bx	lr
 800ee38:	20000160 	.word	0x20000160

0800ee3c <_close_r>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4d06      	ldr	r5, [pc, #24]	; (800ee58 <_close_r+0x1c>)
 800ee40:	2300      	movs	r3, #0
 800ee42:	4604      	mov	r4, r0
 800ee44:	4608      	mov	r0, r1
 800ee46:	602b      	str	r3, [r5, #0]
 800ee48:	f7f4 fa45 	bl	80032d6 <_close>
 800ee4c:	1c43      	adds	r3, r0, #1
 800ee4e:	d102      	bne.n	800ee56 <_close_r+0x1a>
 800ee50:	682b      	ldr	r3, [r5, #0]
 800ee52:	b103      	cbz	r3, 800ee56 <_close_r+0x1a>
 800ee54:	6023      	str	r3, [r4, #0]
 800ee56:	bd38      	pop	{r3, r4, r5, pc}
 800ee58:	200059e0 	.word	0x200059e0

0800ee5c <_reclaim_reent>:
 800ee5c:	4b29      	ldr	r3, [pc, #164]	; (800ef04 <_reclaim_reent+0xa8>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4283      	cmp	r3, r0
 800ee62:	b570      	push	{r4, r5, r6, lr}
 800ee64:	4604      	mov	r4, r0
 800ee66:	d04b      	beq.n	800ef00 <_reclaim_reent+0xa4>
 800ee68:	69c3      	ldr	r3, [r0, #28]
 800ee6a:	b143      	cbz	r3, 800ee7e <_reclaim_reent+0x22>
 800ee6c:	68db      	ldr	r3, [r3, #12]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d144      	bne.n	800eefc <_reclaim_reent+0xa0>
 800ee72:	69e3      	ldr	r3, [r4, #28]
 800ee74:	6819      	ldr	r1, [r3, #0]
 800ee76:	b111      	cbz	r1, 800ee7e <_reclaim_reent+0x22>
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f000 ff33 	bl	800fce4 <_free_r>
 800ee7e:	6961      	ldr	r1, [r4, #20]
 800ee80:	b111      	cbz	r1, 800ee88 <_reclaim_reent+0x2c>
 800ee82:	4620      	mov	r0, r4
 800ee84:	f000 ff2e 	bl	800fce4 <_free_r>
 800ee88:	69e1      	ldr	r1, [r4, #28]
 800ee8a:	b111      	cbz	r1, 800ee92 <_reclaim_reent+0x36>
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f000 ff29 	bl	800fce4 <_free_r>
 800ee92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ee94:	b111      	cbz	r1, 800ee9c <_reclaim_reent+0x40>
 800ee96:	4620      	mov	r0, r4
 800ee98:	f000 ff24 	bl	800fce4 <_free_r>
 800ee9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee9e:	b111      	cbz	r1, 800eea6 <_reclaim_reent+0x4a>
 800eea0:	4620      	mov	r0, r4
 800eea2:	f000 ff1f 	bl	800fce4 <_free_r>
 800eea6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eea8:	b111      	cbz	r1, 800eeb0 <_reclaim_reent+0x54>
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 ff1a 	bl	800fce4 <_free_r>
 800eeb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eeb2:	b111      	cbz	r1, 800eeba <_reclaim_reent+0x5e>
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f000 ff15 	bl	800fce4 <_free_r>
 800eeba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800eebc:	b111      	cbz	r1, 800eec4 <_reclaim_reent+0x68>
 800eebe:	4620      	mov	r0, r4
 800eec0:	f000 ff10 	bl	800fce4 <_free_r>
 800eec4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800eec6:	b111      	cbz	r1, 800eece <_reclaim_reent+0x72>
 800eec8:	4620      	mov	r0, r4
 800eeca:	f000 ff0b 	bl	800fce4 <_free_r>
 800eece:	6a23      	ldr	r3, [r4, #32]
 800eed0:	b1b3      	cbz	r3, 800ef00 <_reclaim_reent+0xa4>
 800eed2:	4620      	mov	r0, r4
 800eed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eed8:	4718      	bx	r3
 800eeda:	5949      	ldr	r1, [r1, r5]
 800eedc:	b941      	cbnz	r1, 800eef0 <_reclaim_reent+0x94>
 800eede:	3504      	adds	r5, #4
 800eee0:	69e3      	ldr	r3, [r4, #28]
 800eee2:	2d80      	cmp	r5, #128	; 0x80
 800eee4:	68d9      	ldr	r1, [r3, #12]
 800eee6:	d1f8      	bne.n	800eeda <_reclaim_reent+0x7e>
 800eee8:	4620      	mov	r0, r4
 800eeea:	f000 fefb 	bl	800fce4 <_free_r>
 800eeee:	e7c0      	b.n	800ee72 <_reclaim_reent+0x16>
 800eef0:	680e      	ldr	r6, [r1, #0]
 800eef2:	4620      	mov	r0, r4
 800eef4:	f000 fef6 	bl	800fce4 <_free_r>
 800eef8:	4631      	mov	r1, r6
 800eefa:	e7ef      	b.n	800eedc <_reclaim_reent+0x80>
 800eefc:	2500      	movs	r5, #0
 800eefe:	e7ef      	b.n	800eee0 <_reclaim_reent+0x84>
 800ef00:	bd70      	pop	{r4, r5, r6, pc}
 800ef02:	bf00      	nop
 800ef04:	2000006c 	.word	0x2000006c

0800ef08 <_lseek_r>:
 800ef08:	b538      	push	{r3, r4, r5, lr}
 800ef0a:	4d07      	ldr	r5, [pc, #28]	; (800ef28 <_lseek_r+0x20>)
 800ef0c:	4604      	mov	r4, r0
 800ef0e:	4608      	mov	r0, r1
 800ef10:	4611      	mov	r1, r2
 800ef12:	2200      	movs	r2, #0
 800ef14:	602a      	str	r2, [r5, #0]
 800ef16:	461a      	mov	r2, r3
 800ef18:	f7f4 fa04 	bl	8003324 <_lseek>
 800ef1c:	1c43      	adds	r3, r0, #1
 800ef1e:	d102      	bne.n	800ef26 <_lseek_r+0x1e>
 800ef20:	682b      	ldr	r3, [r5, #0]
 800ef22:	b103      	cbz	r3, 800ef26 <_lseek_r+0x1e>
 800ef24:	6023      	str	r3, [r4, #0]
 800ef26:	bd38      	pop	{r3, r4, r5, pc}
 800ef28:	200059e0 	.word	0x200059e0

0800ef2c <_read_r>:
 800ef2c:	b538      	push	{r3, r4, r5, lr}
 800ef2e:	4d07      	ldr	r5, [pc, #28]	; (800ef4c <_read_r+0x20>)
 800ef30:	4604      	mov	r4, r0
 800ef32:	4608      	mov	r0, r1
 800ef34:	4611      	mov	r1, r2
 800ef36:	2200      	movs	r2, #0
 800ef38:	602a      	str	r2, [r5, #0]
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	f7f4 f992 	bl	8003264 <_read>
 800ef40:	1c43      	adds	r3, r0, #1
 800ef42:	d102      	bne.n	800ef4a <_read_r+0x1e>
 800ef44:	682b      	ldr	r3, [r5, #0]
 800ef46:	b103      	cbz	r3, 800ef4a <_read_r+0x1e>
 800ef48:	6023      	str	r3, [r4, #0]
 800ef4a:	bd38      	pop	{r3, r4, r5, pc}
 800ef4c:	200059e0 	.word	0x200059e0

0800ef50 <_write_r>:
 800ef50:	b538      	push	{r3, r4, r5, lr}
 800ef52:	4d07      	ldr	r5, [pc, #28]	; (800ef70 <_write_r+0x20>)
 800ef54:	4604      	mov	r4, r0
 800ef56:	4608      	mov	r0, r1
 800ef58:	4611      	mov	r1, r2
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	602a      	str	r2, [r5, #0]
 800ef5e:	461a      	mov	r2, r3
 800ef60:	f7f4 f99d 	bl	800329e <_write>
 800ef64:	1c43      	adds	r3, r0, #1
 800ef66:	d102      	bne.n	800ef6e <_write_r+0x1e>
 800ef68:	682b      	ldr	r3, [r5, #0]
 800ef6a:	b103      	cbz	r3, 800ef6e <_write_r+0x1e>
 800ef6c:	6023      	str	r3, [r4, #0]
 800ef6e:	bd38      	pop	{r3, r4, r5, pc}
 800ef70:	200059e0 	.word	0x200059e0

0800ef74 <__errno>:
 800ef74:	4b01      	ldr	r3, [pc, #4]	; (800ef7c <__errno+0x8>)
 800ef76:	6818      	ldr	r0, [r3, #0]
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop
 800ef7c:	2000006c 	.word	0x2000006c

0800ef80 <__libc_init_array>:
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	4d0d      	ldr	r5, [pc, #52]	; (800efb8 <__libc_init_array+0x38>)
 800ef84:	4c0d      	ldr	r4, [pc, #52]	; (800efbc <__libc_init_array+0x3c>)
 800ef86:	1b64      	subs	r4, r4, r5
 800ef88:	10a4      	asrs	r4, r4, #2
 800ef8a:	2600      	movs	r6, #0
 800ef8c:	42a6      	cmp	r6, r4
 800ef8e:	d109      	bne.n	800efa4 <__libc_init_array+0x24>
 800ef90:	4d0b      	ldr	r5, [pc, #44]	; (800efc0 <__libc_init_array+0x40>)
 800ef92:	4c0c      	ldr	r4, [pc, #48]	; (800efc4 <__libc_init_array+0x44>)
 800ef94:	f001 feee 	bl	8010d74 <_init>
 800ef98:	1b64      	subs	r4, r4, r5
 800ef9a:	10a4      	asrs	r4, r4, #2
 800ef9c:	2600      	movs	r6, #0
 800ef9e:	42a6      	cmp	r6, r4
 800efa0:	d105      	bne.n	800efae <__libc_init_array+0x2e>
 800efa2:	bd70      	pop	{r4, r5, r6, pc}
 800efa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800efa8:	4798      	blx	r3
 800efaa:	3601      	adds	r6, #1
 800efac:	e7ee      	b.n	800ef8c <__libc_init_array+0xc>
 800efae:	f855 3b04 	ldr.w	r3, [r5], #4
 800efb2:	4798      	blx	r3
 800efb4:	3601      	adds	r6, #1
 800efb6:	e7f2      	b.n	800ef9e <__libc_init_array+0x1e>
 800efb8:	08011284 	.word	0x08011284
 800efbc:	08011284 	.word	0x08011284
 800efc0:	08011284 	.word	0x08011284
 800efc4:	08011288 	.word	0x08011288

0800efc8 <__retarget_lock_init_recursive>:
 800efc8:	4770      	bx	lr

0800efca <__retarget_lock_acquire_recursive>:
 800efca:	4770      	bx	lr

0800efcc <__retarget_lock_release_recursive>:
 800efcc:	4770      	bx	lr

0800efce <memcpy>:
 800efce:	440a      	add	r2, r1
 800efd0:	4291      	cmp	r1, r2
 800efd2:	f100 33ff 	add.w	r3, r0, #4294967295
 800efd6:	d100      	bne.n	800efda <memcpy+0xc>
 800efd8:	4770      	bx	lr
 800efda:	b510      	push	{r4, lr}
 800efdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efe4:	4291      	cmp	r1, r2
 800efe6:	d1f9      	bne.n	800efdc <memcpy+0xe>
 800efe8:	bd10      	pop	{r4, pc}

0800efea <quorem>:
 800efea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efee:	6903      	ldr	r3, [r0, #16]
 800eff0:	690c      	ldr	r4, [r1, #16]
 800eff2:	42a3      	cmp	r3, r4
 800eff4:	4607      	mov	r7, r0
 800eff6:	db7e      	blt.n	800f0f6 <quorem+0x10c>
 800eff8:	3c01      	subs	r4, #1
 800effa:	f101 0814 	add.w	r8, r1, #20
 800effe:	f100 0514 	add.w	r5, r0, #20
 800f002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f006:	9301      	str	r3, [sp, #4]
 800f008:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f00c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f010:	3301      	adds	r3, #1
 800f012:	429a      	cmp	r2, r3
 800f014:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f018:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f01c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f020:	d331      	bcc.n	800f086 <quorem+0x9c>
 800f022:	f04f 0e00 	mov.w	lr, #0
 800f026:	4640      	mov	r0, r8
 800f028:	46ac      	mov	ip, r5
 800f02a:	46f2      	mov	sl, lr
 800f02c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f030:	b293      	uxth	r3, r2
 800f032:	fb06 e303 	mla	r3, r6, r3, lr
 800f036:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f03a:	0c1a      	lsrs	r2, r3, #16
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	ebaa 0303 	sub.w	r3, sl, r3
 800f042:	f8dc a000 	ldr.w	sl, [ip]
 800f046:	fa13 f38a 	uxtah	r3, r3, sl
 800f04a:	fb06 220e 	mla	r2, r6, lr, r2
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	9b00      	ldr	r3, [sp, #0]
 800f052:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f056:	b292      	uxth	r2, r2
 800f058:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f05c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f060:	f8bd 3000 	ldrh.w	r3, [sp]
 800f064:	4581      	cmp	r9, r0
 800f066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f06a:	f84c 3b04 	str.w	r3, [ip], #4
 800f06e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f072:	d2db      	bcs.n	800f02c <quorem+0x42>
 800f074:	f855 300b 	ldr.w	r3, [r5, fp]
 800f078:	b92b      	cbnz	r3, 800f086 <quorem+0x9c>
 800f07a:	9b01      	ldr	r3, [sp, #4]
 800f07c:	3b04      	subs	r3, #4
 800f07e:	429d      	cmp	r5, r3
 800f080:	461a      	mov	r2, r3
 800f082:	d32c      	bcc.n	800f0de <quorem+0xf4>
 800f084:	613c      	str	r4, [r7, #16]
 800f086:	4638      	mov	r0, r7
 800f088:	f001 f9a8 	bl	80103dc <__mcmp>
 800f08c:	2800      	cmp	r0, #0
 800f08e:	db22      	blt.n	800f0d6 <quorem+0xec>
 800f090:	3601      	adds	r6, #1
 800f092:	4629      	mov	r1, r5
 800f094:	2000      	movs	r0, #0
 800f096:	f858 2b04 	ldr.w	r2, [r8], #4
 800f09a:	f8d1 c000 	ldr.w	ip, [r1]
 800f09e:	b293      	uxth	r3, r2
 800f0a0:	1ac3      	subs	r3, r0, r3
 800f0a2:	0c12      	lsrs	r2, r2, #16
 800f0a4:	fa13 f38c 	uxtah	r3, r3, ip
 800f0a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f0ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0b6:	45c1      	cmp	r9, r8
 800f0b8:	f841 3b04 	str.w	r3, [r1], #4
 800f0bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f0c0:	d2e9      	bcs.n	800f096 <quorem+0xac>
 800f0c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0ca:	b922      	cbnz	r2, 800f0d6 <quorem+0xec>
 800f0cc:	3b04      	subs	r3, #4
 800f0ce:	429d      	cmp	r5, r3
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	d30a      	bcc.n	800f0ea <quorem+0x100>
 800f0d4:	613c      	str	r4, [r7, #16]
 800f0d6:	4630      	mov	r0, r6
 800f0d8:	b003      	add	sp, #12
 800f0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0de:	6812      	ldr	r2, [r2, #0]
 800f0e0:	3b04      	subs	r3, #4
 800f0e2:	2a00      	cmp	r2, #0
 800f0e4:	d1ce      	bne.n	800f084 <quorem+0x9a>
 800f0e6:	3c01      	subs	r4, #1
 800f0e8:	e7c9      	b.n	800f07e <quorem+0x94>
 800f0ea:	6812      	ldr	r2, [r2, #0]
 800f0ec:	3b04      	subs	r3, #4
 800f0ee:	2a00      	cmp	r2, #0
 800f0f0:	d1f0      	bne.n	800f0d4 <quorem+0xea>
 800f0f2:	3c01      	subs	r4, #1
 800f0f4:	e7eb      	b.n	800f0ce <quorem+0xe4>
 800f0f6:	2000      	movs	r0, #0
 800f0f8:	e7ee      	b.n	800f0d8 <quorem+0xee>
 800f0fa:	0000      	movs	r0, r0
 800f0fc:	0000      	movs	r0, r0
	...

0800f100 <_dtoa_r>:
 800f100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f104:	ed2d 8b04 	vpush	{d8-d9}
 800f108:	69c5      	ldr	r5, [r0, #28]
 800f10a:	b093      	sub	sp, #76	; 0x4c
 800f10c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f110:	ec57 6b10 	vmov	r6, r7, d0
 800f114:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f118:	9107      	str	r1, [sp, #28]
 800f11a:	4604      	mov	r4, r0
 800f11c:	920a      	str	r2, [sp, #40]	; 0x28
 800f11e:	930d      	str	r3, [sp, #52]	; 0x34
 800f120:	b975      	cbnz	r5, 800f140 <_dtoa_r+0x40>
 800f122:	2010      	movs	r0, #16
 800f124:	f000 fe2a 	bl	800fd7c <malloc>
 800f128:	4602      	mov	r2, r0
 800f12a:	61e0      	str	r0, [r4, #28]
 800f12c:	b920      	cbnz	r0, 800f138 <_dtoa_r+0x38>
 800f12e:	4bae      	ldr	r3, [pc, #696]	; (800f3e8 <_dtoa_r+0x2e8>)
 800f130:	21ef      	movs	r1, #239	; 0xef
 800f132:	48ae      	ldr	r0, [pc, #696]	; (800f3ec <_dtoa_r+0x2ec>)
 800f134:	f001 fb10 	bl	8010758 <__assert_func>
 800f138:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f13c:	6005      	str	r5, [r0, #0]
 800f13e:	60c5      	str	r5, [r0, #12]
 800f140:	69e3      	ldr	r3, [r4, #28]
 800f142:	6819      	ldr	r1, [r3, #0]
 800f144:	b151      	cbz	r1, 800f15c <_dtoa_r+0x5c>
 800f146:	685a      	ldr	r2, [r3, #4]
 800f148:	604a      	str	r2, [r1, #4]
 800f14a:	2301      	movs	r3, #1
 800f14c:	4093      	lsls	r3, r2
 800f14e:	608b      	str	r3, [r1, #8]
 800f150:	4620      	mov	r0, r4
 800f152:	f000 ff07 	bl	800ff64 <_Bfree>
 800f156:	69e3      	ldr	r3, [r4, #28]
 800f158:	2200      	movs	r2, #0
 800f15a:	601a      	str	r2, [r3, #0]
 800f15c:	1e3b      	subs	r3, r7, #0
 800f15e:	bfbb      	ittet	lt
 800f160:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f164:	9303      	strlt	r3, [sp, #12]
 800f166:	2300      	movge	r3, #0
 800f168:	2201      	movlt	r2, #1
 800f16a:	bfac      	ite	ge
 800f16c:	f8c8 3000 	strge.w	r3, [r8]
 800f170:	f8c8 2000 	strlt.w	r2, [r8]
 800f174:	4b9e      	ldr	r3, [pc, #632]	; (800f3f0 <_dtoa_r+0x2f0>)
 800f176:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f17a:	ea33 0308 	bics.w	r3, r3, r8
 800f17e:	d11b      	bne.n	800f1b8 <_dtoa_r+0xb8>
 800f180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f182:	f242 730f 	movw	r3, #9999	; 0x270f
 800f186:	6013      	str	r3, [r2, #0]
 800f188:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f18c:	4333      	orrs	r3, r6
 800f18e:	f000 8593 	beq.w	800fcb8 <_dtoa_r+0xbb8>
 800f192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f194:	b963      	cbnz	r3, 800f1b0 <_dtoa_r+0xb0>
 800f196:	4b97      	ldr	r3, [pc, #604]	; (800f3f4 <_dtoa_r+0x2f4>)
 800f198:	e027      	b.n	800f1ea <_dtoa_r+0xea>
 800f19a:	4b97      	ldr	r3, [pc, #604]	; (800f3f8 <_dtoa_r+0x2f8>)
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	3308      	adds	r3, #8
 800f1a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1a2:	6013      	str	r3, [r2, #0]
 800f1a4:	9800      	ldr	r0, [sp, #0]
 800f1a6:	b013      	add	sp, #76	; 0x4c
 800f1a8:	ecbd 8b04 	vpop	{d8-d9}
 800f1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b0:	4b90      	ldr	r3, [pc, #576]	; (800f3f4 <_dtoa_r+0x2f4>)
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	3303      	adds	r3, #3
 800f1b6:	e7f3      	b.n	800f1a0 <_dtoa_r+0xa0>
 800f1b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	ec51 0b17 	vmov	r0, r1, d7
 800f1c2:	eeb0 8a47 	vmov.f32	s16, s14
 800f1c6:	eef0 8a67 	vmov.f32	s17, s15
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	f7f1 fc84 	bl	8000ad8 <__aeabi_dcmpeq>
 800f1d0:	4681      	mov	r9, r0
 800f1d2:	b160      	cbz	r0, 800f1ee <_dtoa_r+0xee>
 800f1d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	6013      	str	r3, [r2, #0]
 800f1da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f000 8568 	beq.w	800fcb2 <_dtoa_r+0xbb2>
 800f1e2:	4b86      	ldr	r3, [pc, #536]	; (800f3fc <_dtoa_r+0x2fc>)
 800f1e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1e6:	6013      	str	r3, [r2, #0]
 800f1e8:	3b01      	subs	r3, #1
 800f1ea:	9300      	str	r3, [sp, #0]
 800f1ec:	e7da      	b.n	800f1a4 <_dtoa_r+0xa4>
 800f1ee:	aa10      	add	r2, sp, #64	; 0x40
 800f1f0:	a911      	add	r1, sp, #68	; 0x44
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	eeb0 0a48 	vmov.f32	s0, s16
 800f1f8:	eef0 0a68 	vmov.f32	s1, s17
 800f1fc:	f001 f994 	bl	8010528 <__d2b>
 800f200:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f204:	4682      	mov	sl, r0
 800f206:	2d00      	cmp	r5, #0
 800f208:	d07f      	beq.n	800f30a <_dtoa_r+0x20a>
 800f20a:	ee18 3a90 	vmov	r3, s17
 800f20e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f212:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f216:	ec51 0b18 	vmov	r0, r1, d8
 800f21a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f21e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f222:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f226:	4619      	mov	r1, r3
 800f228:	2200      	movs	r2, #0
 800f22a:	4b75      	ldr	r3, [pc, #468]	; (800f400 <_dtoa_r+0x300>)
 800f22c:	f7f1 f834 	bl	8000298 <__aeabi_dsub>
 800f230:	a367      	add	r3, pc, #412	; (adr r3, 800f3d0 <_dtoa_r+0x2d0>)
 800f232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f236:	f7f1 f9e7 	bl	8000608 <__aeabi_dmul>
 800f23a:	a367      	add	r3, pc, #412	; (adr r3, 800f3d8 <_dtoa_r+0x2d8>)
 800f23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f240:	f7f1 f82c 	bl	800029c <__adddf3>
 800f244:	4606      	mov	r6, r0
 800f246:	4628      	mov	r0, r5
 800f248:	460f      	mov	r7, r1
 800f24a:	f7f1 f973 	bl	8000534 <__aeabi_i2d>
 800f24e:	a364      	add	r3, pc, #400	; (adr r3, 800f3e0 <_dtoa_r+0x2e0>)
 800f250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f254:	f7f1 f9d8 	bl	8000608 <__aeabi_dmul>
 800f258:	4602      	mov	r2, r0
 800f25a:	460b      	mov	r3, r1
 800f25c:	4630      	mov	r0, r6
 800f25e:	4639      	mov	r1, r7
 800f260:	f7f1 f81c 	bl	800029c <__adddf3>
 800f264:	4606      	mov	r6, r0
 800f266:	460f      	mov	r7, r1
 800f268:	f7f1 fc7e 	bl	8000b68 <__aeabi_d2iz>
 800f26c:	2200      	movs	r2, #0
 800f26e:	4683      	mov	fp, r0
 800f270:	2300      	movs	r3, #0
 800f272:	4630      	mov	r0, r6
 800f274:	4639      	mov	r1, r7
 800f276:	f7f1 fc39 	bl	8000aec <__aeabi_dcmplt>
 800f27a:	b148      	cbz	r0, 800f290 <_dtoa_r+0x190>
 800f27c:	4658      	mov	r0, fp
 800f27e:	f7f1 f959 	bl	8000534 <__aeabi_i2d>
 800f282:	4632      	mov	r2, r6
 800f284:	463b      	mov	r3, r7
 800f286:	f7f1 fc27 	bl	8000ad8 <__aeabi_dcmpeq>
 800f28a:	b908      	cbnz	r0, 800f290 <_dtoa_r+0x190>
 800f28c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f290:	f1bb 0f16 	cmp.w	fp, #22
 800f294:	d857      	bhi.n	800f346 <_dtoa_r+0x246>
 800f296:	4b5b      	ldr	r3, [pc, #364]	; (800f404 <_dtoa_r+0x304>)
 800f298:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a0:	ec51 0b18 	vmov	r0, r1, d8
 800f2a4:	f7f1 fc22 	bl	8000aec <__aeabi_dcmplt>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d04e      	beq.n	800f34a <_dtoa_r+0x24a>
 800f2ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	930c      	str	r3, [sp, #48]	; 0x30
 800f2b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2b6:	1b5b      	subs	r3, r3, r5
 800f2b8:	1e5a      	subs	r2, r3, #1
 800f2ba:	bf45      	ittet	mi
 800f2bc:	f1c3 0301 	rsbmi	r3, r3, #1
 800f2c0:	9305      	strmi	r3, [sp, #20]
 800f2c2:	2300      	movpl	r3, #0
 800f2c4:	2300      	movmi	r3, #0
 800f2c6:	9206      	str	r2, [sp, #24]
 800f2c8:	bf54      	ite	pl
 800f2ca:	9305      	strpl	r3, [sp, #20]
 800f2cc:	9306      	strmi	r3, [sp, #24]
 800f2ce:	f1bb 0f00 	cmp.w	fp, #0
 800f2d2:	db3c      	blt.n	800f34e <_dtoa_r+0x24e>
 800f2d4:	9b06      	ldr	r3, [sp, #24]
 800f2d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f2da:	445b      	add	r3, fp
 800f2dc:	9306      	str	r3, [sp, #24]
 800f2de:	2300      	movs	r3, #0
 800f2e0:	9308      	str	r3, [sp, #32]
 800f2e2:	9b07      	ldr	r3, [sp, #28]
 800f2e4:	2b09      	cmp	r3, #9
 800f2e6:	d868      	bhi.n	800f3ba <_dtoa_r+0x2ba>
 800f2e8:	2b05      	cmp	r3, #5
 800f2ea:	bfc4      	itt	gt
 800f2ec:	3b04      	subgt	r3, #4
 800f2ee:	9307      	strgt	r3, [sp, #28]
 800f2f0:	9b07      	ldr	r3, [sp, #28]
 800f2f2:	f1a3 0302 	sub.w	r3, r3, #2
 800f2f6:	bfcc      	ite	gt
 800f2f8:	2500      	movgt	r5, #0
 800f2fa:	2501      	movle	r5, #1
 800f2fc:	2b03      	cmp	r3, #3
 800f2fe:	f200 8085 	bhi.w	800f40c <_dtoa_r+0x30c>
 800f302:	e8df f003 	tbb	[pc, r3]
 800f306:	3b2e      	.short	0x3b2e
 800f308:	5839      	.short	0x5839
 800f30a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f30e:	441d      	add	r5, r3
 800f310:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f314:	2b20      	cmp	r3, #32
 800f316:	bfc1      	itttt	gt
 800f318:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f31c:	fa08 f803 	lslgt.w	r8, r8, r3
 800f320:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f324:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f328:	bfd6      	itet	le
 800f32a:	f1c3 0320 	rsble	r3, r3, #32
 800f32e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f332:	fa06 f003 	lslle.w	r0, r6, r3
 800f336:	f7f1 f8ed 	bl	8000514 <__aeabi_ui2d>
 800f33a:	2201      	movs	r2, #1
 800f33c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f340:	3d01      	subs	r5, #1
 800f342:	920e      	str	r2, [sp, #56]	; 0x38
 800f344:	e76f      	b.n	800f226 <_dtoa_r+0x126>
 800f346:	2301      	movs	r3, #1
 800f348:	e7b3      	b.n	800f2b2 <_dtoa_r+0x1b2>
 800f34a:	900c      	str	r0, [sp, #48]	; 0x30
 800f34c:	e7b2      	b.n	800f2b4 <_dtoa_r+0x1b4>
 800f34e:	9b05      	ldr	r3, [sp, #20]
 800f350:	eba3 030b 	sub.w	r3, r3, fp
 800f354:	9305      	str	r3, [sp, #20]
 800f356:	f1cb 0300 	rsb	r3, fp, #0
 800f35a:	9308      	str	r3, [sp, #32]
 800f35c:	2300      	movs	r3, #0
 800f35e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f360:	e7bf      	b.n	800f2e2 <_dtoa_r+0x1e2>
 800f362:	2300      	movs	r3, #0
 800f364:	9309      	str	r3, [sp, #36]	; 0x24
 800f366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f368:	2b00      	cmp	r3, #0
 800f36a:	dc52      	bgt.n	800f412 <_dtoa_r+0x312>
 800f36c:	2301      	movs	r3, #1
 800f36e:	9301      	str	r3, [sp, #4]
 800f370:	9304      	str	r3, [sp, #16]
 800f372:	461a      	mov	r2, r3
 800f374:	920a      	str	r2, [sp, #40]	; 0x28
 800f376:	e00b      	b.n	800f390 <_dtoa_r+0x290>
 800f378:	2301      	movs	r3, #1
 800f37a:	e7f3      	b.n	800f364 <_dtoa_r+0x264>
 800f37c:	2300      	movs	r3, #0
 800f37e:	9309      	str	r3, [sp, #36]	; 0x24
 800f380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f382:	445b      	add	r3, fp
 800f384:	9301      	str	r3, [sp, #4]
 800f386:	3301      	adds	r3, #1
 800f388:	2b01      	cmp	r3, #1
 800f38a:	9304      	str	r3, [sp, #16]
 800f38c:	bfb8      	it	lt
 800f38e:	2301      	movlt	r3, #1
 800f390:	69e0      	ldr	r0, [r4, #28]
 800f392:	2100      	movs	r1, #0
 800f394:	2204      	movs	r2, #4
 800f396:	f102 0614 	add.w	r6, r2, #20
 800f39a:	429e      	cmp	r6, r3
 800f39c:	d93d      	bls.n	800f41a <_dtoa_r+0x31a>
 800f39e:	6041      	str	r1, [r0, #4]
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f000 fd9f 	bl	800fee4 <_Balloc>
 800f3a6:	9000      	str	r0, [sp, #0]
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	d139      	bne.n	800f420 <_dtoa_r+0x320>
 800f3ac:	4b16      	ldr	r3, [pc, #88]	; (800f408 <_dtoa_r+0x308>)
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	f240 11af 	movw	r1, #431	; 0x1af
 800f3b4:	e6bd      	b.n	800f132 <_dtoa_r+0x32>
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e7e1      	b.n	800f37e <_dtoa_r+0x27e>
 800f3ba:	2501      	movs	r5, #1
 800f3bc:	2300      	movs	r3, #0
 800f3be:	9307      	str	r3, [sp, #28]
 800f3c0:	9509      	str	r5, [sp, #36]	; 0x24
 800f3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3c6:	9301      	str	r3, [sp, #4]
 800f3c8:	9304      	str	r3, [sp, #16]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	2312      	movs	r3, #18
 800f3ce:	e7d1      	b.n	800f374 <_dtoa_r+0x274>
 800f3d0:	636f4361 	.word	0x636f4361
 800f3d4:	3fd287a7 	.word	0x3fd287a7
 800f3d8:	8b60c8b3 	.word	0x8b60c8b3
 800f3dc:	3fc68a28 	.word	0x3fc68a28
 800f3e0:	509f79fb 	.word	0x509f79fb
 800f3e4:	3fd34413 	.word	0x3fd34413
 800f3e8:	08010f55 	.word	0x08010f55
 800f3ec:	08010f6c 	.word	0x08010f6c
 800f3f0:	7ff00000 	.word	0x7ff00000
 800f3f4:	08010f51 	.word	0x08010f51
 800f3f8:	08010f48 	.word	0x08010f48
 800f3fc:	08010f25 	.word	0x08010f25
 800f400:	3ff80000 	.word	0x3ff80000
 800f404:	08011058 	.word	0x08011058
 800f408:	08010fc4 	.word	0x08010fc4
 800f40c:	2301      	movs	r3, #1
 800f40e:	9309      	str	r3, [sp, #36]	; 0x24
 800f410:	e7d7      	b.n	800f3c2 <_dtoa_r+0x2c2>
 800f412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f414:	9301      	str	r3, [sp, #4]
 800f416:	9304      	str	r3, [sp, #16]
 800f418:	e7ba      	b.n	800f390 <_dtoa_r+0x290>
 800f41a:	3101      	adds	r1, #1
 800f41c:	0052      	lsls	r2, r2, #1
 800f41e:	e7ba      	b.n	800f396 <_dtoa_r+0x296>
 800f420:	69e3      	ldr	r3, [r4, #28]
 800f422:	9a00      	ldr	r2, [sp, #0]
 800f424:	601a      	str	r2, [r3, #0]
 800f426:	9b04      	ldr	r3, [sp, #16]
 800f428:	2b0e      	cmp	r3, #14
 800f42a:	f200 80a8 	bhi.w	800f57e <_dtoa_r+0x47e>
 800f42e:	2d00      	cmp	r5, #0
 800f430:	f000 80a5 	beq.w	800f57e <_dtoa_r+0x47e>
 800f434:	f1bb 0f00 	cmp.w	fp, #0
 800f438:	dd38      	ble.n	800f4ac <_dtoa_r+0x3ac>
 800f43a:	4bc0      	ldr	r3, [pc, #768]	; (800f73c <_dtoa_r+0x63c>)
 800f43c:	f00b 020f 	and.w	r2, fp, #15
 800f440:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f444:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f448:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f44c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f450:	d019      	beq.n	800f486 <_dtoa_r+0x386>
 800f452:	4bbb      	ldr	r3, [pc, #748]	; (800f740 <_dtoa_r+0x640>)
 800f454:	ec51 0b18 	vmov	r0, r1, d8
 800f458:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f45c:	f7f1 f9fe 	bl	800085c <__aeabi_ddiv>
 800f460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f464:	f008 080f 	and.w	r8, r8, #15
 800f468:	2503      	movs	r5, #3
 800f46a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f740 <_dtoa_r+0x640>
 800f46e:	f1b8 0f00 	cmp.w	r8, #0
 800f472:	d10a      	bne.n	800f48a <_dtoa_r+0x38a>
 800f474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f478:	4632      	mov	r2, r6
 800f47a:	463b      	mov	r3, r7
 800f47c:	f7f1 f9ee 	bl	800085c <__aeabi_ddiv>
 800f480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f484:	e02b      	b.n	800f4de <_dtoa_r+0x3de>
 800f486:	2502      	movs	r5, #2
 800f488:	e7ef      	b.n	800f46a <_dtoa_r+0x36a>
 800f48a:	f018 0f01 	tst.w	r8, #1
 800f48e:	d008      	beq.n	800f4a2 <_dtoa_r+0x3a2>
 800f490:	4630      	mov	r0, r6
 800f492:	4639      	mov	r1, r7
 800f494:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f498:	f7f1 f8b6 	bl	8000608 <__aeabi_dmul>
 800f49c:	3501      	adds	r5, #1
 800f49e:	4606      	mov	r6, r0
 800f4a0:	460f      	mov	r7, r1
 800f4a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f4a6:	f109 0908 	add.w	r9, r9, #8
 800f4aa:	e7e0      	b.n	800f46e <_dtoa_r+0x36e>
 800f4ac:	f000 809f 	beq.w	800f5ee <_dtoa_r+0x4ee>
 800f4b0:	f1cb 0600 	rsb	r6, fp, #0
 800f4b4:	4ba1      	ldr	r3, [pc, #644]	; (800f73c <_dtoa_r+0x63c>)
 800f4b6:	4fa2      	ldr	r7, [pc, #648]	; (800f740 <_dtoa_r+0x640>)
 800f4b8:	f006 020f 	and.w	r2, r6, #15
 800f4bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c4:	ec51 0b18 	vmov	r0, r1, d8
 800f4c8:	f7f1 f89e 	bl	8000608 <__aeabi_dmul>
 800f4cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4d0:	1136      	asrs	r6, r6, #4
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	2502      	movs	r5, #2
 800f4d6:	2e00      	cmp	r6, #0
 800f4d8:	d17e      	bne.n	800f5d8 <_dtoa_r+0x4d8>
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d1d0      	bne.n	800f480 <_dtoa_r+0x380>
 800f4de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f000 8084 	beq.w	800f5f2 <_dtoa_r+0x4f2>
 800f4ea:	4b96      	ldr	r3, [pc, #600]	; (800f744 <_dtoa_r+0x644>)
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	4640      	mov	r0, r8
 800f4f0:	4649      	mov	r1, r9
 800f4f2:	f7f1 fafb 	bl	8000aec <__aeabi_dcmplt>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d07b      	beq.n	800f5f2 <_dtoa_r+0x4f2>
 800f4fa:	9b04      	ldr	r3, [sp, #16]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d078      	beq.n	800f5f2 <_dtoa_r+0x4f2>
 800f500:	9b01      	ldr	r3, [sp, #4]
 800f502:	2b00      	cmp	r3, #0
 800f504:	dd39      	ble.n	800f57a <_dtoa_r+0x47a>
 800f506:	4b90      	ldr	r3, [pc, #576]	; (800f748 <_dtoa_r+0x648>)
 800f508:	2200      	movs	r2, #0
 800f50a:	4640      	mov	r0, r8
 800f50c:	4649      	mov	r1, r9
 800f50e:	f7f1 f87b 	bl	8000608 <__aeabi_dmul>
 800f512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f516:	9e01      	ldr	r6, [sp, #4]
 800f518:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f51c:	3501      	adds	r5, #1
 800f51e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f522:	4628      	mov	r0, r5
 800f524:	f7f1 f806 	bl	8000534 <__aeabi_i2d>
 800f528:	4642      	mov	r2, r8
 800f52a:	464b      	mov	r3, r9
 800f52c:	f7f1 f86c 	bl	8000608 <__aeabi_dmul>
 800f530:	4b86      	ldr	r3, [pc, #536]	; (800f74c <_dtoa_r+0x64c>)
 800f532:	2200      	movs	r2, #0
 800f534:	f7f0 feb2 	bl	800029c <__adddf3>
 800f538:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f53c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f540:	9303      	str	r3, [sp, #12]
 800f542:	2e00      	cmp	r6, #0
 800f544:	d158      	bne.n	800f5f8 <_dtoa_r+0x4f8>
 800f546:	4b82      	ldr	r3, [pc, #520]	; (800f750 <_dtoa_r+0x650>)
 800f548:	2200      	movs	r2, #0
 800f54a:	4640      	mov	r0, r8
 800f54c:	4649      	mov	r1, r9
 800f54e:	f7f0 fea3 	bl	8000298 <__aeabi_dsub>
 800f552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f556:	4680      	mov	r8, r0
 800f558:	4689      	mov	r9, r1
 800f55a:	f7f1 fae5 	bl	8000b28 <__aeabi_dcmpgt>
 800f55e:	2800      	cmp	r0, #0
 800f560:	f040 8296 	bne.w	800fa90 <_dtoa_r+0x990>
 800f564:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f568:	4640      	mov	r0, r8
 800f56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f56e:	4649      	mov	r1, r9
 800f570:	f7f1 fabc 	bl	8000aec <__aeabi_dcmplt>
 800f574:	2800      	cmp	r0, #0
 800f576:	f040 8289 	bne.w	800fa8c <_dtoa_r+0x98c>
 800f57a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f57e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f580:	2b00      	cmp	r3, #0
 800f582:	f2c0 814e 	blt.w	800f822 <_dtoa_r+0x722>
 800f586:	f1bb 0f0e 	cmp.w	fp, #14
 800f58a:	f300 814a 	bgt.w	800f822 <_dtoa_r+0x722>
 800f58e:	4b6b      	ldr	r3, [pc, #428]	; (800f73c <_dtoa_r+0x63c>)
 800f590:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f594:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f280 80dc 	bge.w	800f758 <_dtoa_r+0x658>
 800f5a0:	9b04      	ldr	r3, [sp, #16]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f300 80d8 	bgt.w	800f758 <_dtoa_r+0x658>
 800f5a8:	f040 826f 	bne.w	800fa8a <_dtoa_r+0x98a>
 800f5ac:	4b68      	ldr	r3, [pc, #416]	; (800f750 <_dtoa_r+0x650>)
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	4640      	mov	r0, r8
 800f5b2:	4649      	mov	r1, r9
 800f5b4:	f7f1 f828 	bl	8000608 <__aeabi_dmul>
 800f5b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5bc:	f7f1 faaa 	bl	8000b14 <__aeabi_dcmpge>
 800f5c0:	9e04      	ldr	r6, [sp, #16]
 800f5c2:	4637      	mov	r7, r6
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	f040 8245 	bne.w	800fa54 <_dtoa_r+0x954>
 800f5ca:	9d00      	ldr	r5, [sp, #0]
 800f5cc:	2331      	movs	r3, #49	; 0x31
 800f5ce:	f805 3b01 	strb.w	r3, [r5], #1
 800f5d2:	f10b 0b01 	add.w	fp, fp, #1
 800f5d6:	e241      	b.n	800fa5c <_dtoa_r+0x95c>
 800f5d8:	07f2      	lsls	r2, r6, #31
 800f5da:	d505      	bpl.n	800f5e8 <_dtoa_r+0x4e8>
 800f5dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5e0:	f7f1 f812 	bl	8000608 <__aeabi_dmul>
 800f5e4:	3501      	adds	r5, #1
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	1076      	asrs	r6, r6, #1
 800f5ea:	3708      	adds	r7, #8
 800f5ec:	e773      	b.n	800f4d6 <_dtoa_r+0x3d6>
 800f5ee:	2502      	movs	r5, #2
 800f5f0:	e775      	b.n	800f4de <_dtoa_r+0x3de>
 800f5f2:	9e04      	ldr	r6, [sp, #16]
 800f5f4:	465f      	mov	r7, fp
 800f5f6:	e792      	b.n	800f51e <_dtoa_r+0x41e>
 800f5f8:	9900      	ldr	r1, [sp, #0]
 800f5fa:	4b50      	ldr	r3, [pc, #320]	; (800f73c <_dtoa_r+0x63c>)
 800f5fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f600:	4431      	add	r1, r6
 800f602:	9102      	str	r1, [sp, #8]
 800f604:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f606:	eeb0 9a47 	vmov.f32	s18, s14
 800f60a:	eef0 9a67 	vmov.f32	s19, s15
 800f60e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f612:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f616:	2900      	cmp	r1, #0
 800f618:	d044      	beq.n	800f6a4 <_dtoa_r+0x5a4>
 800f61a:	494e      	ldr	r1, [pc, #312]	; (800f754 <_dtoa_r+0x654>)
 800f61c:	2000      	movs	r0, #0
 800f61e:	f7f1 f91d 	bl	800085c <__aeabi_ddiv>
 800f622:	ec53 2b19 	vmov	r2, r3, d9
 800f626:	f7f0 fe37 	bl	8000298 <__aeabi_dsub>
 800f62a:	9d00      	ldr	r5, [sp, #0]
 800f62c:	ec41 0b19 	vmov	d9, r0, r1
 800f630:	4649      	mov	r1, r9
 800f632:	4640      	mov	r0, r8
 800f634:	f7f1 fa98 	bl	8000b68 <__aeabi_d2iz>
 800f638:	4606      	mov	r6, r0
 800f63a:	f7f0 ff7b 	bl	8000534 <__aeabi_i2d>
 800f63e:	4602      	mov	r2, r0
 800f640:	460b      	mov	r3, r1
 800f642:	4640      	mov	r0, r8
 800f644:	4649      	mov	r1, r9
 800f646:	f7f0 fe27 	bl	8000298 <__aeabi_dsub>
 800f64a:	3630      	adds	r6, #48	; 0x30
 800f64c:	f805 6b01 	strb.w	r6, [r5], #1
 800f650:	ec53 2b19 	vmov	r2, r3, d9
 800f654:	4680      	mov	r8, r0
 800f656:	4689      	mov	r9, r1
 800f658:	f7f1 fa48 	bl	8000aec <__aeabi_dcmplt>
 800f65c:	2800      	cmp	r0, #0
 800f65e:	d164      	bne.n	800f72a <_dtoa_r+0x62a>
 800f660:	4642      	mov	r2, r8
 800f662:	464b      	mov	r3, r9
 800f664:	4937      	ldr	r1, [pc, #220]	; (800f744 <_dtoa_r+0x644>)
 800f666:	2000      	movs	r0, #0
 800f668:	f7f0 fe16 	bl	8000298 <__aeabi_dsub>
 800f66c:	ec53 2b19 	vmov	r2, r3, d9
 800f670:	f7f1 fa3c 	bl	8000aec <__aeabi_dcmplt>
 800f674:	2800      	cmp	r0, #0
 800f676:	f040 80b6 	bne.w	800f7e6 <_dtoa_r+0x6e6>
 800f67a:	9b02      	ldr	r3, [sp, #8]
 800f67c:	429d      	cmp	r5, r3
 800f67e:	f43f af7c 	beq.w	800f57a <_dtoa_r+0x47a>
 800f682:	4b31      	ldr	r3, [pc, #196]	; (800f748 <_dtoa_r+0x648>)
 800f684:	ec51 0b19 	vmov	r0, r1, d9
 800f688:	2200      	movs	r2, #0
 800f68a:	f7f0 ffbd 	bl	8000608 <__aeabi_dmul>
 800f68e:	4b2e      	ldr	r3, [pc, #184]	; (800f748 <_dtoa_r+0x648>)
 800f690:	ec41 0b19 	vmov	d9, r0, r1
 800f694:	2200      	movs	r2, #0
 800f696:	4640      	mov	r0, r8
 800f698:	4649      	mov	r1, r9
 800f69a:	f7f0 ffb5 	bl	8000608 <__aeabi_dmul>
 800f69e:	4680      	mov	r8, r0
 800f6a0:	4689      	mov	r9, r1
 800f6a2:	e7c5      	b.n	800f630 <_dtoa_r+0x530>
 800f6a4:	ec51 0b17 	vmov	r0, r1, d7
 800f6a8:	f7f0 ffae 	bl	8000608 <__aeabi_dmul>
 800f6ac:	9b02      	ldr	r3, [sp, #8]
 800f6ae:	9d00      	ldr	r5, [sp, #0]
 800f6b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6b2:	ec41 0b19 	vmov	d9, r0, r1
 800f6b6:	4649      	mov	r1, r9
 800f6b8:	4640      	mov	r0, r8
 800f6ba:	f7f1 fa55 	bl	8000b68 <__aeabi_d2iz>
 800f6be:	4606      	mov	r6, r0
 800f6c0:	f7f0 ff38 	bl	8000534 <__aeabi_i2d>
 800f6c4:	3630      	adds	r6, #48	; 0x30
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	4640      	mov	r0, r8
 800f6cc:	4649      	mov	r1, r9
 800f6ce:	f7f0 fde3 	bl	8000298 <__aeabi_dsub>
 800f6d2:	f805 6b01 	strb.w	r6, [r5], #1
 800f6d6:	9b02      	ldr	r3, [sp, #8]
 800f6d8:	429d      	cmp	r5, r3
 800f6da:	4680      	mov	r8, r0
 800f6dc:	4689      	mov	r9, r1
 800f6de:	f04f 0200 	mov.w	r2, #0
 800f6e2:	d124      	bne.n	800f72e <_dtoa_r+0x62e>
 800f6e4:	4b1b      	ldr	r3, [pc, #108]	; (800f754 <_dtoa_r+0x654>)
 800f6e6:	ec51 0b19 	vmov	r0, r1, d9
 800f6ea:	f7f0 fdd7 	bl	800029c <__adddf3>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	4640      	mov	r0, r8
 800f6f4:	4649      	mov	r1, r9
 800f6f6:	f7f1 fa17 	bl	8000b28 <__aeabi_dcmpgt>
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	d173      	bne.n	800f7e6 <_dtoa_r+0x6e6>
 800f6fe:	ec53 2b19 	vmov	r2, r3, d9
 800f702:	4914      	ldr	r1, [pc, #80]	; (800f754 <_dtoa_r+0x654>)
 800f704:	2000      	movs	r0, #0
 800f706:	f7f0 fdc7 	bl	8000298 <__aeabi_dsub>
 800f70a:	4602      	mov	r2, r0
 800f70c:	460b      	mov	r3, r1
 800f70e:	4640      	mov	r0, r8
 800f710:	4649      	mov	r1, r9
 800f712:	f7f1 f9eb 	bl	8000aec <__aeabi_dcmplt>
 800f716:	2800      	cmp	r0, #0
 800f718:	f43f af2f 	beq.w	800f57a <_dtoa_r+0x47a>
 800f71c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f71e:	1e6b      	subs	r3, r5, #1
 800f720:	930f      	str	r3, [sp, #60]	; 0x3c
 800f722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f726:	2b30      	cmp	r3, #48	; 0x30
 800f728:	d0f8      	beq.n	800f71c <_dtoa_r+0x61c>
 800f72a:	46bb      	mov	fp, r7
 800f72c:	e04a      	b.n	800f7c4 <_dtoa_r+0x6c4>
 800f72e:	4b06      	ldr	r3, [pc, #24]	; (800f748 <_dtoa_r+0x648>)
 800f730:	f7f0 ff6a 	bl	8000608 <__aeabi_dmul>
 800f734:	4680      	mov	r8, r0
 800f736:	4689      	mov	r9, r1
 800f738:	e7bd      	b.n	800f6b6 <_dtoa_r+0x5b6>
 800f73a:	bf00      	nop
 800f73c:	08011058 	.word	0x08011058
 800f740:	08011030 	.word	0x08011030
 800f744:	3ff00000 	.word	0x3ff00000
 800f748:	40240000 	.word	0x40240000
 800f74c:	401c0000 	.word	0x401c0000
 800f750:	40140000 	.word	0x40140000
 800f754:	3fe00000 	.word	0x3fe00000
 800f758:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f75c:	9d00      	ldr	r5, [sp, #0]
 800f75e:	4642      	mov	r2, r8
 800f760:	464b      	mov	r3, r9
 800f762:	4630      	mov	r0, r6
 800f764:	4639      	mov	r1, r7
 800f766:	f7f1 f879 	bl	800085c <__aeabi_ddiv>
 800f76a:	f7f1 f9fd 	bl	8000b68 <__aeabi_d2iz>
 800f76e:	9001      	str	r0, [sp, #4]
 800f770:	f7f0 fee0 	bl	8000534 <__aeabi_i2d>
 800f774:	4642      	mov	r2, r8
 800f776:	464b      	mov	r3, r9
 800f778:	f7f0 ff46 	bl	8000608 <__aeabi_dmul>
 800f77c:	4602      	mov	r2, r0
 800f77e:	460b      	mov	r3, r1
 800f780:	4630      	mov	r0, r6
 800f782:	4639      	mov	r1, r7
 800f784:	f7f0 fd88 	bl	8000298 <__aeabi_dsub>
 800f788:	9e01      	ldr	r6, [sp, #4]
 800f78a:	9f04      	ldr	r7, [sp, #16]
 800f78c:	3630      	adds	r6, #48	; 0x30
 800f78e:	f805 6b01 	strb.w	r6, [r5], #1
 800f792:	9e00      	ldr	r6, [sp, #0]
 800f794:	1bae      	subs	r6, r5, r6
 800f796:	42b7      	cmp	r7, r6
 800f798:	4602      	mov	r2, r0
 800f79a:	460b      	mov	r3, r1
 800f79c:	d134      	bne.n	800f808 <_dtoa_r+0x708>
 800f79e:	f7f0 fd7d 	bl	800029c <__adddf3>
 800f7a2:	4642      	mov	r2, r8
 800f7a4:	464b      	mov	r3, r9
 800f7a6:	4606      	mov	r6, r0
 800f7a8:	460f      	mov	r7, r1
 800f7aa:	f7f1 f9bd 	bl	8000b28 <__aeabi_dcmpgt>
 800f7ae:	b9c8      	cbnz	r0, 800f7e4 <_dtoa_r+0x6e4>
 800f7b0:	4642      	mov	r2, r8
 800f7b2:	464b      	mov	r3, r9
 800f7b4:	4630      	mov	r0, r6
 800f7b6:	4639      	mov	r1, r7
 800f7b8:	f7f1 f98e 	bl	8000ad8 <__aeabi_dcmpeq>
 800f7bc:	b110      	cbz	r0, 800f7c4 <_dtoa_r+0x6c4>
 800f7be:	9b01      	ldr	r3, [sp, #4]
 800f7c0:	07db      	lsls	r3, r3, #31
 800f7c2:	d40f      	bmi.n	800f7e4 <_dtoa_r+0x6e4>
 800f7c4:	4651      	mov	r1, sl
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	f000 fbcc 	bl	800ff64 <_Bfree>
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7d0:	702b      	strb	r3, [r5, #0]
 800f7d2:	f10b 0301 	add.w	r3, fp, #1
 800f7d6:	6013      	str	r3, [r2, #0]
 800f7d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	f43f ace2 	beq.w	800f1a4 <_dtoa_r+0xa4>
 800f7e0:	601d      	str	r5, [r3, #0]
 800f7e2:	e4df      	b.n	800f1a4 <_dtoa_r+0xa4>
 800f7e4:	465f      	mov	r7, fp
 800f7e6:	462b      	mov	r3, r5
 800f7e8:	461d      	mov	r5, r3
 800f7ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7ee:	2a39      	cmp	r2, #57	; 0x39
 800f7f0:	d106      	bne.n	800f800 <_dtoa_r+0x700>
 800f7f2:	9a00      	ldr	r2, [sp, #0]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d1f7      	bne.n	800f7e8 <_dtoa_r+0x6e8>
 800f7f8:	9900      	ldr	r1, [sp, #0]
 800f7fa:	2230      	movs	r2, #48	; 0x30
 800f7fc:	3701      	adds	r7, #1
 800f7fe:	700a      	strb	r2, [r1, #0]
 800f800:	781a      	ldrb	r2, [r3, #0]
 800f802:	3201      	adds	r2, #1
 800f804:	701a      	strb	r2, [r3, #0]
 800f806:	e790      	b.n	800f72a <_dtoa_r+0x62a>
 800f808:	4ba3      	ldr	r3, [pc, #652]	; (800fa98 <_dtoa_r+0x998>)
 800f80a:	2200      	movs	r2, #0
 800f80c:	f7f0 fefc 	bl	8000608 <__aeabi_dmul>
 800f810:	2200      	movs	r2, #0
 800f812:	2300      	movs	r3, #0
 800f814:	4606      	mov	r6, r0
 800f816:	460f      	mov	r7, r1
 800f818:	f7f1 f95e 	bl	8000ad8 <__aeabi_dcmpeq>
 800f81c:	2800      	cmp	r0, #0
 800f81e:	d09e      	beq.n	800f75e <_dtoa_r+0x65e>
 800f820:	e7d0      	b.n	800f7c4 <_dtoa_r+0x6c4>
 800f822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f824:	2a00      	cmp	r2, #0
 800f826:	f000 80ca 	beq.w	800f9be <_dtoa_r+0x8be>
 800f82a:	9a07      	ldr	r2, [sp, #28]
 800f82c:	2a01      	cmp	r2, #1
 800f82e:	f300 80ad 	bgt.w	800f98c <_dtoa_r+0x88c>
 800f832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f834:	2a00      	cmp	r2, #0
 800f836:	f000 80a5 	beq.w	800f984 <_dtoa_r+0x884>
 800f83a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f83e:	9e08      	ldr	r6, [sp, #32]
 800f840:	9d05      	ldr	r5, [sp, #20]
 800f842:	9a05      	ldr	r2, [sp, #20]
 800f844:	441a      	add	r2, r3
 800f846:	9205      	str	r2, [sp, #20]
 800f848:	9a06      	ldr	r2, [sp, #24]
 800f84a:	2101      	movs	r1, #1
 800f84c:	441a      	add	r2, r3
 800f84e:	4620      	mov	r0, r4
 800f850:	9206      	str	r2, [sp, #24]
 800f852:	f000 fc3d 	bl	80100d0 <__i2b>
 800f856:	4607      	mov	r7, r0
 800f858:	b165      	cbz	r5, 800f874 <_dtoa_r+0x774>
 800f85a:	9b06      	ldr	r3, [sp, #24]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	dd09      	ble.n	800f874 <_dtoa_r+0x774>
 800f860:	42ab      	cmp	r3, r5
 800f862:	9a05      	ldr	r2, [sp, #20]
 800f864:	bfa8      	it	ge
 800f866:	462b      	movge	r3, r5
 800f868:	1ad2      	subs	r2, r2, r3
 800f86a:	9205      	str	r2, [sp, #20]
 800f86c:	9a06      	ldr	r2, [sp, #24]
 800f86e:	1aed      	subs	r5, r5, r3
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	9306      	str	r3, [sp, #24]
 800f874:	9b08      	ldr	r3, [sp, #32]
 800f876:	b1f3      	cbz	r3, 800f8b6 <_dtoa_r+0x7b6>
 800f878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	f000 80a3 	beq.w	800f9c6 <_dtoa_r+0x8c6>
 800f880:	2e00      	cmp	r6, #0
 800f882:	dd10      	ble.n	800f8a6 <_dtoa_r+0x7a6>
 800f884:	4639      	mov	r1, r7
 800f886:	4632      	mov	r2, r6
 800f888:	4620      	mov	r0, r4
 800f88a:	f000 fce1 	bl	8010250 <__pow5mult>
 800f88e:	4652      	mov	r2, sl
 800f890:	4601      	mov	r1, r0
 800f892:	4607      	mov	r7, r0
 800f894:	4620      	mov	r0, r4
 800f896:	f000 fc31 	bl	80100fc <__multiply>
 800f89a:	4651      	mov	r1, sl
 800f89c:	4680      	mov	r8, r0
 800f89e:	4620      	mov	r0, r4
 800f8a0:	f000 fb60 	bl	800ff64 <_Bfree>
 800f8a4:	46c2      	mov	sl, r8
 800f8a6:	9b08      	ldr	r3, [sp, #32]
 800f8a8:	1b9a      	subs	r2, r3, r6
 800f8aa:	d004      	beq.n	800f8b6 <_dtoa_r+0x7b6>
 800f8ac:	4651      	mov	r1, sl
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	f000 fcce 	bl	8010250 <__pow5mult>
 800f8b4:	4682      	mov	sl, r0
 800f8b6:	2101      	movs	r1, #1
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	f000 fc09 	bl	80100d0 <__i2b>
 800f8be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	4606      	mov	r6, r0
 800f8c4:	f340 8081 	ble.w	800f9ca <_dtoa_r+0x8ca>
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	4601      	mov	r1, r0
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	f000 fcbf 	bl	8010250 <__pow5mult>
 800f8d2:	9b07      	ldr	r3, [sp, #28]
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	dd7a      	ble.n	800f9d0 <_dtoa_r+0x8d0>
 800f8da:	f04f 0800 	mov.w	r8, #0
 800f8de:	6933      	ldr	r3, [r6, #16]
 800f8e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f8e4:	6918      	ldr	r0, [r3, #16]
 800f8e6:	f000 fba5 	bl	8010034 <__hi0bits>
 800f8ea:	f1c0 0020 	rsb	r0, r0, #32
 800f8ee:	9b06      	ldr	r3, [sp, #24]
 800f8f0:	4418      	add	r0, r3
 800f8f2:	f010 001f 	ands.w	r0, r0, #31
 800f8f6:	f000 8094 	beq.w	800fa22 <_dtoa_r+0x922>
 800f8fa:	f1c0 0320 	rsb	r3, r0, #32
 800f8fe:	2b04      	cmp	r3, #4
 800f900:	f340 8085 	ble.w	800fa0e <_dtoa_r+0x90e>
 800f904:	9b05      	ldr	r3, [sp, #20]
 800f906:	f1c0 001c 	rsb	r0, r0, #28
 800f90a:	4403      	add	r3, r0
 800f90c:	9305      	str	r3, [sp, #20]
 800f90e:	9b06      	ldr	r3, [sp, #24]
 800f910:	4403      	add	r3, r0
 800f912:	4405      	add	r5, r0
 800f914:	9306      	str	r3, [sp, #24]
 800f916:	9b05      	ldr	r3, [sp, #20]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	dd05      	ble.n	800f928 <_dtoa_r+0x828>
 800f91c:	4651      	mov	r1, sl
 800f91e:	461a      	mov	r2, r3
 800f920:	4620      	mov	r0, r4
 800f922:	f000 fcef 	bl	8010304 <__lshift>
 800f926:	4682      	mov	sl, r0
 800f928:	9b06      	ldr	r3, [sp, #24]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	dd05      	ble.n	800f93a <_dtoa_r+0x83a>
 800f92e:	4631      	mov	r1, r6
 800f930:	461a      	mov	r2, r3
 800f932:	4620      	mov	r0, r4
 800f934:	f000 fce6 	bl	8010304 <__lshift>
 800f938:	4606      	mov	r6, r0
 800f93a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d072      	beq.n	800fa26 <_dtoa_r+0x926>
 800f940:	4631      	mov	r1, r6
 800f942:	4650      	mov	r0, sl
 800f944:	f000 fd4a 	bl	80103dc <__mcmp>
 800f948:	2800      	cmp	r0, #0
 800f94a:	da6c      	bge.n	800fa26 <_dtoa_r+0x926>
 800f94c:	2300      	movs	r3, #0
 800f94e:	4651      	mov	r1, sl
 800f950:	220a      	movs	r2, #10
 800f952:	4620      	mov	r0, r4
 800f954:	f000 fb28 	bl	800ffa8 <__multadd>
 800f958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f95a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f95e:	4682      	mov	sl, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	f000 81b0 	beq.w	800fcc6 <_dtoa_r+0xbc6>
 800f966:	2300      	movs	r3, #0
 800f968:	4639      	mov	r1, r7
 800f96a:	220a      	movs	r2, #10
 800f96c:	4620      	mov	r0, r4
 800f96e:	f000 fb1b 	bl	800ffa8 <__multadd>
 800f972:	9b01      	ldr	r3, [sp, #4]
 800f974:	2b00      	cmp	r3, #0
 800f976:	4607      	mov	r7, r0
 800f978:	f300 8096 	bgt.w	800faa8 <_dtoa_r+0x9a8>
 800f97c:	9b07      	ldr	r3, [sp, #28]
 800f97e:	2b02      	cmp	r3, #2
 800f980:	dc59      	bgt.n	800fa36 <_dtoa_r+0x936>
 800f982:	e091      	b.n	800faa8 <_dtoa_r+0x9a8>
 800f984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f98a:	e758      	b.n	800f83e <_dtoa_r+0x73e>
 800f98c:	9b04      	ldr	r3, [sp, #16]
 800f98e:	1e5e      	subs	r6, r3, #1
 800f990:	9b08      	ldr	r3, [sp, #32]
 800f992:	42b3      	cmp	r3, r6
 800f994:	bfbf      	itttt	lt
 800f996:	9b08      	ldrlt	r3, [sp, #32]
 800f998:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f99a:	9608      	strlt	r6, [sp, #32]
 800f99c:	1af3      	sublt	r3, r6, r3
 800f99e:	bfb4      	ite	lt
 800f9a0:	18d2      	addlt	r2, r2, r3
 800f9a2:	1b9e      	subge	r6, r3, r6
 800f9a4:	9b04      	ldr	r3, [sp, #16]
 800f9a6:	bfbc      	itt	lt
 800f9a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f9aa:	2600      	movlt	r6, #0
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	bfb7      	itett	lt
 800f9b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f9b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f9b8:	1a9d      	sublt	r5, r3, r2
 800f9ba:	2300      	movlt	r3, #0
 800f9bc:	e741      	b.n	800f842 <_dtoa_r+0x742>
 800f9be:	9e08      	ldr	r6, [sp, #32]
 800f9c0:	9d05      	ldr	r5, [sp, #20]
 800f9c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f9c4:	e748      	b.n	800f858 <_dtoa_r+0x758>
 800f9c6:	9a08      	ldr	r2, [sp, #32]
 800f9c8:	e770      	b.n	800f8ac <_dtoa_r+0x7ac>
 800f9ca:	9b07      	ldr	r3, [sp, #28]
 800f9cc:	2b01      	cmp	r3, #1
 800f9ce:	dc19      	bgt.n	800fa04 <_dtoa_r+0x904>
 800f9d0:	9b02      	ldr	r3, [sp, #8]
 800f9d2:	b9bb      	cbnz	r3, 800fa04 <_dtoa_r+0x904>
 800f9d4:	9b03      	ldr	r3, [sp, #12]
 800f9d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9da:	b99b      	cbnz	r3, 800fa04 <_dtoa_r+0x904>
 800f9dc:	9b03      	ldr	r3, [sp, #12]
 800f9de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9e2:	0d1b      	lsrs	r3, r3, #20
 800f9e4:	051b      	lsls	r3, r3, #20
 800f9e6:	b183      	cbz	r3, 800fa0a <_dtoa_r+0x90a>
 800f9e8:	9b05      	ldr	r3, [sp, #20]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	9305      	str	r3, [sp, #20]
 800f9ee:	9b06      	ldr	r3, [sp, #24]
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	9306      	str	r3, [sp, #24]
 800f9f4:	f04f 0801 	mov.w	r8, #1
 800f9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	f47f af6f 	bne.w	800f8de <_dtoa_r+0x7de>
 800fa00:	2001      	movs	r0, #1
 800fa02:	e774      	b.n	800f8ee <_dtoa_r+0x7ee>
 800fa04:	f04f 0800 	mov.w	r8, #0
 800fa08:	e7f6      	b.n	800f9f8 <_dtoa_r+0x8f8>
 800fa0a:	4698      	mov	r8, r3
 800fa0c:	e7f4      	b.n	800f9f8 <_dtoa_r+0x8f8>
 800fa0e:	d082      	beq.n	800f916 <_dtoa_r+0x816>
 800fa10:	9a05      	ldr	r2, [sp, #20]
 800fa12:	331c      	adds	r3, #28
 800fa14:	441a      	add	r2, r3
 800fa16:	9205      	str	r2, [sp, #20]
 800fa18:	9a06      	ldr	r2, [sp, #24]
 800fa1a:	441a      	add	r2, r3
 800fa1c:	441d      	add	r5, r3
 800fa1e:	9206      	str	r2, [sp, #24]
 800fa20:	e779      	b.n	800f916 <_dtoa_r+0x816>
 800fa22:	4603      	mov	r3, r0
 800fa24:	e7f4      	b.n	800fa10 <_dtoa_r+0x910>
 800fa26:	9b04      	ldr	r3, [sp, #16]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	dc37      	bgt.n	800fa9c <_dtoa_r+0x99c>
 800fa2c:	9b07      	ldr	r3, [sp, #28]
 800fa2e:	2b02      	cmp	r3, #2
 800fa30:	dd34      	ble.n	800fa9c <_dtoa_r+0x99c>
 800fa32:	9b04      	ldr	r3, [sp, #16]
 800fa34:	9301      	str	r3, [sp, #4]
 800fa36:	9b01      	ldr	r3, [sp, #4]
 800fa38:	b963      	cbnz	r3, 800fa54 <_dtoa_r+0x954>
 800fa3a:	4631      	mov	r1, r6
 800fa3c:	2205      	movs	r2, #5
 800fa3e:	4620      	mov	r0, r4
 800fa40:	f000 fab2 	bl	800ffa8 <__multadd>
 800fa44:	4601      	mov	r1, r0
 800fa46:	4606      	mov	r6, r0
 800fa48:	4650      	mov	r0, sl
 800fa4a:	f000 fcc7 	bl	80103dc <__mcmp>
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	f73f adbb 	bgt.w	800f5ca <_dtoa_r+0x4ca>
 800fa54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa56:	9d00      	ldr	r5, [sp, #0]
 800fa58:	ea6f 0b03 	mvn.w	fp, r3
 800fa5c:	f04f 0800 	mov.w	r8, #0
 800fa60:	4631      	mov	r1, r6
 800fa62:	4620      	mov	r0, r4
 800fa64:	f000 fa7e 	bl	800ff64 <_Bfree>
 800fa68:	2f00      	cmp	r7, #0
 800fa6a:	f43f aeab 	beq.w	800f7c4 <_dtoa_r+0x6c4>
 800fa6e:	f1b8 0f00 	cmp.w	r8, #0
 800fa72:	d005      	beq.n	800fa80 <_dtoa_r+0x980>
 800fa74:	45b8      	cmp	r8, r7
 800fa76:	d003      	beq.n	800fa80 <_dtoa_r+0x980>
 800fa78:	4641      	mov	r1, r8
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f000 fa72 	bl	800ff64 <_Bfree>
 800fa80:	4639      	mov	r1, r7
 800fa82:	4620      	mov	r0, r4
 800fa84:	f000 fa6e 	bl	800ff64 <_Bfree>
 800fa88:	e69c      	b.n	800f7c4 <_dtoa_r+0x6c4>
 800fa8a:	2600      	movs	r6, #0
 800fa8c:	4637      	mov	r7, r6
 800fa8e:	e7e1      	b.n	800fa54 <_dtoa_r+0x954>
 800fa90:	46bb      	mov	fp, r7
 800fa92:	4637      	mov	r7, r6
 800fa94:	e599      	b.n	800f5ca <_dtoa_r+0x4ca>
 800fa96:	bf00      	nop
 800fa98:	40240000 	.word	0x40240000
 800fa9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	f000 80c8 	beq.w	800fc34 <_dtoa_r+0xb34>
 800faa4:	9b04      	ldr	r3, [sp, #16]
 800faa6:	9301      	str	r3, [sp, #4]
 800faa8:	2d00      	cmp	r5, #0
 800faaa:	dd05      	ble.n	800fab8 <_dtoa_r+0x9b8>
 800faac:	4639      	mov	r1, r7
 800faae:	462a      	mov	r2, r5
 800fab0:	4620      	mov	r0, r4
 800fab2:	f000 fc27 	bl	8010304 <__lshift>
 800fab6:	4607      	mov	r7, r0
 800fab8:	f1b8 0f00 	cmp.w	r8, #0
 800fabc:	d05b      	beq.n	800fb76 <_dtoa_r+0xa76>
 800fabe:	6879      	ldr	r1, [r7, #4]
 800fac0:	4620      	mov	r0, r4
 800fac2:	f000 fa0f 	bl	800fee4 <_Balloc>
 800fac6:	4605      	mov	r5, r0
 800fac8:	b928      	cbnz	r0, 800fad6 <_dtoa_r+0x9d6>
 800faca:	4b83      	ldr	r3, [pc, #524]	; (800fcd8 <_dtoa_r+0xbd8>)
 800facc:	4602      	mov	r2, r0
 800face:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fad2:	f7ff bb2e 	b.w	800f132 <_dtoa_r+0x32>
 800fad6:	693a      	ldr	r2, [r7, #16]
 800fad8:	3202      	adds	r2, #2
 800fada:	0092      	lsls	r2, r2, #2
 800fadc:	f107 010c 	add.w	r1, r7, #12
 800fae0:	300c      	adds	r0, #12
 800fae2:	f7ff fa74 	bl	800efce <memcpy>
 800fae6:	2201      	movs	r2, #1
 800fae8:	4629      	mov	r1, r5
 800faea:	4620      	mov	r0, r4
 800faec:	f000 fc0a 	bl	8010304 <__lshift>
 800faf0:	9b00      	ldr	r3, [sp, #0]
 800faf2:	3301      	adds	r3, #1
 800faf4:	9304      	str	r3, [sp, #16]
 800faf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fafa:	4413      	add	r3, r2
 800fafc:	9308      	str	r3, [sp, #32]
 800fafe:	9b02      	ldr	r3, [sp, #8]
 800fb00:	f003 0301 	and.w	r3, r3, #1
 800fb04:	46b8      	mov	r8, r7
 800fb06:	9306      	str	r3, [sp, #24]
 800fb08:	4607      	mov	r7, r0
 800fb0a:	9b04      	ldr	r3, [sp, #16]
 800fb0c:	4631      	mov	r1, r6
 800fb0e:	3b01      	subs	r3, #1
 800fb10:	4650      	mov	r0, sl
 800fb12:	9301      	str	r3, [sp, #4]
 800fb14:	f7ff fa69 	bl	800efea <quorem>
 800fb18:	4641      	mov	r1, r8
 800fb1a:	9002      	str	r0, [sp, #8]
 800fb1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fb20:	4650      	mov	r0, sl
 800fb22:	f000 fc5b 	bl	80103dc <__mcmp>
 800fb26:	463a      	mov	r2, r7
 800fb28:	9005      	str	r0, [sp, #20]
 800fb2a:	4631      	mov	r1, r6
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	f000 fc71 	bl	8010414 <__mdiff>
 800fb32:	68c2      	ldr	r2, [r0, #12]
 800fb34:	4605      	mov	r5, r0
 800fb36:	bb02      	cbnz	r2, 800fb7a <_dtoa_r+0xa7a>
 800fb38:	4601      	mov	r1, r0
 800fb3a:	4650      	mov	r0, sl
 800fb3c:	f000 fc4e 	bl	80103dc <__mcmp>
 800fb40:	4602      	mov	r2, r0
 800fb42:	4629      	mov	r1, r5
 800fb44:	4620      	mov	r0, r4
 800fb46:	9209      	str	r2, [sp, #36]	; 0x24
 800fb48:	f000 fa0c 	bl	800ff64 <_Bfree>
 800fb4c:	9b07      	ldr	r3, [sp, #28]
 800fb4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb50:	9d04      	ldr	r5, [sp, #16]
 800fb52:	ea43 0102 	orr.w	r1, r3, r2
 800fb56:	9b06      	ldr	r3, [sp, #24]
 800fb58:	4319      	orrs	r1, r3
 800fb5a:	d110      	bne.n	800fb7e <_dtoa_r+0xa7e>
 800fb5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb60:	d029      	beq.n	800fbb6 <_dtoa_r+0xab6>
 800fb62:	9b05      	ldr	r3, [sp, #20]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	dd02      	ble.n	800fb6e <_dtoa_r+0xa6e>
 800fb68:	9b02      	ldr	r3, [sp, #8]
 800fb6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fb6e:	9b01      	ldr	r3, [sp, #4]
 800fb70:	f883 9000 	strb.w	r9, [r3]
 800fb74:	e774      	b.n	800fa60 <_dtoa_r+0x960>
 800fb76:	4638      	mov	r0, r7
 800fb78:	e7ba      	b.n	800faf0 <_dtoa_r+0x9f0>
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	e7e1      	b.n	800fb42 <_dtoa_r+0xa42>
 800fb7e:	9b05      	ldr	r3, [sp, #20]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	db04      	blt.n	800fb8e <_dtoa_r+0xa8e>
 800fb84:	9907      	ldr	r1, [sp, #28]
 800fb86:	430b      	orrs	r3, r1
 800fb88:	9906      	ldr	r1, [sp, #24]
 800fb8a:	430b      	orrs	r3, r1
 800fb8c:	d120      	bne.n	800fbd0 <_dtoa_r+0xad0>
 800fb8e:	2a00      	cmp	r2, #0
 800fb90:	dded      	ble.n	800fb6e <_dtoa_r+0xa6e>
 800fb92:	4651      	mov	r1, sl
 800fb94:	2201      	movs	r2, #1
 800fb96:	4620      	mov	r0, r4
 800fb98:	f000 fbb4 	bl	8010304 <__lshift>
 800fb9c:	4631      	mov	r1, r6
 800fb9e:	4682      	mov	sl, r0
 800fba0:	f000 fc1c 	bl	80103dc <__mcmp>
 800fba4:	2800      	cmp	r0, #0
 800fba6:	dc03      	bgt.n	800fbb0 <_dtoa_r+0xab0>
 800fba8:	d1e1      	bne.n	800fb6e <_dtoa_r+0xa6e>
 800fbaa:	f019 0f01 	tst.w	r9, #1
 800fbae:	d0de      	beq.n	800fb6e <_dtoa_r+0xa6e>
 800fbb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fbb4:	d1d8      	bne.n	800fb68 <_dtoa_r+0xa68>
 800fbb6:	9a01      	ldr	r2, [sp, #4]
 800fbb8:	2339      	movs	r3, #57	; 0x39
 800fbba:	7013      	strb	r3, [r2, #0]
 800fbbc:	462b      	mov	r3, r5
 800fbbe:	461d      	mov	r5, r3
 800fbc0:	3b01      	subs	r3, #1
 800fbc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fbc6:	2a39      	cmp	r2, #57	; 0x39
 800fbc8:	d06c      	beq.n	800fca4 <_dtoa_r+0xba4>
 800fbca:	3201      	adds	r2, #1
 800fbcc:	701a      	strb	r2, [r3, #0]
 800fbce:	e747      	b.n	800fa60 <_dtoa_r+0x960>
 800fbd0:	2a00      	cmp	r2, #0
 800fbd2:	dd07      	ble.n	800fbe4 <_dtoa_r+0xae4>
 800fbd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fbd8:	d0ed      	beq.n	800fbb6 <_dtoa_r+0xab6>
 800fbda:	9a01      	ldr	r2, [sp, #4]
 800fbdc:	f109 0301 	add.w	r3, r9, #1
 800fbe0:	7013      	strb	r3, [r2, #0]
 800fbe2:	e73d      	b.n	800fa60 <_dtoa_r+0x960>
 800fbe4:	9b04      	ldr	r3, [sp, #16]
 800fbe6:	9a08      	ldr	r2, [sp, #32]
 800fbe8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d043      	beq.n	800fc78 <_dtoa_r+0xb78>
 800fbf0:	4651      	mov	r1, sl
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	220a      	movs	r2, #10
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f000 f9d6 	bl	800ffa8 <__multadd>
 800fbfc:	45b8      	cmp	r8, r7
 800fbfe:	4682      	mov	sl, r0
 800fc00:	f04f 0300 	mov.w	r3, #0
 800fc04:	f04f 020a 	mov.w	r2, #10
 800fc08:	4641      	mov	r1, r8
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	d107      	bne.n	800fc1e <_dtoa_r+0xb1e>
 800fc0e:	f000 f9cb 	bl	800ffa8 <__multadd>
 800fc12:	4680      	mov	r8, r0
 800fc14:	4607      	mov	r7, r0
 800fc16:	9b04      	ldr	r3, [sp, #16]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	9304      	str	r3, [sp, #16]
 800fc1c:	e775      	b.n	800fb0a <_dtoa_r+0xa0a>
 800fc1e:	f000 f9c3 	bl	800ffa8 <__multadd>
 800fc22:	4639      	mov	r1, r7
 800fc24:	4680      	mov	r8, r0
 800fc26:	2300      	movs	r3, #0
 800fc28:	220a      	movs	r2, #10
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	f000 f9bc 	bl	800ffa8 <__multadd>
 800fc30:	4607      	mov	r7, r0
 800fc32:	e7f0      	b.n	800fc16 <_dtoa_r+0xb16>
 800fc34:	9b04      	ldr	r3, [sp, #16]
 800fc36:	9301      	str	r3, [sp, #4]
 800fc38:	9d00      	ldr	r5, [sp, #0]
 800fc3a:	4631      	mov	r1, r6
 800fc3c:	4650      	mov	r0, sl
 800fc3e:	f7ff f9d4 	bl	800efea <quorem>
 800fc42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fc46:	9b00      	ldr	r3, [sp, #0]
 800fc48:	f805 9b01 	strb.w	r9, [r5], #1
 800fc4c:	1aea      	subs	r2, r5, r3
 800fc4e:	9b01      	ldr	r3, [sp, #4]
 800fc50:	4293      	cmp	r3, r2
 800fc52:	dd07      	ble.n	800fc64 <_dtoa_r+0xb64>
 800fc54:	4651      	mov	r1, sl
 800fc56:	2300      	movs	r3, #0
 800fc58:	220a      	movs	r2, #10
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	f000 f9a4 	bl	800ffa8 <__multadd>
 800fc60:	4682      	mov	sl, r0
 800fc62:	e7ea      	b.n	800fc3a <_dtoa_r+0xb3a>
 800fc64:	9b01      	ldr	r3, [sp, #4]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	bfc8      	it	gt
 800fc6a:	461d      	movgt	r5, r3
 800fc6c:	9b00      	ldr	r3, [sp, #0]
 800fc6e:	bfd8      	it	le
 800fc70:	2501      	movle	r5, #1
 800fc72:	441d      	add	r5, r3
 800fc74:	f04f 0800 	mov.w	r8, #0
 800fc78:	4651      	mov	r1, sl
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	f000 fb41 	bl	8010304 <__lshift>
 800fc82:	4631      	mov	r1, r6
 800fc84:	4682      	mov	sl, r0
 800fc86:	f000 fba9 	bl	80103dc <__mcmp>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	dc96      	bgt.n	800fbbc <_dtoa_r+0xabc>
 800fc8e:	d102      	bne.n	800fc96 <_dtoa_r+0xb96>
 800fc90:	f019 0f01 	tst.w	r9, #1
 800fc94:	d192      	bne.n	800fbbc <_dtoa_r+0xabc>
 800fc96:	462b      	mov	r3, r5
 800fc98:	461d      	mov	r5, r3
 800fc9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc9e:	2a30      	cmp	r2, #48	; 0x30
 800fca0:	d0fa      	beq.n	800fc98 <_dtoa_r+0xb98>
 800fca2:	e6dd      	b.n	800fa60 <_dtoa_r+0x960>
 800fca4:	9a00      	ldr	r2, [sp, #0]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d189      	bne.n	800fbbe <_dtoa_r+0xabe>
 800fcaa:	f10b 0b01 	add.w	fp, fp, #1
 800fcae:	2331      	movs	r3, #49	; 0x31
 800fcb0:	e796      	b.n	800fbe0 <_dtoa_r+0xae0>
 800fcb2:	4b0a      	ldr	r3, [pc, #40]	; (800fcdc <_dtoa_r+0xbdc>)
 800fcb4:	f7ff ba99 	b.w	800f1ea <_dtoa_r+0xea>
 800fcb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	f47f aa6d 	bne.w	800f19a <_dtoa_r+0x9a>
 800fcc0:	4b07      	ldr	r3, [pc, #28]	; (800fce0 <_dtoa_r+0xbe0>)
 800fcc2:	f7ff ba92 	b.w	800f1ea <_dtoa_r+0xea>
 800fcc6:	9b01      	ldr	r3, [sp, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	dcb5      	bgt.n	800fc38 <_dtoa_r+0xb38>
 800fccc:	9b07      	ldr	r3, [sp, #28]
 800fcce:	2b02      	cmp	r3, #2
 800fcd0:	f73f aeb1 	bgt.w	800fa36 <_dtoa_r+0x936>
 800fcd4:	e7b0      	b.n	800fc38 <_dtoa_r+0xb38>
 800fcd6:	bf00      	nop
 800fcd8:	08010fc4 	.word	0x08010fc4
 800fcdc:	08010f24 	.word	0x08010f24
 800fce0:	08010f48 	.word	0x08010f48

0800fce4 <_free_r>:
 800fce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fce6:	2900      	cmp	r1, #0
 800fce8:	d044      	beq.n	800fd74 <_free_r+0x90>
 800fcea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcee:	9001      	str	r0, [sp, #4]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f1a1 0404 	sub.w	r4, r1, #4
 800fcf6:	bfb8      	it	lt
 800fcf8:	18e4      	addlt	r4, r4, r3
 800fcfa:	f000 f8e7 	bl	800fecc <__malloc_lock>
 800fcfe:	4a1e      	ldr	r2, [pc, #120]	; (800fd78 <_free_r+0x94>)
 800fd00:	9801      	ldr	r0, [sp, #4]
 800fd02:	6813      	ldr	r3, [r2, #0]
 800fd04:	b933      	cbnz	r3, 800fd14 <_free_r+0x30>
 800fd06:	6063      	str	r3, [r4, #4]
 800fd08:	6014      	str	r4, [r2, #0]
 800fd0a:	b003      	add	sp, #12
 800fd0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd10:	f000 b8e2 	b.w	800fed8 <__malloc_unlock>
 800fd14:	42a3      	cmp	r3, r4
 800fd16:	d908      	bls.n	800fd2a <_free_r+0x46>
 800fd18:	6825      	ldr	r5, [r4, #0]
 800fd1a:	1961      	adds	r1, r4, r5
 800fd1c:	428b      	cmp	r3, r1
 800fd1e:	bf01      	itttt	eq
 800fd20:	6819      	ldreq	r1, [r3, #0]
 800fd22:	685b      	ldreq	r3, [r3, #4]
 800fd24:	1949      	addeq	r1, r1, r5
 800fd26:	6021      	streq	r1, [r4, #0]
 800fd28:	e7ed      	b.n	800fd06 <_free_r+0x22>
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	b10b      	cbz	r3, 800fd34 <_free_r+0x50>
 800fd30:	42a3      	cmp	r3, r4
 800fd32:	d9fa      	bls.n	800fd2a <_free_r+0x46>
 800fd34:	6811      	ldr	r1, [r2, #0]
 800fd36:	1855      	adds	r5, r2, r1
 800fd38:	42a5      	cmp	r5, r4
 800fd3a:	d10b      	bne.n	800fd54 <_free_r+0x70>
 800fd3c:	6824      	ldr	r4, [r4, #0]
 800fd3e:	4421      	add	r1, r4
 800fd40:	1854      	adds	r4, r2, r1
 800fd42:	42a3      	cmp	r3, r4
 800fd44:	6011      	str	r1, [r2, #0]
 800fd46:	d1e0      	bne.n	800fd0a <_free_r+0x26>
 800fd48:	681c      	ldr	r4, [r3, #0]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	6053      	str	r3, [r2, #4]
 800fd4e:	440c      	add	r4, r1
 800fd50:	6014      	str	r4, [r2, #0]
 800fd52:	e7da      	b.n	800fd0a <_free_r+0x26>
 800fd54:	d902      	bls.n	800fd5c <_free_r+0x78>
 800fd56:	230c      	movs	r3, #12
 800fd58:	6003      	str	r3, [r0, #0]
 800fd5a:	e7d6      	b.n	800fd0a <_free_r+0x26>
 800fd5c:	6825      	ldr	r5, [r4, #0]
 800fd5e:	1961      	adds	r1, r4, r5
 800fd60:	428b      	cmp	r3, r1
 800fd62:	bf04      	itt	eq
 800fd64:	6819      	ldreq	r1, [r3, #0]
 800fd66:	685b      	ldreq	r3, [r3, #4]
 800fd68:	6063      	str	r3, [r4, #4]
 800fd6a:	bf04      	itt	eq
 800fd6c:	1949      	addeq	r1, r1, r5
 800fd6e:	6021      	streq	r1, [r4, #0]
 800fd70:	6054      	str	r4, [r2, #4]
 800fd72:	e7ca      	b.n	800fd0a <_free_r+0x26>
 800fd74:	b003      	add	sp, #12
 800fd76:	bd30      	pop	{r4, r5, pc}
 800fd78:	200059e8 	.word	0x200059e8

0800fd7c <malloc>:
 800fd7c:	4b02      	ldr	r3, [pc, #8]	; (800fd88 <malloc+0xc>)
 800fd7e:	4601      	mov	r1, r0
 800fd80:	6818      	ldr	r0, [r3, #0]
 800fd82:	f000 b823 	b.w	800fdcc <_malloc_r>
 800fd86:	bf00      	nop
 800fd88:	2000006c 	.word	0x2000006c

0800fd8c <sbrk_aligned>:
 800fd8c:	b570      	push	{r4, r5, r6, lr}
 800fd8e:	4e0e      	ldr	r6, [pc, #56]	; (800fdc8 <sbrk_aligned+0x3c>)
 800fd90:	460c      	mov	r4, r1
 800fd92:	6831      	ldr	r1, [r6, #0]
 800fd94:	4605      	mov	r5, r0
 800fd96:	b911      	cbnz	r1, 800fd9e <sbrk_aligned+0x12>
 800fd98:	f000 fcce 	bl	8010738 <_sbrk_r>
 800fd9c:	6030      	str	r0, [r6, #0]
 800fd9e:	4621      	mov	r1, r4
 800fda0:	4628      	mov	r0, r5
 800fda2:	f000 fcc9 	bl	8010738 <_sbrk_r>
 800fda6:	1c43      	adds	r3, r0, #1
 800fda8:	d00a      	beq.n	800fdc0 <sbrk_aligned+0x34>
 800fdaa:	1cc4      	adds	r4, r0, #3
 800fdac:	f024 0403 	bic.w	r4, r4, #3
 800fdb0:	42a0      	cmp	r0, r4
 800fdb2:	d007      	beq.n	800fdc4 <sbrk_aligned+0x38>
 800fdb4:	1a21      	subs	r1, r4, r0
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	f000 fcbe 	bl	8010738 <_sbrk_r>
 800fdbc:	3001      	adds	r0, #1
 800fdbe:	d101      	bne.n	800fdc4 <sbrk_aligned+0x38>
 800fdc0:	f04f 34ff 	mov.w	r4, #4294967295
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	bd70      	pop	{r4, r5, r6, pc}
 800fdc8:	200059ec 	.word	0x200059ec

0800fdcc <_malloc_r>:
 800fdcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdd0:	1ccd      	adds	r5, r1, #3
 800fdd2:	f025 0503 	bic.w	r5, r5, #3
 800fdd6:	3508      	adds	r5, #8
 800fdd8:	2d0c      	cmp	r5, #12
 800fdda:	bf38      	it	cc
 800fddc:	250c      	movcc	r5, #12
 800fdde:	2d00      	cmp	r5, #0
 800fde0:	4607      	mov	r7, r0
 800fde2:	db01      	blt.n	800fde8 <_malloc_r+0x1c>
 800fde4:	42a9      	cmp	r1, r5
 800fde6:	d905      	bls.n	800fdf4 <_malloc_r+0x28>
 800fde8:	230c      	movs	r3, #12
 800fdea:	603b      	str	r3, [r7, #0]
 800fdec:	2600      	movs	r6, #0
 800fdee:	4630      	mov	r0, r6
 800fdf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fec8 <_malloc_r+0xfc>
 800fdf8:	f000 f868 	bl	800fecc <__malloc_lock>
 800fdfc:	f8d8 3000 	ldr.w	r3, [r8]
 800fe00:	461c      	mov	r4, r3
 800fe02:	bb5c      	cbnz	r4, 800fe5c <_malloc_r+0x90>
 800fe04:	4629      	mov	r1, r5
 800fe06:	4638      	mov	r0, r7
 800fe08:	f7ff ffc0 	bl	800fd8c <sbrk_aligned>
 800fe0c:	1c43      	adds	r3, r0, #1
 800fe0e:	4604      	mov	r4, r0
 800fe10:	d155      	bne.n	800febe <_malloc_r+0xf2>
 800fe12:	f8d8 4000 	ldr.w	r4, [r8]
 800fe16:	4626      	mov	r6, r4
 800fe18:	2e00      	cmp	r6, #0
 800fe1a:	d145      	bne.n	800fea8 <_malloc_r+0xdc>
 800fe1c:	2c00      	cmp	r4, #0
 800fe1e:	d048      	beq.n	800feb2 <_malloc_r+0xe6>
 800fe20:	6823      	ldr	r3, [r4, #0]
 800fe22:	4631      	mov	r1, r6
 800fe24:	4638      	mov	r0, r7
 800fe26:	eb04 0903 	add.w	r9, r4, r3
 800fe2a:	f000 fc85 	bl	8010738 <_sbrk_r>
 800fe2e:	4581      	cmp	r9, r0
 800fe30:	d13f      	bne.n	800feb2 <_malloc_r+0xe6>
 800fe32:	6821      	ldr	r1, [r4, #0]
 800fe34:	1a6d      	subs	r5, r5, r1
 800fe36:	4629      	mov	r1, r5
 800fe38:	4638      	mov	r0, r7
 800fe3a:	f7ff ffa7 	bl	800fd8c <sbrk_aligned>
 800fe3e:	3001      	adds	r0, #1
 800fe40:	d037      	beq.n	800feb2 <_malloc_r+0xe6>
 800fe42:	6823      	ldr	r3, [r4, #0]
 800fe44:	442b      	add	r3, r5
 800fe46:	6023      	str	r3, [r4, #0]
 800fe48:	f8d8 3000 	ldr.w	r3, [r8]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d038      	beq.n	800fec2 <_malloc_r+0xf6>
 800fe50:	685a      	ldr	r2, [r3, #4]
 800fe52:	42a2      	cmp	r2, r4
 800fe54:	d12b      	bne.n	800feae <_malloc_r+0xe2>
 800fe56:	2200      	movs	r2, #0
 800fe58:	605a      	str	r2, [r3, #4]
 800fe5a:	e00f      	b.n	800fe7c <_malloc_r+0xb0>
 800fe5c:	6822      	ldr	r2, [r4, #0]
 800fe5e:	1b52      	subs	r2, r2, r5
 800fe60:	d41f      	bmi.n	800fea2 <_malloc_r+0xd6>
 800fe62:	2a0b      	cmp	r2, #11
 800fe64:	d917      	bls.n	800fe96 <_malloc_r+0xca>
 800fe66:	1961      	adds	r1, r4, r5
 800fe68:	42a3      	cmp	r3, r4
 800fe6a:	6025      	str	r5, [r4, #0]
 800fe6c:	bf18      	it	ne
 800fe6e:	6059      	strne	r1, [r3, #4]
 800fe70:	6863      	ldr	r3, [r4, #4]
 800fe72:	bf08      	it	eq
 800fe74:	f8c8 1000 	streq.w	r1, [r8]
 800fe78:	5162      	str	r2, [r4, r5]
 800fe7a:	604b      	str	r3, [r1, #4]
 800fe7c:	4638      	mov	r0, r7
 800fe7e:	f104 060b 	add.w	r6, r4, #11
 800fe82:	f000 f829 	bl	800fed8 <__malloc_unlock>
 800fe86:	f026 0607 	bic.w	r6, r6, #7
 800fe8a:	1d23      	adds	r3, r4, #4
 800fe8c:	1af2      	subs	r2, r6, r3
 800fe8e:	d0ae      	beq.n	800fdee <_malloc_r+0x22>
 800fe90:	1b9b      	subs	r3, r3, r6
 800fe92:	50a3      	str	r3, [r4, r2]
 800fe94:	e7ab      	b.n	800fdee <_malloc_r+0x22>
 800fe96:	42a3      	cmp	r3, r4
 800fe98:	6862      	ldr	r2, [r4, #4]
 800fe9a:	d1dd      	bne.n	800fe58 <_malloc_r+0x8c>
 800fe9c:	f8c8 2000 	str.w	r2, [r8]
 800fea0:	e7ec      	b.n	800fe7c <_malloc_r+0xb0>
 800fea2:	4623      	mov	r3, r4
 800fea4:	6864      	ldr	r4, [r4, #4]
 800fea6:	e7ac      	b.n	800fe02 <_malloc_r+0x36>
 800fea8:	4634      	mov	r4, r6
 800feaa:	6876      	ldr	r6, [r6, #4]
 800feac:	e7b4      	b.n	800fe18 <_malloc_r+0x4c>
 800feae:	4613      	mov	r3, r2
 800feb0:	e7cc      	b.n	800fe4c <_malloc_r+0x80>
 800feb2:	230c      	movs	r3, #12
 800feb4:	603b      	str	r3, [r7, #0]
 800feb6:	4638      	mov	r0, r7
 800feb8:	f000 f80e 	bl	800fed8 <__malloc_unlock>
 800febc:	e797      	b.n	800fdee <_malloc_r+0x22>
 800febe:	6025      	str	r5, [r4, #0]
 800fec0:	e7dc      	b.n	800fe7c <_malloc_r+0xb0>
 800fec2:	605b      	str	r3, [r3, #4]
 800fec4:	deff      	udf	#255	; 0xff
 800fec6:	bf00      	nop
 800fec8:	200059e8 	.word	0x200059e8

0800fecc <__malloc_lock>:
 800fecc:	4801      	ldr	r0, [pc, #4]	; (800fed4 <__malloc_lock+0x8>)
 800fece:	f7ff b87c 	b.w	800efca <__retarget_lock_acquire_recursive>
 800fed2:	bf00      	nop
 800fed4:	200059e4 	.word	0x200059e4

0800fed8 <__malloc_unlock>:
 800fed8:	4801      	ldr	r0, [pc, #4]	; (800fee0 <__malloc_unlock+0x8>)
 800feda:	f7ff b877 	b.w	800efcc <__retarget_lock_release_recursive>
 800fede:	bf00      	nop
 800fee0:	200059e4 	.word	0x200059e4

0800fee4 <_Balloc>:
 800fee4:	b570      	push	{r4, r5, r6, lr}
 800fee6:	69c6      	ldr	r6, [r0, #28]
 800fee8:	4604      	mov	r4, r0
 800feea:	460d      	mov	r5, r1
 800feec:	b976      	cbnz	r6, 800ff0c <_Balloc+0x28>
 800feee:	2010      	movs	r0, #16
 800fef0:	f7ff ff44 	bl	800fd7c <malloc>
 800fef4:	4602      	mov	r2, r0
 800fef6:	61e0      	str	r0, [r4, #28]
 800fef8:	b920      	cbnz	r0, 800ff04 <_Balloc+0x20>
 800fefa:	4b18      	ldr	r3, [pc, #96]	; (800ff5c <_Balloc+0x78>)
 800fefc:	4818      	ldr	r0, [pc, #96]	; (800ff60 <_Balloc+0x7c>)
 800fefe:	216b      	movs	r1, #107	; 0x6b
 800ff00:	f000 fc2a 	bl	8010758 <__assert_func>
 800ff04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff08:	6006      	str	r6, [r0, #0]
 800ff0a:	60c6      	str	r6, [r0, #12]
 800ff0c:	69e6      	ldr	r6, [r4, #28]
 800ff0e:	68f3      	ldr	r3, [r6, #12]
 800ff10:	b183      	cbz	r3, 800ff34 <_Balloc+0x50>
 800ff12:	69e3      	ldr	r3, [r4, #28]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff1a:	b9b8      	cbnz	r0, 800ff4c <_Balloc+0x68>
 800ff1c:	2101      	movs	r1, #1
 800ff1e:	fa01 f605 	lsl.w	r6, r1, r5
 800ff22:	1d72      	adds	r2, r6, #5
 800ff24:	0092      	lsls	r2, r2, #2
 800ff26:	4620      	mov	r0, r4
 800ff28:	f000 fc34 	bl	8010794 <_calloc_r>
 800ff2c:	b160      	cbz	r0, 800ff48 <_Balloc+0x64>
 800ff2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff32:	e00e      	b.n	800ff52 <_Balloc+0x6e>
 800ff34:	2221      	movs	r2, #33	; 0x21
 800ff36:	2104      	movs	r1, #4
 800ff38:	4620      	mov	r0, r4
 800ff3a:	f000 fc2b 	bl	8010794 <_calloc_r>
 800ff3e:	69e3      	ldr	r3, [r4, #28]
 800ff40:	60f0      	str	r0, [r6, #12]
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d1e4      	bne.n	800ff12 <_Balloc+0x2e>
 800ff48:	2000      	movs	r0, #0
 800ff4a:	bd70      	pop	{r4, r5, r6, pc}
 800ff4c:	6802      	ldr	r2, [r0, #0]
 800ff4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff52:	2300      	movs	r3, #0
 800ff54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ff58:	e7f7      	b.n	800ff4a <_Balloc+0x66>
 800ff5a:	bf00      	nop
 800ff5c:	08010f55 	.word	0x08010f55
 800ff60:	08010fd5 	.word	0x08010fd5

0800ff64 <_Bfree>:
 800ff64:	b570      	push	{r4, r5, r6, lr}
 800ff66:	69c6      	ldr	r6, [r0, #28]
 800ff68:	4605      	mov	r5, r0
 800ff6a:	460c      	mov	r4, r1
 800ff6c:	b976      	cbnz	r6, 800ff8c <_Bfree+0x28>
 800ff6e:	2010      	movs	r0, #16
 800ff70:	f7ff ff04 	bl	800fd7c <malloc>
 800ff74:	4602      	mov	r2, r0
 800ff76:	61e8      	str	r0, [r5, #28]
 800ff78:	b920      	cbnz	r0, 800ff84 <_Bfree+0x20>
 800ff7a:	4b09      	ldr	r3, [pc, #36]	; (800ffa0 <_Bfree+0x3c>)
 800ff7c:	4809      	ldr	r0, [pc, #36]	; (800ffa4 <_Bfree+0x40>)
 800ff7e:	218f      	movs	r1, #143	; 0x8f
 800ff80:	f000 fbea 	bl	8010758 <__assert_func>
 800ff84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff88:	6006      	str	r6, [r0, #0]
 800ff8a:	60c6      	str	r6, [r0, #12]
 800ff8c:	b13c      	cbz	r4, 800ff9e <_Bfree+0x3a>
 800ff8e:	69eb      	ldr	r3, [r5, #28]
 800ff90:	6862      	ldr	r2, [r4, #4]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ff98:	6021      	str	r1, [r4, #0]
 800ff9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ff9e:	bd70      	pop	{r4, r5, r6, pc}
 800ffa0:	08010f55 	.word	0x08010f55
 800ffa4:	08010fd5 	.word	0x08010fd5

0800ffa8 <__multadd>:
 800ffa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffac:	690d      	ldr	r5, [r1, #16]
 800ffae:	4607      	mov	r7, r0
 800ffb0:	460c      	mov	r4, r1
 800ffb2:	461e      	mov	r6, r3
 800ffb4:	f101 0c14 	add.w	ip, r1, #20
 800ffb8:	2000      	movs	r0, #0
 800ffba:	f8dc 3000 	ldr.w	r3, [ip]
 800ffbe:	b299      	uxth	r1, r3
 800ffc0:	fb02 6101 	mla	r1, r2, r1, r6
 800ffc4:	0c1e      	lsrs	r6, r3, #16
 800ffc6:	0c0b      	lsrs	r3, r1, #16
 800ffc8:	fb02 3306 	mla	r3, r2, r6, r3
 800ffcc:	b289      	uxth	r1, r1
 800ffce:	3001      	adds	r0, #1
 800ffd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ffd4:	4285      	cmp	r5, r0
 800ffd6:	f84c 1b04 	str.w	r1, [ip], #4
 800ffda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ffde:	dcec      	bgt.n	800ffba <__multadd+0x12>
 800ffe0:	b30e      	cbz	r6, 8010026 <__multadd+0x7e>
 800ffe2:	68a3      	ldr	r3, [r4, #8]
 800ffe4:	42ab      	cmp	r3, r5
 800ffe6:	dc19      	bgt.n	801001c <__multadd+0x74>
 800ffe8:	6861      	ldr	r1, [r4, #4]
 800ffea:	4638      	mov	r0, r7
 800ffec:	3101      	adds	r1, #1
 800ffee:	f7ff ff79 	bl	800fee4 <_Balloc>
 800fff2:	4680      	mov	r8, r0
 800fff4:	b928      	cbnz	r0, 8010002 <__multadd+0x5a>
 800fff6:	4602      	mov	r2, r0
 800fff8:	4b0c      	ldr	r3, [pc, #48]	; (801002c <__multadd+0x84>)
 800fffa:	480d      	ldr	r0, [pc, #52]	; (8010030 <__multadd+0x88>)
 800fffc:	21ba      	movs	r1, #186	; 0xba
 800fffe:	f000 fbab 	bl	8010758 <__assert_func>
 8010002:	6922      	ldr	r2, [r4, #16]
 8010004:	3202      	adds	r2, #2
 8010006:	f104 010c 	add.w	r1, r4, #12
 801000a:	0092      	lsls	r2, r2, #2
 801000c:	300c      	adds	r0, #12
 801000e:	f7fe ffde 	bl	800efce <memcpy>
 8010012:	4621      	mov	r1, r4
 8010014:	4638      	mov	r0, r7
 8010016:	f7ff ffa5 	bl	800ff64 <_Bfree>
 801001a:	4644      	mov	r4, r8
 801001c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010020:	3501      	adds	r5, #1
 8010022:	615e      	str	r6, [r3, #20]
 8010024:	6125      	str	r5, [r4, #16]
 8010026:	4620      	mov	r0, r4
 8010028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801002c:	08010fc4 	.word	0x08010fc4
 8010030:	08010fd5 	.word	0x08010fd5

08010034 <__hi0bits>:
 8010034:	0c03      	lsrs	r3, r0, #16
 8010036:	041b      	lsls	r3, r3, #16
 8010038:	b9d3      	cbnz	r3, 8010070 <__hi0bits+0x3c>
 801003a:	0400      	lsls	r0, r0, #16
 801003c:	2310      	movs	r3, #16
 801003e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010042:	bf04      	itt	eq
 8010044:	0200      	lsleq	r0, r0, #8
 8010046:	3308      	addeq	r3, #8
 8010048:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801004c:	bf04      	itt	eq
 801004e:	0100      	lsleq	r0, r0, #4
 8010050:	3304      	addeq	r3, #4
 8010052:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010056:	bf04      	itt	eq
 8010058:	0080      	lsleq	r0, r0, #2
 801005a:	3302      	addeq	r3, #2
 801005c:	2800      	cmp	r0, #0
 801005e:	db05      	blt.n	801006c <__hi0bits+0x38>
 8010060:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010064:	f103 0301 	add.w	r3, r3, #1
 8010068:	bf08      	it	eq
 801006a:	2320      	moveq	r3, #32
 801006c:	4618      	mov	r0, r3
 801006e:	4770      	bx	lr
 8010070:	2300      	movs	r3, #0
 8010072:	e7e4      	b.n	801003e <__hi0bits+0xa>

08010074 <__lo0bits>:
 8010074:	6803      	ldr	r3, [r0, #0]
 8010076:	f013 0207 	ands.w	r2, r3, #7
 801007a:	d00c      	beq.n	8010096 <__lo0bits+0x22>
 801007c:	07d9      	lsls	r1, r3, #31
 801007e:	d422      	bmi.n	80100c6 <__lo0bits+0x52>
 8010080:	079a      	lsls	r2, r3, #30
 8010082:	bf49      	itett	mi
 8010084:	085b      	lsrmi	r3, r3, #1
 8010086:	089b      	lsrpl	r3, r3, #2
 8010088:	6003      	strmi	r3, [r0, #0]
 801008a:	2201      	movmi	r2, #1
 801008c:	bf5c      	itt	pl
 801008e:	6003      	strpl	r3, [r0, #0]
 8010090:	2202      	movpl	r2, #2
 8010092:	4610      	mov	r0, r2
 8010094:	4770      	bx	lr
 8010096:	b299      	uxth	r1, r3
 8010098:	b909      	cbnz	r1, 801009e <__lo0bits+0x2a>
 801009a:	0c1b      	lsrs	r3, r3, #16
 801009c:	2210      	movs	r2, #16
 801009e:	b2d9      	uxtb	r1, r3
 80100a0:	b909      	cbnz	r1, 80100a6 <__lo0bits+0x32>
 80100a2:	3208      	adds	r2, #8
 80100a4:	0a1b      	lsrs	r3, r3, #8
 80100a6:	0719      	lsls	r1, r3, #28
 80100a8:	bf04      	itt	eq
 80100aa:	091b      	lsreq	r3, r3, #4
 80100ac:	3204      	addeq	r2, #4
 80100ae:	0799      	lsls	r1, r3, #30
 80100b0:	bf04      	itt	eq
 80100b2:	089b      	lsreq	r3, r3, #2
 80100b4:	3202      	addeq	r2, #2
 80100b6:	07d9      	lsls	r1, r3, #31
 80100b8:	d403      	bmi.n	80100c2 <__lo0bits+0x4e>
 80100ba:	085b      	lsrs	r3, r3, #1
 80100bc:	f102 0201 	add.w	r2, r2, #1
 80100c0:	d003      	beq.n	80100ca <__lo0bits+0x56>
 80100c2:	6003      	str	r3, [r0, #0]
 80100c4:	e7e5      	b.n	8010092 <__lo0bits+0x1e>
 80100c6:	2200      	movs	r2, #0
 80100c8:	e7e3      	b.n	8010092 <__lo0bits+0x1e>
 80100ca:	2220      	movs	r2, #32
 80100cc:	e7e1      	b.n	8010092 <__lo0bits+0x1e>
	...

080100d0 <__i2b>:
 80100d0:	b510      	push	{r4, lr}
 80100d2:	460c      	mov	r4, r1
 80100d4:	2101      	movs	r1, #1
 80100d6:	f7ff ff05 	bl	800fee4 <_Balloc>
 80100da:	4602      	mov	r2, r0
 80100dc:	b928      	cbnz	r0, 80100ea <__i2b+0x1a>
 80100de:	4b05      	ldr	r3, [pc, #20]	; (80100f4 <__i2b+0x24>)
 80100e0:	4805      	ldr	r0, [pc, #20]	; (80100f8 <__i2b+0x28>)
 80100e2:	f240 1145 	movw	r1, #325	; 0x145
 80100e6:	f000 fb37 	bl	8010758 <__assert_func>
 80100ea:	2301      	movs	r3, #1
 80100ec:	6144      	str	r4, [r0, #20]
 80100ee:	6103      	str	r3, [r0, #16]
 80100f0:	bd10      	pop	{r4, pc}
 80100f2:	bf00      	nop
 80100f4:	08010fc4 	.word	0x08010fc4
 80100f8:	08010fd5 	.word	0x08010fd5

080100fc <__multiply>:
 80100fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010100:	4691      	mov	r9, r2
 8010102:	690a      	ldr	r2, [r1, #16]
 8010104:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010108:	429a      	cmp	r2, r3
 801010a:	bfb8      	it	lt
 801010c:	460b      	movlt	r3, r1
 801010e:	460c      	mov	r4, r1
 8010110:	bfbc      	itt	lt
 8010112:	464c      	movlt	r4, r9
 8010114:	4699      	movlt	r9, r3
 8010116:	6927      	ldr	r7, [r4, #16]
 8010118:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801011c:	68a3      	ldr	r3, [r4, #8]
 801011e:	6861      	ldr	r1, [r4, #4]
 8010120:	eb07 060a 	add.w	r6, r7, sl
 8010124:	42b3      	cmp	r3, r6
 8010126:	b085      	sub	sp, #20
 8010128:	bfb8      	it	lt
 801012a:	3101      	addlt	r1, #1
 801012c:	f7ff feda 	bl	800fee4 <_Balloc>
 8010130:	b930      	cbnz	r0, 8010140 <__multiply+0x44>
 8010132:	4602      	mov	r2, r0
 8010134:	4b44      	ldr	r3, [pc, #272]	; (8010248 <__multiply+0x14c>)
 8010136:	4845      	ldr	r0, [pc, #276]	; (801024c <__multiply+0x150>)
 8010138:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801013c:	f000 fb0c 	bl	8010758 <__assert_func>
 8010140:	f100 0514 	add.w	r5, r0, #20
 8010144:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010148:	462b      	mov	r3, r5
 801014a:	2200      	movs	r2, #0
 801014c:	4543      	cmp	r3, r8
 801014e:	d321      	bcc.n	8010194 <__multiply+0x98>
 8010150:	f104 0314 	add.w	r3, r4, #20
 8010154:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010158:	f109 0314 	add.w	r3, r9, #20
 801015c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010160:	9202      	str	r2, [sp, #8]
 8010162:	1b3a      	subs	r2, r7, r4
 8010164:	3a15      	subs	r2, #21
 8010166:	f022 0203 	bic.w	r2, r2, #3
 801016a:	3204      	adds	r2, #4
 801016c:	f104 0115 	add.w	r1, r4, #21
 8010170:	428f      	cmp	r7, r1
 8010172:	bf38      	it	cc
 8010174:	2204      	movcc	r2, #4
 8010176:	9201      	str	r2, [sp, #4]
 8010178:	9a02      	ldr	r2, [sp, #8]
 801017a:	9303      	str	r3, [sp, #12]
 801017c:	429a      	cmp	r2, r3
 801017e:	d80c      	bhi.n	801019a <__multiply+0x9e>
 8010180:	2e00      	cmp	r6, #0
 8010182:	dd03      	ble.n	801018c <__multiply+0x90>
 8010184:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010188:	2b00      	cmp	r3, #0
 801018a:	d05b      	beq.n	8010244 <__multiply+0x148>
 801018c:	6106      	str	r6, [r0, #16]
 801018e:	b005      	add	sp, #20
 8010190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010194:	f843 2b04 	str.w	r2, [r3], #4
 8010198:	e7d8      	b.n	801014c <__multiply+0x50>
 801019a:	f8b3 a000 	ldrh.w	sl, [r3]
 801019e:	f1ba 0f00 	cmp.w	sl, #0
 80101a2:	d024      	beq.n	80101ee <__multiply+0xf2>
 80101a4:	f104 0e14 	add.w	lr, r4, #20
 80101a8:	46a9      	mov	r9, r5
 80101aa:	f04f 0c00 	mov.w	ip, #0
 80101ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80101b2:	f8d9 1000 	ldr.w	r1, [r9]
 80101b6:	fa1f fb82 	uxth.w	fp, r2
 80101ba:	b289      	uxth	r1, r1
 80101bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80101c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80101c4:	f8d9 2000 	ldr.w	r2, [r9]
 80101c8:	4461      	add	r1, ip
 80101ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80101ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80101d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80101d6:	b289      	uxth	r1, r1
 80101d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80101dc:	4577      	cmp	r7, lr
 80101de:	f849 1b04 	str.w	r1, [r9], #4
 80101e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80101e6:	d8e2      	bhi.n	80101ae <__multiply+0xb2>
 80101e8:	9a01      	ldr	r2, [sp, #4]
 80101ea:	f845 c002 	str.w	ip, [r5, r2]
 80101ee:	9a03      	ldr	r2, [sp, #12]
 80101f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80101f4:	3304      	adds	r3, #4
 80101f6:	f1b9 0f00 	cmp.w	r9, #0
 80101fa:	d021      	beq.n	8010240 <__multiply+0x144>
 80101fc:	6829      	ldr	r1, [r5, #0]
 80101fe:	f104 0c14 	add.w	ip, r4, #20
 8010202:	46ae      	mov	lr, r5
 8010204:	f04f 0a00 	mov.w	sl, #0
 8010208:	f8bc b000 	ldrh.w	fp, [ip]
 801020c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010210:	fb09 220b 	mla	r2, r9, fp, r2
 8010214:	4452      	add	r2, sl
 8010216:	b289      	uxth	r1, r1
 8010218:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801021c:	f84e 1b04 	str.w	r1, [lr], #4
 8010220:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010224:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010228:	f8be 1000 	ldrh.w	r1, [lr]
 801022c:	fb09 110a 	mla	r1, r9, sl, r1
 8010230:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010234:	4567      	cmp	r7, ip
 8010236:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801023a:	d8e5      	bhi.n	8010208 <__multiply+0x10c>
 801023c:	9a01      	ldr	r2, [sp, #4]
 801023e:	50a9      	str	r1, [r5, r2]
 8010240:	3504      	adds	r5, #4
 8010242:	e799      	b.n	8010178 <__multiply+0x7c>
 8010244:	3e01      	subs	r6, #1
 8010246:	e79b      	b.n	8010180 <__multiply+0x84>
 8010248:	08010fc4 	.word	0x08010fc4
 801024c:	08010fd5 	.word	0x08010fd5

08010250 <__pow5mult>:
 8010250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010254:	4615      	mov	r5, r2
 8010256:	f012 0203 	ands.w	r2, r2, #3
 801025a:	4606      	mov	r6, r0
 801025c:	460f      	mov	r7, r1
 801025e:	d007      	beq.n	8010270 <__pow5mult+0x20>
 8010260:	4c25      	ldr	r4, [pc, #148]	; (80102f8 <__pow5mult+0xa8>)
 8010262:	3a01      	subs	r2, #1
 8010264:	2300      	movs	r3, #0
 8010266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801026a:	f7ff fe9d 	bl	800ffa8 <__multadd>
 801026e:	4607      	mov	r7, r0
 8010270:	10ad      	asrs	r5, r5, #2
 8010272:	d03d      	beq.n	80102f0 <__pow5mult+0xa0>
 8010274:	69f4      	ldr	r4, [r6, #28]
 8010276:	b97c      	cbnz	r4, 8010298 <__pow5mult+0x48>
 8010278:	2010      	movs	r0, #16
 801027a:	f7ff fd7f 	bl	800fd7c <malloc>
 801027e:	4602      	mov	r2, r0
 8010280:	61f0      	str	r0, [r6, #28]
 8010282:	b928      	cbnz	r0, 8010290 <__pow5mult+0x40>
 8010284:	4b1d      	ldr	r3, [pc, #116]	; (80102fc <__pow5mult+0xac>)
 8010286:	481e      	ldr	r0, [pc, #120]	; (8010300 <__pow5mult+0xb0>)
 8010288:	f240 11b3 	movw	r1, #435	; 0x1b3
 801028c:	f000 fa64 	bl	8010758 <__assert_func>
 8010290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010294:	6004      	str	r4, [r0, #0]
 8010296:	60c4      	str	r4, [r0, #12]
 8010298:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801029c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80102a0:	b94c      	cbnz	r4, 80102b6 <__pow5mult+0x66>
 80102a2:	f240 2171 	movw	r1, #625	; 0x271
 80102a6:	4630      	mov	r0, r6
 80102a8:	f7ff ff12 	bl	80100d0 <__i2b>
 80102ac:	2300      	movs	r3, #0
 80102ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80102b2:	4604      	mov	r4, r0
 80102b4:	6003      	str	r3, [r0, #0]
 80102b6:	f04f 0900 	mov.w	r9, #0
 80102ba:	07eb      	lsls	r3, r5, #31
 80102bc:	d50a      	bpl.n	80102d4 <__pow5mult+0x84>
 80102be:	4639      	mov	r1, r7
 80102c0:	4622      	mov	r2, r4
 80102c2:	4630      	mov	r0, r6
 80102c4:	f7ff ff1a 	bl	80100fc <__multiply>
 80102c8:	4639      	mov	r1, r7
 80102ca:	4680      	mov	r8, r0
 80102cc:	4630      	mov	r0, r6
 80102ce:	f7ff fe49 	bl	800ff64 <_Bfree>
 80102d2:	4647      	mov	r7, r8
 80102d4:	106d      	asrs	r5, r5, #1
 80102d6:	d00b      	beq.n	80102f0 <__pow5mult+0xa0>
 80102d8:	6820      	ldr	r0, [r4, #0]
 80102da:	b938      	cbnz	r0, 80102ec <__pow5mult+0x9c>
 80102dc:	4622      	mov	r2, r4
 80102de:	4621      	mov	r1, r4
 80102e0:	4630      	mov	r0, r6
 80102e2:	f7ff ff0b 	bl	80100fc <__multiply>
 80102e6:	6020      	str	r0, [r4, #0]
 80102e8:	f8c0 9000 	str.w	r9, [r0]
 80102ec:	4604      	mov	r4, r0
 80102ee:	e7e4      	b.n	80102ba <__pow5mult+0x6a>
 80102f0:	4638      	mov	r0, r7
 80102f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102f6:	bf00      	nop
 80102f8:	08011120 	.word	0x08011120
 80102fc:	08010f55 	.word	0x08010f55
 8010300:	08010fd5 	.word	0x08010fd5

08010304 <__lshift>:
 8010304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010308:	460c      	mov	r4, r1
 801030a:	6849      	ldr	r1, [r1, #4]
 801030c:	6923      	ldr	r3, [r4, #16]
 801030e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010312:	68a3      	ldr	r3, [r4, #8]
 8010314:	4607      	mov	r7, r0
 8010316:	4691      	mov	r9, r2
 8010318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801031c:	f108 0601 	add.w	r6, r8, #1
 8010320:	42b3      	cmp	r3, r6
 8010322:	db0b      	blt.n	801033c <__lshift+0x38>
 8010324:	4638      	mov	r0, r7
 8010326:	f7ff fddd 	bl	800fee4 <_Balloc>
 801032a:	4605      	mov	r5, r0
 801032c:	b948      	cbnz	r0, 8010342 <__lshift+0x3e>
 801032e:	4602      	mov	r2, r0
 8010330:	4b28      	ldr	r3, [pc, #160]	; (80103d4 <__lshift+0xd0>)
 8010332:	4829      	ldr	r0, [pc, #164]	; (80103d8 <__lshift+0xd4>)
 8010334:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010338:	f000 fa0e 	bl	8010758 <__assert_func>
 801033c:	3101      	adds	r1, #1
 801033e:	005b      	lsls	r3, r3, #1
 8010340:	e7ee      	b.n	8010320 <__lshift+0x1c>
 8010342:	2300      	movs	r3, #0
 8010344:	f100 0114 	add.w	r1, r0, #20
 8010348:	f100 0210 	add.w	r2, r0, #16
 801034c:	4618      	mov	r0, r3
 801034e:	4553      	cmp	r3, sl
 8010350:	db33      	blt.n	80103ba <__lshift+0xb6>
 8010352:	6920      	ldr	r0, [r4, #16]
 8010354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010358:	f104 0314 	add.w	r3, r4, #20
 801035c:	f019 091f 	ands.w	r9, r9, #31
 8010360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010364:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010368:	d02b      	beq.n	80103c2 <__lshift+0xbe>
 801036a:	f1c9 0e20 	rsb	lr, r9, #32
 801036e:	468a      	mov	sl, r1
 8010370:	2200      	movs	r2, #0
 8010372:	6818      	ldr	r0, [r3, #0]
 8010374:	fa00 f009 	lsl.w	r0, r0, r9
 8010378:	4310      	orrs	r0, r2
 801037a:	f84a 0b04 	str.w	r0, [sl], #4
 801037e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010382:	459c      	cmp	ip, r3
 8010384:	fa22 f20e 	lsr.w	r2, r2, lr
 8010388:	d8f3      	bhi.n	8010372 <__lshift+0x6e>
 801038a:	ebac 0304 	sub.w	r3, ip, r4
 801038e:	3b15      	subs	r3, #21
 8010390:	f023 0303 	bic.w	r3, r3, #3
 8010394:	3304      	adds	r3, #4
 8010396:	f104 0015 	add.w	r0, r4, #21
 801039a:	4584      	cmp	ip, r0
 801039c:	bf38      	it	cc
 801039e:	2304      	movcc	r3, #4
 80103a0:	50ca      	str	r2, [r1, r3]
 80103a2:	b10a      	cbz	r2, 80103a8 <__lshift+0xa4>
 80103a4:	f108 0602 	add.w	r6, r8, #2
 80103a8:	3e01      	subs	r6, #1
 80103aa:	4638      	mov	r0, r7
 80103ac:	612e      	str	r6, [r5, #16]
 80103ae:	4621      	mov	r1, r4
 80103b0:	f7ff fdd8 	bl	800ff64 <_Bfree>
 80103b4:	4628      	mov	r0, r5
 80103b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80103be:	3301      	adds	r3, #1
 80103c0:	e7c5      	b.n	801034e <__lshift+0x4a>
 80103c2:	3904      	subs	r1, #4
 80103c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80103c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80103cc:	459c      	cmp	ip, r3
 80103ce:	d8f9      	bhi.n	80103c4 <__lshift+0xc0>
 80103d0:	e7ea      	b.n	80103a8 <__lshift+0xa4>
 80103d2:	bf00      	nop
 80103d4:	08010fc4 	.word	0x08010fc4
 80103d8:	08010fd5 	.word	0x08010fd5

080103dc <__mcmp>:
 80103dc:	b530      	push	{r4, r5, lr}
 80103de:	6902      	ldr	r2, [r0, #16]
 80103e0:	690c      	ldr	r4, [r1, #16]
 80103e2:	1b12      	subs	r2, r2, r4
 80103e4:	d10e      	bne.n	8010404 <__mcmp+0x28>
 80103e6:	f100 0314 	add.w	r3, r0, #20
 80103ea:	3114      	adds	r1, #20
 80103ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80103f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80103f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80103f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80103fc:	42a5      	cmp	r5, r4
 80103fe:	d003      	beq.n	8010408 <__mcmp+0x2c>
 8010400:	d305      	bcc.n	801040e <__mcmp+0x32>
 8010402:	2201      	movs	r2, #1
 8010404:	4610      	mov	r0, r2
 8010406:	bd30      	pop	{r4, r5, pc}
 8010408:	4283      	cmp	r3, r0
 801040a:	d3f3      	bcc.n	80103f4 <__mcmp+0x18>
 801040c:	e7fa      	b.n	8010404 <__mcmp+0x28>
 801040e:	f04f 32ff 	mov.w	r2, #4294967295
 8010412:	e7f7      	b.n	8010404 <__mcmp+0x28>

08010414 <__mdiff>:
 8010414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010418:	460c      	mov	r4, r1
 801041a:	4606      	mov	r6, r0
 801041c:	4611      	mov	r1, r2
 801041e:	4620      	mov	r0, r4
 8010420:	4690      	mov	r8, r2
 8010422:	f7ff ffdb 	bl	80103dc <__mcmp>
 8010426:	1e05      	subs	r5, r0, #0
 8010428:	d110      	bne.n	801044c <__mdiff+0x38>
 801042a:	4629      	mov	r1, r5
 801042c:	4630      	mov	r0, r6
 801042e:	f7ff fd59 	bl	800fee4 <_Balloc>
 8010432:	b930      	cbnz	r0, 8010442 <__mdiff+0x2e>
 8010434:	4b3a      	ldr	r3, [pc, #232]	; (8010520 <__mdiff+0x10c>)
 8010436:	4602      	mov	r2, r0
 8010438:	f240 2137 	movw	r1, #567	; 0x237
 801043c:	4839      	ldr	r0, [pc, #228]	; (8010524 <__mdiff+0x110>)
 801043e:	f000 f98b 	bl	8010758 <__assert_func>
 8010442:	2301      	movs	r3, #1
 8010444:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801044c:	bfa4      	itt	ge
 801044e:	4643      	movge	r3, r8
 8010450:	46a0      	movge	r8, r4
 8010452:	4630      	mov	r0, r6
 8010454:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010458:	bfa6      	itte	ge
 801045a:	461c      	movge	r4, r3
 801045c:	2500      	movge	r5, #0
 801045e:	2501      	movlt	r5, #1
 8010460:	f7ff fd40 	bl	800fee4 <_Balloc>
 8010464:	b920      	cbnz	r0, 8010470 <__mdiff+0x5c>
 8010466:	4b2e      	ldr	r3, [pc, #184]	; (8010520 <__mdiff+0x10c>)
 8010468:	4602      	mov	r2, r0
 801046a:	f240 2145 	movw	r1, #581	; 0x245
 801046e:	e7e5      	b.n	801043c <__mdiff+0x28>
 8010470:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010474:	6926      	ldr	r6, [r4, #16]
 8010476:	60c5      	str	r5, [r0, #12]
 8010478:	f104 0914 	add.w	r9, r4, #20
 801047c:	f108 0514 	add.w	r5, r8, #20
 8010480:	f100 0e14 	add.w	lr, r0, #20
 8010484:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010488:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801048c:	f108 0210 	add.w	r2, r8, #16
 8010490:	46f2      	mov	sl, lr
 8010492:	2100      	movs	r1, #0
 8010494:	f859 3b04 	ldr.w	r3, [r9], #4
 8010498:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801049c:	fa11 f88b 	uxtah	r8, r1, fp
 80104a0:	b299      	uxth	r1, r3
 80104a2:	0c1b      	lsrs	r3, r3, #16
 80104a4:	eba8 0801 	sub.w	r8, r8, r1
 80104a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80104ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80104b0:	fa1f f888 	uxth.w	r8, r8
 80104b4:	1419      	asrs	r1, r3, #16
 80104b6:	454e      	cmp	r6, r9
 80104b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80104bc:	f84a 3b04 	str.w	r3, [sl], #4
 80104c0:	d8e8      	bhi.n	8010494 <__mdiff+0x80>
 80104c2:	1b33      	subs	r3, r6, r4
 80104c4:	3b15      	subs	r3, #21
 80104c6:	f023 0303 	bic.w	r3, r3, #3
 80104ca:	3304      	adds	r3, #4
 80104cc:	3415      	adds	r4, #21
 80104ce:	42a6      	cmp	r6, r4
 80104d0:	bf38      	it	cc
 80104d2:	2304      	movcc	r3, #4
 80104d4:	441d      	add	r5, r3
 80104d6:	4473      	add	r3, lr
 80104d8:	469e      	mov	lr, r3
 80104da:	462e      	mov	r6, r5
 80104dc:	4566      	cmp	r6, ip
 80104de:	d30e      	bcc.n	80104fe <__mdiff+0xea>
 80104e0:	f10c 0203 	add.w	r2, ip, #3
 80104e4:	1b52      	subs	r2, r2, r5
 80104e6:	f022 0203 	bic.w	r2, r2, #3
 80104ea:	3d03      	subs	r5, #3
 80104ec:	45ac      	cmp	ip, r5
 80104ee:	bf38      	it	cc
 80104f0:	2200      	movcc	r2, #0
 80104f2:	4413      	add	r3, r2
 80104f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80104f8:	b17a      	cbz	r2, 801051a <__mdiff+0x106>
 80104fa:	6107      	str	r7, [r0, #16]
 80104fc:	e7a4      	b.n	8010448 <__mdiff+0x34>
 80104fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8010502:	fa11 f288 	uxtah	r2, r1, r8
 8010506:	1414      	asrs	r4, r2, #16
 8010508:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801050c:	b292      	uxth	r2, r2
 801050e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010512:	f84e 2b04 	str.w	r2, [lr], #4
 8010516:	1421      	asrs	r1, r4, #16
 8010518:	e7e0      	b.n	80104dc <__mdiff+0xc8>
 801051a:	3f01      	subs	r7, #1
 801051c:	e7ea      	b.n	80104f4 <__mdiff+0xe0>
 801051e:	bf00      	nop
 8010520:	08010fc4 	.word	0x08010fc4
 8010524:	08010fd5 	.word	0x08010fd5

08010528 <__d2b>:
 8010528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801052c:	460f      	mov	r7, r1
 801052e:	2101      	movs	r1, #1
 8010530:	ec59 8b10 	vmov	r8, r9, d0
 8010534:	4616      	mov	r6, r2
 8010536:	f7ff fcd5 	bl	800fee4 <_Balloc>
 801053a:	4604      	mov	r4, r0
 801053c:	b930      	cbnz	r0, 801054c <__d2b+0x24>
 801053e:	4602      	mov	r2, r0
 8010540:	4b24      	ldr	r3, [pc, #144]	; (80105d4 <__d2b+0xac>)
 8010542:	4825      	ldr	r0, [pc, #148]	; (80105d8 <__d2b+0xb0>)
 8010544:	f240 310f 	movw	r1, #783	; 0x30f
 8010548:	f000 f906 	bl	8010758 <__assert_func>
 801054c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010550:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010554:	bb2d      	cbnz	r5, 80105a2 <__d2b+0x7a>
 8010556:	9301      	str	r3, [sp, #4]
 8010558:	f1b8 0300 	subs.w	r3, r8, #0
 801055c:	d026      	beq.n	80105ac <__d2b+0x84>
 801055e:	4668      	mov	r0, sp
 8010560:	9300      	str	r3, [sp, #0]
 8010562:	f7ff fd87 	bl	8010074 <__lo0bits>
 8010566:	e9dd 1200 	ldrd	r1, r2, [sp]
 801056a:	b1e8      	cbz	r0, 80105a8 <__d2b+0x80>
 801056c:	f1c0 0320 	rsb	r3, r0, #32
 8010570:	fa02 f303 	lsl.w	r3, r2, r3
 8010574:	430b      	orrs	r3, r1
 8010576:	40c2      	lsrs	r2, r0
 8010578:	6163      	str	r3, [r4, #20]
 801057a:	9201      	str	r2, [sp, #4]
 801057c:	9b01      	ldr	r3, [sp, #4]
 801057e:	61a3      	str	r3, [r4, #24]
 8010580:	2b00      	cmp	r3, #0
 8010582:	bf14      	ite	ne
 8010584:	2202      	movne	r2, #2
 8010586:	2201      	moveq	r2, #1
 8010588:	6122      	str	r2, [r4, #16]
 801058a:	b1bd      	cbz	r5, 80105bc <__d2b+0x94>
 801058c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010590:	4405      	add	r5, r0
 8010592:	603d      	str	r5, [r7, #0]
 8010594:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010598:	6030      	str	r0, [r6, #0]
 801059a:	4620      	mov	r0, r4
 801059c:	b003      	add	sp, #12
 801059e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105a6:	e7d6      	b.n	8010556 <__d2b+0x2e>
 80105a8:	6161      	str	r1, [r4, #20]
 80105aa:	e7e7      	b.n	801057c <__d2b+0x54>
 80105ac:	a801      	add	r0, sp, #4
 80105ae:	f7ff fd61 	bl	8010074 <__lo0bits>
 80105b2:	9b01      	ldr	r3, [sp, #4]
 80105b4:	6163      	str	r3, [r4, #20]
 80105b6:	3020      	adds	r0, #32
 80105b8:	2201      	movs	r2, #1
 80105ba:	e7e5      	b.n	8010588 <__d2b+0x60>
 80105bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80105c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80105c4:	6038      	str	r0, [r7, #0]
 80105c6:	6918      	ldr	r0, [r3, #16]
 80105c8:	f7ff fd34 	bl	8010034 <__hi0bits>
 80105cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80105d0:	e7e2      	b.n	8010598 <__d2b+0x70>
 80105d2:	bf00      	nop
 80105d4:	08010fc4 	.word	0x08010fc4
 80105d8:	08010fd5 	.word	0x08010fd5

080105dc <__sflush_r>:
 80105dc:	898a      	ldrh	r2, [r1, #12]
 80105de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105e2:	4605      	mov	r5, r0
 80105e4:	0710      	lsls	r0, r2, #28
 80105e6:	460c      	mov	r4, r1
 80105e8:	d458      	bmi.n	801069c <__sflush_r+0xc0>
 80105ea:	684b      	ldr	r3, [r1, #4]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	dc05      	bgt.n	80105fc <__sflush_r+0x20>
 80105f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	dc02      	bgt.n	80105fc <__sflush_r+0x20>
 80105f6:	2000      	movs	r0, #0
 80105f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105fe:	2e00      	cmp	r6, #0
 8010600:	d0f9      	beq.n	80105f6 <__sflush_r+0x1a>
 8010602:	2300      	movs	r3, #0
 8010604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010608:	682f      	ldr	r7, [r5, #0]
 801060a:	6a21      	ldr	r1, [r4, #32]
 801060c:	602b      	str	r3, [r5, #0]
 801060e:	d032      	beq.n	8010676 <__sflush_r+0x9a>
 8010610:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010612:	89a3      	ldrh	r3, [r4, #12]
 8010614:	075a      	lsls	r2, r3, #29
 8010616:	d505      	bpl.n	8010624 <__sflush_r+0x48>
 8010618:	6863      	ldr	r3, [r4, #4]
 801061a:	1ac0      	subs	r0, r0, r3
 801061c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801061e:	b10b      	cbz	r3, 8010624 <__sflush_r+0x48>
 8010620:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010622:	1ac0      	subs	r0, r0, r3
 8010624:	2300      	movs	r3, #0
 8010626:	4602      	mov	r2, r0
 8010628:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801062a:	6a21      	ldr	r1, [r4, #32]
 801062c:	4628      	mov	r0, r5
 801062e:	47b0      	blx	r6
 8010630:	1c43      	adds	r3, r0, #1
 8010632:	89a3      	ldrh	r3, [r4, #12]
 8010634:	d106      	bne.n	8010644 <__sflush_r+0x68>
 8010636:	6829      	ldr	r1, [r5, #0]
 8010638:	291d      	cmp	r1, #29
 801063a:	d82b      	bhi.n	8010694 <__sflush_r+0xb8>
 801063c:	4a29      	ldr	r2, [pc, #164]	; (80106e4 <__sflush_r+0x108>)
 801063e:	410a      	asrs	r2, r1
 8010640:	07d6      	lsls	r6, r2, #31
 8010642:	d427      	bmi.n	8010694 <__sflush_r+0xb8>
 8010644:	2200      	movs	r2, #0
 8010646:	6062      	str	r2, [r4, #4]
 8010648:	04d9      	lsls	r1, r3, #19
 801064a:	6922      	ldr	r2, [r4, #16]
 801064c:	6022      	str	r2, [r4, #0]
 801064e:	d504      	bpl.n	801065a <__sflush_r+0x7e>
 8010650:	1c42      	adds	r2, r0, #1
 8010652:	d101      	bne.n	8010658 <__sflush_r+0x7c>
 8010654:	682b      	ldr	r3, [r5, #0]
 8010656:	b903      	cbnz	r3, 801065a <__sflush_r+0x7e>
 8010658:	6560      	str	r0, [r4, #84]	; 0x54
 801065a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801065c:	602f      	str	r7, [r5, #0]
 801065e:	2900      	cmp	r1, #0
 8010660:	d0c9      	beq.n	80105f6 <__sflush_r+0x1a>
 8010662:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010666:	4299      	cmp	r1, r3
 8010668:	d002      	beq.n	8010670 <__sflush_r+0x94>
 801066a:	4628      	mov	r0, r5
 801066c:	f7ff fb3a 	bl	800fce4 <_free_r>
 8010670:	2000      	movs	r0, #0
 8010672:	6360      	str	r0, [r4, #52]	; 0x34
 8010674:	e7c0      	b.n	80105f8 <__sflush_r+0x1c>
 8010676:	2301      	movs	r3, #1
 8010678:	4628      	mov	r0, r5
 801067a:	47b0      	blx	r6
 801067c:	1c41      	adds	r1, r0, #1
 801067e:	d1c8      	bne.n	8010612 <__sflush_r+0x36>
 8010680:	682b      	ldr	r3, [r5, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d0c5      	beq.n	8010612 <__sflush_r+0x36>
 8010686:	2b1d      	cmp	r3, #29
 8010688:	d001      	beq.n	801068e <__sflush_r+0xb2>
 801068a:	2b16      	cmp	r3, #22
 801068c:	d101      	bne.n	8010692 <__sflush_r+0xb6>
 801068e:	602f      	str	r7, [r5, #0]
 8010690:	e7b1      	b.n	80105f6 <__sflush_r+0x1a>
 8010692:	89a3      	ldrh	r3, [r4, #12]
 8010694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010698:	81a3      	strh	r3, [r4, #12]
 801069a:	e7ad      	b.n	80105f8 <__sflush_r+0x1c>
 801069c:	690f      	ldr	r7, [r1, #16]
 801069e:	2f00      	cmp	r7, #0
 80106a0:	d0a9      	beq.n	80105f6 <__sflush_r+0x1a>
 80106a2:	0793      	lsls	r3, r2, #30
 80106a4:	680e      	ldr	r6, [r1, #0]
 80106a6:	bf08      	it	eq
 80106a8:	694b      	ldreq	r3, [r1, #20]
 80106aa:	600f      	str	r7, [r1, #0]
 80106ac:	bf18      	it	ne
 80106ae:	2300      	movne	r3, #0
 80106b0:	eba6 0807 	sub.w	r8, r6, r7
 80106b4:	608b      	str	r3, [r1, #8]
 80106b6:	f1b8 0f00 	cmp.w	r8, #0
 80106ba:	dd9c      	ble.n	80105f6 <__sflush_r+0x1a>
 80106bc:	6a21      	ldr	r1, [r4, #32]
 80106be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80106c0:	4643      	mov	r3, r8
 80106c2:	463a      	mov	r2, r7
 80106c4:	4628      	mov	r0, r5
 80106c6:	47b0      	blx	r6
 80106c8:	2800      	cmp	r0, #0
 80106ca:	dc06      	bgt.n	80106da <__sflush_r+0xfe>
 80106cc:	89a3      	ldrh	r3, [r4, #12]
 80106ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106d2:	81a3      	strh	r3, [r4, #12]
 80106d4:	f04f 30ff 	mov.w	r0, #4294967295
 80106d8:	e78e      	b.n	80105f8 <__sflush_r+0x1c>
 80106da:	4407      	add	r7, r0
 80106dc:	eba8 0800 	sub.w	r8, r8, r0
 80106e0:	e7e9      	b.n	80106b6 <__sflush_r+0xda>
 80106e2:	bf00      	nop
 80106e4:	dfbffffe 	.word	0xdfbffffe

080106e8 <_fflush_r>:
 80106e8:	b538      	push	{r3, r4, r5, lr}
 80106ea:	690b      	ldr	r3, [r1, #16]
 80106ec:	4605      	mov	r5, r0
 80106ee:	460c      	mov	r4, r1
 80106f0:	b913      	cbnz	r3, 80106f8 <_fflush_r+0x10>
 80106f2:	2500      	movs	r5, #0
 80106f4:	4628      	mov	r0, r5
 80106f6:	bd38      	pop	{r3, r4, r5, pc}
 80106f8:	b118      	cbz	r0, 8010702 <_fflush_r+0x1a>
 80106fa:	6a03      	ldr	r3, [r0, #32]
 80106fc:	b90b      	cbnz	r3, 8010702 <_fflush_r+0x1a>
 80106fe:	f7fe fb17 	bl	800ed30 <__sinit>
 8010702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d0f3      	beq.n	80106f2 <_fflush_r+0xa>
 801070a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801070c:	07d0      	lsls	r0, r2, #31
 801070e:	d404      	bmi.n	801071a <_fflush_r+0x32>
 8010710:	0599      	lsls	r1, r3, #22
 8010712:	d402      	bmi.n	801071a <_fflush_r+0x32>
 8010714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010716:	f7fe fc58 	bl	800efca <__retarget_lock_acquire_recursive>
 801071a:	4628      	mov	r0, r5
 801071c:	4621      	mov	r1, r4
 801071e:	f7ff ff5d 	bl	80105dc <__sflush_r>
 8010722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010724:	07da      	lsls	r2, r3, #31
 8010726:	4605      	mov	r5, r0
 8010728:	d4e4      	bmi.n	80106f4 <_fflush_r+0xc>
 801072a:	89a3      	ldrh	r3, [r4, #12]
 801072c:	059b      	lsls	r3, r3, #22
 801072e:	d4e1      	bmi.n	80106f4 <_fflush_r+0xc>
 8010730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010732:	f7fe fc4b 	bl	800efcc <__retarget_lock_release_recursive>
 8010736:	e7dd      	b.n	80106f4 <_fflush_r+0xc>

08010738 <_sbrk_r>:
 8010738:	b538      	push	{r3, r4, r5, lr}
 801073a:	4d06      	ldr	r5, [pc, #24]	; (8010754 <_sbrk_r+0x1c>)
 801073c:	2300      	movs	r3, #0
 801073e:	4604      	mov	r4, r0
 8010740:	4608      	mov	r0, r1
 8010742:	602b      	str	r3, [r5, #0]
 8010744:	f7f2 fdfc 	bl	8003340 <_sbrk>
 8010748:	1c43      	adds	r3, r0, #1
 801074a:	d102      	bne.n	8010752 <_sbrk_r+0x1a>
 801074c:	682b      	ldr	r3, [r5, #0]
 801074e:	b103      	cbz	r3, 8010752 <_sbrk_r+0x1a>
 8010750:	6023      	str	r3, [r4, #0]
 8010752:	bd38      	pop	{r3, r4, r5, pc}
 8010754:	200059e0 	.word	0x200059e0

08010758 <__assert_func>:
 8010758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801075a:	4614      	mov	r4, r2
 801075c:	461a      	mov	r2, r3
 801075e:	4b09      	ldr	r3, [pc, #36]	; (8010784 <__assert_func+0x2c>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	4605      	mov	r5, r0
 8010764:	68d8      	ldr	r0, [r3, #12]
 8010766:	b14c      	cbz	r4, 801077c <__assert_func+0x24>
 8010768:	4b07      	ldr	r3, [pc, #28]	; (8010788 <__assert_func+0x30>)
 801076a:	9100      	str	r1, [sp, #0]
 801076c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010770:	4906      	ldr	r1, [pc, #24]	; (801078c <__assert_func+0x34>)
 8010772:	462b      	mov	r3, r5
 8010774:	f000 f844 	bl	8010800 <fiprintf>
 8010778:	f000 f854 	bl	8010824 <abort>
 801077c:	4b04      	ldr	r3, [pc, #16]	; (8010790 <__assert_func+0x38>)
 801077e:	461c      	mov	r4, r3
 8010780:	e7f3      	b.n	801076a <__assert_func+0x12>
 8010782:	bf00      	nop
 8010784:	2000006c 	.word	0x2000006c
 8010788:	08011136 	.word	0x08011136
 801078c:	08011143 	.word	0x08011143
 8010790:	08011171 	.word	0x08011171

08010794 <_calloc_r>:
 8010794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010796:	fba1 2402 	umull	r2, r4, r1, r2
 801079a:	b94c      	cbnz	r4, 80107b0 <_calloc_r+0x1c>
 801079c:	4611      	mov	r1, r2
 801079e:	9201      	str	r2, [sp, #4]
 80107a0:	f7ff fb14 	bl	800fdcc <_malloc_r>
 80107a4:	9a01      	ldr	r2, [sp, #4]
 80107a6:	4605      	mov	r5, r0
 80107a8:	b930      	cbnz	r0, 80107b8 <_calloc_r+0x24>
 80107aa:	4628      	mov	r0, r5
 80107ac:	b003      	add	sp, #12
 80107ae:	bd30      	pop	{r4, r5, pc}
 80107b0:	220c      	movs	r2, #12
 80107b2:	6002      	str	r2, [r0, #0]
 80107b4:	2500      	movs	r5, #0
 80107b6:	e7f8      	b.n	80107aa <_calloc_r+0x16>
 80107b8:	4621      	mov	r1, r4
 80107ba:	f7fe fb32 	bl	800ee22 <memset>
 80107be:	e7f4      	b.n	80107aa <_calloc_r+0x16>

080107c0 <__ascii_mbtowc>:
 80107c0:	b082      	sub	sp, #8
 80107c2:	b901      	cbnz	r1, 80107c6 <__ascii_mbtowc+0x6>
 80107c4:	a901      	add	r1, sp, #4
 80107c6:	b142      	cbz	r2, 80107da <__ascii_mbtowc+0x1a>
 80107c8:	b14b      	cbz	r3, 80107de <__ascii_mbtowc+0x1e>
 80107ca:	7813      	ldrb	r3, [r2, #0]
 80107cc:	600b      	str	r3, [r1, #0]
 80107ce:	7812      	ldrb	r2, [r2, #0]
 80107d0:	1e10      	subs	r0, r2, #0
 80107d2:	bf18      	it	ne
 80107d4:	2001      	movne	r0, #1
 80107d6:	b002      	add	sp, #8
 80107d8:	4770      	bx	lr
 80107da:	4610      	mov	r0, r2
 80107dc:	e7fb      	b.n	80107d6 <__ascii_mbtowc+0x16>
 80107de:	f06f 0001 	mvn.w	r0, #1
 80107e2:	e7f8      	b.n	80107d6 <__ascii_mbtowc+0x16>

080107e4 <__ascii_wctomb>:
 80107e4:	b149      	cbz	r1, 80107fa <__ascii_wctomb+0x16>
 80107e6:	2aff      	cmp	r2, #255	; 0xff
 80107e8:	bf85      	ittet	hi
 80107ea:	238a      	movhi	r3, #138	; 0x8a
 80107ec:	6003      	strhi	r3, [r0, #0]
 80107ee:	700a      	strbls	r2, [r1, #0]
 80107f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80107f4:	bf98      	it	ls
 80107f6:	2001      	movls	r0, #1
 80107f8:	4770      	bx	lr
 80107fa:	4608      	mov	r0, r1
 80107fc:	4770      	bx	lr
	...

08010800 <fiprintf>:
 8010800:	b40e      	push	{r1, r2, r3}
 8010802:	b503      	push	{r0, r1, lr}
 8010804:	4601      	mov	r1, r0
 8010806:	ab03      	add	r3, sp, #12
 8010808:	4805      	ldr	r0, [pc, #20]	; (8010820 <fiprintf+0x20>)
 801080a:	f853 2b04 	ldr.w	r2, [r3], #4
 801080e:	6800      	ldr	r0, [r0, #0]
 8010810:	9301      	str	r3, [sp, #4]
 8010812:	f000 f837 	bl	8010884 <_vfiprintf_r>
 8010816:	b002      	add	sp, #8
 8010818:	f85d eb04 	ldr.w	lr, [sp], #4
 801081c:	b003      	add	sp, #12
 801081e:	4770      	bx	lr
 8010820:	2000006c 	.word	0x2000006c

08010824 <abort>:
 8010824:	b508      	push	{r3, lr}
 8010826:	2006      	movs	r0, #6
 8010828:	f000 fa04 	bl	8010c34 <raise>
 801082c:	2001      	movs	r0, #1
 801082e:	f7f2 fd0f 	bl	8003250 <_exit>

08010832 <__sfputc_r>:
 8010832:	6893      	ldr	r3, [r2, #8]
 8010834:	3b01      	subs	r3, #1
 8010836:	2b00      	cmp	r3, #0
 8010838:	b410      	push	{r4}
 801083a:	6093      	str	r3, [r2, #8]
 801083c:	da08      	bge.n	8010850 <__sfputc_r+0x1e>
 801083e:	6994      	ldr	r4, [r2, #24]
 8010840:	42a3      	cmp	r3, r4
 8010842:	db01      	blt.n	8010848 <__sfputc_r+0x16>
 8010844:	290a      	cmp	r1, #10
 8010846:	d103      	bne.n	8010850 <__sfputc_r+0x1e>
 8010848:	f85d 4b04 	ldr.w	r4, [sp], #4
 801084c:	f000 b934 	b.w	8010ab8 <__swbuf_r>
 8010850:	6813      	ldr	r3, [r2, #0]
 8010852:	1c58      	adds	r0, r3, #1
 8010854:	6010      	str	r0, [r2, #0]
 8010856:	7019      	strb	r1, [r3, #0]
 8010858:	4608      	mov	r0, r1
 801085a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801085e:	4770      	bx	lr

08010860 <__sfputs_r>:
 8010860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010862:	4606      	mov	r6, r0
 8010864:	460f      	mov	r7, r1
 8010866:	4614      	mov	r4, r2
 8010868:	18d5      	adds	r5, r2, r3
 801086a:	42ac      	cmp	r4, r5
 801086c:	d101      	bne.n	8010872 <__sfputs_r+0x12>
 801086e:	2000      	movs	r0, #0
 8010870:	e007      	b.n	8010882 <__sfputs_r+0x22>
 8010872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010876:	463a      	mov	r2, r7
 8010878:	4630      	mov	r0, r6
 801087a:	f7ff ffda 	bl	8010832 <__sfputc_r>
 801087e:	1c43      	adds	r3, r0, #1
 8010880:	d1f3      	bne.n	801086a <__sfputs_r+0xa>
 8010882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010884 <_vfiprintf_r>:
 8010884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010888:	460d      	mov	r5, r1
 801088a:	b09d      	sub	sp, #116	; 0x74
 801088c:	4614      	mov	r4, r2
 801088e:	4698      	mov	r8, r3
 8010890:	4606      	mov	r6, r0
 8010892:	b118      	cbz	r0, 801089c <_vfiprintf_r+0x18>
 8010894:	6a03      	ldr	r3, [r0, #32]
 8010896:	b90b      	cbnz	r3, 801089c <_vfiprintf_r+0x18>
 8010898:	f7fe fa4a 	bl	800ed30 <__sinit>
 801089c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801089e:	07d9      	lsls	r1, r3, #31
 80108a0:	d405      	bmi.n	80108ae <_vfiprintf_r+0x2a>
 80108a2:	89ab      	ldrh	r3, [r5, #12]
 80108a4:	059a      	lsls	r2, r3, #22
 80108a6:	d402      	bmi.n	80108ae <_vfiprintf_r+0x2a>
 80108a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108aa:	f7fe fb8e 	bl	800efca <__retarget_lock_acquire_recursive>
 80108ae:	89ab      	ldrh	r3, [r5, #12]
 80108b0:	071b      	lsls	r3, r3, #28
 80108b2:	d501      	bpl.n	80108b8 <_vfiprintf_r+0x34>
 80108b4:	692b      	ldr	r3, [r5, #16]
 80108b6:	b99b      	cbnz	r3, 80108e0 <_vfiprintf_r+0x5c>
 80108b8:	4629      	mov	r1, r5
 80108ba:	4630      	mov	r0, r6
 80108bc:	f000 f93a 	bl	8010b34 <__swsetup_r>
 80108c0:	b170      	cbz	r0, 80108e0 <_vfiprintf_r+0x5c>
 80108c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108c4:	07dc      	lsls	r4, r3, #31
 80108c6:	d504      	bpl.n	80108d2 <_vfiprintf_r+0x4e>
 80108c8:	f04f 30ff 	mov.w	r0, #4294967295
 80108cc:	b01d      	add	sp, #116	; 0x74
 80108ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108d2:	89ab      	ldrh	r3, [r5, #12]
 80108d4:	0598      	lsls	r0, r3, #22
 80108d6:	d4f7      	bmi.n	80108c8 <_vfiprintf_r+0x44>
 80108d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108da:	f7fe fb77 	bl	800efcc <__retarget_lock_release_recursive>
 80108de:	e7f3      	b.n	80108c8 <_vfiprintf_r+0x44>
 80108e0:	2300      	movs	r3, #0
 80108e2:	9309      	str	r3, [sp, #36]	; 0x24
 80108e4:	2320      	movs	r3, #32
 80108e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80108ee:	2330      	movs	r3, #48	; 0x30
 80108f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010aa4 <_vfiprintf_r+0x220>
 80108f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108f8:	f04f 0901 	mov.w	r9, #1
 80108fc:	4623      	mov	r3, r4
 80108fe:	469a      	mov	sl, r3
 8010900:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010904:	b10a      	cbz	r2, 801090a <_vfiprintf_r+0x86>
 8010906:	2a25      	cmp	r2, #37	; 0x25
 8010908:	d1f9      	bne.n	80108fe <_vfiprintf_r+0x7a>
 801090a:	ebba 0b04 	subs.w	fp, sl, r4
 801090e:	d00b      	beq.n	8010928 <_vfiprintf_r+0xa4>
 8010910:	465b      	mov	r3, fp
 8010912:	4622      	mov	r2, r4
 8010914:	4629      	mov	r1, r5
 8010916:	4630      	mov	r0, r6
 8010918:	f7ff ffa2 	bl	8010860 <__sfputs_r>
 801091c:	3001      	adds	r0, #1
 801091e:	f000 80a9 	beq.w	8010a74 <_vfiprintf_r+0x1f0>
 8010922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010924:	445a      	add	r2, fp
 8010926:	9209      	str	r2, [sp, #36]	; 0x24
 8010928:	f89a 3000 	ldrb.w	r3, [sl]
 801092c:	2b00      	cmp	r3, #0
 801092e:	f000 80a1 	beq.w	8010a74 <_vfiprintf_r+0x1f0>
 8010932:	2300      	movs	r3, #0
 8010934:	f04f 32ff 	mov.w	r2, #4294967295
 8010938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801093c:	f10a 0a01 	add.w	sl, sl, #1
 8010940:	9304      	str	r3, [sp, #16]
 8010942:	9307      	str	r3, [sp, #28]
 8010944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010948:	931a      	str	r3, [sp, #104]	; 0x68
 801094a:	4654      	mov	r4, sl
 801094c:	2205      	movs	r2, #5
 801094e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010952:	4854      	ldr	r0, [pc, #336]	; (8010aa4 <_vfiprintf_r+0x220>)
 8010954:	f7ef fc44 	bl	80001e0 <memchr>
 8010958:	9a04      	ldr	r2, [sp, #16]
 801095a:	b9d8      	cbnz	r0, 8010994 <_vfiprintf_r+0x110>
 801095c:	06d1      	lsls	r1, r2, #27
 801095e:	bf44      	itt	mi
 8010960:	2320      	movmi	r3, #32
 8010962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010966:	0713      	lsls	r3, r2, #28
 8010968:	bf44      	itt	mi
 801096a:	232b      	movmi	r3, #43	; 0x2b
 801096c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010970:	f89a 3000 	ldrb.w	r3, [sl]
 8010974:	2b2a      	cmp	r3, #42	; 0x2a
 8010976:	d015      	beq.n	80109a4 <_vfiprintf_r+0x120>
 8010978:	9a07      	ldr	r2, [sp, #28]
 801097a:	4654      	mov	r4, sl
 801097c:	2000      	movs	r0, #0
 801097e:	f04f 0c0a 	mov.w	ip, #10
 8010982:	4621      	mov	r1, r4
 8010984:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010988:	3b30      	subs	r3, #48	; 0x30
 801098a:	2b09      	cmp	r3, #9
 801098c:	d94d      	bls.n	8010a2a <_vfiprintf_r+0x1a6>
 801098e:	b1b0      	cbz	r0, 80109be <_vfiprintf_r+0x13a>
 8010990:	9207      	str	r2, [sp, #28]
 8010992:	e014      	b.n	80109be <_vfiprintf_r+0x13a>
 8010994:	eba0 0308 	sub.w	r3, r0, r8
 8010998:	fa09 f303 	lsl.w	r3, r9, r3
 801099c:	4313      	orrs	r3, r2
 801099e:	9304      	str	r3, [sp, #16]
 80109a0:	46a2      	mov	sl, r4
 80109a2:	e7d2      	b.n	801094a <_vfiprintf_r+0xc6>
 80109a4:	9b03      	ldr	r3, [sp, #12]
 80109a6:	1d19      	adds	r1, r3, #4
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	9103      	str	r1, [sp, #12]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	bfbb      	ittet	lt
 80109b0:	425b      	neglt	r3, r3
 80109b2:	f042 0202 	orrlt.w	r2, r2, #2
 80109b6:	9307      	strge	r3, [sp, #28]
 80109b8:	9307      	strlt	r3, [sp, #28]
 80109ba:	bfb8      	it	lt
 80109bc:	9204      	strlt	r2, [sp, #16]
 80109be:	7823      	ldrb	r3, [r4, #0]
 80109c0:	2b2e      	cmp	r3, #46	; 0x2e
 80109c2:	d10c      	bne.n	80109de <_vfiprintf_r+0x15a>
 80109c4:	7863      	ldrb	r3, [r4, #1]
 80109c6:	2b2a      	cmp	r3, #42	; 0x2a
 80109c8:	d134      	bne.n	8010a34 <_vfiprintf_r+0x1b0>
 80109ca:	9b03      	ldr	r3, [sp, #12]
 80109cc:	1d1a      	adds	r2, r3, #4
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	9203      	str	r2, [sp, #12]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	bfb8      	it	lt
 80109d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80109da:	3402      	adds	r4, #2
 80109dc:	9305      	str	r3, [sp, #20]
 80109de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010ab4 <_vfiprintf_r+0x230>
 80109e2:	7821      	ldrb	r1, [r4, #0]
 80109e4:	2203      	movs	r2, #3
 80109e6:	4650      	mov	r0, sl
 80109e8:	f7ef fbfa 	bl	80001e0 <memchr>
 80109ec:	b138      	cbz	r0, 80109fe <_vfiprintf_r+0x17a>
 80109ee:	9b04      	ldr	r3, [sp, #16]
 80109f0:	eba0 000a 	sub.w	r0, r0, sl
 80109f4:	2240      	movs	r2, #64	; 0x40
 80109f6:	4082      	lsls	r2, r0
 80109f8:	4313      	orrs	r3, r2
 80109fa:	3401      	adds	r4, #1
 80109fc:	9304      	str	r3, [sp, #16]
 80109fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a02:	4829      	ldr	r0, [pc, #164]	; (8010aa8 <_vfiprintf_r+0x224>)
 8010a04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a08:	2206      	movs	r2, #6
 8010a0a:	f7ef fbe9 	bl	80001e0 <memchr>
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	d03f      	beq.n	8010a92 <_vfiprintf_r+0x20e>
 8010a12:	4b26      	ldr	r3, [pc, #152]	; (8010aac <_vfiprintf_r+0x228>)
 8010a14:	bb1b      	cbnz	r3, 8010a5e <_vfiprintf_r+0x1da>
 8010a16:	9b03      	ldr	r3, [sp, #12]
 8010a18:	3307      	adds	r3, #7
 8010a1a:	f023 0307 	bic.w	r3, r3, #7
 8010a1e:	3308      	adds	r3, #8
 8010a20:	9303      	str	r3, [sp, #12]
 8010a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a24:	443b      	add	r3, r7
 8010a26:	9309      	str	r3, [sp, #36]	; 0x24
 8010a28:	e768      	b.n	80108fc <_vfiprintf_r+0x78>
 8010a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a2e:	460c      	mov	r4, r1
 8010a30:	2001      	movs	r0, #1
 8010a32:	e7a6      	b.n	8010982 <_vfiprintf_r+0xfe>
 8010a34:	2300      	movs	r3, #0
 8010a36:	3401      	adds	r4, #1
 8010a38:	9305      	str	r3, [sp, #20]
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	f04f 0c0a 	mov.w	ip, #10
 8010a40:	4620      	mov	r0, r4
 8010a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a46:	3a30      	subs	r2, #48	; 0x30
 8010a48:	2a09      	cmp	r2, #9
 8010a4a:	d903      	bls.n	8010a54 <_vfiprintf_r+0x1d0>
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d0c6      	beq.n	80109de <_vfiprintf_r+0x15a>
 8010a50:	9105      	str	r1, [sp, #20]
 8010a52:	e7c4      	b.n	80109de <_vfiprintf_r+0x15a>
 8010a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a58:	4604      	mov	r4, r0
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e7f0      	b.n	8010a40 <_vfiprintf_r+0x1bc>
 8010a5e:	ab03      	add	r3, sp, #12
 8010a60:	9300      	str	r3, [sp, #0]
 8010a62:	462a      	mov	r2, r5
 8010a64:	4b12      	ldr	r3, [pc, #72]	; (8010ab0 <_vfiprintf_r+0x22c>)
 8010a66:	a904      	add	r1, sp, #16
 8010a68:	4630      	mov	r0, r6
 8010a6a:	f7fd fd0f 	bl	800e48c <_printf_float>
 8010a6e:	4607      	mov	r7, r0
 8010a70:	1c78      	adds	r0, r7, #1
 8010a72:	d1d6      	bne.n	8010a22 <_vfiprintf_r+0x19e>
 8010a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a76:	07d9      	lsls	r1, r3, #31
 8010a78:	d405      	bmi.n	8010a86 <_vfiprintf_r+0x202>
 8010a7a:	89ab      	ldrh	r3, [r5, #12]
 8010a7c:	059a      	lsls	r2, r3, #22
 8010a7e:	d402      	bmi.n	8010a86 <_vfiprintf_r+0x202>
 8010a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a82:	f7fe faa3 	bl	800efcc <__retarget_lock_release_recursive>
 8010a86:	89ab      	ldrh	r3, [r5, #12]
 8010a88:	065b      	lsls	r3, r3, #25
 8010a8a:	f53f af1d 	bmi.w	80108c8 <_vfiprintf_r+0x44>
 8010a8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a90:	e71c      	b.n	80108cc <_vfiprintf_r+0x48>
 8010a92:	ab03      	add	r3, sp, #12
 8010a94:	9300      	str	r3, [sp, #0]
 8010a96:	462a      	mov	r2, r5
 8010a98:	4b05      	ldr	r3, [pc, #20]	; (8010ab0 <_vfiprintf_r+0x22c>)
 8010a9a:	a904      	add	r1, sp, #16
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	f7fd ff99 	bl	800e9d4 <_printf_i>
 8010aa2:	e7e4      	b.n	8010a6e <_vfiprintf_r+0x1ea>
 8010aa4:	08011273 	.word	0x08011273
 8010aa8:	0801127d 	.word	0x0801127d
 8010aac:	0800e48d 	.word	0x0800e48d
 8010ab0:	08010861 	.word	0x08010861
 8010ab4:	08011279 	.word	0x08011279

08010ab8 <__swbuf_r>:
 8010ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aba:	460e      	mov	r6, r1
 8010abc:	4614      	mov	r4, r2
 8010abe:	4605      	mov	r5, r0
 8010ac0:	b118      	cbz	r0, 8010aca <__swbuf_r+0x12>
 8010ac2:	6a03      	ldr	r3, [r0, #32]
 8010ac4:	b90b      	cbnz	r3, 8010aca <__swbuf_r+0x12>
 8010ac6:	f7fe f933 	bl	800ed30 <__sinit>
 8010aca:	69a3      	ldr	r3, [r4, #24]
 8010acc:	60a3      	str	r3, [r4, #8]
 8010ace:	89a3      	ldrh	r3, [r4, #12]
 8010ad0:	071a      	lsls	r2, r3, #28
 8010ad2:	d525      	bpl.n	8010b20 <__swbuf_r+0x68>
 8010ad4:	6923      	ldr	r3, [r4, #16]
 8010ad6:	b31b      	cbz	r3, 8010b20 <__swbuf_r+0x68>
 8010ad8:	6823      	ldr	r3, [r4, #0]
 8010ada:	6922      	ldr	r2, [r4, #16]
 8010adc:	1a98      	subs	r0, r3, r2
 8010ade:	6963      	ldr	r3, [r4, #20]
 8010ae0:	b2f6      	uxtb	r6, r6
 8010ae2:	4283      	cmp	r3, r0
 8010ae4:	4637      	mov	r7, r6
 8010ae6:	dc04      	bgt.n	8010af2 <__swbuf_r+0x3a>
 8010ae8:	4621      	mov	r1, r4
 8010aea:	4628      	mov	r0, r5
 8010aec:	f7ff fdfc 	bl	80106e8 <_fflush_r>
 8010af0:	b9e0      	cbnz	r0, 8010b2c <__swbuf_r+0x74>
 8010af2:	68a3      	ldr	r3, [r4, #8]
 8010af4:	3b01      	subs	r3, #1
 8010af6:	60a3      	str	r3, [r4, #8]
 8010af8:	6823      	ldr	r3, [r4, #0]
 8010afa:	1c5a      	adds	r2, r3, #1
 8010afc:	6022      	str	r2, [r4, #0]
 8010afe:	701e      	strb	r6, [r3, #0]
 8010b00:	6962      	ldr	r2, [r4, #20]
 8010b02:	1c43      	adds	r3, r0, #1
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d004      	beq.n	8010b12 <__swbuf_r+0x5a>
 8010b08:	89a3      	ldrh	r3, [r4, #12]
 8010b0a:	07db      	lsls	r3, r3, #31
 8010b0c:	d506      	bpl.n	8010b1c <__swbuf_r+0x64>
 8010b0e:	2e0a      	cmp	r6, #10
 8010b10:	d104      	bne.n	8010b1c <__swbuf_r+0x64>
 8010b12:	4621      	mov	r1, r4
 8010b14:	4628      	mov	r0, r5
 8010b16:	f7ff fde7 	bl	80106e8 <_fflush_r>
 8010b1a:	b938      	cbnz	r0, 8010b2c <__swbuf_r+0x74>
 8010b1c:	4638      	mov	r0, r7
 8010b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b20:	4621      	mov	r1, r4
 8010b22:	4628      	mov	r0, r5
 8010b24:	f000 f806 	bl	8010b34 <__swsetup_r>
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	d0d5      	beq.n	8010ad8 <__swbuf_r+0x20>
 8010b2c:	f04f 37ff 	mov.w	r7, #4294967295
 8010b30:	e7f4      	b.n	8010b1c <__swbuf_r+0x64>
	...

08010b34 <__swsetup_r>:
 8010b34:	b538      	push	{r3, r4, r5, lr}
 8010b36:	4b2a      	ldr	r3, [pc, #168]	; (8010be0 <__swsetup_r+0xac>)
 8010b38:	4605      	mov	r5, r0
 8010b3a:	6818      	ldr	r0, [r3, #0]
 8010b3c:	460c      	mov	r4, r1
 8010b3e:	b118      	cbz	r0, 8010b48 <__swsetup_r+0x14>
 8010b40:	6a03      	ldr	r3, [r0, #32]
 8010b42:	b90b      	cbnz	r3, 8010b48 <__swsetup_r+0x14>
 8010b44:	f7fe f8f4 	bl	800ed30 <__sinit>
 8010b48:	89a3      	ldrh	r3, [r4, #12]
 8010b4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b4e:	0718      	lsls	r0, r3, #28
 8010b50:	d422      	bmi.n	8010b98 <__swsetup_r+0x64>
 8010b52:	06d9      	lsls	r1, r3, #27
 8010b54:	d407      	bmi.n	8010b66 <__swsetup_r+0x32>
 8010b56:	2309      	movs	r3, #9
 8010b58:	602b      	str	r3, [r5, #0]
 8010b5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b5e:	81a3      	strh	r3, [r4, #12]
 8010b60:	f04f 30ff 	mov.w	r0, #4294967295
 8010b64:	e034      	b.n	8010bd0 <__swsetup_r+0x9c>
 8010b66:	0758      	lsls	r0, r3, #29
 8010b68:	d512      	bpl.n	8010b90 <__swsetup_r+0x5c>
 8010b6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b6c:	b141      	cbz	r1, 8010b80 <__swsetup_r+0x4c>
 8010b6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b72:	4299      	cmp	r1, r3
 8010b74:	d002      	beq.n	8010b7c <__swsetup_r+0x48>
 8010b76:	4628      	mov	r0, r5
 8010b78:	f7ff f8b4 	bl	800fce4 <_free_r>
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	6363      	str	r3, [r4, #52]	; 0x34
 8010b80:	89a3      	ldrh	r3, [r4, #12]
 8010b82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b86:	81a3      	strh	r3, [r4, #12]
 8010b88:	2300      	movs	r3, #0
 8010b8a:	6063      	str	r3, [r4, #4]
 8010b8c:	6923      	ldr	r3, [r4, #16]
 8010b8e:	6023      	str	r3, [r4, #0]
 8010b90:	89a3      	ldrh	r3, [r4, #12]
 8010b92:	f043 0308 	orr.w	r3, r3, #8
 8010b96:	81a3      	strh	r3, [r4, #12]
 8010b98:	6923      	ldr	r3, [r4, #16]
 8010b9a:	b94b      	cbnz	r3, 8010bb0 <__swsetup_r+0x7c>
 8010b9c:	89a3      	ldrh	r3, [r4, #12]
 8010b9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ba6:	d003      	beq.n	8010bb0 <__swsetup_r+0x7c>
 8010ba8:	4621      	mov	r1, r4
 8010baa:	4628      	mov	r0, r5
 8010bac:	f000 f884 	bl	8010cb8 <__smakebuf_r>
 8010bb0:	89a0      	ldrh	r0, [r4, #12]
 8010bb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bb6:	f010 0301 	ands.w	r3, r0, #1
 8010bba:	d00a      	beq.n	8010bd2 <__swsetup_r+0x9e>
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	60a3      	str	r3, [r4, #8]
 8010bc0:	6963      	ldr	r3, [r4, #20]
 8010bc2:	425b      	negs	r3, r3
 8010bc4:	61a3      	str	r3, [r4, #24]
 8010bc6:	6923      	ldr	r3, [r4, #16]
 8010bc8:	b943      	cbnz	r3, 8010bdc <__swsetup_r+0xa8>
 8010bca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010bce:	d1c4      	bne.n	8010b5a <__swsetup_r+0x26>
 8010bd0:	bd38      	pop	{r3, r4, r5, pc}
 8010bd2:	0781      	lsls	r1, r0, #30
 8010bd4:	bf58      	it	pl
 8010bd6:	6963      	ldrpl	r3, [r4, #20]
 8010bd8:	60a3      	str	r3, [r4, #8]
 8010bda:	e7f4      	b.n	8010bc6 <__swsetup_r+0x92>
 8010bdc:	2000      	movs	r0, #0
 8010bde:	e7f7      	b.n	8010bd0 <__swsetup_r+0x9c>
 8010be0:	2000006c 	.word	0x2000006c

08010be4 <_raise_r>:
 8010be4:	291f      	cmp	r1, #31
 8010be6:	b538      	push	{r3, r4, r5, lr}
 8010be8:	4604      	mov	r4, r0
 8010bea:	460d      	mov	r5, r1
 8010bec:	d904      	bls.n	8010bf8 <_raise_r+0x14>
 8010bee:	2316      	movs	r3, #22
 8010bf0:	6003      	str	r3, [r0, #0]
 8010bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8010bf6:	bd38      	pop	{r3, r4, r5, pc}
 8010bf8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010bfa:	b112      	cbz	r2, 8010c02 <_raise_r+0x1e>
 8010bfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c00:	b94b      	cbnz	r3, 8010c16 <_raise_r+0x32>
 8010c02:	4620      	mov	r0, r4
 8010c04:	f000 f830 	bl	8010c68 <_getpid_r>
 8010c08:	462a      	mov	r2, r5
 8010c0a:	4601      	mov	r1, r0
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c12:	f000 b817 	b.w	8010c44 <_kill_r>
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	d00a      	beq.n	8010c30 <_raise_r+0x4c>
 8010c1a:	1c59      	adds	r1, r3, #1
 8010c1c:	d103      	bne.n	8010c26 <_raise_r+0x42>
 8010c1e:	2316      	movs	r3, #22
 8010c20:	6003      	str	r3, [r0, #0]
 8010c22:	2001      	movs	r0, #1
 8010c24:	e7e7      	b.n	8010bf6 <_raise_r+0x12>
 8010c26:	2400      	movs	r4, #0
 8010c28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c2c:	4628      	mov	r0, r5
 8010c2e:	4798      	blx	r3
 8010c30:	2000      	movs	r0, #0
 8010c32:	e7e0      	b.n	8010bf6 <_raise_r+0x12>

08010c34 <raise>:
 8010c34:	4b02      	ldr	r3, [pc, #8]	; (8010c40 <raise+0xc>)
 8010c36:	4601      	mov	r1, r0
 8010c38:	6818      	ldr	r0, [r3, #0]
 8010c3a:	f7ff bfd3 	b.w	8010be4 <_raise_r>
 8010c3e:	bf00      	nop
 8010c40:	2000006c 	.word	0x2000006c

08010c44 <_kill_r>:
 8010c44:	b538      	push	{r3, r4, r5, lr}
 8010c46:	4d07      	ldr	r5, [pc, #28]	; (8010c64 <_kill_r+0x20>)
 8010c48:	2300      	movs	r3, #0
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	4608      	mov	r0, r1
 8010c4e:	4611      	mov	r1, r2
 8010c50:	602b      	str	r3, [r5, #0]
 8010c52:	f7f2 faed 	bl	8003230 <_kill>
 8010c56:	1c43      	adds	r3, r0, #1
 8010c58:	d102      	bne.n	8010c60 <_kill_r+0x1c>
 8010c5a:	682b      	ldr	r3, [r5, #0]
 8010c5c:	b103      	cbz	r3, 8010c60 <_kill_r+0x1c>
 8010c5e:	6023      	str	r3, [r4, #0]
 8010c60:	bd38      	pop	{r3, r4, r5, pc}
 8010c62:	bf00      	nop
 8010c64:	200059e0 	.word	0x200059e0

08010c68 <_getpid_r>:
 8010c68:	f7f2 bada 	b.w	8003220 <_getpid>

08010c6c <__swhatbuf_r>:
 8010c6c:	b570      	push	{r4, r5, r6, lr}
 8010c6e:	460c      	mov	r4, r1
 8010c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c74:	2900      	cmp	r1, #0
 8010c76:	b096      	sub	sp, #88	; 0x58
 8010c78:	4615      	mov	r5, r2
 8010c7a:	461e      	mov	r6, r3
 8010c7c:	da0d      	bge.n	8010c9a <__swhatbuf_r+0x2e>
 8010c7e:	89a3      	ldrh	r3, [r4, #12]
 8010c80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010c84:	f04f 0100 	mov.w	r1, #0
 8010c88:	bf0c      	ite	eq
 8010c8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010c8e:	2340      	movne	r3, #64	; 0x40
 8010c90:	2000      	movs	r0, #0
 8010c92:	6031      	str	r1, [r6, #0]
 8010c94:	602b      	str	r3, [r5, #0]
 8010c96:	b016      	add	sp, #88	; 0x58
 8010c98:	bd70      	pop	{r4, r5, r6, pc}
 8010c9a:	466a      	mov	r2, sp
 8010c9c:	f000 f848 	bl	8010d30 <_fstat_r>
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	dbec      	blt.n	8010c7e <__swhatbuf_r+0x12>
 8010ca4:	9901      	ldr	r1, [sp, #4]
 8010ca6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010caa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010cae:	4259      	negs	r1, r3
 8010cb0:	4159      	adcs	r1, r3
 8010cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cb6:	e7eb      	b.n	8010c90 <__swhatbuf_r+0x24>

08010cb8 <__smakebuf_r>:
 8010cb8:	898b      	ldrh	r3, [r1, #12]
 8010cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010cbc:	079d      	lsls	r5, r3, #30
 8010cbe:	4606      	mov	r6, r0
 8010cc0:	460c      	mov	r4, r1
 8010cc2:	d507      	bpl.n	8010cd4 <__smakebuf_r+0x1c>
 8010cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010cc8:	6023      	str	r3, [r4, #0]
 8010cca:	6123      	str	r3, [r4, #16]
 8010ccc:	2301      	movs	r3, #1
 8010cce:	6163      	str	r3, [r4, #20]
 8010cd0:	b002      	add	sp, #8
 8010cd2:	bd70      	pop	{r4, r5, r6, pc}
 8010cd4:	ab01      	add	r3, sp, #4
 8010cd6:	466a      	mov	r2, sp
 8010cd8:	f7ff ffc8 	bl	8010c6c <__swhatbuf_r>
 8010cdc:	9900      	ldr	r1, [sp, #0]
 8010cde:	4605      	mov	r5, r0
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	f7ff f873 	bl	800fdcc <_malloc_r>
 8010ce6:	b948      	cbnz	r0, 8010cfc <__smakebuf_r+0x44>
 8010ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cec:	059a      	lsls	r2, r3, #22
 8010cee:	d4ef      	bmi.n	8010cd0 <__smakebuf_r+0x18>
 8010cf0:	f023 0303 	bic.w	r3, r3, #3
 8010cf4:	f043 0302 	orr.w	r3, r3, #2
 8010cf8:	81a3      	strh	r3, [r4, #12]
 8010cfa:	e7e3      	b.n	8010cc4 <__smakebuf_r+0xc>
 8010cfc:	89a3      	ldrh	r3, [r4, #12]
 8010cfe:	6020      	str	r0, [r4, #0]
 8010d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d04:	81a3      	strh	r3, [r4, #12]
 8010d06:	9b00      	ldr	r3, [sp, #0]
 8010d08:	6163      	str	r3, [r4, #20]
 8010d0a:	9b01      	ldr	r3, [sp, #4]
 8010d0c:	6120      	str	r0, [r4, #16]
 8010d0e:	b15b      	cbz	r3, 8010d28 <__smakebuf_r+0x70>
 8010d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d14:	4630      	mov	r0, r6
 8010d16:	f000 f81d 	bl	8010d54 <_isatty_r>
 8010d1a:	b128      	cbz	r0, 8010d28 <__smakebuf_r+0x70>
 8010d1c:	89a3      	ldrh	r3, [r4, #12]
 8010d1e:	f023 0303 	bic.w	r3, r3, #3
 8010d22:	f043 0301 	orr.w	r3, r3, #1
 8010d26:	81a3      	strh	r3, [r4, #12]
 8010d28:	89a3      	ldrh	r3, [r4, #12]
 8010d2a:	431d      	orrs	r5, r3
 8010d2c:	81a5      	strh	r5, [r4, #12]
 8010d2e:	e7cf      	b.n	8010cd0 <__smakebuf_r+0x18>

08010d30 <_fstat_r>:
 8010d30:	b538      	push	{r3, r4, r5, lr}
 8010d32:	4d07      	ldr	r5, [pc, #28]	; (8010d50 <_fstat_r+0x20>)
 8010d34:	2300      	movs	r3, #0
 8010d36:	4604      	mov	r4, r0
 8010d38:	4608      	mov	r0, r1
 8010d3a:	4611      	mov	r1, r2
 8010d3c:	602b      	str	r3, [r5, #0]
 8010d3e:	f7f2 fad6 	bl	80032ee <_fstat>
 8010d42:	1c43      	adds	r3, r0, #1
 8010d44:	d102      	bne.n	8010d4c <_fstat_r+0x1c>
 8010d46:	682b      	ldr	r3, [r5, #0]
 8010d48:	b103      	cbz	r3, 8010d4c <_fstat_r+0x1c>
 8010d4a:	6023      	str	r3, [r4, #0]
 8010d4c:	bd38      	pop	{r3, r4, r5, pc}
 8010d4e:	bf00      	nop
 8010d50:	200059e0 	.word	0x200059e0

08010d54 <_isatty_r>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	4d06      	ldr	r5, [pc, #24]	; (8010d70 <_isatty_r+0x1c>)
 8010d58:	2300      	movs	r3, #0
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	4608      	mov	r0, r1
 8010d5e:	602b      	str	r3, [r5, #0]
 8010d60:	f7f2 fad5 	bl	800330e <_isatty>
 8010d64:	1c43      	adds	r3, r0, #1
 8010d66:	d102      	bne.n	8010d6e <_isatty_r+0x1a>
 8010d68:	682b      	ldr	r3, [r5, #0]
 8010d6a:	b103      	cbz	r3, 8010d6e <_isatty_r+0x1a>
 8010d6c:	6023      	str	r3, [r4, #0]
 8010d6e:	bd38      	pop	{r3, r4, r5, pc}
 8010d70:	200059e0 	.word	0x200059e0

08010d74 <_init>:
 8010d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d76:	bf00      	nop
 8010d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d7a:	bc08      	pop	{r3}
 8010d7c:	469e      	mov	lr, r3
 8010d7e:	4770      	bx	lr

08010d80 <_fini>:
 8010d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d82:	bf00      	nop
 8010d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d86:	bc08      	pop	{r3}
 8010d88:	469e      	mov	lr, r3
 8010d8a:	4770      	bx	lr
